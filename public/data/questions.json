[
  {
    "id": "1",
    "category": "all",
    "difficulty": "easy",
    "question": "What is Next.js?",
    "answer": "Next.js is a popular React framework designed for building scalable, production-ready web applications. It provides features like server-side rendering, static site generation, and API routes."
  },
  {
    "id": "2",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the key features of Next.js?",
    "answer": "Key features of Next.js include: Server-Side Rendering (SSR), Static Site Generation (SSG), Incremental Static Regeneration (ISR), API Routes, File-based routing, Image Optimization, Automatic code splitting"
  },
  {
    "id": "3",
    "category": "react",
    "difficulty": "easy",
    "question": "How is Next.js different from React.js?",
    "answer": "While React.js is a library for building UIs, Next.js is a framework built on top of React, providing additional features such as SSR, SSG, and routing out of the box."
  },
  {
    "id": "4",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Hooks and why are they important?",
    "answer": "React Hooks are functions that let you use state and other React features without writing a class. They provide a more direct API to React concepts like props, state, context, refs, and lifecycle."
  },
  {
    "id": "5",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between 'let', 'const', and 'var' in JavaScript?",
    "answer": "'var' is function-scoped and hoisted. 'let' and 'const' are block-scoped. 'let' allows reassignment while 'const' doesn't. 'const' variables must be initialized during declaration."
  },
  {
    "id": "6",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the main benefits of using TypeScript over JavaScript?",
    "answer": "TypeScript provides static typing, better tooling support, early error detection, improved code maintainability, better documentation through types, and advanced features like interfaces and generics."
  },
  {
    "id": "7",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "What is Tailwind CSS and how does it differ from traditional CSS frameworks?",
    "answer": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in markup, rather than offering pre-designed components like Bootstrap."
  },
  {
    "id": "8",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the CSS Box Model.",
    "answer": "The CSS Box Model describes how elements are laid out, consisting of: content, padding, border, and margin. It determines how space is distributed around an element and how elements interact with each other."
  },
  {
    "id": "9",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the DOCTYPE declaration in HTML?",
    "answer": "The DOCTYPE declaration tells the web browser which version of HTML the page is written in, ensuring the page is rendered in standards mode rather than quirks mode."
  },
  {
    "id": "10",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the main features of Sass that make it useful for CSS development?",
    "answer": "Sass provides variables, nesting, mixins, functions, inheritance, operators, and other features that make CSS more maintainable and easier to write."
  },
  {
    "id": "11",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you write a regular expression to validate an email address?",
    "answer": "A basic email regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/. Note that complete email validation is complex and often better handled with libraries or simple confirmation emails."
  },
  {
    "id": "12",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "What is Prisma ORM and how does it differ from traditional ORMs?",
    "answer": "Prisma is a next-generation ORM that provides a type-safe database client, auto-generated queries, and a schema definition language. It differs from traditional ORMs by not using active record or data mapper patterns."
  },
  {
    "id": "13",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "What are the key features of Drizzle ORM?",
    "answer": "Drizzle ORM is a lightweight ORM with type safety, SQL-like syntax, schema migrations, and support for multiple databases. It's designed to be simple and close to SQL while providing TypeScript benefits."
  },
  {
    "id": "14",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is the difference between authentication and authorization?",
    "answer": "Authentication verifies who a user is (login), while authorization determines what resources a user can access and what actions they can perform."
  },
  {
    "id": "15",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the event loop in Node.js.",
    "answer": "The event loop is what allows Node.js to perform non-blocking I/O operations despite being single-threaded. It handles asynchronous callbacks by offloading operations when possible and processing events in phases."
  },
  {
    "id": "16",
    "category": "express",
    "difficulty": "easy",
    "question": "What is Express.js and what is it commonly used for?",
    "answer": "Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications, particularly for creating APIs."
  },
  {
    "id": "17",
    "category": "other",
    "difficulty": "easy",
    "question": "What is Git and why is it important for developers?",
    "answer": "Git is a distributed version control system that tracks changes in source code during development. It enables collaboration, maintains history, and helps manage different versions of a project."
  },
  {
    "id": "18",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain React Fiber architecture.",
    "answer": "React Fiber is a complete rewrite of React's core algorithm. It enables features like incremental rendering, better handling of animations, and the ability to split rendering work into chunks and spread it over multiple frames."
  },
  {
    "id": "19",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle static site generation (SSG) and server-side rendering (SSR) differently?",
    "answer": "SSG generates HTML at build time which is reused on each request, ideal for content that doesn't change often. SSR generates HTML on each request, better for frequently updated or personalized content."
  },
  {
    "id": "20",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event delegation pattern in JavaScript?",
    "answer": "Event delegation is a technique where you attach a single event listener to a parent element instead of multiple listeners to child elements. Events bubble up and can be handled based on the target element."
  },
  {
    "id": "21",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are discriminated unions in TypeScript and how are they useful?",
    "answer": "Discriminated unions are a pattern where a common property (the discriminant) is used to distinguish between different object shapes. This allows TypeScript to narrow types accurately in conditional blocks."
  },
  {
    "id": "22",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How would you implement a responsive grid layout in Tailwind CSS?",
    "answer": "Use the 'grid' class with responsive prefixes like 'md:grid-cols-3' for different breakpoints. Tailwind provides utilities for grid columns, rows, gaps, and alignment that can be combined responsively."
  },
  {
    "id": "23",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how CSS specificity works.",
    "answer": "CSS specificity determines which styles are applied when multiple rules target the same element. It's calculated based on selector types: inline styles (1000), IDs (100), classes/attributes (10), elements/pseudo-elements (1)."
  },
  {
    "id": "24",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic HTML elements and why are they important?",
    "answer": "Semantic elements (like <header>, <article>, <nav>) clearly describe their meaning to both browser and developer. They improve accessibility, SEO, and make code more readable and maintainable."
  },
  {
    "id": "25",
    "category": "sass",
    "difficulty": "easy",
    "question": "How do you create and use variables in Sass?",
    "answer": "Variables in Sass are declared with $ followed by the name: $primary-color: #333;. They're used by referencing the variable name: color: $primary-color;."
  },
  {
    "id": "26",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all numbers in a string?",
    "answer": "In JavaScript: const numbers = str.match(/\\d+/g); This will return an array of all sequences of digits in the string."
  },
  {
    "id": "27",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database migrations?",
    "answer": "Prisma Migrate is a tool that generates and executes SQL migration files based on changes to your Prisma schema. It keeps track of applied migrations and can generate rollback migrations."
  },
  {
    "id": "28",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle relations between tables?",
    "answer": "Drizzle handles relations through its schema definition, allowing you to define one-to-one, one-to-many, and many-to-many relationships with type safety, which can then be queried with joins."
  },
  {
    "id": "29",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT and how is it used in authentication?",
    "answer": "JSON Web Tokens (JWT) are compact, URL-safe tokens that represent claims between parties. They consist of a header, payload, and signature, and are commonly used for stateless authentication."
  },
  {
    "id": "30",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running JavaScript in parallel. They're useful for CPU-intensive tasks that would otherwise block the event loop, though I/O operations are still better handled asynchronously."
  },
  {
    "id": "31",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware are functions that have access to the request, response, and next function in the application's request-response cycle. They can execute code, modify objects, or end the request-response cycle."
  },
  {
    "id": "32",
    "category": "other",
    "difficulty": "medium",
    "question": "What are the differences between HTTP/1.1 and HTTP/2?",
    "answer": "HTTP/2 introduces multiplexing (multiple requests over a single connection), header compression, server push, binary protocol, and stream prioritization, improving performance over HTTP/1.1."
  },
  {
    "id": "33",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Virtual DOM in React?",
    "answer": "The Virtual DOM is a lightweight copy of the actual DOM that React maintains. When state changes, React compares the new Virtual DOM with the previous one (diffing) and efficiently updates only the changed parts of the real DOM (reconciliation)."
  },
  {
    "id": "34",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API Routes in Next.js?",
    "answer": "API Routes allow you to create API endpoints as Node.js serverless functions within your Next.js application. Files in the 'pages/api' directory are treated as API endpoints instead of pages."
  },
  {
    "id": "35",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the concept of closures in JavaScript.",
    "answer": "A closure is a function that remembers its outer variables and can access them even after the outer function has returned. Closures are created every time a function is created, at function creation time."
  },
  {
    "id": "36",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are generics in TypeScript and when would you use them?",
    "answer": "Generics allow creating reusable components that work with multiple types while maintaining type safety. They're useful when you want to preserve type information when working with collections, utility functions, or reusable components."
  },
  {
    "id": "37",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement dark mode using Tailwind CSS?",
    "answer": "Use the 'dark:' variant prefix with the 'dark' mode configuration set to 'class' in tailwind.config.js. Then toggle a 'dark' class on the HTML element, and style elements with classes like 'dark:bg-gray-800'."
  },
  {
    "id": "38",
    "category": "css",
    "difficulty": "medium",
    "question": "What is CSS Flexbox and when would you use it?",
    "answer": "Flexbox is a layout model that allows efficient alignment and distribution of space among items in a container, even when their size is unknown. It's ideal for one-dimensional layouts (either rows or columns)."
  },
  {
    "id": "39",
    "category": "html",
    "difficulty": "medium",
    "question": "What are data attributes in HTML and how are they useful?",
    "answer": "Data attributes (data-*) allow storing extra information on HTML elements without affecting presentation or behavior. They can be accessed via JavaScript and are useful for storing element-specific data."
  },
  {
    "id": "40",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are mixins in Sass and how do they differ from functions?",
    "answer": "Mixins are reusable blocks of styles that can be included in other rules. They can accept arguments but return CSS declarations rather than values. Functions return values that can be used in property assignments."
  },
  {
    "id": "41",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate a password with specific requirements?",
    "answer": "Example for 8+ chars with uppercase, lowercase, number: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{8,}$/. This uses positive lookaheads to ensure each requirement is met."
  },
  {
    "id": "42",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle transactions in Prisma?",
    "answer": "Prisma provides $transaction for interactive transactions where you can perform multiple operations in sequence, or batch transactions for independent operations that should succeed or fail together."
  },
  {
    "id": "43",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle raw SQL queries?",
    "answer": "Drizzle provides a sql template tag for writing raw SQL queries with type safety. You can interpolate values safely and even infer return types for the results."
  },
  {
    "id": "44",
    "category": "backend",
    "difficulty": "hard",
    "question": "What is the difference between REST and GraphQL?",
    "answer": "REST is resource-based with fixed endpoints returning complete resources. GraphQL is query-based with a single endpoint, allowing clients to request exactly the data they need in one request."
  },
  {
    "id": "45",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the package.json file in Node.js projects?",
    "answer": "package.json is a manifest file that contains project metadata, dependencies, scripts, and configuration. It's used by npm/yarn to manage packages, versions, and project setup."
  },
  {
    "id": "46",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you handle errors in an Express application?",
    "answer": "Use middleware functions with four parameters (err, req, res, next). Organize errors with custom Error classes. Use try/catch in async routes or wrap with a higher-order function. Implement proper HTTP status codes."
  },
  {
    "id": "47",
    "category": "other",
    "difficulty": "medium",
    "question": "What is CI/CD and why is it important?",
    "answer": "CI (Continuous Integration) means regularly merging code changes into a shared repo with automated testing. CD (Continuous Delivery/Deployment) automates release processes. Together they enable faster, more reliable software releases."
  },
  {
    "id": "48",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Portals and when would you use them?",
    "answer": "Portals provide a way to render children into a DOM node outside the parent component's hierarchy. They're useful for modals, tooltips, or any UI that needs to break out of its container (e.g., for CSS z-index or positioning)."
  },
  {
    "id": "49",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": "ISR allows you to update static pages after build time without rebuilding the entire site. You specify a revalidation time, and Next.js will regenerate the page in the background when it receives requests after that time."
  },
  {
    "id": "50",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' performs type coercion before comparison, while '===' (strict equality) checks both value and type without coercion. '===' is generally preferred as it's more predictable."
  },
  {
    "id": "51",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards are expressions that perform runtime checks to narrow down the type of a variable within a block. They include typeof, instanceof checks, or custom functions with 'is' type predicates."
  },
  {
    "id": "52",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you create custom animations in Tailwind CSS?",
    "answer": "Define custom animations in tailwind.config.js under the 'extend.animation' key. Then apply them with the 'animate-' prefix. You can also use the @keyframes directive in your CSS and extend Tailwind's animation utilities."
  },
  {
    "id": "53",
    "category": "css",
    "difficulty": "medium",
    "question": "What is CSS Grid and how does it differ from Flexbox?",
    "answer": "CSS Grid is a two-dimensional layout system (rows and columns simultaneously), while Flexbox is one-dimensional (either rows or columns). Grid is better for overall page layouts, Flexbox for aligning content within components."
  },
  {
    "id": "54",
    "category": "html",
    "difficulty": "hard",
    "question": "What are Web Components and how do they work?",
    "answer": "Web Components are a set of web platform APIs that allow creating reusable custom elements with encapsulated functionality. They consist of Custom Elements, Shadow DOM, and HTML Templates."
  },
  {
    "id": "55",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you create a responsive grid system using Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints, using variables for column counts and gutters. The mixin would output media queries and calculate widths dynamically using Sass math operations."
  },
  {
    "id": "56",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to parse and extract data from a URL?",
    "answer": "Example to extract parts: /^(https?:\\/\\/)?([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?/. This captures protocol, domain, path, query, and hash segments. More specific patterns can be created for particular URL structures."
  },
  {
    "id": "57",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database schema validation?",
    "answer": "Prisma validates the schema against the database during introspection (when pulling the schema from an existing DB) and when generating the client. It checks for type consistency, relation integrity, and other constraints."
  },
  {
    "id": "58",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How would you implement complex joins with Drizzle ORM?",
    "answer": "Drizzle provides a query builder with methods like .innerJoin(), .leftJoin(), etc. You can chain these to build complex joins while maintaining type safety, and use the .fields() method to select specific columns."
  },
  {
    "id": "59",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for optimizing database queries?",
    "answer": "Strategies include: adding proper indexes, optimizing query structure, using JOINs wisely, implementing pagination, caching results, using prepared statements, denormalizing where appropriate, and analyzing query plans."
  },
  {
    "id": "60",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the 'cluster' module in Node.js?",
    "answer": "The cluster module allows creating child processes (workers) that share server ports, enabling better utilization of multi-core systems by running multiple Node.js instances to handle the load."
  },
  {
    "id": "61",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you implement rate limiting in Express?",
    "answer": "Use middleware like 'express-rate-limit' which tracks requests from IPs. Configure it with windowMs (time window), max (max requests per window), and optional delayMs. Store counts in memory or Redis for distributed apps."
  },
  {
    "id": "62",
    "category": "other",
    "difficulty": "hard",
    "question": "Explain the principles of secure authentication.",
    "answer": "Principles include: never store plaintext passwords (use strong hashing like bcrypt), implement proper session management, use HTTPS, add rate limiting, implement CSRF protection, use secure cookies, and consider multi-factor authentication."
  },
  {
    "id": "63",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API in React and when would you use it?",
    "answer": "Context provides a way to pass data through the component tree without manually passing props. It's useful for global data like themes, user auth, or preferences that many components need access to."
  },
  {
    "id": "64",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js provides an Image component that automatically optimizes images (resizing, format conversion, lazy loading) and serves them via a built-in image optimization API. It works with both local and remote images."
  },
  {
    "id": "65",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the prototype chain in JavaScript.",
    "answer": "JavaScript uses prototypal inheritance where objects can inherit properties from other objects. Each object has a prototype (accessed via __proto__), and when a property isn't found on an object, JavaScript looks up the prototype chain until it finds it or reaches null."
  },
  {
    "id": "66",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types in TypeScript?",
    "answer": "Conditional types select between two types based on a condition: T extends U ? X : Y. They're powerful when combined with generics, allowing type transformations based on input types."
  },
  {
    "id": "67",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "How do you customize Tailwind's default theme?",
    "answer": "In tailwind.config.js, use the 'theme' property to extend or override defaults. You can customize colors, spacing, fonts, breakpoints, etc., while preserving the rest of Tailwind's defaults."
  },
  {
    "id": "68",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS-in-JS and what are its advantages?",
    "answer": "CSS-in-JS is a pattern where CSS is written in JavaScript instead of separate files. Advantages include scoped styles, dynamic styling based on props/state, automatic vendor prefixing, and elimination of unused CSS."
  },
  {
    "id": "69",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the 'alt' attribute in images?",
    "answer": "The 'alt' attribute provides alternative text for images when they can't be displayed. It's important for accessibility (screen readers), SEO, and when images fail to load."
  },
  {
    "id": "70",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create loops in Sass and what are they useful for?",
    "answer": "Sass has @for, @each, and @while loops. They're useful for generating utility classes, grid systems, or any repetitive CSS patterns. Example: @for $i from 1 through 12 { .col-#{$i} { width: $i * 8.33%; } }"
  },
  {
    "id": "71",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to match HTML tags?",
    "answer": "A basic pattern: /<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/. However, parsing HTML with regex is generally discouraged for complex cases - use a proper HTML parser instead."
  },
  {
    "id": "72",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle database seeding with Prisma?",
    "answer": "Create a seed script that uses the Prisma client to insert initial data. You can run it with 'prisma db seed' or a custom script. For larger datasets, consider using raw SQL for better performance."
  },
  {
    "id": "73",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema migrations?",
    "answer": "Drizzle provides a migration API where you define schema changes in code. It can generate SQL migration files and track applied migrations, similar to other ORMs but with a more SQL-centric approach."
  },
  {
    "id": "74",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in a backend service?",
    "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts cross-origin requests. Handle it by setting proper headers (Access-Control-Allow-Origin, etc.), implementing preflight request handling, and configuring allowed methods/headers."
  },
  {
    "id": "75",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'stream' module in Node.js and when would you use it?",
    "answer": "Streams are collections of data that might not be available all at once. They're useful for processing large files, handling real-time data, or any I/O operations where memory efficiency is important."
  },
  {
    "id": "76",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement file uploads in Express?",
    "answer": "Use middleware like 'multer' to handle multipart/form-data. Configure storage (disk/memory), file filters, size limits, and processing. For large files, consider streaming processing to avoid memory issues."
  },
  {
    "id": "77",
    "category": "other",
    "difficulty": "medium",
    "question": "What is Docker and how does it benefit development?",
    "answer": "Docker is a platform for containerizing applications. Benefits include consistent environments across machines, isolation, easy scaling, simplified dependency management, and reproducible builds."
  },
  {
    "id": "78",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Suspense and how does it work?",
    "answer": "Suspense lets components 'wait' for something before rendering. It's primarily used for code-splitting (with React.lazy) and data fetching. Components can suspend while loading, showing fallback UI until ready."
  },
  {
    "id": "79",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle internationalization (i18n)?",
    "answer": "Next.js has built-in i18n routing that supports sub-path (/en/page), domain (en.example.com), or hybrid strategies. It handles locale detection, routing, and can integrate with translation libraries."
  },
  {
    "id": "80",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript Promises and how do they work?",
    "answer": "Promises represent eventual completion of async operations. They can be in pending, fulfilled, or rejected states. You chain .then() for success cases and .catch() for errors, avoiding callback hell."
  },
  {
    "id": "81",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript and how are they useful?",
    "answer": "Utility types (like Partial, Pick, Omit, Record) transform existing types in useful ways. They help create new types from existing ones without repetition, making type definitions more maintainable."
  },
  {
    "id": "82",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle component variants in Tailwind CSS?",
    "answer": "Use the @variant directive in your CSS to create component variants, or combine Tailwind with a JS framework's class binding system. For complex cases, consider using the 'classnames' library to conditionally apply classes."
  },
  {
    "id": "83",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS custom properties (variables) and how do you use them?",
    "answer": "CSS variables are defined with --prefix (--main-color: blue;) and accessed with var() (color: var(--main-color);). They're scoped to elements, can be changed dynamically, and help maintain consistent styling."
  },
  {
    "id": "84",
    "category": "html",
    "difficulty": "medium",
    "question": "What are the benefits of using the 'picture' element over 'img'?",
    "answer": "The 'picture' element provides art direction (different images for different viewports) and allows multiple source formats (via 'source' children) with fallback to 'img', helping with responsive images and modern formats like WebP."
  },
  {
    "id": "85",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a theming system with Sass?",
    "answer": "Create a map of themes with color variables, then use mixins or functions to apply themes. Example: @mixin theme($theme) { --primary: map-get($theme, primary); } and apply with @include theme($light-theme);"
  },
  {
    "id": "86",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to validate a date in YYYY-MM-DD format?",
    "answer": "Pattern: /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/. Note this validates format but not date logic (like Feb 30). For full validation, additional checks or a date library would be needed."
  },
  {
    "id": "87",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle many-to-many relationships in Prisma?",
    "answer": "Prisma supports implicit many-to-many relations where you define @relation fields on both models. For explicit relations (with additional fields), you create a join model with two @relation fields."
  },
  {
    "id": "88",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How would you implement pagination with Drizzle ORM?",
    "answer": "Use the .limit() and .offset() methods on your queries. Example: db.select().from(users).limit(10).offset(20). For cursor-based pagination, use .where() with conditions based on the cursor value."
  },
  {
    "id": "89",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is Redis and what are its common use cases?",
    "answer": "Redis is an in-memory data store used as a cache, message broker, or database. Common uses include session storage, rate limiting, real-time analytics, leaderboards, and pub/sub messaging systems."
  },
  {
    "id": "90",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'require' cache in Node.js and how does it work?",
    "answer": "Node caches modules after first require to improve performance. Subsequent requires return the cached version. The cache is stored in require.cache and can be deleted if you need to reload a module."
  },
  {
    "id": "91",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you structure a large Express application?",
    "answer": "Organize by features/routes (not by file type), separate concerns (routes, controllers, services), use middleware for cross-cutting concerns, implement proper error handling, and consider using a DI container for complex apps."
  },
  {
    "id": "92",
    "category": "other",
    "difficulty": "hard",
    "question": "What are microservices and when would you choose them over a monolith?",
    "answer": "Microservices are small, independent services that work together. Choose them for large teams, need for independent scaling, different tech stacks per component, or organizational alignment. Monoliths are simpler for small projects."
  },
  {
    "id": "93",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Error Boundaries?",
    "answer": "Error Boundaries are React components that catch JavaScript errors in their child component tree, log them, and display a fallback UI instead of crashing. They don't catch errors in event handlers, async code, or server-side rendering."
  },
  {
    "id": "94",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Next.js Dynamic Routes and how do they work?",
    "answer": "Dynamic Routes allow creating pages with variable paths (like [id].js). The parameter is available in the router query object and during getStaticProps/getServerSideProps for data fetching based on the route."
  },
  {
    "id": "95",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Event Loop in JavaScript and how does it work?",
    "answer": "The Event Loop handles async operations by offloading tasks to system APIs when possible, then processing the callback queue. It continuously checks the call stack and when empty, moves callbacks from the queue to the stack."
  },
  {
    "id": "96",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are declaration files (.d.ts) in TypeScript?",
    "answer": "Declaration files provide type information for existing JavaScript code. They contain type declarations but no implementations, allowing TypeScript to understand the shape of JavaScript libraries without changing the original code."
  },
  {
    "id": "97",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a design system with Tailwind CSS?",
    "answer": "Define a comprehensive theme in tailwind.config.js with colors, typography, spacing, etc. Create reusable component templates. Use plugins for custom utilities. Document with Storybook or similar, and enforce consistency with linting rules."
  },
  {
    "id": "98",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the Cascade in CSS and how does it work?",
    "answer": "The Cascade determines which styles apply when multiple rules target the same element. It considers origin (user agent, user, author), importance (!important), specificity, and source order to resolve conflicts."
  },
  {
    "id": "99",
    "category": "html",
    "difficulty": "hard",
    "question": "What is the Shadow DOM and how does it work?",
    "answer": "The Shadow DOM is a browser technology that provides encapsulation for DOM and CSS. It allows creating scoped DOM trees with isolated styles and markup, used by Web Components to prevent style leakage and conflicts."
  },
  {
    "id": "100",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use functions in Sass?",
    "answer": "Define functions with @function name($params) { @return value; }. They can perform calculations, manipulate colors, etc. Use them like built-in functions: width: calculate-width(10px);"
  },
  {
    "id": "101",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all words in a string?",
    "answer": "Pattern: /\\w+/g will match sequences of word characters (letters, digits, underscores). For just letters, use /[a-zA-Z]+/g. Adjust based on your definition of 'word' (e.g., include apostrophes)."
  },
  {
    "id": "102",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How would you optimize complex queries in Prisma?",
    "answer": "Strategies include: selecting only needed fields, using proper indexes, batching queries, using raw SQL for complex operations, implementing caching, and using Prisma's query logging to identify slow queries."
  },
  {
    "id": "103",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle complex transactions?",
    "answer": "Drizzle provides a transaction API where you can wrap multiple operations in a callback. The transactions are atomic and can be nested. You can also use savepoints for partial rollbacks within transactions."
  },
  {
    "id": "104",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for scaling a backend service?",
    "answer": "Strategies include: horizontal scaling (more instances), vertical scaling (bigger machines), database read replicas, caching, CDNs, async processing, microservices, and optimizing database queries and indexes."
  },
  {
    "id": "105",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is libuv and how does Node.js use it?",
    "answer": "libuv is a C library that provides the event loop and async I/O capabilities to Node.js. It handles the thread pool for file I/O, DNS, and other operations that can't be done asynchronously at the OS level."
  },
  {
    "id": "106",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement real-time features in Express?",
    "answer": "Use WebSockets with libraries like Socket.IO or ws. For HTTP-based approaches, consider Server-Sent Events (SSE) or long polling. Integrate with a pub/sub system like Redis for scaling across multiple servers."
  },
  {
    "id": "107",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebSockets and when would you use them?",
    "answer": "WebSockets provide full-duplex communication over a single TCP connection. Use them for real-time features like chat, live updates, multiplayer games, or any app needing low-latency server-client communication."
  },
  {
    "id": "108",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Server Components?",
    "answer": "React Server Components are components that render on the server and can access server-side resources directly. They're sent to the client as a lightweight serialized format, reducing bundle size and enabling zero-bundle-size components."
  },
  {
    "id": "109",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle client-side navigation?",
    "answer": "Next.js uses client-side navigation via its Link component, which prefetches linked pages in the background. This provides SPA-like navigation without full page reloads, while maintaining SEO benefits and proper URL handling."
  },
  {
    "id": "110",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are JavaScript Generators and how do they work?",
    "answer": "Generators are functions that can be exited and later re-entered, with their context saved across re-entrances. Defined with function*, they yield values via yield and can be iterated manually with .next() or in loops."
  },
  {
    "id": "111",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are template literal types in TypeScript?",
    "answer": "Template literal types allow creating new string types by combining existing ones, similar to template literals in JavaScript. Example: type EventName<T extends string> = `${T}Changed` lets you create 'nameChanged', 'ageChanged', etc."
  },
  {
    "id": "112",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle responsive design in Tailwind CSS?",
    "answer": "Tailwind uses mobile-first breakpoints (sm, md, lg, xl, 2xl) as prefixes to utility classes. Example: 'md:text-lg' applies the large text size from the 'md' breakpoint up. Customize breakpoints in the config file."
  },
  {
    "id": "113",
    "category": "css",
    "difficulty": "medium",
    "question": "What is BEM methodology in CSS?",
    "answer": "BEM (Block, Element, Modifier) is a naming convention: .block__element--modifier. Blocks are standalone components, elements are parts of blocks, and modifiers alter appearance/behavior. It aims to make CSS more maintainable and reduce specificity issues."
  },
  {
    "id": "114",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "ARIA (Accessible Rich Internet Applications) attributes provide semantic information to assistive technologies. They're crucial for accessibility when native HTML semantics aren't sufficient, helping screen readers understand dynamic content and UI controls."
  },
  {
    "id": "115",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive typography system with Sass?",
    "answer": "Create a map of breakpoints and font sizes, then use mixins to generate responsive typography. Example: @mixin responsive-text($size) { font-size: map-get($sizes, $size); @each $bp, $value in $responsive-sizes { @media (min-width: $bp) { font-size: map-get($value, $size); } } }"
  },
  {
    "id": "116",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to validate a phone number with international formatting?",
    "answer": "Basic pattern: /^\\+[1-9]\\d{1,14}$/ (E.164 format). More specific patterns depend on country. For US: /^\\+1\\d{10}$/. Note that complete validation often requires additional checks or a library like libphonenumber."
  },
  {
    "id": "117",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle database connections with Prisma?",
    "answer": "Prisma manages connections via the Prisma Client, which uses a connection pool. Configure the connection URL in the DATABASE_URL environment variable or in the schema.prisma file. The client handles connection lifecycle automatically."
  },
  {
    "id": "118",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema validation?",
    "answer": "Drizzle validates schemas at compile time through TypeScript types. It ensures your table definitions match your database structure and that queries are type-safe against your schema definitions."
  },
  {
    "id": "119",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between stateful and stateless authentication?",
    "answer": "Stateful auth stores session data server-side (in memory/database), while stateless (like JWT) encodes all needed data in the token. Stateless scales better but is harder to invalidate; stateful allows immediate invalidation but needs session storage."
  },
  {
    "id": "120",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'fs' module in Node.js and what are its main methods?",
    "answer": "The 'fs' module provides file system operations. Main methods include: readFile/writeFile (async file I/O), readFileSync/writeFileSync (sync versions), promises API (fs.promises), createReadStream/createWriteStream (for large files), and stat (file metadata)."
  },
  {
    "id": "121",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware chaining in Express?",
    "answer": "Middleware chaining is the process where multiple middleware functions handle a request sequentially. Each middleware can process the request and either pass it to the next middleware with next() or end the chain by sending a response."
  },
  {
    "id": "122",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the CAP theorem and how does it affect database design?",
    "answer": "CAP theorem states a distributed system can only guarantee two of: Consistency (all nodes see same data), Availability (every request gets a response), Partition tolerance (system works despite network failures). Affects choice between CP (like MongoDB) or AP (like Cassandra) systems."
  },
  {
    "id": "123",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Fragments and why are they useful?",
    "answer": "Fragments (<></> or <Fragment>) let you group elements without adding extra DOM nodes. Useful when a component needs to return multiple adjacent elements but must have a single root, or when adding wrapper elements would break styling."
  },
  {
    "id": "124",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the 'next/image' component and why is it important?",
    "answer": "'next/image' is an optimized Image component that handles lazy loading, automatic resizing, format conversion, and proper sizing. It improves performance by serving correctly sized images for each device and using modern formats like WebP."
  },
  {
    "id": "125",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Temporal API in JavaScript?",
    "answer": "The Temporal API is a new proposal for better date/time handling in JavaScript. It provides immutable objects for dates, times, and durations, with better timezone support, arithmetic operations, and parsing/formatting capabilities than the Date object."
  },
  {
    "id": "126",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are namespace in TypeScript and when would you use them?",
    "answer": "Namespaces are TypeScript's way to organize code and prevent naming collisions. They're useful for grouping related functionality, especially in larger codebases. Modern TypeScript often uses ES modules instead, but namespaces remain for certain patterns."
  },
  {
    "id": "127",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a dark/light theme toggle with Tailwind CSS?",
    "answer": "Set dark mode to 'class' in config, toggle a 'dark' class on the HTML element, and use 'dark:' variants for dark mode styles. Combine with a state management solution (like React context) to persist the preference and handle toggling."
  },
  {
    "id": "128",
    "category": "css",
    "difficulty": "hard",
    "question": "What are CSS containment properties and how do they optimize rendering?",
    "answer": "CSS containment (like 'contain: layout paint style size') tells the browser which parts of the DOM can be treated as independent, allowing optimizations like limiting repaints to specific subtrees or skipping layout calculations for isolated components."
  },
  {
    "id": "129",
    "category": "html",
    "difficulty": "hard",
    "question": "What is the difference between 'defer' and 'async' attributes in script tags?",
    "answer": "'defer' scripts execute after HTML parsing is complete, in order. 'async' scripts download in parallel and execute as soon as available, potentially out of order. Both allow parallel downloading without blocking parsing."
  },
  {
    "id": "130",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Define maps with $map: (key: value, ...). Access values with map-get($map, key). Use @each to iterate: @each $key, $value in $map { ... }. Maps are useful for theme variables, breakpoints, or any key-value data."
  },
  {
    "id": "131",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to extract hashtags from a string?",
    "answer": "Pattern: /#\\w+/g will match hashtags starting with # followed by word characters. For more specific needs (like allowing underscores but not starting with numbers), adjust: /#[a-zA-Z_]\\w*/g."
  },
  {
    "id": "132",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How do you handle database schema changes in production with Prisma?",
    "answer": "Use Prisma Migrate to generate and apply migration files. For zero-downtime deployments, consider: writing backward-compatible migrations, splitting breaking changes into multiple deployments, or using shadow databases to test migrations first."
  },
  {
    "id": "133",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How would you implement soft deletes with Drizzle ORM?",
    "answer": "Add a 'deleted_at' column to your tables, then filter queries with .where(isNull(deletedAt)) or create a helper function that adds this condition automatically. For actual deletes, use a separate hard delete operation."
  },
  {
    "id": "134",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for handling database migrations in production?",
    "answer": "Strategies include: writing backward-compatible migrations, splitting large migrations into smaller ones, testing against a staging environment first, using blue-green deployments, having rollback plans, and considering zero-downtime migration patterns."
  },
  {
    "id": "135",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the difference between 'setImmediate' and 'process.nextTick' in Node.js?",
    "answer": "'process.nextTick' executes at the end of the current operation, before the event loop continues. 'setImmediate' runs during the check phase of the event loop. 'nextTick' has higher priority and can starve the event loop if misused."
  },
  {
    "id": "136",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement API versioning in Express?",
    "answer": "Common approaches include: URL path (/v1/resource), query parameter (/resource?version=1), custom headers, or content negotiation. Implement with route middleware that checks the version and routes to appropriate handlers or transforms responses accordingly."
  },
  {
    "id": "137",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the difference between SQL and NoSQL databases?",
    "answer": "SQL databases are relational, table-based, with predefined schemas and ACID transactions. NoSQL databases are non-relational, with flexible schemas (document, key-value, graph, etc.), and prioritize scalability and flexibility over strict consistency."
  },
  {
    "id": "138",
    "category": "react",
    "difficulty": "hard",
    "question": "What is Concurrent Mode in React?",
    "answer": "Concurrent Mode is a set of new React features that help apps stay responsive while rendering. It enables interruptible rendering, prioritized updates, and transitions between states. It's the foundation for features like Suspense and selective hydration."
  },
  {
    "id": "139",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle code splitting?",
    "answer": "Next.js automatically code splits by pages (each page is its own bundle). Dynamic imports (next/dynamic) allow component-level splitting. The framework also splits runtime, commons, and third-party libraries for optimal loading."
  },
  {
    "id": "140",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are Web Workers and when would you use them?",
    "answer": "Web Workers run scripts in background threads, separate from the main execution thread. Use them for CPU-intensive tasks (image processing, calculations) to avoid blocking the UI. They communicate with the main thread via message passing."
  },
  {
    "id": "141",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are mapped types in TypeScript?",
    "answer": "Mapped types create new types by transforming properties of existing types. Example: type Readonly<T> = { readonly [P in keyof T]: T[P] }. They're powerful for creating variations of types without repetition."
  },
  {
    "id": "142",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you extend Tailwind's default configuration?",
    "answer": "In tailwind.config.js, use the 'theme.extend' property to add to Tailwind's defaults without overriding them. For complete overrides, add properties directly to 'theme'. Plugins can also be used to add new utilities or components."
  },
  {
    "id": "143",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how do they differ from pseudo-classes?",
    "answer": "Pseudo-elements (::before, ::first-line) style specific parts of an element or generate content. Pseudo-classes (:hover, :nth-child()) style elements based on state or position. Pseudo-elements create virtual elements, pseudo-classes select existing ones in specific states."
  },
  {
    "id": "144",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the 'loading' attribute in images?",
    "answer": "The 'loading' attribute controls lazy loading behavior: 'lazy' defers loading until near viewport, 'eager' loads immediately. It improves performance by prioritizing visible content loading, especially for long pages with many images."
  },
  {
    "id": "145",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive grid system with Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints: @mixin grid($columns, $breakpoint) { @media (min-width: $breakpoint) { .grid-#{$columns} { display: grid; grid-template-columns: repeat($columns, 1fr); } } }. Call for each breakpoint/column count needed."
  },
  {
    "id": "146",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to match a hexadecimal color code?",
    "answer": "Pattern: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/. Matches # followed by 3 or 6 hex digits. For strict CSS colors (no shorthand): /^#([A-Fa-f0-9]{3}){1,2}$/. Add word boundaries if needed: /\\b#[A-Fa-f0-9]{3,6}\\b/"
  },
  {
    "id": "147",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How do you handle database indexing with Prisma?",
    "answer": "Define indexes in your Prisma schema using the @@index attribute on models. For complex indexes or full-text search, you may need to use raw SQL in migrations. Prisma also supports defining unique constraints with @@unique."
  },
  {
    "id": "148",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle full-text search?",
    "answer": "Drizzle provides SQL functions that can be used for full-text search, like to_tsvector and to_tsquery in PostgreSQL. You can write raw SQL queries with these functions or create helper functions that abstract the search implementation."
  },
  {
    "id": "149",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common API authentication methods?",
    "answer": "Common methods include: API keys, JWT (JSON Web Tokens), OAuth/OAuth2, Session cookies, Basic Auth, and OpenID Connect. The choice depends on factors like security needs, client types, and whether you need third-party access."
  },
  {
    "id": "150",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'vm' module in Node.js and when would you use it?",
    "answer": "The 'vm' module provides APIs for compiling and running code within V8 Virtual Machine contexts. It's used for running code in isolated environments (sandboxing), though should be used carefully as it's not completely secure for running untrusted code."
  },
  {
    "id": "151",
    "category": "all",
    "difficulty": "easy",
    "question": "What are the benefits of using a CSS preprocessor like Sass?",
    "answer": "Sass provides variables, nesting, mixins, functions, and other features that make CSS more maintainable, reusable, and easier to write. It helps organize large stylesheets and reduces repetition."
  },
  {
    "id": "152",
    "category": "react",
    "difficulty": "medium",
    "question": "Explain the concept of 'lifting state up' in React.",
    "answer": "Lifting state up means moving shared state to the closest common ancestor of components that need it. This allows sibling components to share and synchronize state through their parent component."
  },
  {
    "id": "153",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle dynamic imports and why are they useful?",
    "answer": "Next.js supports dynamic imports with next/dynamic, which allows code-splitting at the component level. This reduces initial bundle size by loading components only when needed, improving performance."
  },
  {
    "id": "154",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How would you implement a responsive navbar using Tailwind CSS?",
    "answer": "Use Tailwind's responsive prefixes (md:, lg:) to show/hide elements at different breakpoints. Combine with flex/grid for layout, and transition utilities for smooth mobile menu animations."
  },
  {
    "id": "155",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the difference between CSS Grid and Flexbox? When would you use each?",
    "answer": "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either row or column). Use Grid for overall page layout and Flexbox for aligning content within components."
  },
  {
    "id": "156",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop in JavaScript and how does it work?",
    "answer": "The event loop is what allows JavaScript to be non-blocking. It continuously checks the call stack and when empty, processes messages from the callback queue, enabling asynchronous behavior despite being single-threaded."
  },
  {
    "id": "157",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the alt attribute in image tags?",
    "answer": "The alt attribute provides alternative text for images when they cannot be displayed. It's important for accessibility (screen readers), SEO, and when images fail to load."
  },
  {
    "id": "158",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are TypeScript interfaces and how do they differ from type aliases?",
    "answer": "Interfaces define contracts for object shapes and can be extended or implemented. Type aliases can represent any type, including primitives and unions. Interfaces are generally preferred for object shapes as they're more extensible."
  },
  {
    "id": "159",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use mixins in Sass?",
    "answer": "Mixins are defined with @mixin name($params) { ... } and used with @include name(args). They allow reusable blocks of styles that can accept parameters for customization."
  },
  {
    "id": "160",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you write a regex to validate a URL?",
    "answer": "A basic URL regex: /^(https?:\\/\\/)?([\\w.-]+)\\.([a-z]{2,})([\\/\\w .-]*)*\\/?$/. This matches protocol, domain, and path components while allowing for optional parts."
  },
  {
    "id": "161",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle one-to-many relationships in Prisma?",
    "answer": "In Prisma, define a @relation field on the 'many' side model that references the 'one' side. The relation can be made optional or required depending on your data model needs."
  },
  {
    "id": "162",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema migrations?",
    "answer": "Drizzle provides a migration API where schema changes are defined in TypeScript. It generates SQL migration files that can be applied to the database while tracking which migrations have been executed."
  },
  {
    "id": "163",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common strategies for API rate limiting?",
    "answer": "Common strategies include token bucket, fixed window, and sliding window algorithms. Implementation can be done via middleware with counters stored in memory, Redis, or a database, often using IP or API keys as identifiers."
  },
  {
    "id": "164",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the package.json file in Node.js?",
    "answer": "package.json stores project metadata, dependencies, scripts, and configuration. It's used by npm/yarn to manage packages, versions, and project setup, serving as the project manifest."
  },
  {
    "id": "165",
    "category": "express",
    "difficulty": "easy",
    "question": "How do you handle route parameters in Express?",
    "answer": "Route parameters are defined with a colon (e.g., '/users/:id') and accessed via req.params. They capture values at specific positions in the URL for dynamic routing."
  },
  {
    "id": "166",
    "category": "other",
    "difficulty": "medium",
    "question": "What is Docker and how does it benefit development?",
    "answer": "Docker is a containerization platform that packages applications with their dependencies. Benefits include consistent environments, isolation, easy scaling, simplified dependency management, and reproducible builds across machines."
  },
  {
    "id": "167",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Fiber and how does it improve rendering?",
    "answer": "React Fiber is a complete rewrite of React's reconciliation algorithm. It enables features like incremental rendering, better handling of animations, and the ability to split rendering work into chunks across multiple frames."
  },
  {
    "id": "168",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API Routes in Next.js and how do they work?",
    "answer": "API Routes allow creating API endpoints as Node.js serverless functions within Next.js. Files in the 'pages/api' directory become API endpoints that can handle HTTP requests and return responses."
  },
  {
    "id": "169",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement dark mode with Tailwind CSS?",
    "answer": "Configure dark mode in tailwind.config.js to use a class strategy. Toggle a 'dark' class on the HTML element, then use dark: prefixes for dark mode styles (e.g., dark:bg-gray-800)."
  },
  {
    "id": "170",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the CSS Box Model and how does it work?",
    "answer": "The CSS Box Model describes how elements are laid out, consisting of content, padding, border, and margin. The box-sizing property controls whether width/height include padding and border (border-box) or just content (content-box)."
  },
  {
    "id": "171",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are JavaScript Generators and how do they work?",
    "answer": "Generators are functions that can be paused and resumed (function*). They yield values via yield and can be iterated manually with .next() or in loops. Useful for lazy evaluation and custom iterables."
  },
  {
    "id": "172",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic HTML elements and why are they important?",
    "answer": "Semantic elements (<header>, <article>, <nav>) clearly describe their meaning to browsers and developers. They improve accessibility, SEO, and make code more readable by replacing generic <div> elements where appropriate."
  },
  {
    "id": "173",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types in TypeScript?",
    "answer": "Conditional types select between two types based on a condition: T extends U ? X : Y. They're powerful when combined with generics, allowing type transformations based on input types."
  },
  {
    "id": "174",
    "category": "sass",
    "difficulty": "easy",
    "question": "How do you create variables in Sass?",
    "answer": "Variables in Sass are declared with $ followed by the name: $primary-color: #333;. They're used by referencing the variable: color: $primary-color;. Variables can store colors, numbers, strings, lists, maps, and more."
  },
  {
    "id": "175",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate an email address?",
    "answer": "A basic email regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/. Note that complete email validation is complex and often better handled with simple confirmation emails or specialized libraries."
  },
  {
    "id": "176",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database transactions?",
    "answer": "Prisma provides $transaction for interactive transactions where operations can depend on previous results. For batch transactions of independent operations, use transaction([]). Both ensure atomicity - all operations succeed or none do."
  },
  {
    "id": "177",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle raw SQL queries?",
    "answer": "Drizzle provides a sql template tag for writing raw SQL queries with type safety. Values can be interpolated safely, and return types can be inferred. This allows leveraging database-specific features while maintaining type safety."
  },
  {
    "id": "178",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT authentication and how does it work?",
    "answer": "JWT (JSON Web Tokens) are compact, URL-safe tokens that represent claims between parties. They consist of a header, payload, and signature. JWTs are stateless - the server validates the signature without storing session data."
  },
  {
    "id": "179",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running JavaScript in parallel. They're useful for CPU-intensive tasks that would block the event loop, though I/O operations are still better handled asynchronously via the main thread."
  },
  {
    "id": "180",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware are functions that have access to the request, response, and next function in the request-response cycle. They can execute code, modify objects, or end the cycle. Middleware runs in the order it's defined."
  },
  {
    "id": "181",
    "category": "other",
    "difficulty": "hard",
    "question": "What are microservices and when would you choose them over a monolith?",
    "answer": "Microservices are small, independent services that work together. Choose them for large teams, independent scaling needs, different tech stacks per component, or organizational alignment. Monoliths are simpler for small projects."
  },
  {
    "id": "182",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Portals and when would you use them?",
    "answer": "Portals provide a way to render children into a DOM node outside the parent component's hierarchy. Useful for modals, tooltips, or any UI that needs to break out of its container (e.g., for CSS z-index or positioning)."
  },
  {
    "id": "183",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": "ISR allows updating static pages after build time without rebuilding the entire site. You specify a revalidation time, and Next.js will regenerate the page in the background when requested after that time."
  },
  {
    "id": "184",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you customize Tailwind's default configuration?",
    "answer": "In tailwind.config.js, use the theme.extend property to add to defaults without overriding them. For complete overrides, add properties directly to theme. Plugins can also add new utilities or components."
  },
  {
    "id": "185",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS containment and how does it optimize performance?",
    "answer": "CSS containment (contain property) tells the browser that an element's subtree is independent of the rest of the page. This allows optimizations like limiting paint/layout to specific subtrees, improving rendering performance."
  },
  {
    "id": "186",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' performs type coercion before comparison, while '===' (strict equality) checks both value and type without coercion. '===' is generally preferred as it's more predictable and avoids unexpected type conversions."
  },
  {
    "id": "187",
    "category": "html",
    "difficulty": "hard",
    "question": "What are Web Components and how do they work?",
    "answer": "Web Components are a set of web platform APIs that allow creating reusable custom elements with encapsulated functionality. They consist of Custom Elements, Shadow DOM, and HTML Templates."
  },
  {
    "id": "188",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards are expressions that perform runtime checks to narrow down the type of a variable within a block. They include typeof, instanceof checks, or custom functions with 'is' type predicates."
  },
  {
    "id": "189",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a theming system with Sass?",
    "answer": "Create a map of themes with color variables, then use mixins or functions to apply themes. Example: @mixin theme($theme) { --primary: map-get($theme, primary); } and apply with @include theme($light-theme);"
  },
  {
    "id": "190",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all numbers in a string?",
    "answer": "In JavaScript: const numbers = str.match(/\\d+/g); This returns an array of all sequences of digits. For decimal numbers: /\\d+\\.?\\d*/g. Adjust based on specific number format requirements."
  },
  {
    "id": "191",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle many-to-many relationships in Prisma?",
    "answer": "Prisma supports implicit many-to-many relations where you define @relation fields on both models. For explicit relations (with additional fields), create a join model with two @relation fields pointing to each side."
  },
  {
    "id": "192",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How would you implement pagination with Drizzle ORM?",
    "answer": "Use the .limit() and .offset() methods on queries. Example: db.select().from(users).limit(10).offset(20). For cursor-based pagination, use .where() with conditions based on the cursor value."
  },
  {
    "id": "193",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for optimizing database performance?",
    "answer": "Strategies include: adding proper indexes, optimizing query structure, implementing caching, using connection pooling, denormalizing where appropriate, partitioning large tables, and analyzing query execution plans."
  },
  {
    "id": "194",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'cluster' module in Node.js and why would you use it?",
    "answer": "The cluster module allows creating child processes (workers) that share server ports, enabling better utilization of multi-core systems. It helps improve performance by running multiple Node.js instances to handle the load."
  },
  {
    "id": "195",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement file uploads in Express?",
    "answer": "Use middleware like 'multer' to handle multipart/form-data. Configure storage (disk/memory), file filters, size limits, and processing. For large files, consider streaming processing to avoid memory issues."
  },
  {
    "id": "196",
    "category": "other",
    "difficulty": "medium",
    "question": "What is CI/CD and why is it important?",
    "answer": "CI (Continuous Integration) means regularly merging code changes into a shared repo with automated testing. CD (Continuous Delivery/Deployment) automates release processes. Together they enable faster, more reliable software releases."
  },
  {
    "id": "197",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Suspense and how does it work?",
    "answer": "Suspense lets components 'wait' for something before rendering. It's primarily used for code-splitting (with React.lazy) and data fetching. Components can suspend while loading, showing fallback UI until ready."
  },
  {
    "id": "198",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js provides an Image component that automatically optimizes images (resizing, format conversion, lazy loading) and serves them via a built-in image optimization API. It works with both local and remote images."
  },
  {
    "id": "199",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "What is Tailwind CSS and how does it differ from traditional CSS frameworks?",
    "answer": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in markup, rather than offering pre-designed components like Bootstrap."
  },
  {
    "id": "200",
    "category": "css",
    "difficulty": "medium",
    "question": "What is BEM methodology in CSS?",
    "answer": "BEM (Block, Element, Modifier) is a naming convention: .block__element--modifier. Blocks are standalone components, elements are parts of blocks, and modifiers alter appearance/behavior. It aims to make CSS more maintainable."
  },
  {
    "id": "201",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the prototype chain in JavaScript.",
    "answer": "JavaScript uses prototypal inheritance where objects can inherit properties from other objects. Each object has a prototype (accessed via __proto__), and when a property isn't found, JavaScript looks up the prototype chain until it finds it or reaches null."
  },
  {
    "id": "202",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the 'defer' and 'async' attributes in script tags?",
    "answer": "'defer' scripts execute after HTML parsing is complete, in order. 'async' scripts download in parallel and execute as soon as available, potentially out of order. Both allow parallel downloading without blocking parsing."
  },
  {
    "id": "203",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are template literal types in TypeScript?",
    "answer": "Template literal types allow creating new string types by combining existing ones, similar to template literals in JavaScript. Example: type EventName<T extends string> = `${T}Changed` lets you create 'nameChanged', 'ageChanged', etc."
  },
  {
    "id": "204",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create loops in Sass and what are they useful for?",
    "answer": "Sass has @for, @each, and @while loops. Useful for generating utility classes, grid systems, or any repetitive CSS patterns. Example: @for $i from 1 through 12 { .col-#{$i} { width: $i * 8.33%; } }"
  },
  {
    "id": "205",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to parse and extract data from a URL?",
    "answer": "Example to extract parts: /^(https?:\\/\\/)?([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?/. This captures protocol, domain, path, query, and hash segments. More specific patterns can be created for particular URL structures."
  },
  {
    "id": "206",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database schema validation?",
    "answer": "Prisma validates the schema against the database during introspection (when pulling the schema from an existing DB) and when generating the client. It checks for type consistency, relation integrity, and other constraints."
  },
  {
    "id": "207",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How would you implement soft deletes with Drizzle ORM?",
    "answer": "Add a 'deleted_at' column to your tables, then filter queries with .where(isNull(deletedAt)) or create a helper function that adds this condition automatically. For actual deletes, use a separate hard delete operation."
  },
  {
    "id": "208",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in a backend service?",
    "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts cross-origin requests. Handle it by setting proper headers (Access-Control-Allow-Origin, etc.), implementing preflight request handling, and configuring allowed methods/headers."
  },
  {
    "id": "209",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'stream' module in Node.js and when would you use it?",
    "answer": "Streams are collections of data that might not be available all at once. They're useful for processing large files, handling real-time data, or any I/O operations where memory efficiency is important."
  },
  {
    "id": "210",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you structure a large Express application?",
    "answer": "Organize by features/routes (not by file type), separate concerns (routes, controllers, services), use middleware for cross-cutting concerns, implement proper error handling, and consider using a DI container for complex apps."
  },
  {
    "id": "211",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the CAP theorem and how does it affect database design?",
    "answer": "CAP theorem states a distributed system can only guarantee two of: Consistency (all nodes see same data), Availability (every request gets a response), Partition tolerance (system works despite network failures). Affects choice between CP (like MongoDB) or AP (like Cassandra) systems."
  },
  {
    "id": "212",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Fragments and why are they useful?",
    "answer": "Fragments (<></> or <Fragment>) let you group elements without adding extra DOM nodes. Useful when a component needs to return multiple adjacent elements but must have a single root, or when adding wrapper elements would break styling."
  },
  {
    "id": "213",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle client-side navigation?",
    "answer": "Next.js uses client-side navigation via its Link component, which prefetches linked pages in the background. This provides SPA-like navigation without full page reloads, while maintaining SEO benefits and proper URL handling."
  },
  {
    "id": "214",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle responsive design in Tailwind CSS?",
    "answer": "Tailwind uses mobile-first breakpoints (sm, md, lg, xl, 2xl) as prefixes to utility classes. Example: 'md:text-lg' applies the large text size from the 'md' breakpoint up. Customize breakpoints in the config file."
  },
  {
    "id": "215",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS-in-JS and what are its advantages?",
    "answer": "CSS-in-JS is a pattern where CSS is written in JavaScript instead of separate files. Advantages include scoped styles, dynamic styling based on props/state, automatic vendor prefixing, and elimination of unused CSS."
  },
  {
    "id": "216",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript Promises and how do they work?",
    "answer": "Promises represent eventual completion of async operations. They can be in pending, fulfilled, or rejected states. You chain .then() for success cases and .catch() for errors, avoiding callback hell. Async/await provides syntactic sugar over promises."
  },
  {
    "id": "217",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the 'loading' attribute in images?",
    "answer": "The 'loading' attribute controls lazy loading behavior: 'lazy' defers loading until near viewport, 'eager' loads immediately. It improves performance by prioritizing visible content loading, especially for long pages with many images."
  },
  {
    "id": "218",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript and how are they useful?",
    "answer": "Utility types (like Partial, Pick, Omit, Record) transform existing types in useful ways. They help create new types from existing ones without repetition, making type definitions more maintainable."
  },
  {
    "id": "219",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive grid system with Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints: @mixin grid($columns, $breakpoint) { @media (min-width: $breakpoint) { .grid-#{$columns} { display: grid; grid-template-columns: repeat($columns, 1fr); } } }. Call for each breakpoint/column count needed."
  },
  {
    "id": "220",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate a password with specific requirements?",
    "answer": "Example for 8+ chars with uppercase, lowercase, number: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{8,}$/. This uses positive lookaheads to ensure each requirement is met before matching the password string."
  },
  {
    "id": "221",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle database seeding with Prisma?",
    "answer": "Create a seed script that uses the Prisma client to insert initial data. You can run it with 'prisma db seed' or a custom script. For larger datasets, consider using raw SQL for better performance."
  },
  {
    "id": "222",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle complex joins?",
    "answer": "Drizzle provides a query builder with methods like .innerJoin(), .leftJoin(), etc. You can chain these to build complex joins while maintaining type safety, and use the .fields() method to select specific columns."
  },
  {
    "id": "223",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common API authentication methods?",
    "answer": "Common methods include: API keys, JWT (JSON Web Tokens), OAuth/OAuth2, Session cookies, Basic Auth, and OpenID Connect. The choice depends on factors like security needs, client types, and whether you need third-party access."
  },
  {
    "id": "224",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'require' cache in Node.js and how does it work?",
    "answer": "Node caches modules after first require to improve performance. Subsequent requires return the cached version. The cache is stored in require.cache and can be deleted if you need to reload a module."
  },
  {
    "id": "225",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement real-time features in Express?",
    "answer": "Use WebSockets with libraries like Socket.IO or ws. For HTTP-based approaches, consider Server-Sent Events (SSE) or long polling. Integrate with a pub/sub system like Redis for scaling across multiple servers."
  },
  {
    "id": "226",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebSockets and when would you use them?",
    "answer": "WebSockets provide full-duplex communication over a single TCP connection. Use them for real-time features like chat, live updates, multiplayer games, or any app needing low-latency server-client communication."
  },
  {
    "id": "227",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Server Components?",
    "answer": "React Server Components are components that render on the server and can access server-side resources directly. They're sent to the client as a lightweight serialized format, reducing bundle size and enabling zero-bundle-size components."
  },
  {
    "id": "228",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Dynamic Routes in Next.js and how do they work?",
    "answer": "Dynamic Routes allow creating pages with variable paths (like [id].js). The parameter is available in the router query object and during getStaticProps/getServerSideProps for data fetching based on the route."
  },
  {
    "id": "229",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a design system with Tailwind CSS?",
    "answer": "Define a comprehensive theme in tailwind.config.js with colors, typography, spacing, etc. Create reusable component templates. Use plugins for custom utilities. Document with Storybook or similar, and enforce consistency with linting rules."
  },
  {
    "id": "230",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how do they differ from pseudo-classes?",
    "answer": "Pseudo-elements (::before, ::first-line) style specific parts of an element or generate content. Pseudo-classes (:hover, :nth-child()) style elements based on state or position. Pseudo-elements create virtual elements, pseudo-classes select existing ones in specific states."
  },
  {
    "id": "231",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Temporal API in JavaScript?",
    "answer": "The Temporal API is a new proposal for better date/time handling in JavaScript. It provides immutable objects for dates, times, and durations, with better timezone support, arithmetic operations, and parsing/formatting capabilities than the Date object."
  },
  {
    "id": "232",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "ARIA (Accessible Rich Internet Applications) attributes provide semantic information to assistive technologies. They're crucial for accessibility when native HTML semantics aren't sufficient, helping screen readers understand dynamic content and UI controls."
  },
  {
    "id": "233",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are declaration files (.d.ts) in TypeScript?",
    "answer": "Declaration files provide type information for existing JavaScript code. They contain type declarations but no implementations, allowing TypeScript to understand the shape of JavaScript libraries without changing the original code."
  },
  {
    "id": "234",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Define maps with $map: (key: value, ...). Access values with map-get($map, key). Use @each to iterate: @each $key, $value in $map { ... }. Maps are useful for theme variables, breakpoints, or any key-value data."
  },
  {
    "id": "235",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to match a hexadecimal color code?",
    "answer": "Pattern: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/. Matches # followed by 3 or 6 hex digits. For strict CSS colors (no shorthand): /^#([A-Fa-f0-9]{3}){1,2}$/. Add word boundaries if needed: /\\b#[A-Fa-f0-9]{3,6}\\b/"
  },
  {
    "id": "236",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How do you handle database indexing with Prisma?",
    "answer": "Define indexes in your Prisma schema using the @@index attribute on models. For complex indexes or full-text search, you may need to use raw SQL in migrations. Prisma also supports defining unique constraints with @@unique."
  },
  {
    "id": "237",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle full-text search?",
    "answer": "Drizzle provides SQL functions that can be used for full-text search, like to_tsvector and to_tsquery in PostgreSQL. You can write raw SQL queries with these functions or create helper functions that abstract the search implementation."
  },
  {
    "id": "238",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "What is the purpose of the '_app.js' file in Next.js?",
    "answer": "The '_app.js' file is used to initialize pages and override it to control page initialization. It allows you to persist layout between page changes, keep state when navigating pages, and inject additional data into pages."
  },
  {
    "id": "239",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle automatic code splitting?",
    "answer": "Next.js automatically code splits by pages - each page in the 'pages' directory becomes a separate bundle. It also supports dynamic imports for component-level code splitting using 'next/dynamic'."
  },
  {
    "id": "240",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how Next.js implements hybrid static & server rendering",
    "answer": "Next.js allows pages to choose their rendering method: Static Generation (SSG) at build time, Server-side Rendering (SSR) per request, or client-side rendering. This hybrid approach lets developers optimize each page based on its needs."
  },
  {
    "id": "241",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/head' component?",
    "answer": "The 'next/head' component allows you to append elements to the head of the HTML document. It's commonly used to set page titles, meta tags, links, and other head elements that need to change between pages."
  },
  {
    "id": "242",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you create a dynamic route in Next.js?",
    "answer": "Create a file with square brackets like '[id].js' in the pages directory. The parameter will be available in the router query object and in getStaticProps/getServerSideProps context."
  },
  {
    "id": "243",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is 'getStaticPaths' and when would you use it?",
    "answer": "'getStaticPaths' is used with 'getStaticProps' for dynamic routes to specify which paths should be pre-rendered at build time. It returns an object with 'paths' (which paths to render) and 'fallback' (how to handle paths not generated at build time)."
  },
  {
    "id": "244",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle CSS and Sass support?",
    "answer": "Next.js has built-in support for CSS modules (file.module.css) and Sass (.scss/.sass). You can also use global styles by importing CSS files in '_app.js'. For Sass support, you need to install 'sass' package."
  },
  {
    "id": "245",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next.config.js' file?",
    "answer": "The 'next.config.js' file is used to customize advanced Next.js behavior. You can configure redirects, rewrites, environment variables, webpack modifications, internationalization, and other framework settings."
  },
  {
    "id": "246",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you add environment variables in Next.js?",
    "answer": "Create a '.env.local' file in your project root and prefix variables with 'NEXT_PUBLIC_' to expose them to the browser. For server-only variables, omit the prefix and access them in API routes or getServerSideProps."
  },
  {
    "id": "247",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how Next.js handles automatic static optimization",
    "answer": "Next.js automatically determines if a page can be prerendered to static HTML by checking if it has blocking data requirements (getServerSideProps/getInitialProps). Pages without these are automatically optimized as static HTML."
  },
  {
    "id": "248",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between 'getServerSideProps' and 'getStaticProps'?",
    "answer": "'getServerSideProps' runs on every request and provides fresh data (SSR), while 'getStaticProps' runs at build time to generate static pages (SSG). Use the former for frequently updated data, the latter for better performance."
  },
  {
    "id": "249",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement internationalization (i18n) in Next.js?",
    "answer": "Next.js has built-in i18n routing support configured in 'next.config.js'. Define locales, default locale, and routing strategy (sub-path, domain, or hybrid). Use 'next/router' to handle locale switching and localized routing."
  },
  {
    "id": "250",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle API routes middleware?",
    "answer": "API routes can use external middleware like 'micro' or 'connect'. For built-in solutions, you can create higher-order functions that wrap handlers to implement middleware logic like authentication, logging, or CORS."
  },
  {
    "id": "251",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of '_document.js' file?",
    "answer": "'_document.js' allows you to customize the entire HTML document structure. It's rendered only on the server and used to change the initial server-side rendered document markup, like adding lang attribute or third-party scripts."
  },
  {
    "id": "252",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you handle 404 pages in Next.js?",
    "answer": "Create a '404.js' file in the pages directory. Next.js will automatically use this as the 404 page. For custom 404s in getStaticPaths, return 'notFound: true' from getStaticProps."
  },
  {
    "id": "253",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement authentication in Next.js",
    "answer": "Common approaches include: using NextAuth.js for built-in auth, JWT tokens with API routes, session cookies with getServerSideProps, or third-party providers. Consider SSR for protected routes to prevent flash of unprotected content."
  },
  {
    "id": "254",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using Next.js Image component?",
    "answer": "The Image component provides automatic image optimization (resizing, format conversion), lazy loading, and responsive images. It improves performance by serving correctly sized images for each device and using modern formats like WebP."
  },
  {
    "id": "255",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you create a custom error page in Next.js?",
    "answer": "Create '_error.js' in the pages directory to override the default error page. It receives statusCode and err props. You can also create specific error pages like '500.js' for server errors."
  },
  {
    "id": "256",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement A/B testing in Next.js?",
    "answer": "Approaches include: using middleware to assign variants, feature flags in getServerSideProps, client-side variant selection with cookies, or edge functions for instant rollouts. Consider SSR for consistent variant assignment."
  },
  {
    "id": "257",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/script' component?",
    "answer": "The 'next/script' component optimizes loading of third-party scripts. It provides strategies like 'beforeInteractive' (before page is interactive), 'afterInteractive' (default, after hydration), and 'lazyOnload' (during idle time)."
  },
  {
    "id": "258",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you add analytics to a Next.js application?",
    "answer": "Common approaches: use 'next/script' to load analytics scripts, implement tracking in '_app.js', use API routes to proxy analytics requests, or leverage Next.js middleware for edge analytics."
  },
  {
    "id": "259",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement GraphQL in Next.js",
    "answer": "Options include: Apollo Client with SSR support, URQL, or direct GraphQL requests in getServerSideProps/getStaticProps. For API routes, you can implement a GraphQL server using libraries like graphql-js or Apollo Server."
  },
  {
    "id": "260",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of API routes in Next.js?",
    "answer": "API routes have a 10MB payload limit, timeout after 10s on Vercel, can't use getStaticProps/getServerSideProps, and are designed for serverless functions. For complex backends, consider a separate server or middleware."
  },
  {
    "id": "261",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement redirects in Next.js?",
    "answer": "Configure redirects in 'next.config.js' for simple cases. For dynamic redirects, use 'res.redirect()' in API routes or getServerSideProps. Client-side redirects can use 'router.push()'."
  },
  {
    "id": "262",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you optimize a large Next.js application?",
    "answer": "Strategies include: code splitting with dynamic imports, optimizing images, using ISR, implementing caching headers, reducing bundle size with tree-shaking, enabling compression, and using CDN for static assets."
  },
  {
    "id": "263",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/link' component?",
    "answer": "'next/link' enables client-side navigation between pages, prefetching linked pages in the background. It wraps anchor tags and provides SPA-like navigation without full page reloads while maintaining SEO benefits."
  },
  {
    "id": "264",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you handle forms in Next.js?",
    "answer": "Options include: standard HTML forms with API route handlers, client-side libraries like React Hook Form, or server-side handling with getServerSideProps. Consider CSR for complex forms, SSR for progressive enhancement."
  },
  {
    "id": "265",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement real-time features in Next.js",
    "answer": "Use WebSocket connections (via API routes), Server-Sent Events, or third-party services like Firebase, Pusher, or Ably. For frequent updates, consider SWR or React Query with fast refresh rates."
  },
  {
    "id": "266",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the security best practices for Next.js applications?",
    "answer": "Key practices: sanitize user input, use CSP headers, implement proper authentication, validate API responses, secure environment variables, use HTTPS, limit API route exposure, and keep dependencies updated."
  },
  {
    "id": "267",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement cookies in Next.js?",
    "answer": "Use the 'cookies' package or 'cookie' library in API routes or getServerSideProps. For client-side, use js-cookie or document.cookie. Consider httpOnly flags for secure cookies."
  },
  {
    "id": "268",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a multi-tenant SaaS application in Next.js?",
    "answer": "Approaches include: dynamic routing for tenants, database-level isolation, middleware for tenant resolution, feature flags, and tenant-specific configurations. Consider ISR for public tenant pages and SSR for private content."
  },
  {
    "id": "269",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/dynamic'?",
    "answer": "'next/dynamic' enables component-level code splitting by dynamically importing components. It helps reduce initial bundle size by loading components only when needed. Supports loading states via the 'loading' property."
  },
  {
    "id": "270",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement pagination in Next.js?",
    "answer": "Options include: query parameters for page numbers, infinite scroll with SWR, or cursor-based pagination. For SSG, use getStaticPaths with paginated paths. For SSR, handle in getServerSideProps."
  },
  {
    "id": "271",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a headless CMS with Next.js",
    "answer": "Fetch content via the CMS API in getStaticProps/getServerSideProps. Use ISR for content updates. For preview mode, implement API routes to handle draft content. Consider using webhooks for rebuild triggers."
  },
  {
    "id": "272",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using Next.js middleware?",
    "answer": "Middleware runs before cached content, enabling: A/B testing, authentication, bot detection, geolocation-based redirects, logging, and feature flags at the edge. It executes close to users for low latency."
  },
  {
    "id": "273",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a sitemap in Next.js?",
    "answer": "Options: generate dynamically via API route, create static 'sitemap.xml' in public folder, or use 'next-sitemap' package. For dynamic routes, include all paths from getStaticPaths or database queries."
  },
  {
    "id": "274",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a custom server with Next.js?",
    "answer": "Create a 'server.js' file using Express, Fastify, etc., and customize the request handling. However, this loses automatic static optimization and is discouraged unless necessary for specific server-side requirements."
  },
  {
    "id": "275",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/router'?",
    "answer": "'next/router' provides programmatic navigation and route information. It allows accessing query parameters, listening to route changes, and navigating between pages programmatically with methods like push, replace, and prefetch."
  },
  {
    "id": "276",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a loading indicator between page transitions?",
    "answer": "Use 'next/router' events ('routeChangeStart', 'routeChangeComplete') to track navigation state. Display a loading component in '_app.js' based on this state. Libraries like 'nprogress' provide stylish progress bars."
  },
  {
    "id": "277",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement WebSockets in Next.js",
    "answer": "Create a WebSocket server in an API route or separate server. On client-side, connect to the WebSocket in useEffect. For production, consider services like Pusher or Socket.IO with Redis for scaling across multiple servers."
  },
  {
    "id": "278",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the deployment options for Next.js applications?",
    "answer": "Options include: Vercel (optimized for Next.js), Node.js servers, Docker containers, static exports, serverless platforms (AWS Lambda, Netlify), and edge networks. Choose based on your rendering strategy and scalability needs."
  },
  {
    "id": "279",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a custom 500 error page?",
    "answer": "Create a '500.js' file in the pages directory. It will be used for server-side errors. You can customize the design and add helpful information like contact details or a way to report the error."
  },
  {
    "id": "280",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a multi-language blog in Next.js?",
    "answer": "Use Next.js i18n routing for language detection and URL structure. Store content in markdown files or CMS with language fields. Use 'next-mdx-remote' for MDX content. Implement language switcher with 'next/router'."
  },
  {
    "id": "281",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/amp'?",
    "answer": "'next/amp' helps create AMP (Accelerated Mobile Pages) versions of your pages. It provides components and configuration to ensure AMP compatibility. You can create hybrid pages that work in both regular and AMP modes."
  },
  {
    "id": "282",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a contact form in Next.js?",
    "answer": "Create a form component with client-side validation. Handle submission via an API route that processes the data (sends email, saves to database). Consider using libraries like React Hook Form for form management."
  },
  {
    "id": "283",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a shopping cart in Next.js",
    "answer": "Options include: client-side state (context/Redux), cookies for persistence, API routes for server-side cart management. For SSR, use getServerSideProps to fetch cart data. Consider optimistic UI updates for better UX."
  },
  {
    "id": "284",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using SWR with Next.js?",
    "answer": "SWR provides client-side data fetching with caching, revalidation, focus tracking, and error handling. It complements Next.js SSR/SSG by handling client-side updates, reducing boilerplate for data fetching."
  },
  {
    "id": "285",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a dark mode toggle in Next.js?",
    "answer": "Use a context/provider to manage theme state. Store preference in localStorage. Apply dark classes to HTML element. For SSR, detect preference in getServerSideProps or use a CSS-only approach with prefers-color-scheme."
  },
  {
    "id": "286",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time dashboard in Next.js?",
    "answer": "Use WebSockets or Server-Sent Events for real-time updates. Implement client-side state management (SWR/React Query) with fast refresh rates. Consider ISR for initial data with client-side updates for fresh data."
  },
  {
    "id": "287",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-compose-plugins'?",
    "answer": "'next-compose-plugins' simplifies using multiple Next.js plugins together. It provides a clean way to compose plugin configurations without nested syntax, making the 'next.config.js' file more readable and maintainable."
  },
  {
    "id": "288",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a blog with Next.js?",
    "answer": "Options include: Markdown/MDX files in your project, headless CMS, or database content. Use getStaticPaths/getStaticProps for SSG. Implement dynamic routes for blog posts. Consider 'next-mdx-remote' for MDX content."
  },
  {
    "id": "289",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a search feature in Next.js",
    "answer": "Options: client-side filtering for small datasets, API route with database query, or third-party search service (Algolia, Elasticsearch). For SSR, handle in getServerSideProps. Consider debouncing input for performance."
  },
  {
    "id": "290",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of static export in Next.js?",
    "answer": "Static export doesn't support: API routes, getServerSideProps, rewrites/redirects, i18n routing, or fallback: true in getStaticPaths. It's best for fully static sites without server-side functionality."
  },
  {
    "id": "291",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a dropdown menu in Next.js?",
    "answer": "Create a component with state for open/closed. Use CSS for styling and transitions. Handle outside clicks to close. For accessibility, manage focus and ARIA attributes. Consider libraries like HeadlessUI for complex cases."
  },
  {
    "id": "292",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a payment system in Next.js?",
    "answer": "Integrate with Stripe, PayPal, etc. using their SDKs. Handle sensitive operations in API routes. Use webhooks for payment confirmation. Implement SSR for checkout pages to prevent client-side manipulation of prices."
  },
  {
    "id": "293",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-connect'?",
    "answer": "'next-connect' is a router/middleware for Next.js API routes, inspired by Express.js. It provides a familiar middleware pattern, route handlers, and error handling, making API route organization more structured and maintainable."
  },
  {
    "id": "294",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a modal in Next.js?",
    "answer": "Create a portal component that renders outside the main DOM hierarchy. Manage open/close state with context or props. Ensure proper focus management and ARIA attributes for accessibility. Consider libraries like React Modal."
  },
  {
    "id": "295",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time chat in Next.js",
    "answer": "Use WebSockets via API routes or services like Pusher/Socket.IO. Implement message persistence in a database. For UI, consider optimistic updates. Handle online status with heartbeat checks. Implement proper auth for private chats."
  },
  {
    "id": "296",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-seo'?",
    "answer": "'next-seo' simplifies managing SEO metadata in Next.js. It provides components for common SEO tags, JSON-LD structured data, and default configurations. Helps ensure consistent and optimized SEO across your application."
  },
  {
    "id": "297",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a carousel in Next.js?",
    "answer": "Options include: building a custom component with React state, using libraries like 'embla-carousel', or CSS-only solutions. Ensure responsive design and accessibility with proper ARIA attributes and keyboard navigation."
  },
  {
    "id": "298",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a video streaming platform in Next.js?",
    "answer": "Use API routes for video metadata. Implement adaptive streaming (HLS/DASH) with services like Mux or AWS Media Services. For UI, consider custom controls with 'react-player'. Implement caching for thumbnails and metadata."
  },
  {
    "id": "299",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-pwa'?",
    "answer": "'next-pwa' simplifies adding PWA (Progressive Web App) capabilities to Next.js. It handles service worker generation, offline support, and manifest configuration. Helps make your Next.js app installable and work offline."
  },
  {
    "id": "300",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a toast notification system in Next.js?",
    "answer": "Create a context/provider to manage notifications. Render toasts in a portal at app root. Implement different types (success, error) with auto-dismissal. Consider libraries like 'react-hot-toast' for pre-built solutions."
  },
  {
    "id": "301",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time collaborative editor in Next.js",
    "answer": "Use WebSockets or services like Firebase, Ably for real-time sync. Implement operational transformation or CRDTs for conflict resolution. Use contenteditable or libraries like Slate.js for the editor. Handle presence with heartbeat checks."
  },
  {
    "id": "302",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-i18next'?",
    "answer": "'next-i18next' provides advanced i18n features for Next.js including: namespaced translations, pluralization, context, formatting, and efficient loading of translation files. It builds on Next.js i18n routing with more localization features."
  },
  {
    "id": "303",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a tooltip in Next.js?",
    "answer": "Create a component that shows on hover/focus. Position with CSS or libraries like Popper.js. Ensure accessibility with ARIA attributes. Consider delay for hover intent. For complex cases, use libraries like Tippy.js."
  },
  {
    "id": "304",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time multiplayer game in Next.js?",
    "answer": "Use WebSockets for game state sync. Implement client-side prediction and server reconciliation. Handle matchmaking via API routes. Use requestAnimationFrame for smooth animations. Consider game engines like Phaser for complex games."
  },
  {
    "id": "305",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-sitemap'?",
    "answer": "'next-sitemap' automates sitemap generation for Next.js apps. It handles dynamic routes from getStaticPaths, creates sitemap index files for large sites, and can automatically update sitemaps when content changes."
  },
  {
    "id": "306",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a loading skeleton in Next.js?",
    "answer": "Create placeholder components that mimic content structure. Show while data is loading (use SWR's isLoading or custom state). Animate with CSS for better perceived performance. Consider libraries like 'react-loading-skeleton'."
  },
  {
    "id": "307",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a voice search feature in Next.js",
    "answer": "Use the Web Speech API for voice recognition. Handle permissions and fallbacks for unsupported browsers. Process voice input in API routes for complex queries. Provide visual feedback during speech input."
  },
  {
    "id": "308",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-auth'?",
    "answer": "'next-auth' provides complete authentication for Next.js with: built-in providers (OAuth, email), JWT & session management, CSRF protection, and database adapters. Simplifies implementing secure auth without writing boilerplate."
  },
  {
    "id": "309",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a responsive table in Next.js?",
    "answer": "Options: horizontal scroll for small screens, stack columns on mobile, or hide less important columns. Use CSS media queries. Consider libraries like 'react-table' for complex cases with sorting/pagination."
  },
  {
    "id": "310",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a virtualized list in Next.js?",
    "answer": "Use libraries like 'react-window' or 'react-virtualized' that render only visible items. Implement proper item sizing and dynamic measurement. Consider intersection observers for infinite loading with getServerSideProps."
  },
  {
    "id": "311",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-bundle-analyzer'?",
    "answer": "'next-bundle-analyzer' visualizes the size of webpack output files. It helps identify large dependencies, duplicate code, and optimization opportunities. Run during build to analyze and optimize your bundle size."
  },
  {
    "id": "312",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a date picker in Next.js?",
    "answer": "Use libraries like 'react-datepicker' or 'react-day-picker'. Handle timezones properly if needed. For accessibility, ensure proper labeling and keyboard navigation. Style to match your design system."
  },
  {
    "id": "313",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time stock market dashboard in Next.js",
    "answer": "Use WebSocket connections to market data APIs. Implement efficient data updates with windowing for large datasets. Use visualization libraries like Chart.js. Cache historical data in getStaticProps with ISR for updates."
  },
  {
    "id": "314",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-mdx-remote'?",
    "answer": "'next-mdx-remote' allows MDX content to be loaded from anywhere (CMS, database, filesystem). It supports frontmatter, custom components, and efficient hydration. Useful for blogs, docs, and content-heavy sites."
  },
  {
    "id": "315",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a color picker in Next.js?",
    "answer": "Use libraries like 'react-colorful' or native input[type=color]. Handle color conversions if needed. Provide accessible labels and output formats. Consider integrating with your design system's color palette."
  },
  {
    "id": "316",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time collaborative whiteboard in Next.js?",
    "answer": "Use WebSocket connections for drawing data. Implement operational transformation for conflict resolution. Use Canvas API or libraries like Konva.js for rendering. Handle presence with heartbeat checks. Optimize data transfer with throttling."
  },
  {
    "id": "317",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-fonts'?",
    "answer": "'next-fonts' optimizes font loading in Next.js. It automatically generates required @font-face CSS, preloads fonts, and can self-host font files. Helps avoid layout shifts and improves performance metrics like LCP."
  },
  {
    "id": "318",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a file upload in Next.js?",
    "answer": "Create a form with input[type=file]. Handle submission in an API route using 'multer' or similar. Show upload progress. Validate file types/sizes. Store files in cloud storage or filesystem with proper security."
  },
  {
    "id": "319",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time sports scoreboard in Next.js",
    "answer": "Use WebSocket connections to score data APIs. Implement efficient updates with batched re-renders. Use animation for score changes. Cache historical data in getStaticProps with ISR. Consider server push for critical updates."
  },
  {
    "id": "320",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-optimized-images'?",
    "answer": "'next-optimized-images' automatically optimizes images during build. Features include: format conversion (WebP), resizing, lazy loading, and placeholders. Reduces image size without manual optimization while maintaining quality."
  },
  {
    "id": "321",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a rating component in Next.js?",
    "answer": "Create interactive stars or other visual elements. Manage hover/selection state. Handle submission via API route if needed. Ensure accessibility with ARIA attributes. Consider libraries like 'react-rating' for advanced features."
  },
  {
    "id": "322",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time auction platform in Next.js?",
    "answer": "Use WebSockets for bid updates. Implement server-side validation for bids. Handle concurrency with optimistic UI updates. Use timers for auction end. Implement SSR for critical auction data to prevent manipulation."
  },
  {
    "id": "323",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-redux-wrapper'?",
    "answer": "'next-redux-wrapper' simplifies using Redux with Next.js. It handles store creation for each request, proper hydration between server and client, and integration with Next.js data fetching methods."
  },
  {
    "id": "324",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a tab component in Next.js?",
    "answer": "Manage active tab state. Handle keyboard navigation for accessibility. Style active tab distinctly. Consider URL integration for bookmarkable tabs. For complex cases, use libraries like 'react-tabs'."
  },
  {
    "id": "325",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time traffic monitoring dashboard in Next.js",
    "answer": "Use WebSocket connections to traffic data APIs. Implement efficient data updates with visualization libraries like D3.js. Handle large datasets with windowing. Cache historical data in getStaticProps with ISR."
  },
  {
    "id": "326",
    "category": "react",
    "difficulty": "easy",
    "question": "What is JSX in React?",
    "answer": "JSX stands for JavaScript XML. It allows you to write HTML-like syntax in JavaScript, which gets transformed to React.createElement calls by tools like Babel."
  },
  {
    "id": "327",
    "category": "react",
    "difficulty": "medium",
    "question": "How does the virtual DOM improve performance in React?",
    "answer": "The virtual DOM minimizes real DOM manipulations. React compares virtual DOM trees and batches the necessary updates to apply the least amount of real DOM changes."
  },
  {
    "id": "328",
    "category": "react",
    "difficulty": "easy",
    "question": "What are controlled components in React?",
    "answer": "Controlled components are form elements that derive their values from React state. Their updates are handled via onChange and setState."
  },
  {
    "id": "329",
    "category": "react",
    "difficulty": "medium",
    "question": "Explain the difference between state and props in React.",
    "answer": "Props are read-only data passed from parent to child. State is mutable and controlled by the component itself to manage internal data."
  },
  {
    "id": "330",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you implement a custom hook for form validation?",
    "answer": "Create a function like useFormValidation that tracks field values, errors, and handles validation rules. Return state, error messages, and onChange handlers."
  },
  {
    "id": "331",
    "category": "react",
    "difficulty": "medium",
    "question": "What is useMemo used for?",
    "answer": "useMemo memoizes a computed value between renders to prevent expensive recalculations unless its dependencies change."
  },
  {
    "id": "332",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain reconciliation in React.",
    "answer": "Reconciliation is the diffing algorithm React uses to compare previous and next virtual DOM trees. It updates only the parts of the DOM that changed."
  },
  {
    "id": "333",
    "category": "react",
    "difficulty": "easy",
    "question": "What does useEffect do?",
    "answer": "useEffect runs side-effects in functional components, such as data fetching, subscriptions, and manual DOM updates."
  },
  {
    "id": "334",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between useEffect and useCallback?",
    "answer": "useEffect runs a side effect after render. useCallback returns a memoized version of a function to prevent unnecessary re-creations."
  },
  {
    "id": "335",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you optimize a large list rendering in React?",
    "answer": "Use virtualization libraries like react-window or react-virtualized. Avoid unnecessary re-renders with memo and key optimizations."
  },
  {
    "id": "336",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of keys in a list?",
    "answer": "Keys help React identify which items changed, were added, or removed, enabling efficient re-rendering of lists."
  },
  {
    "id": "337",
    "category": "react",
    "difficulty": "medium",
    "question": "What is prop drilling and how do you avoid it?",
    "answer": "Prop drilling is passing props through intermediate components unnecessarily. It can be avoided using context or state management libraries."
  },
  {
    "id": "338",
    "category": "react",
    "difficulty": "hard",
    "question": "How does React batch updates internally?",
    "answer": "React batches multiple state updates into a single render pass in events and lifecycle methods using an internal queue."
  },
  {
    "id": "339",
    "category": "react",
    "difficulty": "medium",
    "question": "When should you use React.memo?",
    "answer": "Use React.memo to memoize functional components and prevent re-rendering when props haven't changed."
  },
  {
    "id": "340",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain concurrent rendering in React.",
    "answer": "Concurrent rendering allows React to interrupt rendering tasks to keep the UI responsive. It works with features like startTransition and Suspense."
  },
  {
    "id": "341",
    "category": "react",
    "difficulty": "medium",
    "question": "What is context in React?",
    "answer": "React Context provides a way to pass data through the component tree without passing props manually at every level."
  },
  {
    "id": "342",
    "category": "react",
    "difficulty": "hard",
    "question": "How does Suspense work in React?",
    "answer": "Suspense lets you wait for something before rendering, like lazy-loaded components or asynchronous data. It shows fallback content during the wait."
  },
  {
    "id": "343",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of defaultProps?",
    "answer": "defaultProps allows you to set default values for props that aren't explicitly provided by the parent component."
  },
  {
    "id": "344",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between class and functional components?",
    "answer": "Class components use ES6 classes and lifecycle methods. Functional components are simpler and can use hooks for state and effects."
  },
  {
    "id": "345",
    "category": "react",
    "difficulty": "hard",
    "question": "How does React Fiber improve rendering?",
    "answer": "React Fiber is a reimplementation of the React core that enables incremental rendering, concurrency, and improved scheduling."
  },
  {
  "id": "346",
  "category": "react",
  "difficulty": "easy",
  "question": "What is the purpose of the useState hook? (variant 1)",
  "answer": "useState lets you add state to functional components and returns a pair: the current state value and a function that updates it."
},
{
  "id": "347",
  "category": "react",
  "difficulty": "medium",
  "question": "What is the Context API and when should you use it? (variant 1)",
  "answer": "The Context API is a way to pass data through the component tree without prop drilling. It's useful for global data like themes or authentication."
},
{
  "id": "348",
  "category": "react",
  "difficulty": "hard",
  "question": "Explain how React handles asynchronous state updates. (variant 1)",
  "answer": "React batches multiple setState calls for performance. Updates may not happen immediately, and you should avoid relying on current state directly in updates."
},
{
  "id": "349",
  "category": "react",
  "difficulty": "medium",
  "question": "How does useEffect cleanup work? (variant 1)",
  "answer": "The function returned from useEffect runs during cleanup, like before a component unmounts or before re-running the effect."
},
{
  "id": "350",
  "category": "react",
  "difficulty": "easy",
  "question": "How do you conditionally apply classes in React? (variant 1)",
  "answer": "You can use template literals or libraries like clsx or classnames to apply classes based on conditions."
},
  {
    "id": "351",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between useEffect and useLayoutEffect? (variant 1)",
    "answer": "useEffect runs after painting the screen; useLayoutEffect runs before painting, useful for measuring DOM changes or avoiding flickers."
  },
  {
    "id": "352",
    "category": "react",
    "difficulty": "hard",
    "question": "What are React Fiber’s key design goals? (variant 1)",
    "answer": "React Fiber improves rendering by allowing incremental rendering, prioritization, and better handling of asynchronous rendering."
  },
  {
    "id": "353",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a functional component? (variant 1)",
    "answer": "A functional component is a plain JavaScript function that returns JSX. It can use hooks to manage state and side effects."
  },
  {
    "id": "354",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between mounting and unmounting in React? (variant 1)",
    "answer": "Mounting is when a component is inserted into the DOM. Unmounting is when it’s removed. React lifecycle or useEffect helps handle these phases."
  },
  {
    "id": "355",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you prevent unnecessary re-renders in deeply nested components? (variant 1)",
    "answer": "Use React.memo, useCallback, and Context wisely. Ensure props don't change unless needed, and avoid inline functions or objects when possible."
  },
  {
    "id": "356",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of the useState hook? (variant 2)",
    "answer": "useState lets you add state to functional components and returns a pair: the current state value and a function that updates it."
  },
  {
    "id": "357",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API and when should you use it? (variant 2)",
    "answer": "The Context API is a way to pass data through the component tree without prop drilling. It's useful for global data like themes or authentication."
  },
  {
    "id": "358",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles asynchronous state updates. (variant 2)",
    "answer": "React batches multiple setState calls for performance. Updates may not happen immediately, and you should avoid relying on current state directly in updates."
  },
  {
    "id": "359",
    "category": "react",
    "difficulty": "medium",
    "question": "How does useEffect cleanup work? (variant 2)",
    "answer": "The function returned from useEffect runs during cleanup, like before a component unmounts or before re-running the effect."
  },
  {
    "id": "360",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally apply classes in React? (variant 2)",
    "answer": "You can use template literals or libraries like clsx or classnames to apply classes based on conditions."
  },
  {
    "id": "361",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between useEffect and useLayoutEffect? (variant 2)",
    "answer": "useEffect runs after painting the screen; useLayoutEffect runs before painting, useful for measuring DOM changes or avoiding flickers."
  },
  {
    "id": "362",
    "category": "react",
    "difficulty": "hard",
    "question": "What are React Fiber’s key design goals? (variant 2)",
    "answer": "React Fiber improves rendering by allowing incremental rendering, prioritization, and better handling of asynchronous rendering."
  },
  {
    "id": "363",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a functional component? (variant 2)",
    "answer": "A functional component is a plain JavaScript function that returns JSX. It can use hooks to manage state and side effects."
  },
  {
    "id": "364",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between mounting and unmounting in React? (variant 2)",
    "answer": "Mounting is when a component is inserted into the DOM. Unmounting is when it’s removed. React lifecycle or useEffect helps handle these phases."
  },
  {
    "id": "365",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you prevent unnecessary re-renders in deeply nested components? (variant 2)",
    "answer": "Use React.memo, useCallback, and Context wisely. Ensure props don't change unless needed, and avoid inline functions or objects when possible."
  },
  {
    "id": "366",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the purpose of the useState hook? (variant 3)",
    "answer": "useState lets you add state to functional components and returns a pair: the current state value and a function that updates it."
  },
  {
    "id": "367",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API and when should you use it? (variant 3)",
    "answer": "The Context API is a way to pass data through the component tree without prop drilling. It's useful for global data like themes or authentication."
  },
  {
    "id": "368",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles asynchronous state updates. (variant 3)",
    "answer": "React batches multiple setState calls for performance. Updates may not happen immediately, and you should avoid relying on current state directly in updates."
  },
  {
    "id": "369",
    "category": "react",
    "difficulty": "medium",
    "question": "How does useEffect cleanup work? (variant 3)",
    "answer": "The function returned from useEffect runs during cleanup, like before a component unmounts or before re-running the effect."
  },
  {
    "id": "370",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally apply classes in React? (variant 3)",
    "answer": "You can use template literals or libraries like clsx or classnames to apply classes based on conditions."
  },
  {
  "id": "371",
  "category": "react",
  "difficulty": "easy",
  "question": "What are controlled and uncontrolled components in React?",
  "answer": "Controlled components are form elements whose values are controlled by React state. Uncontrolled components store their own state internally and use refs for access."
},
{
  "id": "372",
  "category": "react",
  "difficulty": "medium",
  "question": "When should you use useRef over useState?",
  "answer": "Use useRef when you need to persist a mutable value across renders without triggering a re-render. It’s great for DOM references or instance variables."
},
{
  "id": "373",
  "category": "react",
  "difficulty": "medium",
  "question": "How does React handle reconciliation?",
  "answer": "React uses the virtual DOM to compare the new element tree with the previous one and updates the DOM efficiently based on changes using a diffing algorithm."
},
{
  "id": "374",
  "category": "react",
  "difficulty": "hard",
  "question": "What is the purpose of key props in lists?",
  "answer": "Keys help React identify which items have changed, been added, or removed. They should be stable, predictable, and unique to avoid unnecessary re-renders."
},
{
  "id": "375",
  "category": "react",
  "difficulty": "easy",
  "question": "What does JSX stand for and how is it compiled?",
  "answer": "JSX stands for JavaScript XML. It’s syntactic sugar for React.createElement calls and is compiled using tools like Babel before reaching the browser."
},
{
  "id": "376",
  "category": "react",
  "difficulty": "medium",
  "question": "What are portals in React and when would you use them?",
  "answer": "Portals allow rendering children into a DOM node outside the parent component hierarchy. They’re useful for modals, tooltips, and overlays."
},
{
  "id": "377",
  "category": "react",
  "difficulty": "hard",
  "question": "What are higher-order components (HOCs)?",
  "answer": "A HOC is a function that takes a component and returns a new component. It’s used to reuse component logic like authentication or data fetching."
},
{
  "id": "378",
  "category": "react",
  "difficulty": "medium",
  "question": "How do you implement code-splitting in a React app?",
  "answer": "Use dynamic import() and React.lazy with Suspense to load components only when needed. This improves performance by reducing initial bundle size."
},
{
  "id": "379",
  "category": "react",
  "difficulty": "easy",
  "question": "What is prop drilling and how can it be avoided?",
  "answer": "Prop drilling is passing props through many layers. It can be avoided using the Context API, Redux, or other state management libraries."
},
{
  "id": "380",
  "category": "react",
  "difficulty": "medium",
  "question": "How do you memoize expensive functions in React?",
  "answer": "Use useMemo to memoize the result of a calculation and avoid re-executing it on every render unless dependencies change."
},
   {
    "id": "381",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the difference between React and ReactDOM?",
    "answer": "React provides the core functionality for building components, while ReactDOM handles rendering those components to the DOM in web applications."
  },
  {
    "id": "382",
    "category": "react",
    "difficulty": "medium",
    "question": "How does React batch state updates?",
    "answer": "React batches multiple setState calls into a single update for performance. This means state updates might not be applied immediately."
  },
  {
    "id": "383",
    "category": "react",
    "difficulty": "medium",
    "question": "What are synthetic events in React?",
    "answer": "Synthetic events are React’s wrapper around native browser events, ensuring consistent behavior across different browsers."
  },
  {
    "id": "384",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you optimize a React app with a large list of items?",
    "answer": "Use virtualization libraries like react-window or react-virtualized to render only visible items. Also, memoize components and avoid unnecessary re-renders."
  },
  {
    "id": "385",
    "category": "react",
    "difficulty": "easy",
    "question": "What is the difference between class and functional components?",
    "answer": "Class components use ES6 classes and can hold state and lifecycle methods. Functional components are simpler and rely on hooks for state and effects."
  },
  {
    "id": "386",
    "category": "react",
    "difficulty": "medium",
    "question": "What are hooks rules in React?",
    "answer": "Hooks should only be called at the top level of a functional component or custom hook. They must not be called conditionally or inside loops."
  },
  {
    "id": "387",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you share logic between React components?",
    "answer": "Use custom hooks or higher-order components to extract reusable logic across multiple components."
  },
  {
    "id": "388",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a fragment in React?",
    "answer": "A fragment allows grouping multiple elements without adding extra nodes to the DOM. Use <></> or <React.Fragment>."
  },
  {
    "id": "389",
    "category": "react",
    "difficulty": "hard",
    "question": "What is the difference between useCallback and useMemo?",
    "answer": "useCallback memoizes functions, while useMemo memoizes values returned from functions. Both help prevent unnecessary recalculations or re-renders."
  },
  {
    "id": "390",
    "category": "react",
    "difficulty": "medium",
    "question": "How does React detect changes to trigger re-renders?",
    "answer": "React re-renders when component state or props change. It compares the virtual DOM trees to determine minimal updates."
  },
  {
    "id": "391",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you handle forms in React?",
    "answer": "Use controlled components where form state is managed using useState, or use libraries like React Hook Form for complex cases."
  },
  {
    "id": "392",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between useReducer and useState?",
    "answer": "useReducer is better for complex state logic or multiple related values. useState is simpler and used for basic local state."
  },
  {
    "id": "393",
    "category": "react",
    "difficulty": "medium",
    "question": "How can you prevent props drilling in large applications?",
    "answer": "Use Context API or global state managers like Redux, Zustand, or Recoil to share state across deeply nested components."
  },
  {
    "id": "394",
    "category": "react",
    "difficulty": "hard",
    "question": "What’s reconciliation in React and how does it work?",
    "answer": "Reconciliation is the process where React compares the current virtual DOM with the previous one and calculates the minimal set of changes to update the real DOM."
  },
  {
    "id": "395",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React keys and why are they important?",
    "answer": "Keys identify list elements uniquely, allowing React to track and efficiently update individual components during re-renders."
  },
  {
    "id": "396",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you pass data from child to parent in React?",
    "answer": "Use a callback function passed as a prop from parent to child. The child calls it with the data to send it upward."
  },
  {
    "id": "397",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between lifting state up and using context?",
    "answer": "Lifting state up shares state between sibling components by moving it to their common parent. Context is better for sharing state across many levels of the component tree."
  },
  {
    "id": "398",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you test React components?",
    "answer": "Use libraries like React Testing Library or Enzyme for rendering and interaction. Jest is commonly used as the test runner and assertion library."
  },
  {
    "id": "399",
    "category": "react",
    "difficulty": "easy",
    "question": "What is PropTypes in React?",
    "answer": "PropTypes is a type-checking library for validating the types of props passed to components at runtime."
  },
  {
    "id": "400",
    "category": "react",
    "difficulty": "hard",
    "question": "How does React handle component state under the hood?",
    "answer": "React maintains a fiber tree with hooks state attached to each fiber. State updates trigger scheduling and reconciliation of affected fibers."
  },
  {
    "id": "401",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the difference between context and Redux?",
    "answer": "Context is built-in and best for low-frequency global state. Redux is more powerful and suited for complex apps with predictable state updates and middleware."
  },
  {
    "id": "402",
    "category": "react",
    "difficulty": "medium",
    "question": "What is suspense in React?",
    "answer": "Suspense lets you delay rendering part of the UI until a condition is met, often used with lazy loading or data fetching."
  },
  {
    "id": "403",
    "category": "react",
    "difficulty": "medium",
    "question": "What is Concurrent Mode in React?",
    "answer": "Concurrent Mode allows React to interrupt rendering to make apps more responsive. It helps with better scheduling and prioritization of UI updates."
  },
  {
    "id": "404",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain React’s render phase and commit phase.",
    "answer": "Render phase builds the virtual DOM and calculates changes. Commit phase applies changes to the real DOM and runs side-effects."
  },
  {
    "id": "405",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you conditionally render JSX in React?",
    "answer": "Use ternary operators, logical &&, or conditional functions to render different JSX based on state or props."
  },
  {
    "id": "406",
    "category": "react",
    "difficulty": "medium",
    "question": "What are error boundaries in React?",
    "answer": "Error boundaries are React components that catch JavaScript errors in child components and display a fallback UI instead of crashing the app."
  },
  {
    "id": "407",
    "category": "react",
    "difficulty": "medium",
    "question": "What is a controlled input element?",
    "answer": "A controlled input has its value managed by React state. Changes are handled via onChange and useState."
  },
  {
    "id": "408",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you implement a custom hook for API data fetching?",
    "answer": "Create a function using useEffect and useState that handles loading, error, and data. Return these from the hook for reuse across components."
  },
  {
    "id": "409",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you force a component to re-render in React?",
    "answer": "Update its state using useState or useReducer. You can also trigger a change in key or props to force re-rendering."
  },
  {
    "id": "410",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the role of keys in dynamic components?",
    "answer": "Keys help React identify which elements changed, added, or removed. This improves performance and avoids bugs during list rendering."
  },
  {
    "id": "411",
    "category": "react",
    "difficulty": "medium",
    "question": "Can you update props in a component?",
    "answer": "No. Props are read-only. To update them, the parent component must pass new values as props."
  },
  {
    "id": "412",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you bind event handlers in class components?",
    "answer": "Bind them in the constructor or use arrow functions to preserve the correct 'this' context."
  },
  {
    "id": "413",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the purpose of the key attribute in React lists?",
    "answer": "It gives each element a stable identity, helping React optimize updates and avoid bugs during reordering."
  },
  {
    "id": "414",
    "category": "react",
    "difficulty": "hard",
    "question": "What’s the difference between shallow rendering and full rendering in testing React?",
    "answer": "Shallow rendering tests only one level deep of a component tree; full rendering renders all children too, useful for integration testing."
  },
  {
    "id": "415",
    "category": "react",
    "difficulty": "medium",
    "question": "What is hydration in React?",
    "answer": "Hydration is the process of attaching event handlers to static HTML rendered on the server so it becomes interactive."
  },
  {
    "id": "416",
    "category": "react",
    "difficulty": "medium",
    "question": "How can you lazy load a component in React?",
    "answer": "Use React.lazy and Suspense to load a component only when it’s needed, improving initial load performance."
  },
  {
    "id": "417",
    "category": "react",
    "difficulty": "hard",
    "question": "What is useImperativeHandle and when would you use it?",
    "answer": "It allows customizing the instance value exposed when using ref in parent components. Useful for exposing controlled APIs from custom components."
  },
  {
    "id": "418",
    "category": "react",
    "difficulty": "easy",
    "question": "How do you handle button click events in React?",
    "answer": "Use the onClick prop and pass a callback function that handles the event logic."
  },
  {
    "id": "419",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React dev tools and what can you do with them?",
    "answer": "React DevTools is a browser extension that lets you inspect React component hierarchies, view props and state, and debug re-renders."
  },
  {
    "id": "420",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain how React handles fiber reconciliation differently than older versions.",
    "answer": "Fiber allows React to pause, abort, and restart work, enabling concurrency. It breaks rendering into units of work instead of synchronous blocking updates."
  },
  {
    "id": "421",
    "category": "react",
    "difficulty": "medium",
    "question": "What is useTransition in React?",
    "answer": "useTransition lets you mark certain updates as non-urgent, allowing React to keep the UI responsive by deferring slow updates."
  },
  {
    "id": "422",
    "category": "react",
    "difficulty": "medium",
    "question": "What are fallback UIs in Suspense?",
    "answer": "A fallback UI is shown while a component is loading (lazy or fetching). It's passed to the Suspense component’s fallback prop."
  },
  {
    "id": "423",
    "category": "react",
    "difficulty": "easy",
    "question": "What does 'lifting state up' mean?",
    "answer": "It means moving shared state to the closest common ancestor of components that need access to that state."
  },
  {
    "id": "424",
    "category": "react",
    "difficulty": "medium",
    "question": "What is an effect dependency array in useEffect?",
    "answer": "The array tells React when to re-run the effect. React compares previous and current values to determine if dependencies changed."
  },
  {
    "id": "425",
    "category": "react",
    "difficulty": "easy",
    "question": "What is a default prop in React?",
    "answer": "Default props provide fallback values for props when no value is passed from the parent component."
  },
  {
    "id": "426",
    "category": "react",
    "difficulty": "medium",
    "question": "What’s the difference between React and Preact?",
    "answer": "Preact is a lightweight alternative to React with the same API. It’s faster and smaller, but lacks some advanced features like Suspense."
  },
  {
    "id": "427",
    "category": "react",
    "difficulty": "hard",
    "question": "How would you handle focus management in complex forms?",
    "answer": "Use refs with useEffect to set focus. For accessibility, follow keyboard navigation patterns and ARIA roles."
  },
  {
    "id": "428",
    "category": "react",
    "difficulty": "medium",
    "question": "What are render props?",
    "answer": "Render props are a technique where a component uses a function prop to know what to render. It’s useful for sharing logic."
  },
  {
    "id": "429",
    "category": "react",
    "difficulty": "easy",
    "question": "What is children prop in React?",
    "answer": "children is a special prop that allows components to pass nested JSX elements as content from parent to child."
  },
  {
    "id": "430",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the virtual DOM?",
    "answer": "The virtual DOM is an in-memory representation of the real DOM. React uses it to compute minimal DOM updates for performance."
  },
  {
    "id": "431",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is Tailwind CSS?",
    "answer": "Tailwind is a utility-first CSS framework for rapidly building custom user interfaces without writing traditional CSS."
  },
  {
    "id": "432",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you install Tailwind CSS in a project?",
    "answer": "Use npm: `npm install -D tailwindcss`, then run `npx tailwindcss init` and configure the content paths and plugins."
  },
  {
    "id": "433",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the purpose of the `content` array in tailwind.config.js?",
    "answer": "It tells Tailwind which files to scan for class names, so unused styles can be purged in production."
  },
  {
    "id": "434",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply padding and margin in Tailwind?",
    "answer": "Use utility classes like `p-4`, `pt-2`, `m-4`, `mx-auto`, etc."
  },
  {
    "id": "435",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you create a responsive layout with Tailwind?",
    "answer": "Use responsive prefixes like `sm:`, `md:`, `lg:`, etc. Example: `text-sm md:text-lg`."
  },
  {
    "id": "436",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How can you customize the Tailwind design system?",
    "answer": "Extend or override the default theme in tailwind.config.js under the `theme` or `extend` keys."
  },
  {
    "id": "437",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What does `hover:` do in Tailwind?",
    "answer": "It applies the style on hover. Example: `hover:bg-blue-500` changes background on hover."
  },
  {
    "id": "438",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is JIT mode in Tailwind?",
    "answer": "Just-In-Time mode generates styles on-demand for only the classes you use, making builds faster and smaller."
  },
  {
    "id": "439",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you center a div horizontally in Tailwind?",
    "answer": "Use `mx-auto` and give it a width. Example: `w-1/2 mx-auto`."
  },
  {
    "id": "440",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class sets text to bold in Tailwind?",
    "answer": "`font-bold`"
  },
  {
    "id": "441",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you conditionally apply Tailwind classes in React?",
    "answer": "Use libraries like `clsx` or `classnames` to dynamically toggle classes based on state or props."
  },
  {
    "id": "442",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How can you make a custom utility class in Tailwind?",
    "answer": "Use the `addUtilities` function inside a plugin in tailwind.config.js."
  },
  {
    "id": "443",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What Tailwind class makes an element flex?",
    "answer": "`flex`"
  },
  {
    "id": "444",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you hide an element on mobile but show it on desktop?",
    "answer": "Use `hidden md:block`."
  },
  {
    "id": "445",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What does `prose` do in Tailwind?",
    "answer": "It’s a class from the typography plugin that applies sensible styles to HTML content like blog posts."
  },
  {
    "id": "446",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make text uppercase?",
    "answer": "`uppercase`"
  },
  {
    "id": "447",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `gap` and `space-x`?",
    "answer": "`gap` works in flex/grid layouts. `space-x` adds margin between siblings but not on the outer edges."
  },
  {
    "id": "448",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use Tailwind with dark mode?",
    "answer": "Enable `darkMode` in config (`media` or `class`) and use classes like `dark:bg-gray-800`."
  },
  {
    "id": "449",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use Tailwind with Next.js?",
    "answer": "Install Tailwind, configure PostCSS, add the content paths in `tailwind.config.js`, and import Tailwind in `globals.css`."
  },
  {
    "id": "450",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "What are important variants in Tailwind and how do you enable them?",
    "answer": "Variants like `hover`, `focus`, `disabled` etc. are enabled in the config under `variants` key. You can customize which utilities respond to which variants."
  },
  {
    "id": "451",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is the class for setting background color in Tailwind?",
    "answer": "`bg-*` (e.g. `bg-red-500`, `bg-blue-100`, etc.)"
  },
  {
    "id": "452",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are plugin utilities in Tailwind?",
    "answer": "They are custom functions that let you extend Tailwind’s functionality, like adding new components or utilities via the `plugin()` API."
  },
  {
    "id": "453",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply a border in Tailwind?",
    "answer": "`border`, `border-2`, `border-gray-300`, etc."
  },
  {
    "id": "454",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make a div full width?",
    "answer": "`w-full`"
  },
  {
    "id": "455",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make text center aligned?",
    "answer": "`text-center`"
  },
  {
    "id": "456",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle RTL with Tailwind?",
    "answer": "Use plugins like `tailwindcss-rtl` or manage direction styles manually with `ltr:` and `rtl:` variants."
  },
  {
    "id": "457",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add custom fonts in Tailwind?",
    "answer": "Extend the `fontFamily` key in the config and import the fonts via CSS or @import."
  },
  {
    "id": "458",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the `@apply` directive in Tailwind?",
    "answer": "It lets you compose utility classes inside CSS files or styled components. Example: `.btn { @apply px-4 py-2 bg-blue-500 }`."
  },
  {
    "id": "459",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make text italic in Tailwind?",
    "answer": "`italic`"
  },
  {
    "id": "460",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you round corners?",
    "answer": "Use `rounded`, `rounded-lg`, `rounded-full`, etc."
  },
  {
    "id": "461",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you enable line-clamp in Tailwind?",
    "answer": "Install the `@tailwindcss/line-clamp` plugin and use classes like `line-clamp-3`."
  },
  {
    "id": "462",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply shadow in Tailwind?",
    "answer": "`shadow`, `shadow-md`, `shadow-lg`, etc."
  },
  {
    "id": "463",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you set custom breakpoints?",
    "answer": "Extend the `screens` key in tailwind.config.js with your custom breakpoint names and values."
  },
  {
    "id": "464",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you control overflow in Tailwind?",
    "answer": "`overflow-hidden`, `overflow-scroll`, `overflow-auto`, etc."
  },
  {
    "id": "465",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does Tailwind handle responsive design compared to Bootstrap?",
    "answer": "Tailwind uses mobile-first utility classes that apply styles at breakpoints. Bootstrap uses a component-first approach with utility classes as optional."
  },
  {
    "id": "466",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How would you build a design system with Tailwind?",
    "answer": "Customize `tailwind.config.js` with your theme, components, spacing, typography, and create reusable UI patterns using utility classes."
  },
  {
    "id": "467",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `grid` and `flex` in Tailwind?",
    "answer": "`flex` is for 1D layouts (row or column), `grid` is for 2D layouts. Both use utility classes like `grid-cols-*`, `flex-row`, etc."
  },
  {
    "id": "468",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class do you use to make a background image cover the container?",
    "answer": "`bg-cover`"
  },
  {
    "id": "469",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make an element absolute positioned?",
    "answer": "`absolute`"
  },
  {
    "id": "470",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you make a sticky navbar in Tailwind?",
    "answer": "Use `sticky top-0 z-50` along with `bg-white` or your background color."
  },
  {
    "id": "471",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you define a custom color palette?",
    "answer": "Extend the `colors` object in tailwind.config.js under the `theme.extend` key."
  },
  {
    "id": "472",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is `z-index` utility in Tailwind?",
    "answer": "Use `z-0`, `z-10`, `z-50`, etc., to control stacking context."
  },
  {
    "id": "473",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make a button full width?",
    "answer": "`w-full`"
  },
  {
    "id": "474",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What’s the use of `aspect-ratio` plugin in Tailwind?",
    "answer": "It lets you set the aspect ratio of elements using `aspect-[value]` classes, e.g., `aspect-video`."
  },
  {
    "id": "475",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How would you structure a large-scale project with Tailwind and components?",
    "answer": "Use atomic design principles, component libraries like Shadcn or Headless UI, and extract common UI blocks into components or partials."
  },
  {
    "id": "476",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can you combine Tailwind with CSS Modules or Styled Components?",
    "answer": "Yes. Tailwind can be used inside classNames or combined with CSS-in-JS, though it’s often redundant."
  },
  {
    "id": "477",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `min-h-screen` and `h-screen`?",
    "answer": "`h-screen` sets exact height, `min-h-screen` ensures at least full viewport height, useful for layouts with overflow."
  },
  {
    "id": "478",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you set letter spacing in Tailwind?",
    "answer": "Use `tracking-*`, e.g., `tracking-wide`, `tracking-tighter`."
  },
  {
    "id": "479",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make an element rounded only on the top corners?",
    "answer": "`rounded-t-lg`, `rounded-tl`, `rounded-tr`"
  },
  {
    "id": "480",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you add transition effects?",
    "answer": "Use `transition`, `duration-300`, `ease-in-out`, and `hover:` states."
  },
  {
    "id": "481",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you customize the container width in Tailwind?",
    "answer": "Extend the `container` key in `theme` inside `tailwind.config.js` with custom widths for each breakpoint."
  },
  {
    "id": "482",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What Tailwind class would you use to make text truncate with an ellipsis?",
    "answer": "`truncate`"
  },
  {
    "id": "483",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle custom animations in Tailwind?",
    "answer": "Define keyframes and animations in `tailwind.config.js` under `extend.animation` and `extend.keyframes`."
  },
  {
    "id": "484",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply a gradient background in Tailwind?",
    "answer": "Use `bg-gradient-to-r`, `from-*`, `to-*` classes."
  },
  {
    "id": "485",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What does the `pointer-events-none` class do?",
    "answer": "It disables mouse events on the element, making it not interactive."
  },
  {
    "id": "486",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use the `space-y` utility?",
    "answer": "It adds vertical margin between child elements, e.g. `space-y-4`."
  },
  {
    "id": "487",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class would you use to make text bold and uppercase simultaneously?",
    "answer": "`font-bold uppercase`"
  },
  {
    "id": "488",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does Tailwind handle hover and focus states together?",
    "answer": "You can chain variants like `hover:focus:bg-blue-500` to apply styles on both states."
  },
  {
    "id": "489",
    "category": "tailwind",
    "difficulty": "hard",
    "question": "How would you create a responsive grid layout with Tailwind?",
    "answer": "Use `grid` and define columns per breakpoint using `grid-cols-*`, e.g. `grid-cols-1 sm:grid-cols-2 lg:grid-cols-4`."
  },
  {
    "id": "490",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you hide scrollbars in Tailwind?",
    "answer": "Use custom CSS or plugins since Tailwind doesn’t have built-in scrollbar utilities."
  },
  {
    "id": "491",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you optimize Tailwind CSS size in production?",
    "answer": "Configure PurgeCSS by specifying content paths to remove unused styles."
  },
  {
    "id": "492",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What is the Tailwind class to make a button full width but limited max width?",
    "answer": "`w-full max-w-xs` or any max-width utility."
  },
  {
    "id": "493",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you implement accessibility considerations using Tailwind?",
    "answer": "Use focus-visible states like `focus:outline-none focus:ring` and semantic HTML."
  },
  {
    "id": "494",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you apply box shadow only on hover?",
    "answer": "`hover:shadow-lg`"
  },
  {
    "id": "495",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Explain how to use `container` with responsive padding in Tailwind.",
    "answer": "`container` auto applies max-width; use padding utilities like `px-4 md:px-6` for horizontal padding."
  },
  {
    "id": "496",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `hidden` and `invisible` in Tailwind?",
    "answer": "`hidden` removes the element from layout; `invisible` makes it transparent but keeps its space."
  },
  {
    "id": "497",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you set the cursor style to pointer in Tailwind?",
    "answer": "`cursor-pointer`"
  },
  {
    "id": "498",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you extend Tailwind to support new font sizes?",
    "answer": "Add new sizes under `theme.extend.fontSize` in tailwind.config.js."
  },
  {
    "id": "499",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the purpose of `object-fit` utilities like `object-cover`?",
    "answer": "They control how images or videos fit inside their containers."
  },
  {
    "id": "500",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How to apply a ring (outline) to an element in Tailwind?",
    "answer": "`ring`, `ring-2`, `ring-blue-500` etc."
  },
  {
    "id": "501",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you control the stacking order with Tailwind?",
    "answer": "Use `z-*` classes like `z-10`, `z-20`, etc."
  },
  {
    "id": "502",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add focus-visible styles for accessibility in Tailwind?",
    "answer": "Use `focus-visible:outline-none focus-visible:ring` to only show outlines when keyboard focusing."
  },
  {
    "id": "503",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you make an element take full viewport height?",
    "answer": "`h-screen`"
  },
  {
    "id": "504",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you add a solid border with a specific color?",
    "answer": "`border border-red-500`"
  },
  {
    "id": "505",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the use of `divide-x` and `divide-y` classes?",
    "answer": "They add borders between child elements horizontally or vertically."
  },
  {
    "id": "506",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you make a flex container column direction in Tailwind?",
    "answer": "`flex flex-col`"
  },
  {
    "id": "507",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class controls letter case to lowercase?",
    "answer": "`lowercase`"
  },
  {
    "id": "508",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you set max-width for images responsively?",
    "answer": "Use `max-w-full` to prevent overflow and responsive sizing utilities."
  },
  {
    "id": "509",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you apply custom box shadows in Tailwind?",
    "answer": "Extend the `boxShadow` key in the config with custom shadow definitions."
  },
  {
    "id": "510",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you remove underline from links in Tailwind?",
    "answer": "`no-underline`"
  },
  {
    "id": "511",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to apply ring offset in Tailwind?",
    "answer": "Use `ring-offset-*` classes to add space between the element and ring."
  },
  {
    "id": "512",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you enable important utilities in Tailwind config?",
    "answer": "Set `important: true` or provide a selector string in the tailwind.config.js."
  },
  {
    "id": "513",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How do you set minimum width in Tailwind?",
    "answer": "`min-w-*` classes like `min-w-full` or `min-w-0`."
  },
  {
    "id": "514",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to customize transition timing functions in Tailwind?",
    "answer": "Extend the `transitionTimingFunction` in tailwind.config.js under `theme.extend`."
  },
  {
    "id": "515",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "What class would make text italic?",
    "answer": "`italic`"
  },
  {
    "id": "516",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you apply ring with a specific color and width?",
    "answer": "Combine `ring`, `ring-[width]`, and `ring-[color]` classes."
  },
  {
    "id": "517",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to set custom z-index values in Tailwind?",
    "answer": "Extend `zIndex` in the config file with custom numeric values."
  },
  {
    "id": "518",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you enable dark mode in Tailwind?",
    "answer": "Set `darkMode` in tailwind.config.js to `'media'` or `'class'`."
  },
  {
    "id": "519",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How to center content horizontally in Tailwind?",
    "answer": "`mx-auto`"
  },
  {
    "id": "520",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between `gap-x` and `space-x`?",
    "answer": "`gap-x` controls gaps between grid/flex items, `space-x` adds margin between siblings."
  },
اینم ۵۰ سوال با موضوع CSS، از id 521 شروع کردم:

json
Copy
Edit
[
  {
    "id": "521",
    "category": "css",
    "difficulty": "easy",
    "question": "What is the difference between `class` and `id` selectors in CSS?",
    "answer": "`id` is unique per page and has higher specificity; `class` can be reused multiple times."
  },
  {
    "id": "522",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the CSS Box Model.",
    "answer": "It consists of content, padding, border, and margin areas that define element size and spacing."
  },
  {
    "id": "523",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you center a block element horizontally?",
    "answer": "Set a width and use `margin: 0 auto`."
  },
  {
    "id": "524",
    "category": "css",
    "difficulty": "medium",
    "question": "What are pseudo-classes in CSS? Give examples.",
    "answer": "They define a special state of an element like `:hover`, `:focus`, `:nth-child()`."
  },
  {
    "id": "525",
    "category": "css",
    "difficulty": "medium",
    "question": "How does `position: absolute` differ from `position: relative`?",
    "answer": "`absolute` positions relative to nearest positioned ancestor; `relative` offsets relative to its normal position."
  },
  {
    "id": "526",
    "category": "css",
    "difficulty": "easy",
    "question": "What does `z-index` do?",
    "answer": "Controls the stack order of overlapping elements."
  },
  {
    "id": "527",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how Flexbox works and common properties.",
    "answer": "Flexbox arranges items in a flexible container. Key properties: `flex-direction`, `justify-content`, `align-items`, `flex-grow`."
  },
  {
    "id": "528",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `em` and `rem` units?",
    "answer": "`em` is relative to the parent element font size; `rem` is relative to the root (`html`) font size."
  },
  {
    "id": "529",
    "category": "css",
    "difficulty": "medium",
    "question": "How do CSS Grid and Flexbox differ?",
    "answer": "Grid is 2D (rows and columns); Flexbox is 1D (row or column). Grid is better for layouts, Flexbox for components."
  },
  {
    "id": "530",
    "category": "css",
    "difficulty": "easy",
    "question": "What does `overflow: hidden` do?",
    "answer": "Hides content that overflows its container."
  },
  {
    "id": "531",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the `calc()` function work in CSS?",
    "answer": "Allows dynamic calculations combining units, e.g. `width: calc(100% - 50px)`."
  },
  {
    "id": "532",
    "category": "css",
    "difficulty": "medium",
    "question": "What are vendor prefixes in CSS?",
    "answer": "Browser-specific prefixes like `-webkit-`, `-moz-` for experimental or non-standard features."
  },
  {
    "id": "533",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement responsive typography in CSS?",
    "answer": "Use relative units like `em`, `rem`, and CSS clamp or media queries."
  },
  {
    "id": "534",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the `contain` property in CSS and when do you use it?",
    "answer": "Optimizes rendering by limiting browser's scope for layout, style, or paint containment."
  },
  {
    "id": "535",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `visibility: hidden` and `display: none`.",
    "answer": "`visibility: hidden` hides element but keeps space; `display: none` removes element from layout."
  },
  {
    "id": "536",
    "category": "css",
    "difficulty": "medium",
    "question": "What is specificity in CSS and how is it calculated?",
    "answer": "Specificity determines which rules apply; calculated by counting inline styles, IDs, classes, and element selectors."
  },
  {
    "id": "537",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you create a sticky footer with CSS?",
    "answer": "Use `flex` layout on container with `min-height: 100vh` and push footer with `margin-top: auto`."
  },
  {
    "id": "538",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `min-width`, `max-width`, and `width`?",
    "answer": "`width` sets exact width; `min-width` sets minimum allowed; `max-width` sets maximum allowed."
  },
  {
    "id": "539",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the `object-fit` property used for?",
    "answer": "Controls how replaced content like images or videos fit inside their container."
  },
  {
    "id": "540",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you select the first child element in CSS?",
    "answer": "Using the `:first-child` pseudo-class."
  },
  {
    "id": "541",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how to use media queries.",
    "answer": "Apply CSS rules conditionally based on viewport size, resolution, or device features."
  },
  {
    "id": "542",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS variables and how do you define them?",
    "answer": "Custom properties declared with `--var-name` syntax inside selectors, accessed via `var()`."
  },
  {
    "id": "543",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply multiple background images in CSS?",
    "answer": "List images separated by commas in `background-image` property."
  },
  {
    "id": "544",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain critical rendering path optimization in CSS.",
    "answer": "Minimize and prioritize CSS to reduce render-blocking and speed up page load."
  },
  {
    "id": "545",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you clear floats in CSS?",
    "answer": "Use clearfix method or set parent `overflow: hidden`."
  },
  {
    "id": "546",
    "category": "css",
    "difficulty": "easy",
    "question": "What does the `box-sizing` property do?",
    "answer": "Determines whether padding and border are included in element’s total width and height."
  },
  {
    "id": "547",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `relative`, `absolute`, `fixed`, and `sticky` positioning?",
    "answer": "`relative` moves element relative to itself; `absolute` relative to nearest positioned ancestor; `fixed` relative to viewport; `sticky` toggles between relative and fixed."
  },
  {
    "id": "548",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a CSS animation?",
    "answer": "Define keyframes with `@keyframes` and apply animation properties to elements."
  },
  {
    "id": "549",
    "category": "css",
    "difficulty": "medium",
    "question": "What are pseudo-elements and give examples?",
    "answer": "Virtual elements like `::before` and `::after` used to insert content."
  },
  {
    "id": "550",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you change the font family in CSS?",
    "answer": "Use the `font-family` property."
  },
  {
    "id": "551",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the cascade and inheritance work in CSS?",
    "answer": "Cascade resolves conflicts by specificity and order; inheritance passes certain properties from parent to child."
  },
  {
    "id": "552",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `opacity` property do?",
    "answer": "Controls transparency level of an element."
  },
  {
    "id": "553",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you make text bold in CSS?",
    "answer": "Use `font-weight: bold` or the shorthand class if using frameworks."
  },
  {
    "id": "554",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the `transition` property?",
    "answer": "Allows smooth animation between property changes."
  },
  {
    "id": "555",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you style form inputs on focus?",
    "answer": "Use the `:focus` pseudo-class."
  },
  {
    "id": "556",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive layout using CSS Grid?",
    "answer": "Define grid-template-columns with repeat and minmax inside media queries or use auto-fit/auto-fill."
  },
  {
    "id": "557",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how to implement a fluid typography system.",
    "answer": "Use CSS clamp() with viewport units to create scalable font sizes."
  },
  {
    "id": "558",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `max-content`, `min-content`, and `fit-content`?",
    "answer": "`max-content` expands to max intrinsic size; `min-content` shrinks to min intrinsic size; `fit-content` clamps size within limits."
  },
  {
    "id": "559",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you use the `aspect-ratio` property?",
    "answer": "Controls the width-to-height ratio of an element."
  },
  {
    "id": "560",
    "category": "css",
    "difficulty": "easy",
    "question": "How do you make an element take full width of its container?",
    "answer": "`width: 100%` or `w-full` in utility frameworks."
  },
{
"id": "561",
"category": "css",
"difficulty": "easy",
"question": "What does the float property do?",
"answer": "It allows elements to be taken out of the normal flow and positioned to the left or right."
},
{
"id": "562",
"category": "css",
"difficulty": "medium",
"question": "How do you clear a floated element?",
"answer": "Use the clear property or a clearfix hack to contain floats."
},
{
"id": "563",
"category": "css",
"difficulty": "medium",
"question": "Explain the difference between inline, block, and inline-block elements.",
"answer": "Inline elements flow within text and don’t start on a new line; block elements take full width and start on a new line; inline-block behaves like inline but respects width and height."
},
{
"id": "564",
"category": "css",
"difficulty": "medium",
"question": "How do you make an element responsive?",
"answer": "Use relative units like %, em, rem, viewport units, and media queries."
},
{
"id": "565",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between rem and % units?",
"answer": "rem is relative to root font size; % is relative to parent element."
},
{
"id": "566",
"category": "css",
"difficulty": "easy",
"question": "How do you hide an element visually but keep it accessible for screen readers?",
"answer": "Use CSS like position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(1px,1px,1px,1px);."
},
{
"id": "567",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between absolute and fixed positioning?",
"answer": "absolute is positioned relative to nearest positioned ancestor; fixed is relative to viewport and doesn’t move on scroll."
},
{
"id": "568",
"category": "css",
"difficulty": "medium",
"question": "Explain the difference between opacity and visibility.",
"answer": "opacity changes transparency but the element still takes space; visibility: hidden hides element but keeps space."
},
{
"id": "569",
"category": "css",
"difficulty": "medium",
"question": "How can you make images responsive?",
"answer": "Use max-width: 100% and height: auto."
},
{
"id": "570",
"category": "css",
"difficulty": "easy",
"question": "What is the purpose of the display property?",
"answer": "Controls how an element is displayed, like block, inline, flex, grid, none."
},
{
"id": "571",
"category": "css",
"difficulty": "medium",
"question": "How do you create a CSS grid container?",
"answer": "Use display: grid on the parent container."
},
{
"id": "572",
"category": "css",
"difficulty": "medium",
"question": "What is the use of the place-items property?",
"answer": "Shorthand for align-items and justify-items to align grid items."
},
{
"id": "573",
"category": "css",
"difficulty": "medium",
"question": "How do you apply styles only for print media?",
"answer": "Use @media print queries."
},
{
"id": "574",
"category": "css",
"difficulty": "hard",
"question": "Explain how CSS specificity works when multiple selectors apply.",
"answer": "The browser applies the rule with highest specificity calculated from inline styles, IDs, classes, and elements."
},
{
"id": "575",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between auto and initial values in CSS?",
"answer": "auto lets the browser calculate the value, initial resets property to default."
},
{
"id": "576",
"category": "css",
"difficulty": "medium",
"question": "How do you implement a CSS tooltip?",
"answer": "Use position: relative on the parent and position: absolute with visibility controls on tooltip text."
},
{
"id": "577",
"category": "css",
"difficulty": "medium",
"question": "What is the clip-path property used for?",
"answer": "Defines a visible region of an element, clipping the rest."
},
{
"id": "578",
"category": "css",
"difficulty": "medium",
"question": "Explain the difference between rem and vw units.",
"answer": "rem is relative to root font size; vw is relative to viewport width."
},
{
"id": "579",
"category": "css",
"difficulty": "medium",
"question": "What does the filter property do in CSS?",
"answer": "Applies visual effects like blur, brightness, contrast on elements."
},
{
"id": "580",
"category": "css",
"difficulty": "easy",
"question": "How do you change the cursor when hovering over an element?",
"answer": "Use the cursor property, e.g. cursor: pointer."
},
{
"id": "581",
"category": "css",
"difficulty": "medium",
"question": "What is the use of object-position in CSS?",
"answer": "Controls the position of replaced content within its box."
},
{
"id": "582",
"category": "css",
"difficulty": "medium",
"question": "How do you implement dark mode using CSS only?",
"answer": "Use prefers-color-scheme media query."
},
{
"id": "583",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between transition and animation?",
"answer": "transition is for simple property changes; animation supports complex keyframes."
},
{
"id": "584",
"category": "css",
"difficulty": "medium",
"question": "How do you make a circle with CSS?",
"answer": "Set equal width and height and use border-radius: 50%."
},
{
"id": "585",
"category": "css",
"difficulty": "easy",
"question": "How do you add space between words in CSS?",
"answer": "Use word-spacing property."
},
{
"id": "586",
"category": "css",
"difficulty": "medium",
"question": "What are the differences between padding and margin?",
"answer": "padding is space inside the border; margin is space outside the border."
},
{
"id": "587",
"category": "css",
"difficulty": "medium",
"question": "How can you make a sticky navigation bar with CSS?",
"answer": "Use position: sticky with a top value."
},
{
"id": "588",
"category": "css",
"difficulty": "medium",
"question": "What does the white-space property control?",
"answer": "Controls how whitespace inside an element is handled."
},
{
"id": "589",
"category": "css",
"difficulty": "medium",
"question": "Explain the purpose of the content property.",
"answer": "Used with pseudo-elements to insert generated content."
},
{
"id": "590",
"category": "css",
"difficulty": "medium",
"question": "What is the use of the pointer-events property?",
"answer": "Controls whether an element reacts to mouse events."
},
{
"id": "591",
"category": "css",
"difficulty": "hard",
"question": "How do you implement a responsive grid that changes column count based on screen size?",
"answer": "Use CSS Grid with grid-template-columns: repeat(auto-fit, minmax(...)) and media queries."
},
{
"id": "592",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between border-box and content-box?",
"answer": "border-box includes padding and border in width/height; content-box doesn’t."
},
{
"id": "593",
"category": "css",
"difficulty": "medium",
"question": "How does CSS inheritance work with properties like color and font-family?",
"answer": "These properties inherit from parent elements by default unless overridden."
},
{
"id": "594",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between nth-child and nth-of-type selectors?",
"answer": "nth-child counts all children; nth-of-type counts only siblings of same element type."
},
{
"id": "595",
"category": "css",
"difficulty": "medium",
"question": "How do you create a gradient background in CSS?",
"answer": "Use linear-gradient or radial-gradient in the background-image property."
},
{
"id": "596",
"category": "css",
"difficulty": "easy",
"question": "How do you change the text color in CSS?",
"answer": "Use the color property."
},
{
"id": "597",
"category": "css",
"difficulty": "medium",
"question": "What is the effect of vertical-align property?",
"answer": "Controls vertical alignment of inline or table-cell elements."
},
{
"id": "598",
"category": "css",
"difficulty": "medium",
"question": "How do you make a div element scrollable?",
"answer": "Use overflow: auto or overflow: scroll."
},
{
"id": "599",
"category": "css",
"difficulty": "medium",
"question": "What are media features used in media queries?",
"answer": "Features like width, height, resolution, orientation, prefers-color-scheme."
},
{
"id": "600",
"category": "css",
"difficulty": "medium",
"question": "How do you optimize CSS delivery for performance?",
"answer": "Minify CSS, use critical CSS inline, defer non-critical CSS."
},
{
"id": "601",
"category": "css",
"difficulty": "medium",
"question": "What are pseudo-classes in CSS?",
"answer": "Pseudo-classes define a special state of an element, like :hover or :focus."
},
{
"id": "602",
"category": "css",
"difficulty": "medium",
"question": "How does the z-index property work?",
"answer": "z-index controls stacking order of positioned elements; higher values appear on top."
},
{
"id": "603",
"category": "css",
"difficulty": "medium",
"question": "Explain the box model in CSS.",
"answer": "The box model consists of content, padding, border, and margin areas that define element size and spacing."
},
{
"id": "604",
"category": "css",
"difficulty": "medium",
"question": "How can you center a block element horizontally?",
"answer": "Set a width and use margin: 0 auto."
},
{
"id": "605",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between min-width and max-width?",
"answer": "min-width sets the minimum width an element can have, max-width sets the maximum."
},
{
"id": "606",
"category": "css",
"difficulty": "medium",
"question": "How do CSS variables work?",
"answer": "CSS variables are custom properties defined with -- and accessed using var()."
},
{
"id": "607",
"category": "css",
"difficulty": "hard",
"question": "How do you implement a complex layout using CSS Grid?",
"answer": "Define rows and columns, assign grid areas, and place items using grid lines or area names."
},
{
"id": "608",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between relative, absolute, and fixed positioning?",
"answer": "Relative positions element relative to normal flow, absolute relative to nearest positioned ancestor, fixed relative to viewport."
},
{
"id": "609",
"category": "css",
"difficulty": "medium",
"question": "How does flexbox handle overflow when flex items are too large?",
"answer": "Flex items can shrink or grow depending on flex-shrink and flex-grow; overflow can be controlled with overflow property."
},
{
"id": "610",
"category": "css",
"difficulty": "medium",
"question": "What are media queries and how do you use them?",
"answer": "Media queries apply CSS conditionally based on device features like screen size or resolution."
},
{
"id": "611",
"category": "css",
"difficulty": "easy",
"question": "How do you change the font size of text in CSS?",
"answer": "Use the font-size property."
},
{
"id": "612",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between visibility: hidden and display: none?",
"answer": "visibility: hidden hides the element but keeps its space; display: none removes the element from the document flow."
},
{
"id": "613",
"category": "css",
"difficulty": "medium",
"question": "How do you apply styles to multiple selectors in CSS?",
"answer": "Separate selectors with commas in the CSS rule."
},
{
"id": "614",
"category": "css",
"difficulty": "medium",
"question": "What is the purpose of overflow: hidden?",
"answer": "It hides any content that overflows the element’s box."
},
{
"id": "615",
"category": "css",
"difficulty": "medium",
"question": "How can you prevent text from wrapping in CSS?",
"answer": "Use white-space: nowrap."
},
{
"id": "616",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between em and rem units?",
"answer": "em is relative to the font-size of the parent; rem is relative to the root element’s font-size."
},
{
"id": "617",
"category": "css",
"difficulty": "medium",
"question": "Explain the difference between position: static and position: relative.",
"answer": "static is default positioning, elements follow normal flow; relative allows positioning relative to itself without removing from flow."
},
{
"id": "618",
"category": "css",
"difficulty": "medium",
"question": "What are vendor prefixes and why are they used?",
"answer": "Vendor prefixes like -webkit- or -moz- are used for experimental or browser-specific CSS properties."
},
{
"id": "619",
"category": "css",
"difficulty": "hard",
"question": "How can you create an animation using CSS keyframes?",
"answer": "Define keyframes using @keyframes, then apply it with animation-name, animation-duration, and other properties."
},
{
"id": "620",
"category": "css",
"difficulty": "medium",
"question": "How does the box-sizing property affect element sizing?",
"answer": "box-sizing: border-box includes padding and border in width/height calculations, content-box excludes them."
},
{
"id": "621",
"category": "css",
"difficulty": "medium",
"question": "What does the flex-grow property do?",
"answer": "Defines how much a flex item will grow relative to the rest."
},
{
"id": "622",
"category": "css",
"difficulty": "medium",
"question": "How do you make images cover their container without stretching?",
"answer": "Use object-fit: cover."
},
{
"id": "623",
"category": "css",
"difficulty": "medium",
"question": "Explain how nth-child selector works.",
"answer": "Selects elements based on their position among siblings, counting all types."
},
{
"id": "624",
"category": "css",
"difficulty": "medium",
"question": "How do you create a vertical scrollbar only when needed?",
"answer": "Use overflow-y: auto."
},
{
"id": "625",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between grid-template-rows and grid-auto-rows?",
"answer": "grid-template-rows explicitly defines rows; grid-auto-rows sets size for implicit rows."
},
{
"id": "626",
"category": "css",
"difficulty": "medium",
"question": "How can you align flex items vertically in a container?",
"answer": "Use align-items property."
},
{
"id": "627",
"category": "css",
"difficulty": "medium",
"question": "What does the visibility property do?",
"answer": "Controls whether an element is visible or hidden but still occupies space."
},
{
"id": "628",
"category": "css",
"difficulty": "medium",
"question": "Explain the difference between pseudo-elements and pseudo-classes.",
"answer": "Pseudo-classes target states of elements (:hover), pseudo-elements create virtual elements (::before)."
},
{
"id": "629",
"category": "css",
"difficulty": "medium",
"question": "How do you make text bold in CSS?",
"answer": "Use font-weight: bold or numeric values like 700."
},
{
"id": "630",
"category": "css",
"difficulty": "medium",
"question": "What is the use of line-height in CSS?",
"answer": "Controls vertical spacing between lines of text."
},
{
"id": "631",
"category": "css",
"difficulty": "medium",
"question": "How can you create a drop shadow effect?",
"answer": "Use the box-shadow property."
},
{
"id": "632",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between max-height and height?",
"answer": "height sets the fixed height; max-height limits how tall an element can grow."
},
{
"id": "633",
"category": "css",
"difficulty": "medium",
"question": "How do you change the background color of an element?",
"answer": "Use the background-color property."
},
{
"id": "634",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between inline and block elements?",
"answer": "Inline elements flow within text, block elements take full width and start on new lines."
},
{
"id": "635",
"category": "css",
"difficulty": "medium",
"question": "How can you make a button look disabled with CSS?",
"answer": "Use opacity to fade and pointer-events: none to disable interaction."
},
{
"id": "636",
"category": "css",
"difficulty": "medium",
"question": "What is the inherit value in CSS?",
"answer": "It forces a property to take the same computed value as its parent."
},
{
"id": "637",
"category": "css",
"difficulty": "medium",
"question": "Explain how to use the calc() function in CSS.",
"answer": "calc() allows calculations to mix units like percentages and pixels."
},
{
"id": "638",
"category": "css",
"difficulty": "medium",
"question": "How do you vertically center content in a flex container?",
"answer": "Use align-items: center."
},
{
"id": "639",
"category": "css",
"difficulty": "medium",
"question": "How do you create a fixed footer at the bottom of the page?",
"answer": "Use position: fixed and bottom: 0."
},
{
"id": "640",
"category": "css",
"difficulty": "medium",
"question": "What is the default display value for a <span> element?",
"answer": "inline."
},
{
"id": "641",
"category": "css",
"difficulty": "medium",
"question": "How can you make text italic in CSS?",
"answer": "Use font-style: italic."
},
{
"id": "642",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between visibility: collapse and visibility: hidden?",
"answer": "collapse removes element in table layouts, hidden hides but keeps space."
},
{
"id": "643",
"category": "css",
"difficulty": "medium",
"question": "How do you apply multiple background images to a single element?",
"answer": "Use a comma-separated list in the background-image property."
},
{
"id": "644",
"category": "css",
"difficulty": "medium",
"question": "What is the use of the order property in flexbox?",
"answer": "Controls the visual order of flex items."
},
{
"id": "645",
"category": "css",
"difficulty": "medium",
"question": "How do you remove default margin and padding from all elements?",
"answer": "Use a CSS reset like * { margin: 0; padding: 0; }."
},
{
"id": "646",
"category": "css",
"difficulty": "medium",
"question": "What does white-space: pre do?",
"answer": "Preserves whitespace and line breaks like in the source."
},
{
"id": "647",
"category": "css",
"difficulty": "medium",
"question": "Explain the use of word-break property.",
"answer": "Controls how words break when reaching the end of a line."
},
{
"id": "648",
"category": "css",
"difficulty": "medium",
"question": "How do you create a responsive typography system?",
"answer": "Use relative units like em, rem, and media queries."
},
{
"id": "649",
"category": "css",
"difficulty": "medium",
"question": "What is the difference between auto and inherit in CSS?",
"answer": "auto lets the browser calculate the value, inherit copies the parent's value."
},
{
"id": "650",
"category": "css",
"difficulty": "medium",
"question": "How do you create a CSS class that applies only on hover?",
"answer": "Use the :hover pseudo-class in your selector."
},
{
    "id": "651",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how are they used?",
    "answer": "Pseudo-elements allow you to style parts of an element, like ::before and ::after insert content before or after an element’s content."
  },
  {
    "id": "652",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `absolute` and `fixed` positioning.",
    "answer": "`absolute` positions relative to nearest positioned ancestor, `fixed` positions relative to the viewport and doesn’t move on scroll."
  },
  {
    "id": "653",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you make an element responsive using CSS?",
    "answer": "Use relative units like %, em, rem, and media queries to adapt styles based on screen size."
  },
  {
    "id": "654",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `clear` property do in CSS?",
    "answer": "`clear` controls the behavior of floating elements and specifies which sides of an element other floating elements are not allowed."
  },
  {
    "id": "655",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you create a CSS-only tooltip?",
    "answer": "Use the `:hover` pseudo-class with `::after` or `::before` pseudo-elements to show tooltip content on hover."
  },
  {
    "id": "656",
    "category": "css",
    "difficulty": "medium",
    "question": "What are the differences between inline, block, and inline-block elements?",
    "answer": "Inline elements flow with text, block elements take full width, inline-block behave like inline but respect width/height."
  },
  {
    "id": "657",
    "category": "css",
    "difficulty": "medium",
    "question": "How do CSS transitions work?",
    "answer": "CSS transitions smoothly animate changes to CSS properties over a specified duration."
  },
  {
    "id": "658",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how specificity works in CSS.",
    "answer": "Specificity determines which CSS rule applies by calculating weight of selectors; inline > ID > class > element."
  },
  {
    "id": "659",
    "category": "css",
    "difficulty": "hard",
    "question": "How can you implement a sticky header using CSS?",
    "answer": "Use `position: sticky` with top value to keep header visible after scrolling past it."
  },
  {
    "id": "660",
    "category": "css",
    "difficulty": "medium",
    "question": "What are some ways to optimize CSS for performance?",
    "answer": "Minify CSS, reduce unused styles, use shorthand properties, avoid deep selectors, and leverage caching."
  },
  {
    "id": "661",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a circle shape with CSS?",
    "answer": "Set equal width and height and use `border-radius: 50%`."
  },
  {
    "id": "662",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `opacity` property do?",
    "answer": "Controls the transparency level of an element from 0 (transparent) to 1 (opaque)."
  },
  {
    "id": "663",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you hide content visually but keep it accessible for screen readers?",
    "answer": "Use CSS like `position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(1px,1px,1px,1px);`."
  },
  {
    "id": "664",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `rem` and `%` units in CSS?",
    "answer": "`rem` is relative to root font-size, `%` is relative to the parent element’s property."
  },
  {
    "id": "665",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain how the CSS cascade works.",
    "answer": "The cascade decides which CSS rule applies by order, specificity, and importance."
  },
  {
    "id": "666",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you use the `overflow` property to create scrollable containers?",
    "answer": "Set `overflow: auto` or `overflow: scroll` on a container to enable scrollbars when content overflows."
  },
  {
    "id": "667",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `vh` and `vw` units?",
    "answer": "`vh` is 1% of viewport height; `vw` is 1% of viewport width."
  },
  {
    "id": "668",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the `object-fit` property affect images?",
    "answer": "Controls how images or videos fit their container, options include `cover`, `contain`, `fill`."
  },
  {
    "id": "669",
    "category": "css",
    "difficulty": "medium",
    "question": "What does `pointer-events: none` do?",
    "answer": "Disables mouse interactions on the element."
  },
  {
    "id": "670",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you prevent margin collapse between elements?",
    "answer": "Add padding, border, or use overflow property to prevent collapsing margins."
  },
  {
    "id": "671",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how to create a complex grid layout with named grid areas.",
    "answer": "Define grid-template-areas in container, assign grid-area names to children for layout."
  },
  {
    "id": "672",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you customize scrollbar styles?",
    "answer": "Use vendor-specific selectors like `::-webkit-scrollbar` to style scrollbars."
  },
  {
    "id": "673",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the `transition-delay` property?",
    "answer": "Sets a delay before the transition starts after the property changes."
  },
  {
    "id": "674",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you use `calc()` for responsive width calculations?",
    "answer": "Combine fixed and relative units, e.g., `width: calc(100% - 50px)`."
  },
  {
    "id": "675",
    "category": "css",
    "difficulty": "medium",
    "question": "What’s the difference between `em` and `ex` units?",
    "answer": "`em` is relative to font-size, `ex` is relative to x-height of the font."
  },
  {
    "id": "676",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive image gallery using CSS grid?",
    "answer": "Define grid-template-columns with auto-fit and minmax for responsive columns."
  },
  {
    "id": "677",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `overflow: hidden` and `clip-path`.",
    "answer": "`overflow: hidden` hides overflow content; `clip-path` defines visible areas with shapes."
  },
  {
    "id": "678",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you vertically align text inside a div?",
    "answer": "Use `line-height` equal to the div height or flexbox with `align-items: center`."
  },
  {
    "id": "679",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `box-shadow` property accept as values?",
    "answer": "Horizontal offset, vertical offset, blur radius, spread radius, and color."
  },
  {
    "id": "680",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you create a responsive navigation menu with CSS?",
    "answer": "Use media queries to toggle menu styles and flexbox or grid for layout."
  },
  {
    "id": "681",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the effect of the `float` property and how is it cleared?",
    "answer": "Float removes element from normal flow to the left or right; clear fixes container collapse."
  },
  {
    "id": "682",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you apply styles only to the first letter of a paragraph?",
    "answer": "Use the `::first-letter` pseudo-element."
  },
  {
    "id": "683",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `max-content`, `min-content`, and `auto` in CSS sizing?",
    "answer": "`max-content` sizes to max intrinsic content, `min-content` to min intrinsic, `auto` is default behavior."
  },
  {
    "id": "684",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you make an element visually hidden but still accessible to screen readers?",
    "answer": "Use `position: absolute; width: 1px; height: 1px; overflow: hidden; clip: rect(0 0 0 0);`."
  },
  {
    "id": "685",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the use of the `z-index` property and stacking context.",
    "answer": "`z-index` controls stack order of positioned elements; stacking context determines how layers are rendered."
  },
  {
    "id": "686",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the difference between `visibility: hidden` and `display: none`?",
    "answer": "`visibility: hidden` hides element but keeps layout space; `display: none` removes it completely."
  },
  {
    "id": "687",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement a fade-in animation using CSS?",
    "answer": "Use `@keyframes` with opacity from 0 to 1 and apply it with `animation` property."
  },
  {
    "id": "688",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you center a div horizontally and vertically using flexbox?",
    "answer": "Set container to `display: flex; justify-content: center; align-items: center;`."
  },
  {
    "id": "689",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the purpose of the `content` property in CSS?",
    "answer": "Used with pseudo-elements to insert generated content."
  },
  {
    "id": "690",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you implement dark mode support in CSS?",
    "answer": "Use media query `prefers-color-scheme` and provide alternate styles."
  },
  {
    "id": "691",
    "category": "css",
    "difficulty": "medium",
    "question": "What are media queries and how are they used?",
    "answer": "Media queries apply CSS rules based on device characteristics like width or resolution."
  },
  {
    "id": "692",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the difference between `em`, `rem`, and `px` units.",
    "answer": "`px` is absolute pixels, `em` is relative to parent font-size, `rem` relative to root font-size."
  },
  {
    "id": "693",
    "category": "css",
    "difficulty": "medium",
    "question": "How can you optimize CSS delivery for faster page load?",
    "answer": "Minify CSS, use critical CSS inline, defer non-critical CSS, and use media queries."
  },
  {
    "id": "694",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the use of the `object-position` property?",
    "answer": "Defines the alignment of replaced elements like images within their container."
  },
  {
    "id": "695",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you implement a CSS grid with fixed and flexible columns?",
    "answer": "Combine fixed widths and `fr` units in `grid-template-columns`."
  },
  {
    "id": "696",
    "category": "css",
    "difficulty": "medium",
    "question": "What does the `box-sizing` property do?",
    "answer": "Determines if width and height include padding and border (`border-box`) or not (`content-box`)."
  },
  {
    "id": "697",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the concept of stacking context in CSS.",
    "answer": "Stacking context is a hierarchy of elements that determines the painting order."
  },
  {
    "id": "698",
    "category": "css",
    "difficulty": "medium",
    "question": "How do you use the `flex-grow` property?",
    "answer": "`flex-grow` defines how much a flex item will grow relative to others."
  },
  {
    "id": "699",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS variables and how do you declare them?",
    "answer": "CSS variables (custom properties) are declared with `--` prefix inside selectors and accessed with `var()`."
  },
  {
    "id": "700",
    "category": "css",
    "difficulty": "medium",
    "question": "How does the `min-width` property affect responsive design?",
    "answer": "`min-width` sets the smallest width an element can shrink to, preventing it from becoming too narrow."
  }
]
