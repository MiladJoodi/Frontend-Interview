[
  {
    "id": "1",
    "category": "all",
    "difficulty": "easy",
    "question": "What is Next.js?",
    "answer": "Next.js is a popular React framework designed for building scalable, production-ready web applications. It provides features like server-side rendering, static site generation, and API routes."
  },
  {
    "id": "2",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the key features of Next.js?",
    "answer": "Key features of Next.js include: Server-Side Rendering (SSR), Static Site Generation (SSG), Incremental Static Regeneration (ISR), API Routes, File-based routing, Image Optimization, Automatic code splitting"
  },
  {
    "id": "3",
    "category": "react",
    "difficulty": "easy",
    "question": "How is Next.js different from React.js?",
    "answer": "While React.js is a library for building UIs, Next.js is a framework built on top of React, providing additional features such as SSR, SSG, and routing out of the box."
  },
  {
    "id": "4",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Hooks and why are they important?",
    "answer": "React Hooks are functions that let you use state and other React features without writing a class. They provide a more direct API to React concepts like props, state, context, refs, and lifecycle."
  },
  {
    "id": "5",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between 'let', 'const', and 'var' in JavaScript?",
    "answer": "'var' is function-scoped and hoisted. 'let' and 'const' are block-scoped. 'let' allows reassignment while 'const' doesn't. 'const' variables must be initialized during declaration."
  },
  {
    "id": "6",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the main benefits of using TypeScript over JavaScript?",
    "answer": "TypeScript provides static typing, better tooling support, early error detection, improved code maintainability, better documentation through types, and advanced features like interfaces and generics."
  },
  {
    "id": "7",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "What is Tailwind CSS and how does it differ from traditional CSS frameworks?",
    "answer": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in markup, rather than offering pre-designed components like Bootstrap."
  },
  {
    "id": "8",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the CSS Box Model.",
    "answer": "The CSS Box Model describes how elements are laid out, consisting of: content, padding, border, and margin. It determines how space is distributed around an element and how elements interact with each other."
  },
  {
    "id": "9",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the DOCTYPE declaration in HTML?",
    "answer": "The DOCTYPE declaration tells the web browser which version of HTML the page is written in, ensuring the page is rendered in standards mode rather than quirks mode."
  },
  {
    "id": "10",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are the main features of Sass that make it useful for CSS development?",
    "answer": "Sass provides variables, nesting, mixins, functions, inheritance, operators, and other features that make CSS more maintainable and easier to write."
  },
  {
    "id": "11",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you write a regular expression to validate an email address?",
    "answer": "A basic email regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/. Note that complete email validation is complex and often better handled with libraries or simple confirmation emails."
  },
  {
    "id": "12",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "What is Prisma ORM and how does it differ from traditional ORMs?",
    "answer": "Prisma is a next-generation ORM that provides a type-safe database client, auto-generated queries, and a schema definition language. It differs from traditional ORMs by not using active record or data mapper patterns."
  },
  {
    "id": "13",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "What are the key features of Drizzle ORM?",
    "answer": "Drizzle ORM is a lightweight ORM with type safety, SQL-like syntax, schema migrations, and support for multiple databases. It's designed to be simple and close to SQL while providing TypeScript benefits."
  },
  {
    "id": "14",
    "category": "backend",
    "difficulty": "easy",
    "question": "What is the difference between authentication and authorization?",
    "answer": "Authentication verifies who a user is (login), while authorization determines what resources a user can access and what actions they can perform."
  },
  {
    "id": "15",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "Explain the event loop in Node.js.",
    "answer": "The event loop is what allows Node.js to perform non-blocking I/O operations despite being single-threaded. It handles asynchronous callbacks by offloading operations when possible and processing events in phases."
  },
  {
    "id": "16",
    "category": "express",
    "difficulty": "easy",
    "question": "What is Express.js and what is it commonly used for?",
    "answer": "Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications, particularly for creating APIs."
  },
  {
    "id": "17",
    "category": "other",
    "difficulty": "easy",
    "question": "What is Git and why is it important for developers?",
    "answer": "Git is a distributed version control system that tracks changes in source code during development. It enables collaboration, maintains history, and helps manage different versions of a project."
  },
  {
    "id": "18",
    "category": "react",
    "difficulty": "hard",
    "question": "Explain React Fiber architecture.",
    "answer": "React Fiber is a complete rewrite of React's core algorithm. It enables features like incremental rendering, better handling of animations, and the ability to split rendering work into chunks and spread it over multiple frames."
  },
  {
    "id": "19",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle static site generation (SSG) and server-side rendering (SSR) differently?",
    "answer": "SSG generates HTML at build time which is reused on each request, ideal for content that doesn't change often. SSR generates HTML on each request, better for frequently updated or personalized content."
  },
  {
    "id": "20",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event delegation pattern in JavaScript?",
    "answer": "Event delegation is a technique where you attach a single event listener to a parent element instead of multiple listeners to child elements. Events bubble up and can be handled based on the target element."
  },
  {
    "id": "21",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are discriminated unions in TypeScript and how are they useful?",
    "answer": "Discriminated unions are a pattern where a common property (the discriminant) is used to distinguish between different object shapes. This allows TypeScript to narrow types accurately in conditional blocks."
  },
  {
    "id": "22",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How would you implement a responsive grid layout in Tailwind CSS?",
    "answer": "Use the 'grid' class with responsive prefixes like 'md:grid-cols-3' for different breakpoints. Tailwind provides utilities for grid columns, rows, gaps, and alignment that can be combined responsively."
  },
  {
    "id": "23",
    "category": "css",
    "difficulty": "hard",
    "question": "Explain how CSS specificity works.",
    "answer": "CSS specificity determines which styles are applied when multiple rules target the same element. It's calculated based on selector types: inline styles (1000), IDs (100), classes/attributes (10), elements/pseudo-elements (1)."
  },
  {
    "id": "24",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic HTML elements and why are they important?",
    "answer": "Semantic elements (like <header>, <article>, <nav>) clearly describe their meaning to both browser and developer. They improve accessibility, SEO, and make code more readable and maintainable."
  },
  {
    "id": "25",
    "category": "sass",
    "difficulty": "easy",
    "question": "How do you create and use variables in Sass?",
    "answer": "Variables in Sass are declared with $ followed by the name: $primary-color: #333;. They're used by referencing the variable name: color: $primary-color;."
  },
  {
    "id": "26",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all numbers in a string?",
    "answer": "In JavaScript: const numbers = str.match(/\\d+/g); This will return an array of all sequences of digits in the string."
  },
  {
    "id": "27",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database migrations?",
    "answer": "Prisma Migrate is a tool that generates and executes SQL migration files based on changes to your Prisma schema. It keeps track of applied migrations and can generate rollback migrations."
  },
  {
    "id": "28",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle relations between tables?",
    "answer": "Drizzle handles relations through its schema definition, allowing you to define one-to-one, one-to-many, and many-to-many relationships with type safety, which can then be queried with joins."
  },
  {
    "id": "29",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT and how is it used in authentication?",
    "answer": "JSON Web Tokens (JWT) are compact, URL-safe tokens that represent claims between parties. They consist of a header, payload, and signature, and are commonly used for stateless authentication."
  },
  {
    "id": "30",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running JavaScript in parallel. They're useful for CPU-intensive tasks that would otherwise block the event loop, though I/O operations are still better handled asynchronously."
  },
  {
    "id": "31",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware are functions that have access to the request, response, and next function in the application's request-response cycle. They can execute code, modify objects, or end the request-response cycle."
  },
  {
    "id": "32",
    "category": "other",
    "difficulty": "medium",
    "question": "What are the differences between HTTP/1.1 and HTTP/2?",
    "answer": "HTTP/2 introduces multiplexing (multiple requests over a single connection), header compression, server push, binary protocol, and stream prioritization, improving performance over HTTP/1.1."
  },
  {
    "id": "33",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Virtual DOM in React?",
    "answer": "The Virtual DOM is a lightweight copy of the actual DOM that React maintains. When state changes, React compares the new Virtual DOM with the previous one (diffing) and efficiently updates only the changed parts of the real DOM (reconciliation)."
  },
  {
    "id": "34",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API Routes in Next.js?",
    "answer": "API Routes allow you to create API endpoints as Node.js serverless functions within your Next.js application. Files in the 'pages/api' directory are treated as API endpoints instead of pages."
  },
  {
    "id": "35",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the concept of closures in JavaScript.",
    "answer": "A closure is a function that remembers its outer variables and can access them even after the outer function has returned. Closures are created every time a function is created, at function creation time."
  },
  {
    "id": "36",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are generics in TypeScript and when would you use them?",
    "answer": "Generics allow creating reusable components that work with multiple types while maintaining type safety. They're useful when you want to preserve type information when working with collections, utility functions, or reusable components."
  },
  {
    "id": "37",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement dark mode using Tailwind CSS?",
    "answer": "Use the 'dark:' variant prefix with the 'dark' mode configuration set to 'class' in tailwind.config.js. Then toggle a 'dark' class on the HTML element, and style elements with classes like 'dark:bg-gray-800'."
  },
  {
    "id": "38",
    "category": "css",
    "difficulty": "medium",
    "question": "What is CSS Flexbox and when would you use it?",
    "answer": "Flexbox is a layout model that allows efficient alignment and distribution of space among items in a container, even when their size is unknown. It's ideal for one-dimensional layouts (either rows or columns)."
  },
  {
    "id": "39",
    "category": "html",
    "difficulty": "medium",
    "question": "What are data attributes in HTML and how are they useful?",
    "answer": "Data attributes (data-*) allow storing extra information on HTML elements without affecting presentation or behavior. They can be accessed via JavaScript and are useful for storing element-specific data."
  },
  {
    "id": "40",
    "category": "sass",
    "difficulty": "medium",
    "question": "What are mixins in Sass and how do they differ from functions?",
    "answer": "Mixins are reusable blocks of styles that can be included in other rules. They can accept arguments but return CSS declarations rather than values. Functions return values that can be used in property assignments."
  },
  {
    "id": "41",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate a password with specific requirements?",
    "answer": "Example for 8+ chars with uppercase, lowercase, number: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{8,}$/. This uses positive lookaheads to ensure each requirement is met."
  },
  {
    "id": "42",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle transactions in Prisma?",
    "answer": "Prisma provides $transaction for interactive transactions where you can perform multiple operations in sequence, or batch transactions for independent operations that should succeed or fail together."
  },
  {
    "id": "43",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle raw SQL queries?",
    "answer": "Drizzle provides a sql template tag for writing raw SQL queries with type safety. You can interpolate values safely and even infer return types for the results."
  },
  {
    "id": "44",
    "category": "backend",
    "difficulty": "hard",
    "question": "What is the difference between REST and GraphQL?",
    "answer": "REST is resource-based with fixed endpoints returning complete resources. GraphQL is query-based with a single endpoint, allowing clients to request exactly the data they need in one request."
  },
  {
    "id": "45",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the package.json file in Node.js projects?",
    "answer": "package.json is a manifest file that contains project metadata, dependencies, scripts, and configuration. It's used by npm/yarn to manage packages, versions, and project setup."
  },
  {
    "id": "46",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you handle errors in an Express application?",
    "answer": "Use middleware functions with four parameters (err, req, res, next). Organize errors with custom Error classes. Use try/catch in async routes or wrap with a higher-order function. Implement proper HTTP status codes."
  },
  {
    "id": "47",
    "category": "other",
    "difficulty": "medium",
    "question": "What is CI/CD and why is it important?",
    "answer": "CI (Continuous Integration) means regularly merging code changes into a shared repo with automated testing. CD (Continuous Delivery/Deployment) automates release processes. Together they enable faster, more reliable software releases."
  },
  {
    "id": "48",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Portals and when would you use them?",
    "answer": "Portals provide a way to render children into a DOM node outside the parent component's hierarchy. They're useful for modals, tooltips, or any UI that needs to break out of its container (e.g., for CSS z-index or positioning)."
  },
  {
    "id": "49",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": "ISR allows you to update static pages after build time without rebuilding the entire site. You specify a revalidation time, and Next.js will regenerate the page in the background when it receives requests after that time."
  },
  {
    "id": "50",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' performs type coercion before comparison, while '===' (strict equality) checks both value and type without coercion. '===' is generally preferred as it's more predictable."
  },
  {
    "id": "51",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards are expressions that perform runtime checks to narrow down the type of a variable within a block. They include typeof, instanceof checks, or custom functions with 'is' type predicates."
  },
  {
    "id": "52",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you create custom animations in Tailwind CSS?",
    "answer": "Define custom animations in tailwind.config.js under the 'extend.animation' key. Then apply them with the 'animate-' prefix. You can also use the @keyframes directive in your CSS and extend Tailwind's animation utilities."
  },
  {
    "id": "53",
    "category": "css",
    "difficulty": "medium",
    "question": "What is CSS Grid and how does it differ from Flexbox?",
    "answer": "CSS Grid is a two-dimensional layout system (rows and columns simultaneously), while Flexbox is one-dimensional (either rows or columns). Grid is better for overall page layouts, Flexbox for aligning content within components."
  },
  {
    "id": "54",
    "category": "html",
    "difficulty": "hard",
    "question": "What are Web Components and how do they work?",
    "answer": "Web Components are a set of web platform APIs that allow creating reusable custom elements with encapsulated functionality. They consist of Custom Elements, Shadow DOM, and HTML Templates."
  },
  {
    "id": "55",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you create a responsive grid system using Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints, using variables for column counts and gutters. The mixin would output media queries and calculate widths dynamically using Sass math operations."
  },
  {
    "id": "56",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to parse and extract data from a URL?",
    "answer": "Example to extract parts: /^(https?:\\/\\/)?([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?/. This captures protocol, domain, path, query, and hash segments. More specific patterns can be created for particular URL structures."
  },
  {
    "id": "57",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database schema validation?",
    "answer": "Prisma validates the schema against the database during introspection (when pulling the schema from an existing DB) and when generating the client. It checks for type consistency, relation integrity, and other constraints."
  },
  {
    "id": "58",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How would you implement complex joins with Drizzle ORM?",
    "answer": "Drizzle provides a query builder with methods like .innerJoin(), .leftJoin(), etc. You can chain these to build complex joins while maintaining type safety, and use the .fields() method to select specific columns."
  },
  {
    "id": "59",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for optimizing database queries?",
    "answer": "Strategies include: adding proper indexes, optimizing query structure, using JOINs wisely, implementing pagination, caching results, using prepared statements, denormalizing where appropriate, and analyzing query plans."
  },
  {
    "id": "60",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the 'cluster' module in Node.js?",
    "answer": "The cluster module allows creating child processes (workers) that share server ports, enabling better utilization of multi-core systems by running multiple Node.js instances to handle the load."
  },
  {
    "id": "61",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you implement rate limiting in Express?",
    "answer": "Use middleware like 'express-rate-limit' which tracks requests from IPs. Configure it with windowMs (time window), max (max requests per window), and optional delayMs. Store counts in memory or Redis for distributed apps."
  },
  {
    "id": "62",
    "category": "other",
    "difficulty": "hard",
    "question": "Explain the principles of secure authentication.",
    "answer": "Principles include: never store plaintext passwords (use strong hashing like bcrypt), implement proper session management, use HTTPS, add rate limiting, implement CSRF protection, use secure cookies, and consider multi-factor authentication."
  },
  {
    "id": "63",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Context API in React and when would you use it?",
    "answer": "Context provides a way to pass data through the component tree without manually passing props. It's useful for global data like themes, user auth, or preferences that many components need access to."
  },
  {
    "id": "64",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js provides an Image component that automatically optimizes images (resizing, format conversion, lazy loading) and serves them via a built-in image optimization API. It works with both local and remote images."
  },
  {
    "id": "65",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the prototype chain in JavaScript.",
    "answer": "JavaScript uses prototypal inheritance where objects can inherit properties from other objects. Each object has a prototype (accessed via __proto__), and when a property isn't found on an object, JavaScript looks up the prototype chain until it finds it or reaches null."
  },
  {
    "id": "66",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types in TypeScript?",
    "answer": "Conditional types select between two types based on a condition: T extends U ? X : Y. They're powerful when combined with generics, allowing type transformations based on input types."
  },
  {
    "id": "67",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "How do you customize Tailwind's default theme?",
    "answer": "In tailwind.config.js, use the 'theme' property to extend or override defaults. You can customize colors, spacing, fonts, breakpoints, etc., while preserving the rest of Tailwind's defaults."
  },
  {
    "id": "68",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS-in-JS and what are its advantages?",
    "answer": "CSS-in-JS is a pattern where CSS is written in JavaScript instead of separate files. Advantages include scoped styles, dynamic styling based on props/state, automatic vendor prefixing, and elimination of unused CSS."
  },
  {
    "id": "69",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the 'alt' attribute in images?",
    "answer": "The 'alt' attribute provides alternative text for images when they can't be displayed. It's important for accessibility (screen readers), SEO, and when images fail to load."
  },
  {
    "id": "70",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create loops in Sass and what are they useful for?",
    "answer": "Sass has @for, @each, and @while loops. They're useful for generating utility classes, grid systems, or any repetitive CSS patterns. Example: @for $i from 1 through 12 { .col-#{$i} { width: $i * 8.33%; } }"
  },
  {
    "id": "71",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to match HTML tags?",
    "answer": "A basic pattern: /<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/. However, parsing HTML with regex is generally discouraged for complex cases - use a proper HTML parser instead."
  },
  {
    "id": "72",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle database seeding with Prisma?",
    "answer": "Create a seed script that uses the Prisma client to insert initial data. You can run it with 'prisma db seed' or a custom script. For larger datasets, consider using raw SQL for better performance."
  },
  {
    "id": "73",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema migrations?",
    "answer": "Drizzle provides a migration API where you define schema changes in code. It can generate SQL migration files and track applied migrations, similar to other ORMs but with a more SQL-centric approach."
  },
  {
    "id": "74",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in a backend service?",
    "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts cross-origin requests. Handle it by setting proper headers (Access-Control-Allow-Origin, etc.), implementing preflight request handling, and configuring allowed methods/headers."
  },
  {
    "id": "75",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'stream' module in Node.js and when would you use it?",
    "answer": "Streams are collections of data that might not be available all at once. They're useful for processing large files, handling real-time data, or any I/O operations where memory efficiency is important."
  },
  {
    "id": "76",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement file uploads in Express?",
    "answer": "Use middleware like 'multer' to handle multipart/form-data. Configure storage (disk/memory), file filters, size limits, and processing. For large files, consider streaming processing to avoid memory issues."
  },
  {
    "id": "77",
    "category": "other",
    "difficulty": "medium",
    "question": "What is Docker and how does it benefit development?",
    "answer": "Docker is a platform for containerizing applications. Benefits include consistent environments across machines, isolation, easy scaling, simplified dependency management, and reproducible builds."
  },
  {
    "id": "78",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Suspense and how does it work?",
    "answer": "Suspense lets components 'wait' for something before rendering. It's primarily used for code-splitting (with React.lazy) and data fetching. Components can suspend while loading, showing fallback UI until ready."
  },
  {
    "id": "79",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle internationalization (i18n)?",
    "answer": "Next.js has built-in i18n routing that supports sub-path (/en/page), domain (en.example.com), or hybrid strategies. It handles locale detection, routing, and can integrate with translation libraries."
  },
  {
    "id": "80",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript Promises and how do they work?",
    "answer": "Promises represent eventual completion of async operations. They can be in pending, fulfilled, or rejected states. You chain .then() for success cases and .catch() for errors, avoiding callback hell."
  },
  {
    "id": "81",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript and how are they useful?",
    "answer": "Utility types (like Partial, Pick, Omit, Record) transform existing types in useful ways. They help create new types from existing ones without repetition, making type definitions more maintainable."
  },
  {
    "id": "82",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle component variants in Tailwind CSS?",
    "answer": "Use the @variant directive in your CSS to create component variants, or combine Tailwind with a JS framework's class binding system. For complex cases, consider using the 'classnames' library to conditionally apply classes."
  },
  {
    "id": "83",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS custom properties (variables) and how do you use them?",
    "answer": "CSS variables are defined with --prefix (--main-color: blue;) and accessed with var() (color: var(--main-color);). They're scoped to elements, can be changed dynamically, and help maintain consistent styling."
  },
  {
    "id": "84",
    "category": "html",
    "difficulty": "medium",
    "question": "What are the benefits of using the 'picture' element over 'img'?",
    "answer": "The 'picture' element provides art direction (different images for different viewports) and allows multiple source formats (via 'source' children) with fallback to 'img', helping with responsive images and modern formats like WebP."
  },
  {
    "id": "85",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a theming system with Sass?",
    "answer": "Create a map of themes with color variables, then use mixins or functions to apply themes. Example: @mixin theme($theme) { --primary: map-get($theme, primary); } and apply with @include theme($light-theme);"
  },
  {
    "id": "86",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to validate a date in YYYY-MM-DD format?",
    "answer": "Pattern: /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/. Note this validates format but not date logic (like Feb 30). For full validation, additional checks or a date library would be needed."
  },
  {
    "id": "87",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle many-to-many relationships in Prisma?",
    "answer": "Prisma supports implicit many-to-many relations where you define @relation fields on both models. For explicit relations (with additional fields), you create a join model with two @relation fields."
  },
  {
    "id": "88",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How would you implement pagination with Drizzle ORM?",
    "answer": "Use the .limit() and .offset() methods on your queries. Example: db.select().from(users).limit(10).offset(20). For cursor-based pagination, use .where() with conditions based on the cursor value."
  },
  {
    "id": "89",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is Redis and what are its common use cases?",
    "answer": "Redis is an in-memory data store used as a cache, message broker, or database. Common uses include session storage, rate limiting, real-time analytics, leaderboards, and pub/sub messaging systems."
  },
  {
    "id": "90",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'require' cache in Node.js and how does it work?",
    "answer": "Node caches modules after first require to improve performance. Subsequent requires return the cached version. The cache is stored in require.cache and can be deleted if you need to reload a module."
  },
  {
    "id": "91",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you structure a large Express application?",
    "answer": "Organize by features/routes (not by file type), separate concerns (routes, controllers, services), use middleware for cross-cutting concerns, implement proper error handling, and consider using a DI container for complex apps."
  },
  {
    "id": "92",
    "category": "other",
    "difficulty": "hard",
    "question": "What are microservices and when would you choose them over a monolith?",
    "answer": "Microservices are small, independent services that work together. Choose them for large teams, need for independent scaling, different tech stacks per component, or organizational alignment. Monoliths are simpler for small projects."
  },
  {
    "id": "93",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Error Boundaries?",
    "answer": "Error Boundaries are React components that catch JavaScript errors in their child component tree, log them, and display a fallback UI instead of crashing. They don't catch errors in event handlers, async code, or server-side rendering."
  },
  {
    "id": "94",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Next.js Dynamic Routes and how do they work?",
    "answer": "Dynamic Routes allow creating pages with variable paths (like [id].js). The parameter is available in the router query object and during getStaticProps/getServerSideProps for data fetching based on the route."
  },
  {
    "id": "95",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Event Loop in JavaScript and how does it work?",
    "answer": "The Event Loop handles async operations by offloading tasks to system APIs when possible, then processing the callback queue. It continuously checks the call stack and when empty, moves callbacks from the queue to the stack."
  },
  {
    "id": "96",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are declaration files (.d.ts) in TypeScript?",
    "answer": "Declaration files provide type information for existing JavaScript code. They contain type declarations but no implementations, allowing TypeScript to understand the shape of JavaScript libraries without changing the original code."
  },
  {
    "id": "97",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a design system with Tailwind CSS?",
    "answer": "Define a comprehensive theme in tailwind.config.js with colors, typography, spacing, etc. Create reusable component templates. Use plugins for custom utilities. Document with Storybook or similar, and enforce consistency with linting rules."
  },
  {
    "id": "98",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the Cascade in CSS and how does it work?",
    "answer": "The Cascade determines which styles apply when multiple rules target the same element. It considers origin (user agent, user, author), importance (!important), specificity, and source order to resolve conflicts."
  },
  {
    "id": "99",
    "category": "html",
    "difficulty": "hard",
    "question": "What is the Shadow DOM and how does it work?",
    "answer": "The Shadow DOM is a browser technology that provides encapsulation for DOM and CSS. It allows creating scoped DOM trees with isolated styles and markup, used by Web Components to prevent style leakage and conflicts."
  },
  {
    "id": "100",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use functions in Sass?",
    "answer": "Define functions with @function name($params) { @return value; }. They can perform calculations, manipulate colors, etc. Use them like built-in functions: width: calculate-width(10px);"
  },
  {
    "id": "101",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all words in a string?",
    "answer": "Pattern: /\\w+/g will match sequences of word characters (letters, digits, underscores). For just letters, use /[a-zA-Z]+/g. Adjust based on your definition of 'word' (e.g., include apostrophes)."
  },
  {
    "id": "102",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How would you optimize complex queries in Prisma?",
    "answer": "Strategies include: selecting only needed fields, using proper indexes, batching queries, using raw SQL for complex operations, implementing caching, and using Prisma's query logging to identify slow queries."
  },
  {
    "id": "103",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle complex transactions?",
    "answer": "Drizzle provides a transaction API where you can wrap multiple operations in a callback. The transactions are atomic and can be nested. You can also use savepoints for partial rollbacks within transactions."
  },
  {
    "id": "104",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for scaling a backend service?",
    "answer": "Strategies include: horizontal scaling (more instances), vertical scaling (bigger machines), database read replicas, caching, CDNs, async processing, microservices, and optimizing database queries and indexes."
  },
  {
    "id": "105",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is libuv and how does Node.js use it?",
    "answer": "libuv is a C library that provides the event loop and async I/O capabilities to Node.js. It handles the thread pool for file I/O, DNS, and other operations that can't be done asynchronously at the OS level."
  },
  {
    "id": "106",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement real-time features in Express?",
    "answer": "Use WebSockets with libraries like Socket.IO or ws. For HTTP-based approaches, consider Server-Sent Events (SSE) or long polling. Integrate with a pub/sub system like Redis for scaling across multiple servers."
  },
  {
    "id": "107",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebSockets and when would you use them?",
    "answer": "WebSockets provide full-duplex communication over a single TCP connection. Use them for real-time features like chat, live updates, multiplayer games, or any app needing low-latency server-client communication."
  },
  {
    "id": "108",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Server Components?",
    "answer": "React Server Components are components that render on the server and can access server-side resources directly. They're sent to the client as a lightweight serialized format, reducing bundle size and enabling zero-bundle-size components."
  },
  {
    "id": "109",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle client-side navigation?",
    "answer": "Next.js uses client-side navigation via its Link component, which prefetches linked pages in the background. This provides SPA-like navigation without full page reloads, while maintaining SEO benefits and proper URL handling."
  },
  {
    "id": "110",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are JavaScript Generators and how do they work?",
    "answer": "Generators are functions that can be exited and later re-entered, with their context saved across re-entrances. Defined with function*, they yield values via yield and can be iterated manually with .next() or in loops."
  },
  {
    "id": "111",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are template literal types in TypeScript?",
    "answer": "Template literal types allow creating new string types by combining existing ones, similar to template literals in JavaScript. Example: type EventName<T extends string> = `${T}Changed` lets you create 'nameChanged', 'ageChanged', etc."
  },
  {
    "id": "112",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle responsive design in Tailwind CSS?",
    "answer": "Tailwind uses mobile-first breakpoints (sm, md, lg, xl, 2xl) as prefixes to utility classes. Example: 'md:text-lg' applies the large text size from the 'md' breakpoint up. Customize breakpoints in the config file."
  },
  {
    "id": "113",
    "category": "css",
    "difficulty": "medium",
    "question": "What is BEM methodology in CSS?",
    "answer": "BEM (Block, Element, Modifier) is a naming convention: .block__element--modifier. Blocks are standalone components, elements are parts of blocks, and modifiers alter appearance/behavior. It aims to make CSS more maintainable and reduce specificity issues."
  },
  {
    "id": "114",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "ARIA (Accessible Rich Internet Applications) attributes provide semantic information to assistive technologies. They're crucial for accessibility when native HTML semantics aren't sufficient, helping screen readers understand dynamic content and UI controls."
  },
  {
    "id": "115",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive typography system with Sass?",
    "answer": "Create a map of breakpoints and font sizes, then use mixins to generate responsive typography. Example: @mixin responsive-text($size) { font-size: map-get($sizes, $size); @each $bp, $value in $responsive-sizes { @media (min-width: $bp) { font-size: map-get($value, $size); } } }"
  },
  {
    "id": "116",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to validate a phone number with international formatting?",
    "answer": "Basic pattern: /^\\+[1-9]\\d{1,14}$/ (E.164 format). More specific patterns depend on country. For US: /^\\+1\\d{10}$/. Note that complete validation often requires additional checks or a library like libphonenumber."
  },
  {
    "id": "117",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle database connections with Prisma?",
    "answer": "Prisma manages connections via the Prisma Client, which uses a connection pool. Configure the connection URL in the DATABASE_URL environment variable or in the schema.prisma file. The client handles connection lifecycle automatically."
  },
  {
    "id": "118",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema validation?",
    "answer": "Drizzle validates schemas at compile time through TypeScript types. It ensures your table definitions match your database structure and that queries are type-safe against your schema definitions."
  },
  {
    "id": "119",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is the difference between stateful and stateless authentication?",
    "answer": "Stateful auth stores session data server-side (in memory/database), while stateless (like JWT) encodes all needed data in the token. Stateless scales better but is harder to invalidate; stateful allows immediate invalidation but needs session storage."
  },
  {
    "id": "120",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'fs' module in Node.js and what are its main methods?",
    "answer": "The 'fs' module provides file system operations. Main methods include: readFile/writeFile (async file I/O), readFileSync/writeFileSync (sync versions), promises API (fs.promises), createReadStream/createWriteStream (for large files), and stat (file metadata)."
  },
  {
    "id": "121",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware chaining in Express?",
    "answer": "Middleware chaining is the process where multiple middleware functions handle a request sequentially. Each middleware can process the request and either pass it to the next middleware with next() or end the chain by sending a response."
  },
  {
    "id": "122",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the CAP theorem and how does it affect database design?",
    "answer": "CAP theorem states a distributed system can only guarantee two of: Consistency (all nodes see same data), Availability (every request gets a response), Partition tolerance (system works despite network failures). Affects choice between CP (like MongoDB) or AP (like Cassandra) systems."
  },
  {
    "id": "123",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Fragments and why are they useful?",
    "answer": "Fragments (<></> or <Fragment>) let you group elements without adding extra DOM nodes. Useful when a component needs to return multiple adjacent elements but must have a single root, or when adding wrapper elements would break styling."
  },
  {
    "id": "124",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the 'next/image' component and why is it important?",
    "answer": "'next/image' is an optimized Image component that handles lazy loading, automatic resizing, format conversion, and proper sizing. It improves performance by serving correctly sized images for each device and using modern formats like WebP."
  },
  {
    "id": "125",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Temporal API in JavaScript?",
    "answer": "The Temporal API is a new proposal for better date/time handling in JavaScript. It provides immutable objects for dates, times, and durations, with better timezone support, arithmetic operations, and parsing/formatting capabilities than the Date object."
  },
  {
    "id": "126",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are namespace in TypeScript and when would you use them?",
    "answer": "Namespaces are TypeScript's way to organize code and prevent naming collisions. They're useful for grouping related functionality, especially in larger codebases. Modern TypeScript often uses ES modules instead, but namespaces remain for certain patterns."
  },
  {
    "id": "127",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a dark/light theme toggle with Tailwind CSS?",
    "answer": "Set dark mode to 'class' in config, toggle a 'dark' class on the HTML element, and use 'dark:' variants for dark mode styles. Combine with a state management solution (like React context) to persist the preference and handle toggling."
  },
  {
    "id": "128",
    "category": "css",
    "difficulty": "hard",
    "question": "What are CSS containment properties and how do they optimize rendering?",
    "answer": "CSS containment (like 'contain: layout paint style size') tells the browser which parts of the DOM can be treated as independent, allowing optimizations like limiting repaints to specific subtrees or skipping layout calculations for isolated components."
  },
  {
    "id": "129",
    "category": "html",
    "difficulty": "hard",
    "question": "What is the difference between 'defer' and 'async' attributes in script tags?",
    "answer": "'defer' scripts execute after HTML parsing is complete, in order. 'async' scripts download in parallel and execute as soon as available, potentially out of order. Both allow parallel downloading without blocking parsing."
  },
  {
    "id": "130",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Define maps with $map: (key: value, ...). Access values with map-get($map, key). Use @each to iterate: @each $key, $value in $map { ... }. Maps are useful for theme variables, breakpoints, or any key-value data."
  },
  {
    "id": "131",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to extract hashtags from a string?",
    "answer": "Pattern: /#\\w+/g will match hashtags starting with # followed by word characters. For more specific needs (like allowing underscores but not starting with numbers), adjust: /#[a-zA-Z_]\\w*/g."
  },
  {
    "id": "132",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How do you handle database schema changes in production with Prisma?",
    "answer": "Use Prisma Migrate to generate and apply migration files. For zero-downtime deployments, consider: writing backward-compatible migrations, splitting breaking changes into multiple deployments, or using shadow databases to test migrations first."
  },
  {
    "id": "133",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How would you implement soft deletes with Drizzle ORM?",
    "answer": "Add a 'deleted_at' column to your tables, then filter queries with .where(isNull(deletedAt)) or create a helper function that adds this condition automatically. For actual deletes, use a separate hard delete operation."
  },
  {
    "id": "134",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for handling database migrations in production?",
    "answer": "Strategies include: writing backward-compatible migrations, splitting large migrations into smaller ones, testing against a staging environment first, using blue-green deployments, having rollback plans, and considering zero-downtime migration patterns."
  },
  {
    "id": "135",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the difference between 'setImmediate' and 'process.nextTick' in Node.js?",
    "answer": "'process.nextTick' executes at the end of the current operation, before the event loop continues. 'setImmediate' runs during the check phase of the event loop. 'nextTick' has higher priority and can starve the event loop if misused."
  },
  {
    "id": "136",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement API versioning in Express?",
    "answer": "Common approaches include: URL path (/v1/resource), query parameter (/resource?version=1), custom headers, or content negotiation. Implement with route middleware that checks the version and routes to appropriate handlers or transforms responses accordingly."
  },
  {
    "id": "137",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the difference between SQL and NoSQL databases?",
    "answer": "SQL databases are relational, table-based, with predefined schemas and ACID transactions. NoSQL databases are non-relational, with flexible schemas (document, key-value, graph, etc.), and prioritize scalability and flexibility over strict consistency."
  },
  {
    "id": "138",
    "category": "react",
    "difficulty": "hard",
    "question": "What is Concurrent Mode in React?",
    "answer": "Concurrent Mode is a set of new React features that help apps stay responsive while rendering. It enables interruptible rendering, prioritized updates, and transitions between states. It's the foundation for features like Suspense and selective hydration."
  },
  {
    "id": "139",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle code splitting?",
    "answer": "Next.js automatically code splits by pages (each page is its own bundle). Dynamic imports (next/dynamic) allow component-level splitting. The framework also splits runtime, commons, and third-party libraries for optimal loading."
  },
  {
    "id": "140",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are Web Workers and when would you use them?",
    "answer": "Web Workers run scripts in background threads, separate from the main execution thread. Use them for CPU-intensive tasks (image processing, calculations) to avoid blocking the UI. They communicate with the main thread via message passing."
  },
  {
    "id": "141",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are mapped types in TypeScript?",
    "answer": "Mapped types create new types by transforming properties of existing types. Example: type Readonly<T> = { readonly [P in keyof T]: T[P] }. They're powerful for creating variations of types without repetition."
  },
  {
    "id": "142",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you extend Tailwind's default configuration?",
    "answer": "In tailwind.config.js, use the 'theme.extend' property to add to Tailwind's defaults without overriding them. For complete overrides, add properties directly to 'theme'. Plugins can also be used to add new utilities or components."
  },
  {
    "id": "143",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how do they differ from pseudo-classes?",
    "answer": "Pseudo-elements (::before, ::first-line) style specific parts of an element or generate content. Pseudo-classes (:hover, :nth-child()) style elements based on state or position. Pseudo-elements create virtual elements, pseudo-classes select existing ones in specific states."
  },
  {
    "id": "144",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the 'loading' attribute in images?",
    "answer": "The 'loading' attribute controls lazy loading behavior: 'lazy' defers loading until near viewport, 'eager' loads immediately. It improves performance by prioritizing visible content loading, especially for long pages with many images."
  },
  {
    "id": "145",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive grid system with Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints: @mixin grid($columns, $breakpoint) { @media (min-width: $breakpoint) { .grid-#{$columns} { display: grid; grid-template-columns: repeat($columns, 1fr); } } }. Call for each breakpoint/column count needed."
  },
  {
    "id": "146",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to match a hexadecimal color code?",
    "answer": "Pattern: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/. Matches # followed by 3 or 6 hex digits. For strict CSS colors (no shorthand): /^#([A-Fa-f0-9]{3}){1,2}$/. Add word boundaries if needed: /\\b#[A-Fa-f0-9]{3,6}\\b/"
  },
  {
    "id": "147",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How do you handle database indexing with Prisma?",
    "answer": "Define indexes in your Prisma schema using the @@index attribute on models. For complex indexes or full-text search, you may need to use raw SQL in migrations. Prisma also supports defining unique constraints with @@unique."
  },
  {
    "id": "148",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle full-text search?",
    "answer": "Drizzle provides SQL functions that can be used for full-text search, like to_tsvector and to_tsquery in PostgreSQL. You can write raw SQL queries with these functions or create helper functions that abstract the search implementation."
  },
  {
    "id": "149",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common API authentication methods?",
    "answer": "Common methods include: API keys, JWT (JSON Web Tokens), OAuth/OAuth2, Session cookies, Basic Auth, and OpenID Connect. The choice depends on factors like security needs, client types, and whether you need third-party access."
  },
  {
    "id": "150",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'vm' module in Node.js and when would you use it?",
    "answer": "The 'vm' module provides APIs for compiling and running code within V8 Virtual Machine contexts. It's used for running code in isolated environments (sandboxing), though should be used carefully as it's not completely secure for running untrusted code."
  },
  {
    "id": "151",
    "category": "all",
    "difficulty": "easy",
    "question": "What are the benefits of using a CSS preprocessor like Sass?",
    "answer": "Sass provides variables, nesting, mixins, functions, and other features that make CSS more maintainable, reusable, and easier to write. It helps organize large stylesheets and reduces repetition."
  },
  {
    "id": "152",
    "category": "react",
    "difficulty": "medium",
    "question": "Explain the concept of 'lifting state up' in React.",
    "answer": "Lifting state up means moving shared state to the closest common ancestor of components that need it. This allows sibling components to share and synchronize state through their parent component."
  },
  {
    "id": "153",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle dynamic imports and why are they useful?",
    "answer": "Next.js supports dynamic imports with next/dynamic, which allows code-splitting at the component level. This reduces initial bundle size by loading components only when needed, improving performance."
  },
  {
    "id": "154",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How would you implement a responsive navbar using Tailwind CSS?",
    "answer": "Use Tailwind's responsive prefixes (md:, lg:) to show/hide elements at different breakpoints. Combine with flex/grid for layout, and transition utilities for smooth mobile menu animations."
  },
  {
    "id": "155",
    "category": "css",
    "difficulty": "hard",
    "question": "What is the difference between CSS Grid and Flexbox? When would you use each?",
    "answer": "CSS Grid is for two-dimensional layouts (rows and columns), while Flexbox is for one-dimensional layouts (either row or column). Use Grid for overall page layout and Flexbox for aligning content within components."
  },
  {
    "id": "156",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop in JavaScript and how does it work?",
    "answer": "The event loop is what allows JavaScript to be non-blocking. It continuously checks the call stack and when empty, processes messages from the callback queue, enabling asynchronous behavior despite being single-threaded."
  },
  {
    "id": "157",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the alt attribute in image tags?",
    "answer": "The alt attribute provides alternative text for images when they cannot be displayed. It's important for accessibility (screen readers), SEO, and when images fail to load."
  },
  {
    "id": "158",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are TypeScript interfaces and how do they differ from type aliases?",
    "answer": "Interfaces define contracts for object shapes and can be extended or implemented. Type aliases can represent any type, including primitives and unions. Interfaces are generally preferred for object shapes as they're more extensible."
  },
  {
    "id": "159",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use mixins in Sass?",
    "answer": "Mixins are defined with @mixin name($params) { ... } and used with @include name(args). They allow reusable blocks of styles that can accept parameters for customization."
  },
  {
    "id": "160",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you write a regex to validate a URL?",
    "answer": "A basic URL regex: /^(https?:\\/\\/)?([\\w.-]+)\\.([a-z]{2,})([\\/\\w .-]*)*\\/?$/. This matches protocol, domain, and path components while allowing for optional parts."
  },
  {
    "id": "161",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle one-to-many relationships in Prisma?",
    "answer": "In Prisma, define a @relation field on the 'many' side model that references the 'one' side. The relation can be made optional or required depending on your data model needs."
  },
  {
    "id": "162",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle schema migrations?",
    "answer": "Drizzle provides a migration API where schema changes are defined in TypeScript. It generates SQL migration files that can be applied to the database while tracking which migrations have been executed."
  },
  {
    "id": "163",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common strategies for API rate limiting?",
    "answer": "Common strategies include token bucket, fixed window, and sliding window algorithms. Implementation can be done via middleware with counters stored in memory, Redis, or a database, often using IP or API keys as identifiers."
  },
  {
    "id": "164",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the purpose of the package.json file in Node.js?",
    "answer": "package.json stores project metadata, dependencies, scripts, and configuration. It's used by npm/yarn to manage packages, versions, and project setup, serving as the project manifest."
  },
  {
    "id": "165",
    "category": "express",
    "difficulty": "easy",
    "question": "How do you handle route parameters in Express?",
    "answer": "Route parameters are defined with a colon (e.g., '/users/:id') and accessed via req.params. They capture values at specific positions in the URL for dynamic routing."
  },
  {
    "id": "166",
    "category": "other",
    "difficulty": "medium",
    "question": "What is Docker and how does it benefit development?",
    "answer": "Docker is a containerization platform that packages applications with their dependencies. Benefits include consistent environments, isolation, easy scaling, simplified dependency management, and reproducible builds across machines."
  },
  {
    "id": "167",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Fiber and how does it improve rendering?",
    "answer": "React Fiber is a complete rewrite of React's reconciliation algorithm. It enables features like incremental rendering, better handling of animations, and the ability to split rendering work into chunks across multiple frames."
  },
  {
    "id": "168",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API Routes in Next.js and how do they work?",
    "answer": "API Routes allow creating API endpoints as Node.js serverless functions within Next.js. Files in the 'pages/api' directory become API endpoints that can handle HTTP requests and return responses."
  },
  {
    "id": "169",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement dark mode with Tailwind CSS?",
    "answer": "Configure dark mode in tailwind.config.js to use a class strategy. Toggle a 'dark' class on the HTML element, then use dark: prefixes for dark mode styles (e.g., dark:bg-gray-800)."
  },
  {
    "id": "170",
    "category": "css",
    "difficulty": "medium",
    "question": "What is the CSS Box Model and how does it work?",
    "answer": "The CSS Box Model describes how elements are laid out, consisting of content, padding, border, and margin. The box-sizing property controls whether width/height include padding and border (border-box) or just content (content-box)."
  },
  {
    "id": "171",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are JavaScript Generators and how do they work?",
    "answer": "Generators are functions that can be paused and resumed (function*). They yield values via yield and can be iterated manually with .next() or in loops. Useful for lazy evaluation and custom iterables."
  },
  {
    "id": "172",
    "category": "html",
    "difficulty": "medium",
    "question": "What are semantic HTML elements and why are they important?",
    "answer": "Semantic elements (<header>, <article>, <nav>) clearly describe their meaning to browsers and developers. They improve accessibility, SEO, and make code more readable by replacing generic <div> elements where appropriate."
  },
  {
    "id": "173",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are conditional types in TypeScript?",
    "answer": "Conditional types select between two types based on a condition: T extends U ? X : Y. They're powerful when combined with generics, allowing type transformations based on input types."
  },
  {
    "id": "174",
    "category": "sass",
    "difficulty": "easy",
    "question": "How do you create variables in Sass?",
    "answer": "Variables in Sass are declared with $ followed by the name: $primary-color: #333;. They're used by referencing the variable: color: $primary-color;. Variables can store colors, numbers, strings, lists, maps, and more."
  },
  {
    "id": "175",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate an email address?",
    "answer": "A basic email regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/. Note that complete email validation is complex and often better handled with simple confirmation emails or specialized libraries."
  },
  {
    "id": "176",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database transactions?",
    "answer": "Prisma provides $transaction for interactive transactions where operations can depend on previous results. For batch transactions of independent operations, use transaction([]). Both ensure atomicity - all operations succeed or none do."
  },
  {
    "id": "177",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle raw SQL queries?",
    "answer": "Drizzle provides a sql template tag for writing raw SQL queries with type safety. Values can be interpolated safely, and return types can be inferred. This allows leveraging database-specific features while maintaining type safety."
  },
  {
    "id": "178",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is JWT authentication and how does it work?",
    "answer": "JWT (JSON Web Tokens) are compact, URL-safe tokens that represent claims between parties. They consist of a header, payload, and signature. JWTs are stateless - the server validates the signature without storing session data."
  },
  {
    "id": "179",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What are worker threads in Node.js and when would you use them?",
    "answer": "Worker threads allow running JavaScript in parallel. They're useful for CPU-intensive tasks that would block the event loop, though I/O operations are still better handled asynchronously via the main thread."
  },
  {
    "id": "180",
    "category": "express",
    "difficulty": "medium",
    "question": "What is middleware in Express.js?",
    "answer": "Middleware are functions that have access to the request, response, and next function in the request-response cycle. They can execute code, modify objects, or end the cycle. Middleware runs in the order it's defined."
  },
  {
    "id": "181",
    "category": "other",
    "difficulty": "hard",
    "question": "What are microservices and when would you choose them over a monolith?",
    "answer": "Microservices are small, independent services that work together. Choose them for large teams, independent scaling needs, different tech stacks per component, or organizational alignment. Monoliths are simpler for small projects."
  },
  {
    "id": "182",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Portals and when would you use them?",
    "answer": "Portals provide a way to render children into a DOM node outside the parent component's hierarchy. Useful for modals, tooltips, or any UI that needs to break out of its container (e.g., for CSS z-index or positioning)."
  },
  {
    "id": "183",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": "ISR allows updating static pages after build time without rebuilding the entire site. You specify a revalidation time, and Next.js will regenerate the page in the background when requested after that time."
  },
  {
    "id": "184",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you customize Tailwind's default configuration?",
    "answer": "In tailwind.config.js, use the theme.extend property to add to defaults without overriding them. For complete overrides, add properties directly to theme. Plugins can also add new utilities or components."
  },
  {
    "id": "185",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS containment and how does it optimize performance?",
    "answer": "CSS containment (contain property) tells the browser that an element's subtree is independent of the rest of the page. This allows optimizations like limiting paint/layout to specific subtrees, improving rendering performance."
  },
  {
    "id": "186",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "answer": "'==' performs type coercion before comparison, while '===' (strict equality) checks both value and type without coercion. '===' is generally preferred as it's more predictable and avoids unexpected type conversions."
  },
  {
    "id": "187",
    "category": "html",
    "difficulty": "hard",
    "question": "What are Web Components and how do they work?",
    "answer": "Web Components are a set of web platform APIs that allow creating reusable custom elements with encapsulated functionality. They consist of Custom Elements, Shadow DOM, and HTML Templates."
  },
  {
    "id": "188",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards are expressions that perform runtime checks to narrow down the type of a variable within a block. They include typeof, instanceof checks, or custom functions with 'is' type predicates."
  },
  {
    "id": "189",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a theming system with Sass?",
    "answer": "Create a map of themes with color variables, then use mixins or functions to apply themes. Example: @mixin theme($theme) { --primary: map-get($theme, primary); } and apply with @include theme($light-theme);"
  },
  {
    "id": "190",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to find all numbers in a string?",
    "answer": "In JavaScript: const numbers = str.match(/\\d+/g); This returns an array of all sequences of digits. For decimal numbers: /\\d+\\.?\\d*/g. Adjust based on specific number format requirements."
  },
  {
    "id": "191",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle many-to-many relationships in Prisma?",
    "answer": "Prisma supports implicit many-to-many relations where you define @relation fields on both models. For explicit relations (with additional fields), create a join model with two @relation fields pointing to each side."
  },
  {
    "id": "192",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How would you implement pagination with Drizzle ORM?",
    "answer": "Use the .limit() and .offset() methods on queries. Example: db.select().from(users).limit(10).offset(20). For cursor-based pagination, use .where() with conditions based on the cursor value."
  },
  {
    "id": "193",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some strategies for optimizing database performance?",
    "answer": "Strategies include: adding proper indexes, optimizing query structure, implementing caching, using connection pooling, denormalizing where appropriate, partitioning large tables, and analyzing query execution plans."
  },
  {
    "id": "194",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'cluster' module in Node.js and why would you use it?",
    "answer": "The cluster module allows creating child processes (workers) that share server ports, enabling better utilization of multi-core systems. It helps improve performance by running multiple Node.js instances to handle the load."
  },
  {
    "id": "195",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement file uploads in Express?",
    "answer": "Use middleware like 'multer' to handle multipart/form-data. Configure storage (disk/memory), file filters, size limits, and processing. For large files, consider streaming processing to avoid memory issues."
  },
  {
    "id": "196",
    "category": "other",
    "difficulty": "medium",
    "question": "What is CI/CD and why is it important?",
    "answer": "CI (Continuous Integration) means regularly merging code changes into a shared repo with automated testing. CD (Continuous Delivery/Deployment) automates release processes. Together they enable faster, more reliable software releases."
  },
  {
    "id": "197",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Suspense and how does it work?",
    "answer": "Suspense lets components 'wait' for something before rendering. It's primarily used for code-splitting (with React.lazy) and data fetching. Components can suspend while loading, showing fallback UI until ready."
  },
  {
    "id": "198",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js provides an Image component that automatically optimizes images (resizing, format conversion, lazy loading) and serves them via a built-in image optimization API. It works with both local and remote images."
  },
  {
    "id": "199",
    "category": "tailwindcss",
    "difficulty": "easy",
    "question": "What is Tailwind CSS and how does it differ from traditional CSS frameworks?",
    "answer": "Tailwind CSS is a utility-first CSS framework that provides low-level utility classes to build custom designs directly in markup, rather than offering pre-designed components like Bootstrap."
  },
  {
    "id": "200",
    "category": "css",
    "difficulty": "medium",
    "question": "What is BEM methodology in CSS?",
    "answer": "BEM (Block, Element, Modifier) is a naming convention: .block__element--modifier. Blocks are standalone components, elements are parts of blocks, and modifiers alter appearance/behavior. It aims to make CSS more maintainable."
  },
  {
    "id": "201",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain the prototype chain in JavaScript.",
    "answer": "JavaScript uses prototypal inheritance where objects can inherit properties from other objects. Each object has a prototype (accessed via __proto__), and when a property isn't found, JavaScript looks up the prototype chain until it finds it or reaches null."
  },
  {
    "id": "202",
    "category": "html",
    "difficulty": "medium",
    "question": "What is the purpose of the 'defer' and 'async' attributes in script tags?",
    "answer": "'defer' scripts execute after HTML parsing is complete, in order. 'async' scripts download in parallel and execute as soon as available, potentially out of order. Both allow parallel downloading without blocking parsing."
  },
  {
    "id": "203",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are template literal types in TypeScript?",
    "answer": "Template literal types allow creating new string types by combining existing ones, similar to template literals in JavaScript. Example: type EventName<T extends string> = `${T}Changed` lets you create 'nameChanged', 'ageChanged', etc."
  },
  {
    "id": "204",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create loops in Sass and what are they useful for?",
    "answer": "Sass has @for, @each, and @while loops. Useful for generating utility classes, grid systems, or any repetitive CSS patterns. Example: @for $i from 1 through 12 { .col-#{$i} { width: $i * 8.33%; } }"
  },
  {
    "id": "205",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to parse and extract data from a URL?",
    "answer": "Example to extract parts: /^(https?:\\/\\/)?([^\\/?#]+)([^?#]*)(\\?[^#]*)?(#.*)?/. This captures protocol, domain, path, query, and hash segments. More specific patterns can be created for particular URL structures."
  },
  {
    "id": "206",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How does Prisma handle database schema validation?",
    "answer": "Prisma validates the schema against the database during introspection (when pulling the schema from an existing DB) and when generating the client. It checks for type consistency, relation integrity, and other constraints."
  },
  {
    "id": "207",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How would you implement soft deletes with Drizzle ORM?",
    "answer": "Add a 'deleted_at' column to your tables, then filter queries with .where(isNull(deletedAt)) or create a helper function that adds this condition automatically. For actual deletes, use a separate hard delete operation."
  },
  {
    "id": "208",
    "category": "backend",
    "difficulty": "medium",
    "question": "What is CORS and how do you handle it in a backend service?",
    "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that restricts cross-origin requests. Handle it by setting proper headers (Access-Control-Allow-Origin, etc.), implementing preflight request handling, and configuring allowed methods/headers."
  },
  {
    "id": "209",
    "category": "nodejs",
    "difficulty": "hard",
    "question": "What is the 'stream' module in Node.js and when would you use it?",
    "answer": "Streams are collections of data that might not be available all at once. They're useful for processing large files, handling real-time data, or any I/O operations where memory efficiency is important."
  },
  {
    "id": "210",
    "category": "express",
    "difficulty": "medium",
    "question": "How would you structure a large Express application?",
    "answer": "Organize by features/routes (not by file type), separate concerns (routes, controllers, services), use middleware for cross-cutting concerns, implement proper error handling, and consider using a DI container for complex apps."
  },
  {
    "id": "211",
    "category": "other",
    "difficulty": "hard",
    "question": "What is the CAP theorem and how does it affect database design?",
    "answer": "CAP theorem states a distributed system can only guarantee two of: Consistency (all nodes see same data), Availability (every request gets a response), Partition tolerance (system works despite network failures). Affects choice between CP (like MongoDB) or AP (like Cassandra) systems."
  },
  {
    "id": "212",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Fragments and why are they useful?",
    "answer": "Fragments (<></> or <Fragment>) let you group elements without adding extra DOM nodes. Useful when a component needs to return multiple adjacent elements but must have a single root, or when adding wrapper elements would break styling."
  },
  {
    "id": "213",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle client-side navigation?",
    "answer": "Next.js uses client-side navigation via its Link component, which prefetches linked pages in the background. This provides SPA-like navigation without full page reloads, while maintaining SEO benefits and proper URL handling."
  },
  {
    "id": "214",
    "category": "tailwindcss",
    "difficulty": "medium",
    "question": "How do you handle responsive design in Tailwind CSS?",
    "answer": "Tailwind uses mobile-first breakpoints (sm, md, lg, xl, 2xl) as prefixes to utility classes. Example: 'md:text-lg' applies the large text size from the 'md' breakpoint up. Customize breakpoints in the config file."
  },
  {
    "id": "215",
    "category": "css",
    "difficulty": "hard",
    "question": "What is CSS-in-JS and what are its advantages?",
    "answer": "CSS-in-JS is a pattern where CSS is written in JavaScript instead of separate files. Advantages include scoped styles, dynamic styling based on props/state, automatic vendor prefixing, and elimination of unused CSS."
  },
  {
    "id": "216",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript Promises and how do they work?",
    "answer": "Promises represent eventual completion of async operations. They can be in pending, fulfilled, or rejected states. You chain .then() for success cases and .catch() for errors, avoiding callback hell. Async/await provides syntactic sugar over promises."
  },
  {
    "id": "217",
    "category": "html",
    "difficulty": "easy",
    "question": "What is the purpose of the 'loading' attribute in images?",
    "answer": "The 'loading' attribute controls lazy loading behavior: 'lazy' defers loading until near viewport, 'eager' loads immediately. It improves performance by prioritizing visible content loading, especially for long pages with many images."
  },
  {
    "id": "218",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are utility types in TypeScript and how are they useful?",
    "answer": "Utility types (like Partial, Pick, Omit, Record) transform existing types in useful ways. They help create new types from existing ones without repetition, making type definitions more maintainable."
  },
  {
    "id": "219",
    "category": "sass",
    "difficulty": "hard",
    "question": "How would you implement a responsive grid system with Sass?",
    "answer": "Create a mixin that generates grid classes based on breakpoints: @mixin grid($columns, $breakpoint) { @media (min-width: $breakpoint) { .grid-#{$columns} { display: grid; grid-template-columns: repeat($columns, 1fr); } } }. Call for each breakpoint/column count needed."
  },
  {
    "id": "220",
    "category": "regex",
    "difficulty": "medium",
    "question": "How would you use regex to validate a password with specific requirements?",
    "answer": "Example for 8+ chars with uppercase, lowercase, number: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\\d]{8,}$/. This uses positive lookaheads to ensure each requirement is met before matching the password string."
  },
  {
    "id": "221",
    "category": "prisma orm",
    "difficulty": "medium",
    "question": "How do you handle database seeding with Prisma?",
    "answer": "Create a seed script that uses the Prisma client to insert initial data. You can run it with 'prisma db seed' or a custom script. For larger datasets, consider using raw SQL for better performance."
  },
  {
    "id": "222",
    "category": "drizzle orm",
    "difficulty": "medium",
    "question": "How does Drizzle ORM handle complex joins?",
    "answer": "Drizzle provides a query builder with methods like .innerJoin(), .leftJoin(), etc. You can chain these to build complex joins while maintaining type safety, and use the .fields() method to select specific columns."
  },
  {
    "id": "223",
    "category": "backend",
    "difficulty": "hard",
    "question": "What are some common API authentication methods?",
    "answer": "Common methods include: API keys, JWT (JSON Web Tokens), OAuth/OAuth2, Session cookies, Basic Auth, and OpenID Connect. The choice depends on factors like security needs, client types, and whether you need third-party access."
  },
  {
    "id": "224",
    "category": "nodejs",
    "difficulty": "medium",
    "question": "What is the 'require' cache in Node.js and how does it work?",
    "answer": "Node caches modules after first require to improve performance. Subsequent requires return the cached version. The cache is stored in require.cache and can be deleted if you need to reload a module."
  },
  {
    "id": "225",
    "category": "express",
    "difficulty": "hard",
    "question": "How would you implement real-time features in Express?",
    "answer": "Use WebSockets with libraries like Socket.IO or ws. For HTTP-based approaches, consider Server-Sent Events (SSE) or long polling. Integrate with a pub/sub system like Redis for scaling across multiple servers."
  },
  {
    "id": "226",
    "category": "other",
    "difficulty": "medium",
    "question": "What are WebSockets and when would you use them?",
    "answer": "WebSockets provide full-duplex communication over a single TCP connection. Use them for real-time features like chat, live updates, multiplayer games, or any app needing low-latency server-client communication."
  },
  {
    "id": "227",
    "category": "react",
    "difficulty": "hard",
    "question": "What is React Server Components?",
    "answer": "React Server Components are components that render on the server and can access server-side resources directly. They're sent to the client as a lightweight serialized format, reducing bundle size and enabling zero-bundle-size components."
  },
  {
    "id": "228",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Dynamic Routes in Next.js and how do they work?",
    "answer": "Dynamic Routes allow creating pages with variable paths (like [id].js). The parameter is available in the router query object and during getStaticProps/getServerSideProps for data fetching based on the route."
  },
  {
    "id": "229",
    "category": "tailwindcss",
    "difficulty": "hard",
    "question": "How would you implement a design system with Tailwind CSS?",
    "answer": "Define a comprehensive theme in tailwind.config.js with colors, typography, spacing, etc. Create reusable component templates. Use plugins for custom utilities. Document with Storybook or similar, and enforce consistency with linting rules."
  },
  {
    "id": "230",
    "category": "css",
    "difficulty": "medium",
    "question": "What are CSS pseudo-elements and how do they differ from pseudo-classes?",
    "answer": "Pseudo-elements (::before, ::first-line) style specific parts of an element or generate content. Pseudo-classes (:hover, :nth-child()) style elements based on state or position. Pseudo-elements create virtual elements, pseudo-classes select existing ones in specific states."
  },
  {
    "id": "231",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is the Temporal API in JavaScript?",
    "answer": "The Temporal API is a new proposal for better date/time handling in JavaScript. It provides immutable objects for dates, times, and durations, with better timezone support, arithmetic operations, and parsing/formatting capabilities than the Date object."
  },
  {
    "id": "232",
    "category": "html",
    "difficulty": "medium",
    "question": "What are ARIA attributes and why are they important?",
    "answer": "ARIA (Accessible Rich Internet Applications) attributes provide semantic information to assistive technologies. They're crucial for accessibility when native HTML semantics aren't sufficient, helping screen readers understand dynamic content and UI controls."
  },
  {
    "id": "233",
    "category": "typescript",
    "difficulty": "hard",
    "question": "What are declaration files (.d.ts) in TypeScript?",
    "answer": "Declaration files provide type information for existing JavaScript code. They contain type declarations but no implementations, allowing TypeScript to understand the shape of JavaScript libraries without changing the original code."
  },
  {
    "id": "234",
    "category": "sass",
    "difficulty": "medium",
    "question": "How do you create and use maps in Sass?",
    "answer": "Define maps with $map: (key: value, ...). Access values with map-get($map, key). Use @each to iterate: @each $key, $value in $map { ... }. Maps are useful for theme variables, breakpoints, or any key-value data."
  },
  {
    "id": "235",
    "category": "regex",
    "difficulty": "hard",
    "question": "How would you use regex to match a hexadecimal color code?",
    "answer": "Pattern: /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/. Matches # followed by 3 or 6 hex digits. For strict CSS colors (no shorthand): /^#([A-Fa-f0-9]{3}){1,2}$/. Add word boundaries if needed: /\\b#[A-Fa-f0-9]{3,6}\\b/"
  },
  {
    "id": "236",
    "category": "prisma orm",
    "difficulty": "hard",
    "question": "How do you handle database indexing with Prisma?",
    "answer": "Define indexes in your Prisma schema using the @@index attribute on models. For complex indexes or full-text search, you may need to use raw SQL in migrations. Prisma also supports defining unique constraints with @@unique."
  },
  {
    "id": "237",
    "category": "drizzle orm",
    "difficulty": "hard",
    "question": "How does Drizzle ORM handle full-text search?",
    "answer": "Drizzle provides SQL functions that can be used for full-text search, like to_tsvector and to_tsquery in PostgreSQL. You can write raw SQL queries with these functions or create helper functions that abstract the search implementation."
  },
  {
    "id": "238",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "What is the purpose of the '_app.js' file in Next.js?",
    "answer": "The '_app.js' file is used to initialize pages and override it to control page initialization. It allows you to persist layout between page changes, keep state when navigating pages, and inject additional data into pages."
  },
  {
    "id": "239",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle automatic code splitting?",
    "answer": "Next.js automatically code splits by pages - each page in the 'pages' directory becomes a separate bundle. It also supports dynamic imports for component-level code splitting using 'next/dynamic'."
  },
  {
    "id": "240",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how Next.js implements hybrid static & server rendering",
    "answer": "Next.js allows pages to choose their rendering method: Static Generation (SSG) at build time, Server-side Rendering (SSR) per request, or client-side rendering. This hybrid approach lets developers optimize each page based on its needs."
  },
  {
    "id": "241",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/head' component?",
    "answer": "The 'next/head' component allows you to append elements to the head of the HTML document. It's commonly used to set page titles, meta tags, links, and other head elements that need to change between pages."
  },
  {
    "id": "242",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you create a dynamic route in Next.js?",
    "answer": "Create a file with square brackets like '[id].js' in the pages directory. The parameter will be available in the router query object and in getStaticProps/getServerSideProps context."
  },
  {
    "id": "243",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is 'getStaticPaths' and when would you use it?",
    "answer": "'getStaticPaths' is used with 'getStaticProps' for dynamic routes to specify which paths should be pre-rendered at build time. It returns an object with 'paths' (which paths to render) and 'fallback' (how to handle paths not generated at build time)."
  },
  {
    "id": "244",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle CSS and Sass support?",
    "answer": "Next.js has built-in support for CSS modules (file.module.css) and Sass (.scss/.sass). You can also use global styles by importing CSS files in '_app.js'. For Sass support, you need to install 'sass' package."
  },
  {
    "id": "245",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next.config.js' file?",
    "answer": "The 'next.config.js' file is used to customize advanced Next.js behavior. You can configure redirects, rewrites, environment variables, webpack modifications, internationalization, and other framework settings."
  },
  {
    "id": "246",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you add environment variables in Next.js?",
    "answer": "Create a '.env.local' file in your project root and prefix variables with 'NEXT_PUBLIC_' to expose them to the browser. For server-only variables, omit the prefix and access them in API routes or getServerSideProps."
  },
  {
    "id": "247",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how Next.js handles automatic static optimization",
    "answer": "Next.js automatically determines if a page can be prerendered to static HTML by checking if it has blocking data requirements (getServerSideProps/getInitialProps). Pages without these are automatically optimized as static HTML."
  },
  {
    "id": "248",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between 'getServerSideProps' and 'getStaticProps'?",
    "answer": "'getServerSideProps' runs on every request and provides fresh data (SSR), while 'getStaticProps' runs at build time to generate static pages (SSG). Use the former for frequently updated data, the latter for better performance."
  },
  {
    "id": "249",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement internationalization (i18n) in Next.js?",
    "answer": "Next.js has built-in i18n routing support configured in 'next.config.js'. Define locales, default locale, and routing strategy (sub-path, domain, or hybrid). Use 'next/router' to handle locale switching and localized routing."
  },
  {
    "id": "250",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Next.js handle API routes middleware?",
    "answer": "API routes can use external middleware like 'micro' or 'connect'. For built-in solutions, you can create higher-order functions that wrap handlers to implement middleware logic like authentication, logging, or CORS."
  },
  {
    "id": "251",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of '_document.js' file?",
    "answer": "'_document.js' allows you to customize the entire HTML document structure. It's rendered only on the server and used to change the initial server-side rendered document markup, like adding lang attribute or third-party scripts."
  },
  {
    "id": "252",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you handle 404 pages in Next.js?",
    "answer": "Create a '404.js' file in the pages directory. Next.js will automatically use this as the 404 page. For custom 404s in getStaticPaths, return 'notFound: true' from getStaticProps."
  },
  {
    "id": "253",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement authentication in Next.js",
    "answer": "Common approaches include: using NextAuth.js for built-in auth, JWT tokens with API routes, session cookies with getServerSideProps, or third-party providers. Consider SSR for protected routes to prevent flash of unprotected content."
  },
  {
    "id": "254",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using Next.js Image component?",
    "answer": "The Image component provides automatic image optimization (resizing, format conversion), lazy loading, and responsive images. It improves performance by serving correctly sized images for each device and using modern formats like WebP."
  },
  {
    "id": "255",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you create a custom error page in Next.js?",
    "answer": "Create '_error.js' in the pages directory to override the default error page. It receives statusCode and err props. You can also create specific error pages like '500.js' for server errors."
  },
  {
    "id": "256",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement A/B testing in Next.js?",
    "answer": "Approaches include: using middleware to assign variants, feature flags in getServerSideProps, client-side variant selection with cookies, or edge functions for instant rollouts. Consider SSR for consistent variant assignment."
  },
  {
    "id": "257",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/script' component?",
    "answer": "The 'next/script' component optimizes loading of third-party scripts. It provides strategies like 'beforeInteractive' (before page is interactive), 'afterInteractive' (default, after hydration), and 'lazyOnload' (during idle time)."
  },
  {
    "id": "258",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you add analytics to a Next.js application?",
    "answer": "Common approaches: use 'next/script' to load analytics scripts, implement tracking in '_app.js', use API routes to proxy analytics requests, or leverage Next.js middleware for edge analytics."
  },
  {
    "id": "259",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement GraphQL in Next.js",
    "answer": "Options include: Apollo Client with SSR support, URQL, or direct GraphQL requests in getServerSideProps/getStaticProps. For API routes, you can implement a GraphQL server using libraries like graphql-js or Apollo Server."
  },
  {
    "id": "260",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of API routes in Next.js?",
    "answer": "API routes have a 10MB payload limit, timeout after 10s on Vercel, can't use getStaticProps/getServerSideProps, and are designed for serverless functions. For complex backends, consider a separate server or middleware."
  },
  {
    "id": "261",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement redirects in Next.js?",
    "answer": "Configure redirects in 'next.config.js' for simple cases. For dynamic redirects, use 'res.redirect()' in API routes or getServerSideProps. Client-side redirects can use 'router.push()'."
  },
  {
    "id": "262",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you optimize a large Next.js application?",
    "answer": "Strategies include: code splitting with dynamic imports, optimizing images, using ISR, implementing caching headers, reducing bundle size with tree-shaking, enabling compression, and using CDN for static assets."
  },
  {
    "id": "263",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/link' component?",
    "answer": "'next/link' enables client-side navigation between pages, prefetching linked pages in the background. It wraps anchor tags and provides SPA-like navigation without full page reloads while maintaining SEO benefits."
  },
  {
    "id": "264",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you handle forms in Next.js?",
    "answer": "Options include: standard HTML forms with API route handlers, client-side libraries like React Hook Form, or server-side handling with getServerSideProps. Consider CSR for complex forms, SSR for progressive enhancement."
  },
  {
    "id": "265",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement real-time features in Next.js",
    "answer": "Use WebSocket connections (via API routes), Server-Sent Events, or third-party services like Firebase, Pusher, or Ably. For frequent updates, consider SWR or React Query with fast refresh rates."
  },
  {
    "id": "266",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the security best practices for Next.js applications?",
    "answer": "Key practices: sanitize user input, use CSP headers, implement proper authentication, validate API responses, secure environment variables, use HTTPS, limit API route exposure, and keep dependencies updated."
  },
  {
    "id": "267",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement cookies in Next.js?",
    "answer": "Use the 'cookies' package or 'cookie' library in API routes or getServerSideProps. For client-side, use js-cookie or document.cookie. Consider httpOnly flags for secure cookies."
  },
  {
    "id": "268",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a multi-tenant SaaS application in Next.js?",
    "answer": "Approaches include: dynamic routing for tenants, database-level isolation, middleware for tenant resolution, feature flags, and tenant-specific configurations. Consider ISR for public tenant pages and SSR for private content."
  },
  {
    "id": "269",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/dynamic'?",
    "answer": "'next/dynamic' enables component-level code splitting by dynamically importing components. It helps reduce initial bundle size by loading components only when needed. Supports loading states via the 'loading' property."
  },
  {
    "id": "270",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement pagination in Next.js?",
    "answer": "Options include: query parameters for page numbers, infinite scroll with SWR, or cursor-based pagination. For SSG, use getStaticPaths with paginated paths. For SSR, handle in getServerSideProps."
  },
  {
    "id": "271",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a headless CMS with Next.js",
    "answer": "Fetch content via the CMS API in getStaticProps/getServerSideProps. Use ISR for content updates. For preview mode, implement API routes to handle draft content. Consider using webhooks for rebuild triggers."
  },
  {
    "id": "272",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using Next.js middleware?",
    "answer": "Middleware runs before cached content, enabling: A/B testing, authentication, bot detection, geolocation-based redirects, logging, and feature flags at the edge. It executes close to users for low latency."
  },
  {
    "id": "273",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a sitemap in Next.js?",
    "answer": "Options: generate dynamically via API route, create static 'sitemap.xml' in public folder, or use 'next-sitemap' package. For dynamic routes, include all paths from getStaticPaths or database queries."
  },
  {
    "id": "274",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a custom server with Next.js?",
    "answer": "Create a 'server.js' file using Express, Fastify, etc., and customize the request handling. However, this loses automatic static optimization and is discouraged unless necessary for specific server-side requirements."
  },
  {
    "id": "275",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/router'?",
    "answer": "'next/router' provides programmatic navigation and route information. It allows accessing query parameters, listening to route changes, and navigating between pages programmatically with methods like push, replace, and prefetch."
  },
  {
    "id": "276",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a loading indicator between page transitions?",
    "answer": "Use 'next/router' events ('routeChangeStart', 'routeChangeComplete') to track navigation state. Display a loading component in '_app.js' based on this state. Libraries like 'nprogress' provide stylish progress bars."
  },
  {
    "id": "277",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement WebSockets in Next.js",
    "answer": "Create a WebSocket server in an API route or separate server. On client-side, connect to the WebSocket in useEffect. For production, consider services like Pusher or Socket.IO with Redis for scaling across multiple servers."
  },
  {
    "id": "278",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the deployment options for Next.js applications?",
    "answer": "Options include: Vercel (optimized for Next.js), Node.js servers, Docker containers, static exports, serverless platforms (AWS Lambda, Netlify), and edge networks. Choose based on your rendering strategy and scalability needs."
  },
  {
    "id": "279",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a custom 500 error page?",
    "answer": "Create a '500.js' file in the pages directory. It will be used for server-side errors. You can customize the design and add helpful information like contact details or a way to report the error."
  },
  {
    "id": "280",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a multi-language blog in Next.js?",
    "answer": "Use Next.js i18n routing for language detection and URL structure. Store content in markdown files or CMS with language fields. Use 'next-mdx-remote' for MDX content. Implement language switcher with 'next/router'."
  },
  {
    "id": "281",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next/amp'?",
    "answer": "'next/amp' helps create AMP (Accelerated Mobile Pages) versions of your pages. It provides components and configuration to ensure AMP compatibility. You can create hybrid pages that work in both regular and AMP modes."
  },
  {
    "id": "282",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a contact form in Next.js?",
    "answer": "Create a form component with client-side validation. Handle submission via an API route that processes the data (sends email, saves to database). Consider using libraries like React Hook Form for form management."
  },
  {
    "id": "283",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a shopping cart in Next.js",
    "answer": "Options include: client-side state (context/Redux), cookies for persistence, API routes for server-side cart management. For SSR, use getServerSideProps to fetch cart data. Consider optimistic UI updates for better UX."
  },
  {
    "id": "284",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using SWR with Next.js?",
    "answer": "SWR provides client-side data fetching with caching, revalidation, focus tracking, and error handling. It complements Next.js SSR/SSG by handling client-side updates, reducing boilerplate for data fetching."
  },
  {
    "id": "285",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a dark mode toggle in Next.js?",
    "answer": "Use a context/provider to manage theme state. Store preference in localStorage. Apply dark classes to HTML element. For SSR, detect preference in getServerSideProps or use a CSS-only approach with prefers-color-scheme."
  },
  {
    "id": "286",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time dashboard in Next.js?",
    "answer": "Use WebSockets or Server-Sent Events for real-time updates. Implement client-side state management (SWR/React Query) with fast refresh rates. Consider ISR for initial data with client-side updates for fresh data."
  },
  {
    "id": "287",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-compose-plugins'?",
    "answer": "'next-compose-plugins' simplifies using multiple Next.js plugins together. It provides a clean way to compose plugin configurations without nested syntax, making the 'next.config.js' file more readable and maintainable."
  },
  {
    "id": "288",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a blog with Next.js?",
    "answer": "Options include: Markdown/MDX files in your project, headless CMS, or database content. Use getStaticPaths/getStaticProps for SSG. Implement dynamic routes for blog posts. Consider 'next-mdx-remote' for MDX content."
  },
  {
    "id": "289",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a search feature in Next.js",
    "answer": "Options: client-side filtering for small datasets, API route with database query, or third-party search service (Algolia, Elasticsearch). For SSR, handle in getServerSideProps. Consider debouncing input for performance."
  },
  {
    "id": "290",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of static export in Next.js?",
    "answer": "Static export doesn't support: API routes, getServerSideProps, rewrites/redirects, i18n routing, or fallback: true in getStaticPaths. It's best for fully static sites without server-side functionality."
  },
  {
    "id": "291",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a dropdown menu in Next.js?",
    "answer": "Create a component with state for open/closed. Use CSS for styling and transitions. Handle outside clicks to close. For accessibility, manage focus and ARIA attributes. Consider libraries like HeadlessUI for complex cases."
  },
  {
    "id": "292",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a payment system in Next.js?",
    "answer": "Integrate with Stripe, PayPal, etc. using their SDKs. Handle sensitive operations in API routes. Use webhooks for payment confirmation. Implement SSR for checkout pages to prevent client-side manipulation of prices."
  },
  {
    "id": "293",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-connect'?",
    "answer": "'next-connect' is a router/middleware for Next.js API routes, inspired by Express.js. It provides a familiar middleware pattern, route handlers, and error handling, making API route organization more structured and maintainable."
  },
  {
    "id": "294",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a modal in Next.js?",
    "answer": "Create a portal component that renders outside the main DOM hierarchy. Manage open/close state with context or props. Ensure proper focus management and ARIA attributes for accessibility. Consider libraries like React Modal."
  },
  {
    "id": "295",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time chat in Next.js",
    "answer": "Use WebSockets via API routes or services like Pusher/Socket.IO. Implement message persistence in a database. For UI, consider optimistic updates. Handle online status with heartbeat checks. Implement proper auth for private chats."
  },
  {
    "id": "296",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-seo'?",
    "answer": "'next-seo' simplifies managing SEO metadata in Next.js. It provides components for common SEO tags, JSON-LD structured data, and default configurations. Helps ensure consistent and optimized SEO across your application."
  },
  {
    "id": "297",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a carousel in Next.js?",
    "answer": "Options include: building a custom component with React state, using libraries like 'embla-carousel', or CSS-only solutions. Ensure responsive design and accessibility with proper ARIA attributes and keyboard navigation."
  },
  {
    "id": "298",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a video streaming platform in Next.js?",
    "answer": "Use API routes for video metadata. Implement adaptive streaming (HLS/DASH) with services like Mux or AWS Media Services. For UI, consider custom controls with 'react-player'. Implement caching for thumbnails and metadata."
  },
  {
    "id": "299",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-pwa'?",
    "answer": "'next-pwa' simplifies adding PWA (Progressive Web App) capabilities to Next.js. It handles service worker generation, offline support, and manifest configuration. Helps make your Next.js app installable and work offline."
  },
  {
    "id": "300",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a toast notification system in Next.js?",
    "answer": "Create a context/provider to manage notifications. Render toasts in a portal at app root. Implement different types (success, error) with auto-dismissal. Consider libraries like 'react-hot-toast' for pre-built solutions."
  },
  {
    "id": "301",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time collaborative editor in Next.js",
    "answer": "Use WebSockets or services like Firebase, Ably for real-time sync. Implement operational transformation or CRDTs for conflict resolution. Use contenteditable or libraries like Slate.js for the editor. Handle presence with heartbeat checks."
  },
  {
    "id": "302",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-i18next'?",
    "answer": "'next-i18next' provides advanced i18n features for Next.js including: namespaced translations, pluralization, context, formatting, and efficient loading of translation files. It builds on Next.js i18n routing with more localization features."
  },
  {
    "id": "303",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a tooltip in Next.js?",
    "answer": "Create a component that shows on hover/focus. Position with CSS or libraries like Popper.js. Ensure accessibility with ARIA attributes. Consider delay for hover intent. For complex cases, use libraries like Tippy.js."
  },
  {
    "id": "304",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time multiplayer game in Next.js?",
    "answer": "Use WebSockets for game state sync. Implement client-side prediction and server reconciliation. Handle matchmaking via API routes. Use requestAnimationFrame for smooth animations. Consider game engines like Phaser for complex games."
  },
  {
    "id": "305",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-sitemap'?",
    "answer": "'next-sitemap' automates sitemap generation for Next.js apps. It handles dynamic routes from getStaticPaths, creates sitemap index files for large sites, and can automatically update sitemaps when content changes."
  },
  {
    "id": "306",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a loading skeleton in Next.js?",
    "answer": "Create placeholder components that mimic content structure. Show while data is loading (use SWR's isLoading or custom state). Animate with CSS for better perceived performance. Consider libraries like 'react-loading-skeleton'."
  },
  {
    "id": "307",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a voice search feature in Next.js",
    "answer": "Use the Web Speech API for voice recognition. Handle permissions and fallbacks for unsupported browsers. Process voice input in API routes for complex queries. Provide visual feedback during speech input."
  },
  {
    "id": "308",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-auth'?",
    "answer": "'next-auth' provides complete authentication for Next.js with: built-in providers (OAuth, email), JWT & session management, CSRF protection, and database adapters. Simplifies implementing secure auth without writing boilerplate."
  },
  {
    "id": "309",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a responsive table in Next.js?",
    "answer": "Options: horizontal scroll for small screens, stack columns on mobile, or hide less important columns. Use CSS media queries. Consider libraries like 'react-table' for complex cases with sorting/pagination."
  },
  {
    "id": "310",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a virtualized list in Next.js?",
    "answer": "Use libraries like 'react-window' or 'react-virtualized' that render only visible items. Implement proper item sizing and dynamic measurement. Consider intersection observers for infinite loading with getServerSideProps."
  },
  {
    "id": "311",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-bundle-analyzer'?",
    "answer": "'next-bundle-analyzer' visualizes the size of webpack output files. It helps identify large dependencies, duplicate code, and optimization opportunities. Run during build to analyze and optimize your bundle size."
  },
  {
    "id": "312",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a date picker in Next.js?",
    "answer": "Use libraries like 'react-datepicker' or 'react-day-picker'. Handle timezones properly if needed. For accessibility, ensure proper labeling and keyboard navigation. Style to match your design system."
  },
  {
    "id": "313",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time stock market dashboard in Next.js",
    "answer": "Use WebSocket connections to market data APIs. Implement efficient data updates with windowing for large datasets. Use visualization libraries like Chart.js. Cache historical data in getStaticProps with ISR for updates."
  },
  {
    "id": "314",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-mdx-remote'?",
    "answer": "'next-mdx-remote' allows MDX content to be loaded from anywhere (CMS, database, filesystem). It supports frontmatter, custom components, and efficient hydration. Useful for blogs, docs, and content-heavy sites."
  },
  {
    "id": "315",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a color picker in Next.js?",
    "answer": "Use libraries like 'react-colorful' or native input[type=color]. Handle color conversions if needed. Provide accessible labels and output formats. Consider integrating with your design system's color palette."
  },
  {
    "id": "316",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time collaborative whiteboard in Next.js?",
    "answer": "Use WebSocket connections for drawing data. Implement operational transformation for conflict resolution. Use Canvas API or libraries like Konva.js for rendering. Handle presence with heartbeat checks. Optimize data transfer with throttling."
  },
  {
    "id": "317",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-fonts'?",
    "answer": "'next-fonts' optimizes font loading in Next.js. It automatically generates required @font-face CSS, preloads fonts, and can self-host font files. Helps avoid layout shifts and improves performance metrics like LCP."
  },
  {
    "id": "318",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a file upload in Next.js?",
    "answer": "Create a form with input[type=file]. Handle submission in an API route using 'multer' or similar. Show upload progress. Validate file types/sizes. Store files in cloud storage or filesystem with proper security."
  },
  {
    "id": "319",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time sports scoreboard in Next.js",
    "answer": "Use WebSocket connections to score data APIs. Implement efficient updates with batched re-renders. Use animation for score changes. Cache historical data in getStaticProps with ISR. Consider server push for critical updates."
  },
  {
    "id": "320",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits of using 'next-optimized-images'?",
    "answer": "'next-optimized-images' automatically optimizes images during build. Features include: format conversion (WebP), resizing, lazy loading, and placeholders. Reduces image size without manual optimization while maintaining quality."
  },
  {
    "id": "321",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a rating component in Next.js?",
    "answer": "Create interactive stars or other visual elements. Manage hover/selection state. Handle submission via API route if needed. Ensure accessibility with ARIA attributes. Consider libraries like 'react-rating' for advanced features."
  },
  {
    "id": "322",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How would you implement a real-time auction platform in Next.js?",
    "answer": "Use WebSockets for bid updates. Implement server-side validation for bids. Handle concurrency with optimistic UI updates. Use timers for auction end. Implement SSR for critical auction data to prevent manipulation."
  },
  {
    "id": "323",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of 'next-redux-wrapper'?",
    "answer": "'next-redux-wrapper' simplifies using Redux with Next.js. It handles store creation for each request, proper hydration between server and client, and integration with Next.js data fetching methods."
  },
  {
    "id": "324",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "How do you implement a tab component in Next.js?",
    "answer": "Manage active tab state. Handle keyboard navigation for accessibility. Style active tab distinctly. Consider URL integration for bookmarkable tabs. For complex cases, use libraries like 'react-tabs'."
  },
  {
    "id": "325",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "Explain how to implement a real-time traffic monitoring dashboard in Next.js",
    "answer": "Use WebSocket connections to traffic data APIs. Implement efficient data updates with visualization libraries like D3.js. Handle large datasets with windowing. Cache historical data in getStaticProps with ISR."
  }
]
