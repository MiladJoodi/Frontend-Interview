[
  {
    "id": "1",
    "category": "all",
    "difficulty": "easy",
    "question": "What is Next.js?",
    "answer": "Next.js is a popular React framework designed for building scalable, production-ready web applications. It provides features like server-side rendering, static site generation, and API routes."
  },
  {
    "id": "2",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the key features of Next.js?",
    "answer": "Key features of Next.js include: Server-Side Rendering (SSR), Static Site Generation (SSG), Incremental Static Regeneration (ISR), API Routes, File-based routing, Image Optimization, Automatic code splitting"
  },
  {
    "id": "3",
    "category": "react",
    "difficulty": "easy",
    "question": "How is Next.js different from React.js?",
    "answer": "While React.js is a library for building UIs, Next.js is a framework built on top of React, providing additional features such as SSR, SSG, and routing out of the box."
  },
  {
    "id": "4",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the advantages of using Next.js over React.js?",
    "answer": "Next.js offers: Better SEO performance through SSR, Built-in routing with file-based routing, Static site generation for faster page loads, Automatic code-splitting, leading to better performance."
  },
  {
    "id": "5",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How does Server-Side Rendering (SSR) work in Next.js?",
    "answer": "SSR in Next.js allows pages to be rendered on the server at request time, ensuring that the page's content is available to search engines and improving the initial load time."
  },
  {
    "id": "6",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Static Site Generation (SSG) in Next.js, and when would you use it?",
    "answer": "SSG generates HTML at build time for fast loading and improved SEO. It’s ideal for pages that don’t change often, such as blogs or marketing pages."
  },
  {
    "id": "7",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "What are API routes in Next.js, and how do they work?",
    "answer": "API routes allow you to build backend functionality directly in your Next.js app. These are serverless functions that handle HTTP requests like GET, POST, PUT, etc."
  },
  {
    "id": "8",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js, and how is it different from SSG?",
    "answer": "ISR enables static content to be updated after the site has been built, allowing you to regenerate pages in the background while serving static content to users."
  },
  {
    "id": "9",
    "category": "nextjs",
    "difficulty": "hard",
    "question": "How do you handle dynamic routes in Next.js?",
    "answer": "Dynamic routes in Next.js are handled using brackets ([]). For example, pages/[id].js will create dynamic routes based on the id parameter."
  },
  {
    "id": "10",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does code splitting work in Next.js?",
    "answer": "Next.js automatically splits code by page. This means only the necessary code for each page is loaded, improving performance and reducing bundle size."
  },
  {
    "id": "11",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between Static Rendering (SSG) and Server Rendering (SSR) in Next.js?",
    "answer": "SSG generates HTML at build time and serves it for faster page loads. SSR generates HTML on the server for each request, ensuring dynamic content."
  },
  {
    "id": "12",
    "category": "nextjs",
    "difficulty": "easy",
    "question": "What is the App Router in Next.js?",
    "answer": "The App Router in Next.js is a new routing system introduced to simplify the routing mechanism, offering enhanced flexibility and control compared to the Pages Router."
  },
  {
    "id": "13",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do layouts work with the App Router?",
    "answer": "Layouts in the App Router allow you to structure reusable components across multiple pages, making it easier to manage UI consistency and shared components."
  },
  {
    "id": "14",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between the app directory and the pages directory?",
    "answer": "The app directory is used with the new App Router and supports features like layouts, loading states, and more advanced routing capabilities. The pages directory is used in the traditional Pages Router."
  },
  {
    "id": "15",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Server Components and Client Components in Next.js?",
    "answer": "Server Components are rendered on the server and sent as HTML. Client Components are rendered on the client and allow for interactivity."
  },
  {
    "id": "16",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js improve SEO compared to traditional client-side rendering?",
    "answer": "Next.js supports SSR and SSG, which generates pre-rendered HTML content, making it more SEO-friendly compared to traditional client-side rendering (CSR)."
  },
  {
    "id": "17",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle environment variables?",
    "answer": "Environment variables are handled via .env files (e.g., .env.local) and can be accessed in both the client and server-side code using process.env."
  },
  {
    "id": "18",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create dynamic API routes in Next.js?",
    "answer": "Dynamic API routes are created by using the same bracket notation ([param]) in the pages/api directory."
  },
  {
    "id": "19",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Middleware in Next.js, and how do they work?",
    "answer": "Middleware allows you to run code before a request is completed, enabling features like authentication, logging, or redirecting users."
  },
  {
    "id": "20",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are React Server Components, and how are they used in Next.js?",
    "answer": "React Server Components allow parts of the UI to be rendered on the server, reducing the client-side JavaScript bundle size."
  },
  {
    "id": "21",
    "category": "javascript",
    "difficulty": "easy",
    "question": "Can you explain the difference between var, let, and const in JavaScript?",
    "answer": "var: Function-scoped and can be redeclared and updated. It is hoisted, meaning its declaration is moved to the top of its scope at compile time. let: Block-scoped and can be updated but not redeclared within the same scope. It is not hoisted in the same way as var. const: Block-scoped and cannot be updated or redeclared. The value must be assigned at declaration. It provides a way to define constants. Using let and const helps prevent common bugs due to scope issues and accidental reassignment."
  },
  {
    "id": "22",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you manage state in a React application?",
    "answer": "State management in React can be handled through: Local Component State: Using useState or class component state for simple scenarios. Context API: For prop drilling issues, to pass data through the component tree without passing props down manually at every level. State Management Libraries: Such as Redux, MobX, or Zustand for complex applications requiring a global state. Hooks: Custom hooks to encapsulate and reuse stateful logic. React Query or SWR: For server state management. The choice depends on the complexity and requirements of the application."
  },
  {
    "id": "23",
    "category": "react",
    "difficulty": "medium",
    "question": "What is the Virtual DOM, and how does React use it?",
    "answer": "The Virtual DOM is an in-memory representation of the real DOM elements generated by React components. When the state of a component changes, React updates the Virtual DOM tree. It then efficiently computes the minimal set of changes (diffing) needed to update the real DOM. This process improves performance by reducing direct manipulation of the DOM, which is an expensive operation."
  },
  {
    "id": "24",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Explain event delegation in JavaScript.",
    "answer": "Event Delegation leverages event bubbling to handle events at a higher level in the DOM rather than on individual nodes. Instead of adding event listeners to each child element, you attach a single event listener to a parent element. When an event is triggered on a child element, it bubbles up to the parent, where it can be captured and processed. This approach improves performance and simplifies code management, especially when dealing with dynamically added elements."
  },
  {
    "id": "25",
    "category": "html",
    "difficulty": "medium",
    "question": "What are Web Components, and how do they relate to custom elements?",
    "answer": "Web Components are a set of standardized APIs that enable the creation of reusable, encapsulated HTML tags. They consist of: Custom Elements: Define new types of HTML elements. Shadow DOM: Provides encapsulation for styles and markup. HTML Templates: Allow you to define reusable templates. Custom Elements are a key part of Web Components, allowing developers to create their own HTML tags with custom behavior and styling."
  },
  {
    "id": "26",
    "category": "css",
    "difficulty": "medium",
    "question": "How does CSS specificity work?",
    "answer": "CSS specificity determines which style rules apply to an element when multiple rules could apply: Inline Styles (style attribute) have the highest specificity. IDs (#id) have higher specificity than classes. Classes, Attributes, and Pseudo-classes (.class, [type=\"text\"], :hover) have medium specificity. Elements and Pseudo-elements (div, ::before) have the lowest specificity. Specificity is calculated based on the combination of selectors. When specificity is equal, the last rule defined takes precedence."
  },
  {
    "id": "27",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are Promises in JavaScript, and how do they differ from callbacks?",
    "answer": "Promises are objects representing the eventual completion or failure of an asynchronous operation. They provide methods like .then(), .catch(), and .finally() for handling asynchronous results. Promises vs. Callbacks: Promises allow for cleaner, more maintainable asynchronous code and better error handling. Callbacks can lead to \"callback hell,\" where nested callbacks make code difficult to read and maintain. Promises improve code readability and manageability compared to traditional callbacks."
  },
  {
    "id": "28",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Can you explain how closures work in JavaScript?",
    "answer": "A closure is a function that remembers its outer variables and can access them. This means a function can access variables from its own scope, the outer function's scope, and the global scope. Closures are created every time a function is created, at function creation time. They are useful for data privacy and emulating private methods."
  },
  {
    "id": "29",
    "category": "performance",
    "difficulty": "medium",
    "question": "How do you optimize the performance of a web application?",
    "answer": "Minimize HTTP Requests: Combine files, use sprites. Asynchronous Loading: Use async and defer for scripts. Caching: Implement browser caching and use a Content Delivery Network (CDN). Optimize Images: Compress images and use next-gen formats like WebP. Code Splitting: Use tools like Webpack to split code for lazy loading. Reduce Render-Blocking Resources: Optimize CSS and JavaScript delivery. Performance Monitoring: Use tools like Lighthouse and Chrome DevTools for auditing."
  },
  {
    "id": "30",
    "category": "pwa",
    "difficulty": "medium",
    "question": "What is the purpose of a Service Worker in a Progressive Web App (PWA)?",
    "answer": "Service Workers act as a proxy between the web application and the network. They enable features like offline support by caching assets and intercepting network requests. Support background synchronization and push notifications. Improve performance by controlling resource caching and retrieval."
  },
  {
    "id": "31",
    "category": "css",
    "difficulty": "easy",
    "question": "Explain the Box Model in CSS.",
    "answer": "The CSS Box Model is a box that wraps around every HTML element. It consists of: Content: The actual content like text or images. Padding: Space around the content inside the border. Border: A border that goes around the padding and content. Margin: Space outside the border between this and other elements. Understanding the box model is essential for layout and design."
  },
  {
    "id": "32",
    "category": "react",
    "difficulty": "medium",
    "question": "What are Higher-Order Components (HOCs) in React?",
    "answer": "An HOC is a function that takes a component and returns a new component. They are used to share common functionality between components. HOCs can inject props, manage state, or handle side effects. Example usage: const EnhancedComponent = withFeature(WrappedComponent);"
  },
  {
    "id": "33",
    "category": "accessibility",
    "difficulty": "medium",
    "question": "How do you ensure accessibility in web applications?",
    "answer": "Use Semantic HTML: Proper use of HTML elements. ARIA Attributes: Provide additional context where necessary. Keyboard Navigation: Ensure all interactive elements are accessible via keyboard. Contrast and Readability: Use appropriate color contrasts and text sizes. Alt Text for Images: Provide descriptive alt attributes. Testing: Use accessibility testing tools and assistive technologies."
  },
  {
    "id": "34",
    "category": "security",
    "difficulty": "medium",
    "question": "What is Cross-Origin Resource Sharing (CORS), and how does it work?",
    "answer": "CORS is a security feature that allows or restricts resources requested from another domain. It works by adding HTTP headers that specify which origins are permitted to read responses. Browsers enforce CORS policies, and servers must include appropriate headers like Access-Control-Allow-Origin. Preflight requests (OPTIONS method) are used for complex requests to check permissions."
  },
  {
    "id": "35",
    "category": "performance",
    "difficulty": "medium",
    "question": "Describe how you would implement lazy loading in a web application.",
    "answer": "For Images and Media: Use the loading=\"lazy\" attribute in <img> tags. Implement Intersection Observer API to load media when they enter the viewport. For Code: Use dynamic imports with Webpack or other bundlers. In React, use React.lazy() and Suspense for component-level code splitting. Benefits: Improves initial load time and performance. Reduces unnecessary data usage."
  },
  {
    "id": "36",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between == and === in JavaScript?",
    "answer": "== (Abstract Equality): Compares values after performing type coercion if types differ. === (Strict Equality): Compares both value and type without type coercion. Example: 0 == '0' is true. 0 === '0' is false. It's generally recommended to use === to avoid unexpected results due to type coercion."
  },
  {
    "id": "37",
    "category": "error_handling",
    "difficulty": "medium",
    "question": "How do you handle errors in asynchronous code?",
    "answer": "Promises: Use .catch() to handle rejections. Async/Await: Wrap await calls in try...catch blocks. Global Error Handlers: For unhandled promise rejections. Error Boundaries (React): Catch errors in component trees. Proper error handling ensures a better user experience and easier debugging."
  },
  {
    "id": "38",
    "category": "css",
    "difficulty": "medium",
    "question": "Explain the concept of responsive design and how you implement it.",
    "answer": "Responsive Design ensures that a website adapts to various screen sizes and devices. Implementation: Use flexible grid layouts with CSS Flexbox or Grid. Implement media queries to adjust styles based on viewport size. Use relative units like percentages and em or rem. Optimize images for different screen resolutions. Testing: Use browser developer tools and physical devices to test responsiveness."
  },
  {
    "id": "39",
    "category": "css",
    "difficulty": "medium",
    "question": "What is a CSS preprocessor, and why would you use one?",
    "answer": "CSS Preprocessors extend the capabilities of CSS by adding features like variables, nesting, mixins, and functions. Examples include Sass, Less, and Stylus. Benefits: Code reusability and maintainability. Easier to manage large CSS codebases. Can compile down to standard CSS for browser compatibility."
  },
  {
    "id": "40",
    "category": "react",
    "difficulty": "medium",
    "question": "Can you explain the concept of immutability and its importance in React?",
    "answer": "Immutability means that data cannot be changed after it's created. In React, immutability is important because it: Allows for predictable state changes. Helps in performance optimizations, as React can make shallow comparisons. Avoids unintended side effects. Implementation: Use methods that return new copies of data structures, like Object.assign or the spread operator. Utilize libraries like Immutable.js for complex data structures."
  },
  {
    "id": "41",
    "category": "webpack",
    "difficulty": "medium",
    "question": "What is Webpack, and why is it used?",
    "answer": "Webpack is a module bundler for JavaScript applications. Uses: Bundles JavaScript files for usage in a browser. Processes and bundles assets like CSS, images, and fonts through loaders. Enables code splitting and lazy loading. Supports plugins for extended functionality. Benefits: Manages dependencies efficiently. Optimizes assets for production."
  },
  {
    "id": "42",
    "category": "security",
    "difficulty": "medium",
    "question": "How do you prevent Cross-Site Scripting (XSS) attacks?",
    "answer": "Input Sanitization: Clean and validate all user inputs on the server side. Output Encoding: Escape user inputs before rendering them in the browser. Content Security Policy (CSP): Define trusted sources of content to prevent malicious scripts. Avoid Inline Scripts: Keep JavaScript code in external files. Use HTTPOnly Cookies: To prevent access to cookies via JavaScript. Regular Security Audits: Stay updated with security best practices."
  },
  {
    "id": "43",
    "category": "spa",
    "difficulty": "medium",
    "question": "What are the benefits and drawbacks of using Single Page Applications (SPAs)?",
    "answer": "Benefits: Smooth user experience with no full page reloads. Better performance after initial load. Easier to create mobile-like experiences. Drawbacks: SEO challenges, although this can be mitigated with server-side rendering. Initial load time might be longer. Browser history management can be complex. Choosing between SPA and traditional multi-page applications depends on the project requirements."
  },
  {
    "id": "44",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does the this keyword work in JavaScript?",
    "answer": "this refers to the object that is executing the current function. Contexts: Global Context: this refers to the global object (window in browsers). Object Method: this refers to the object owning the method. Event Handlers: this refers to the DOM element that triggered the event. Arrow Functions: Do not have their own this; they inherit it from the enclosing scope. Understanding this is crucial for object-oriented programming in JavaScript."
  },
  {
    "id": "45",
    "category": "backend",
    "difficulty": "medium",
    "question": "Explain the difference between RESTful APIs and GraphQL.",
    "answer": "RESTful APIs: Use HTTP methods and endpoints to access resources. Data is organized around resources. Can lead to over-fetching or under-fetching data. GraphQL: Uses a single endpoint. Clients specify exactly what data they need. Reduces the number of network requests. Requires a schema and resolvers. Choice Factors: Project requirements, data complexity, and team expertise."
  },
  {
    "id": "46",
    "category": "react",
    "difficulty": "medium",
    "question": "How do you manage styles in a large-scale React application?",
    "answer": "CSS Modules: Locally scoped CSS classes to components. Styled Components: CSS-in-JS library that allows writing CSS within JavaScript. Sass/Less: Use preprocessors for advanced CSS features. BEM Methodology: For naming conventions and organization. Theming: Use context or libraries to provide consistent styling. The approach depends on team preferences and project needs."
  },
  {
    "id": "47",
    "category": "react",
    "difficulty": "medium",
    "question": "What are React Hooks, and why were they introduced?",
    "answer": "React Hooks are functions that let you use state and other React features without writing a class. Common Hooks: useState for state management. useEffect for side effects. useContext for context API. Reasons for Introduction: Simplify stateful logic in functional components. Avoid the complexity of classes. Enable better code reuse through custom hooks."
  },
  {
    "id": "48",
    "category": "security",
    "difficulty": "medium",
    "question": "Describe how you would implement authentication in a single-page application.",
    "answer": "Token-Based Authentication: Use JWTs stored securely (preferably in HTTP-only cookies). Implement login flows to receive and store tokens. Route Protection: Use higher-order components or route guards to protect authenticated routes. Backend Integration: Set up API endpoints for authentication. Validate tokens on the server side. Security Considerations: Protect against XSS and CSRF attacks. Use HTTPS to encrypt data transmission."
  },
  {
    "id": "49",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is functional programming, and how does it apply to JavaScript?",
    "answer": "Functional Programming is a paradigm that treats computation as the evaluation of mathematical functions. Core Concepts: Pure Functions: No side effects and return the same output for the same input. Immutability: Data is not changed after creation. First-Class Functions: Functions are treated as values. Higher-Order Functions: Functions that take or return other functions. In JavaScript: Supports functional programming with features like map, reduce, filter, and function expressions."
  },
  {
    "id": "50",
    "category": "browser",
    "difficulty": "medium",
    "question": "How do you handle browser compatibility and polyfills?",
    "answer": "Feature Detection: Use Modernizr or similar tools to detect unsupported features. Polyfills: Include scripts that replicate modern functionality in older browsers (e.g., Babel polyfill). Transpilation: Use tools like Babel to convert ES6+ code to ES5. Progressive Enhancement: Build functionality that works on all browsers, enhancing where possible. Testing: Regularly test across different browsers and devices. Use Can I Use: Check feature support before implementation."
  },
  {
    "id": "51",
    "category": "user_centered_design",
    "difficulty": "easy",
    "question": "What is User Centered Design?",
    "answer": "User-Centered Design is all about designing with the user in mind at every step. By focusing on real user needs and involving them throughout the development process, products are more likely to be successful, user-friendly, and meet the actual demands of the target audience."
  },
  {
    "id": "52",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is callback hell?",
    "answer": "Callback Hell refers to the anti-pattern of having multiple nested callbacks, which leads to code that's hard to read and maintain. By using Promises, Async/Await, and proper code structuring, you can write cleaner asynchronous code and avoid falling into Callback Hell."
  },
  {
    "id": "53",
    "category": "solid",
    "difficulty": "medium",
    "question": "What does SOLID stand for?",
    "answer": "The SOLID principles serve as guidelines for developers to build software that is easy to manage, extend, and scale. By following these principles, you can create robust systems that stand the test of time and adapt gracefully to new requirements."
  },
  {
    "id": "54",
    "category": "security",
    "difficulty": "medium",
    "question": "What is Clickjacking?",
    "answer": "Clickjacking, also known as a \"UI redress attack,\" is a malicious technique where an attacker tricks a user into clicking on something different from what the user perceives, potentially leading to unauthorized actions or revealing confidential information. Example: A user visits a malicious website that loads a banking website's login button underneath a fake \"Play Video\" button. When the user clicks to play the video, they are actually clicking the login button on the banking site, potentially initiating an unintended action."
  },
  {
    "id": "55",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is Coercion in JavaScript?",
    "answer": "Coercion in JavaScript refers to the process of converting a value from one data type to another. JavaScript performs coercion in two ways: implicit (automatic) and explicit (manual)."
  },
  {
    "id": "56",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is IIFE in JavaScript?",
    "answer": "An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. It's a design pattern that provides a private scope for your code."
  },
  {
    "id": "57",
    "category": "css",
    "difficulty": "medium",
    "question": "What is a Grid System in CSS?",
    "answer": "A Grid System in CSS is a layout framework that allows developers to create complex, responsive web designs with ease. It provides a structured way to arrange content in rows and columns, facilitating the creation of responsive and flexible layouts."
  },
  {
    "id": "58",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are Namespaces in JavaScript?",
    "answer": "In JavaScript, a namespace is a container that allows developers to group related code under a unique name to avoid naming collisions and keep the global scope clean. Since JavaScript doesn't have built-in namespace support like some other languages, developers create namespaces using objects, modules, or immediately invoked function expressions (IIFEs)."
  },
  {
    "id": "59",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the use of use strict directive in JavaScript?",
    "answer": "The use strict directive is used to write the clean JavaScript code which is less prone to errors. It catches common coding errors like assigning a variable without declaring it or passing different parameters with same names to a function etc."
  },
  {
    "id": "60",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the purpose of passing defer or async attributes to the script tag?",
    "answer": "Passing the defer or async attributes to a <script> tag controls how the browser loads and executes external JavaScript files, improving page load performance by optimizing script handling. defer Attribute Purpose: Instructs the browser to download the script in parallel with HTML parsing but delay execution until after the entire document has been parsed. async Attribute Purpose: Tells the browser to download the script in parallel and execute it as soon as it's ready, without waiting for HTML parsing to complete."
  },
  {
    "id": "61",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is JavaScript?",
    "answer": "JavaScript is a high-level programming language mainly used to create interactive features on websites. It runs in browsers but can also run on servers with Node.js. It supports different programming styles like object-oriented and functional programming."
  },
  {
    "id": "62",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between var, let, and const?",
    "answer": "var is function-scoped, can be redeclared, and hoisted with an initial value of undefined. let is block-scoped, cannot be redeclared in the same scope, hoisted but uninitialized (temporal dead zone). const is block-scoped and cannot be reassigned, but objects declared with it can be mutated."
  },
  {
    "id": "63",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are data types in JavaScript?",
    "answer": "There are primitive types like string, number, boolean, null, undefined, symbol, bigint which are immutable and stored by value. Non-primitive types like objects, arrays, and functions are mutable and stored by reference."
  },
  {
    "id": "64",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between == and ===?",
    "answer": "== compares values after type coercion (loose equality). === compares both value and type strictly. Use === to avoid unexpected bugs."
  },
  {
    "id": "65",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting means variable and function declarations are moved to the top of their scope before execution. var variables are hoisted and initialized with undefined. let and const are hoisted but not initialized (temporal dead zone). Functions are fully hoisted."
  },
  {
    "id": "66",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are closures in JavaScript?",
    "answer": "Closures happen when a function remembers variables from its outer scope, even after the outer function has finished running."
  },
  {
    "id": "67",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code runs line by line and blocks further execution until it finishes. Asynchronous code runs in the background, letting other code continue, using callbacks, promises, or async/await."
  },
  {
    "id": "68",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are arrow functions?",
    "answer": "Arrow functions provide a shorter syntax and do not have their own this context, making them useful for callbacks but not as object methods or constructors."
  },
  {
    "id": "69",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is lexical scope?",
    "answer": "Lexical scope means variables are accessible based on where they are written in the code, not where they are called from."
  },
  {
    "id": "70",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop?",
    "answer": "The event loop manages how JavaScript handles asynchronous tasks by moving them between the call stack and the task queue, ensuring the code runs smoothly without blocking."
  },
  {
    "id": "71",
    "category": "javascript",
    "difficulty": "hard",
    "question": "How do you clone an object?",
    "answer": "For shallow copies, use Object.assign({}, obj) or spread syntax {...obj}. For deep copies, use JSON.parse(JSON.stringify(obj)) but it loses functions and special types. For complex needs, use libraries like Lodash’s cloneDeep()."
  },
  {
    "id": "72",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between map(), filter(), and reduce()?",
    "answer": "map() transforms each item and returns a new array. filter() returns items that match a condition. reduce() combines all items into one value."
  },
  {
    "id": "73",
    "category": "javascript",
    "difficulty": "easy",
    "question": "How do you check if a value is an array?",
    "answer": "Use Array.isArray(value). Avoid typeof because it returns \"object\" for arrays."
  },
  {
    "id": "74",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is destructuring in JavaScript?",
    "answer": "Destructuring lets you extract values from arrays or objects into variables easily."
  },
  {
    "id": "75",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the spread operator?",
    "answer": "The spread operator ... expands elements of arrays or objects, useful for cloning or merging."
  },
  {
    "id": "76",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are promises in JavaScript?",
    "answer": "Promises represent the result of an async operation and have states: pending, fulfilled, or rejected. They help avoid callback hell."
  },
  {
    "id": "77",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is async/await?",
    "answer": "async functions return promises. await pauses the function until the promise resolves, making async code easier to read."
  },
  {
    "id": "78",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the use of fetch()?",
    "answer": "fetch() is a browser API to make HTTP requests. It returns a promise and works well with async/await."
  },
  {
    "id": "79",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle errors with async/await?",
    "answer": "Use try...catch blocks around await calls to catch errors gracefully."
  },
  {
    "id": "80",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is Promise.all()?",
    "answer": "Promise.all() runs multiple promises in parallel and resolves when all succeed or rejects if any fail."
  },
  {
    "id": "81",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript modules?",
    "answer": "Modules let you organize code using export and import, making code reusable and maintainable."
  },
  {
    "id": "82",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What's the difference between null and undefined?",
    "answer": "undefined means a variable is declared but not assigned a value. null is an explicit assignment meaning no value."
  },
  {
    "id": "83",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain debounce and throttle.",
    "answer": "Debounce delays a function until a certain time has passed since the last call. Throttle limits a function to run at most once in a set time interval."
  },
  {
    "id": "84",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the this keyword?",
    "answer": "this refers to the object that owns the current function or method. Arrow functions do not have their own this."
  },
  {
    "id": "85",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is prototypal inheritance?",
    "answer": "Objects inherit properties and methods from other objects through a prototype chain instead of classical classes."
  },
  {
    "id": "86",
    "category": "dom",
    "difficulty": "medium",
    "question": "What is the DOM?",
    "answer": "The Document Object Model is a tree structure representing HTML elements of a webpage, which JavaScript can manipulate."
  },
  {
    "id": "87",
    "category": "dom",
    "difficulty": "medium",
    "question": "What's the difference between == and === in DOM comparison?",
    "answer": "Use === to check if two DOM nodes refer to the exact same element."
  },
  {
    "id": "88",
    "category": "dom",
    "difficulty": "medium",
    "question": "How do you select elements in the DOM?",
    "answer": "Use methods like document.getElementById(), document.querySelector(), and document.querySelectorAll()."
  },
  {
    "id": "89",
    "category": "dom",
    "difficulty": "medium",
    "question": "What is event delegation?",
    "answer": "Event delegation involves attaching a single event listener to a parent element to handle events on its children, improving performance."
  },
  {
    "id": "90",
    "category": "dom",
    "difficulty": "medium",
    "question": "How do you prevent default behavior in an event?",
    "answer": "Call event.preventDefault() inside the event handler."
  },
  {
    "id": "91",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are template literals?",
    "answer": "Template literals use backticks to create strings with embedded expressions and multiline support."
  },
  {
    "id": "92",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a callback function?",
    "answer": "A callback is a function passed to another function to be executed later, common in async programming and event handling."
  },
  {
    "id": "93",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are the falsy values in JavaScript?",
    "answer": "Falsy values are: false, 0, '' (empty string), null, undefined, and NaN."
  },
  {
    "id": "94",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Difference between typeof and instanceof?",
    "answer": "typeof returns the type as a string. instanceof checks if an object inherits from a constructor’s prototype."
  },
  {
    "id": "95",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are immediately invoked function expressions (IIFE)?",
    "answer": "An IIFE is a function that runs as soon as it is defined, helping to avoid polluting the global scope."
  },
  {
    "id": "96",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between shallow and deep copy?",
    "answer": "Shallow copy copies only the top-level properties, while deep copy duplicates everything recursively."
  },
  {
    "id": "97",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does garbage collection work in JavaScript?",
    "answer": "JavaScript automatically removes objects from memory when there are no references left to them."
  },
  {
    "id": "98",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between localStorage, sessionStorage, and cookies?",
    "answer": "localStorage stores data permanently, sessionStorage clears data when the tab closes, and cookies are small data sent with requests and used for things like authentication."
  },
  {
    "id": "99",
    "category": "pwa",
    "difficulty": "medium",
    "question": "What is a service worker?",
    "answer": "A service worker is a background script that enables offline access, push notifications, and caching in Progressive Web Apps."
  },
  {
    "id": "100",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are higher-order functions?",
    "answer": "Higher-order functions take other functions as arguments or return functions, enabling powerful functional programming patterns."
  },
  {
    "id": "101",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is JavaScript?",
    "answer": "JavaScript, created by Brendan Eich in 1995, is one of the most widely used web development languages. It was designed to build dynamic web pages at first. A script is a JS program that may be added to the HTML of any web page. When the page loads, these scripts execute automatically."
  },
  {
    "id": "102",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between var, let, and const?",
    "answer": "var is function-scoped, can be redeclared, and hoisted with an initial value of undefined. let is block-scoped, cannot be redeclared in the same scope, hoisted but uninitialized (temporal dead zone). const is block-scoped and cannot be reassigned, but objects declared with it can be mutated."
  },
  {
    "id": "103",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are data types in JavaScript?",
    "answer": "There are primitive types like string, number, boolean, null, undefined, symbol, bigint which are immutable and stored by value. Non-primitive types like objects, arrays, and functions are mutable and stored by reference."
  },
  {
    "id": "104",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between == and ===?",
    "answer": "== compares values after type coercion (loose equality). === compares both value and type strictly. Use === to avoid unexpected bugs."
  },
  {
    "id": "105",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting means variable and function declarations are moved to the top of their scope before execution. var variables are hoisted and initialized with undefined. let and const are hoisted but not initialized (temporal dead zone). Functions are fully hoisted."
  },
  {
    "id": "106",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are closures in JavaScript?",
    "answer": "Closures happen when a function remembers variables from its outer scope, even after the outer function has finished running."
  },
  {
    "id": "107",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code runs line by line and blocks further execution until it finishes. Asynchronous code runs in the background, letting other code continue, using callbacks, promises, or async/await."
  },
  {
    "id": "108",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are arrow functions?",
    "answer": "Arrow functions provide a shorter syntax and do not have their own this context, making them useful for callbacks but not as object methods or constructors."
  },
  {
    "id": "109",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is lexical scope?",
    "answer": "Lexical scope means variables are accessible based on where they are written in the code, not where they are called from."
  },
  {
    "id": "110",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop?",
    "answer": "The event loop manages how JavaScript handles asynchronous tasks by moving them between the call stack and the task queue, ensuring the code runs smoothly without blocking."
  },
  {
    "id": "111",
    "category": "javascript",
    "difficulty": "hard",
    "question": "How do you clone an object?",
    "answer": "For shallow copies, use Object.assign({}, obj) or spread syntax {...obj}. For deep copies, use JSON.parse(JSON.stringify(obj)) but it loses functions and special types. For complex needs, use libraries like Lodash’s cloneDeep()."
  },
  {
    "id": "112",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between map(), filter(), and reduce()?",
    "answer": "map() transforms each item and returns a new array. filter() returns items that match a condition. reduce() combines all items into one value."
  },
  {
    "id": "113",
    "category": "javascript",
    "difficulty": "easy",
    "question": "How do you check if a value is an array?",
    "answer": "Use Array.isArray(value). Avoid typeof because it returns \"object\" for arrays."
  },
  {
    "id": "114",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is destructuring in JavaScript?",
    "answer": "Destructuring lets you extract values from arrays or objects into variables easily."
  },
  {
    "id": "115",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the spread operator?",
    "answer": "The spread operator ... expands elements of arrays or objects, useful for cloning or merging."
  },
  {
    "id": "116",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are promises in JavaScript?",
    "answer": "Promises represent the result of an async operation and have states: pending, fulfilled, or rejected. They help avoid callback hell."
  },
  {
    "id": "117",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is async/await?",
    "answer": "async functions return promises. await pauses the function until the promise resolves, making async code easier to read."
  },
  {
    "id": "118",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the use of fetch()?",
    "answer": "fetch() is a browser API to make HTTP requests. It returns a promise and works well with async/await."
  },
  {
    "id": "119",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle errors with async/await?",
    "answer": "Use try...catch blocks around await calls to catch errors gracefully."
  },
  {
    "id": "20",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is Promise.all()?",
    "answer": "Promise.all() runs multiple promises in parallel and resolves when all succeed or rejects if any fail."
  },
  {
    "id": "21",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript modules?",
    "answer": "Modules let you organize code using export and import, making code reusable and maintainable."
  },
  {
    "id": "22",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What's the difference between null and undefined?",
    "answer": "undefined means a variable is declared but not assigned a value. null is an explicit assignment meaning no value."
  },
  {
    "id": "23",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain debounce and throttle.",
    "answer": "Debounce delays a function until a certain time has passed since the last call. Throttle limits a function to run at most once in a set time interval."
  },
  {
    "id": "24",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the this keyword?",
    "answer": "this refers to the object that owns the current function or method. Arrow functions do not have their own this."
  },
  {
    "id": "25",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is prototypal inheritance?",
    "answer": "Objects inherit properties and methods from other objects through a prototype chain instead of classical classes."
  },
  {
    "id": "26",
    "category": "dom",
    "difficulty": "medium",
    "question": "What is the DOM?",
    "answer": "The Document Object Model is a tree structure representing HTML elements of a webpage, which JavaScript can manipulate."
  },
  {
    "id": "27",
    "category": "dom",
    "difficulty": "medium",
    "question": "What's the difference between == and === in DOM comparison?",
    "answer": "Use === to check if two DOM nodes refer to the exact same element."
  },
  {
    "id": "28",
    "category": "dom",
    "difficulty": "medium",
    "question": "How do you select elements in the DOM?",
    "answer": "Use methods like document.getElementById(), document.querySelector(), and document.querySelectorAll()."
  },
  {
    "id": "29",
    "category": "dom",
    "difficulty": "medium",
    "question": "What is event delegation?",
    "answer": "Event delegation involves attaching a single event listener to a parent element to handle events on its children, improving performance."
  },
  {
    "id": "30",
    "category": "dom",
    "difficulty": "medium",
    "question": "How do you prevent default behavior in an event?",
    "answer": "Call event.preventDefault() inside the event handler."
  },
  {
    "id": "31",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are template literals?",
    "answer": "Template literals use backticks to create strings with embedded expressions and multiline support."
  },
  {
    "id": "32",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a callback function?",
    "answer": "A callback is a function passed to another function to be executed later, common in async programming and event handling."
  },
  {
    "id": "33",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are the falsy values in JavaScript?",
    "answer": "Falsy values are: false, 0, '' (empty string), null, undefined, and NaN."
  },
  {
    "id": "34",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Difference between typeof and instanceof?",
    "answer": "typeof returns the type as a string. instanceof checks if an object inherits from a constructor’s prototype."
  },
  {
    "id": "35",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are immediately invoked function expressions (IIFE)?",
    "answer": "An IIFE is a function that runs as soon as it is defined, helping to avoid polluting the global scope."
  },
  {
    "id": "36",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between shallow and deep copy?",
    "answer": "Shallow copy copies only the top-level properties, while deep copy duplicates everything recursively."
  },
  {
    "id": "37",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does garbage collection work in JavaScript?",
    "answer": "JavaScript automatically removes objects from memory when there are no references left to them."
  },
  {
    "id": "38",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between localStorage, sessionStorage, and cookies?",
    "answer": "localStorage stores data permanently, sessionStorage clears data when the tab closes, and cookies are small data sent with requests and used for things like authentication."
  },
  {
    "id": "39",
    "category": "pwa",
    "difficulty": "medium",
    "question": "What is a service worker?",
    "answer": "A service worker is a background script that enables offline access, push notifications, and caching in Progressive Web Apps."
  },
  {
    "id": "40",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are higher-order functions?",
    "answer": "Higher-order functions take other functions as arguments or return functions, enabling powerful functional programming patterns."
  },
  {
    "id": "41",
    "category": "tailwind",
    "difficulty": "easy",
    "question": "How can you optimize performance in a Next.js app?",
    "answer": "Use next/image for images, Use SSR or SSG where appropriate, Enable lazy loading for components, Use dynamic imports and code splitting, Minimize third-party libraries"
  },
  {
    "id": "42",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is ISR (Incremental Static Regeneration) and how do you use it?",
    "answer": "ISR allows you to update static content after the site is built using revalidate in getStaticProps."
  },
  {
    "id": "43",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle redirects in Next.js?",
    "answer": "Redirects are configured in next.config.js using the redirects() function."
  },
  {
    "id": "44",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between getStaticProps and getServerSideProps?",
    "answer": "getStaticProps: Fetches data at build time. getServerSideProps: Fetches data on each request."
  },
  {
    "id": "45",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you use environment variables in Next.js?",
    "answer": "Store variables in .env.local, and access them with process.env.MY_VAR. Prefix with NEXT_PUBLIC_ to use them in the client."
  },
  {
    "id": "46",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add custom headers in Next.js?",
    "answer": "Use headers() in next.config.js to add custom HTTP headers."
  },
  {
    "id": "47",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the Image component in Next.js?",
    "answer": "It’s a built-in component that optimizes images with lazy loading, resizing, and format conversion."
  },
  {
    "id": "48",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you prefetch pages in Next.js?",
    "answer": "Using next/link, prefetching is enabled by default on visible links. You can also manually enable it with prefetch={true}."
  },
  {
    "id": "49",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between useRouter and Link?",
    "answer": "useRouter: Hook to access routing methods. Link: Component for client-side navigation."
  },
  {
    "id": "50",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you implement middleware in Next.js?",
    "answer": "Add a middleware.ts file in the root or a route directory to intercept requests and modify behavior."
  },
  {
    "id": "51",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is Edge Middleware in Next.js?",
    "answer": "Runs on the edge (closer to users) for faster response times, used for auth, redirects, rewrites, etc."
  },
  {
    "id": "52",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you protect routes in Next.js?",
    "answer": "Use middleware or HOCs to check authentication before rendering protected routes."
  },
  {
    "id": "53",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you set up API rate limiting in Next.js?",
    "answer": "Use libraries like express-rate-limit or custom logic inside API routes to track and limit requests."
  },
  {
    "id": "54",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is ISR's revalidate property?",
    "answer": "It defines how often a page should be regenerated in seconds."
  },
  {
    "id": "55",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you deploy a Next.js app?",
    "answer": "You can deploy to Vercel, Netlify, or any server that supports Node.js. Vercel is the recommended platform."
  },
  {
    "id": "56",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you use Next.js with Tailwind CSS?",
    "answer": "Install Tailwind, add it to postcss.config.js, and import it in your main CSS file."
  },
  {
    "id": "57",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between next dev, next build, and next start?",
    "answer": "next dev: Starts the dev server, next build: Builds the app for production, next start: Starts the production server"
  },
  {
    "id": "58",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What’s new in Next.js 13/14/15?",
    "answer": "Includes App Router, Server Components, Layouts, React 18 support, and better performance tools."
  },
  {
    "id": "59",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does ISR help improve performance?",
    "answer": "ISR delivers static pages but allows them to be updated in the background, improving freshness and speed."
  },
  {
    "id": "60",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle errors in API routes?",
    "answer": "Use try-catch blocks, return proper status codes and messages, and log errors."
  },
  {
    "id": "61",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How can you add analytics to a Next.js app?",
    "answer": "Use tools like Google Analytics, Plausible, or Vercel Analytics, often via custom _app.tsx."
  },
  {
    "id": "62",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to create a custom App component?",
    "answer": "Create _app.js or _app.tsx inside the pages directory to override default App behavior."
  },
  {
    "id": "63",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to create a custom Document?",
    "answer": "Use _document.js to customize the HTML structure, add fonts, or manage the <html> and <body> tags."
  },
  {
    "id": "64",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are loading UI components in the App Router?",
    "answer": "Special files like loading.tsx used to show UI during lazy data fetching or navigation."
  },
  {
    "id": "65",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is a fallback page in Next.js?",
    "answer": "Used during ISR or dynamic routes to show a loading state while a page is being generated."
  },
  {
    "id": "66",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are dynamic imports?",
    "answer": "They allow you to load components on demand using next/dynamic."
  },
  {
    "id": "67",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does Next.js support internationalization (i18n)?",
    "answer": "Define locales and defaultLocale in next.config.js, and Next.js will handle route-based translations."
  },
  {
    "id": "68",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are Parallel Routes in Next.js?",
    "answer": "Allow rendering different layouts or content in parallel within the same page structure."
  },
  {
    "id": "69",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are Intercepting Routes?",
    "answer": "Enable custom rendering for a nested route from a parent segment without full remounting."
  },
  {
    "id": "70",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can you use Redux with Next.js?",
    "answer": "Yes, use next-redux-wrapper to integrate Redux for SSR and SSG support."
  },
  {
    "id": "71",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add meta tags in Next.js?",
    "answer": "Use the Head component from next/head to manage <title>, <meta>, etc."
  },
  {
    "id": "72",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you fetch data from an external API?",
    "answer": "Use fetch, axios, or getServerSideProps/getStaticProps for server-side fetching."
  },
  {
    "id": "73",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle 404 pages in Next.js?",
    "answer": "Create pages/404.js to customize the \"Page Not Found\" experience."
  },
  {
    "id": "74",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is next export?",
    "answer": "Exports your Next.js app as a static site with no server rendering or dynamic routes."
  },
  {
    "id": "75",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can you use GraphQL in Next.js?",
    "answer": "Yes, with libraries like Apollo Client or urql."
  },
  {
    "id": "76",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle authentication in Next.js?",
    "answer": "Use libraries like next-auth, or custom logic with JWTs, cookies, sessions."
  },
  {
    "id": "77",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can Next.js be used for mobile apps?",
    "answer": "Not directly, but you can build PWAs or use APIs with React Native frontends."
  },
  {
    "id": "78",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is pre-rendering?",
    "answer": "Rendering HTML in advance either at build time (SSG) or request time (SSR)."
  },
  {
    "id": "79",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you create a sitemap?",
    "answer": "Use packages like next-sitemap or write custom scripts to generate one during build."
  },
  {
    "id": "80",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you create a robots.txt?",
    "answer": "Add it to the public folder or generate it dynamically in API routes or middleware."
  },
  {
    "id": "81",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to add Google Fonts in Next.js?",
    "answer": "Use the <link> tag in _document.js or use @next/font for better performance."
  },
  {
    "id": "82",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How does lazy loading work?",
    "answer": "Lazy loading in Next.js loads components/images only when they enter the viewport."
  },
  {
    "id": "83",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you test a Next.js app?",
    "answer": "Use Jest and React Testing Library for unit/integration tests; Playwright or Cypress for E2E."
  },
  {
    "id": "84",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle state across pages?",
    "answer": "Use global state tools like Redux, Context API, Zustand, or Jotai."
  },
  {
    "id": "85",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can you use MongoDB with Next.js?",
    "answer": "Yes. You can use it via API routes or connect in getServerSideProps."
  },
  {
    "id": "86",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to create breadcrumbs in Next.js?",
    "answer": "Use useRouter to track path and build a breadcrumb component dynamically."
  },
  {
    "id": "87",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you improve accessibility?",
    "answer": "Use semantic HTML, ARIA labels, and audit with Lighthouse or axe-core."
  },
  {
    "id": "88",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to add a loading spinner?",
    "answer": "Use state to conditionally render a loading spinner or use App Router’s loading.tsx."
  },
  {
    "id": "89",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to implement dark mode?",
    "answer": "Use useState, localStorage, or libraries like next-themes."
  },
  {
    "id": "90",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is a layout shift and how to prevent it?",
    "answer": "It’s when content moves during load. Use defined image dimensions, avoid late-loading fonts."
  },
  {
    "id": "91",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is hydration?",
    "answer": "The process where React makes HTML interactive on the client side."
  },
  {
    "id": "92",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What is the difference between CSR and SSR?",
    "answer": "CSR renders in the browser; SSR renders on the server and sends HTML to the browser."
  },
  {
    "id": "93",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are RSC (React Server Components)?",
    "answer": "React components rendered on the server to reduce JS sent to the client."
  },
  {
    "id": "94",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Can you use cookies in Next.js?",
    "answer": "Yes. Read/write cookies in API routes, getServerSideProps, or middleware."
  },
  {
    "id": "95",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you handle form submissions?",
    "answer": "Use client-side fetch to call API routes or use traditional <form> with action set to your route."
  },
  {
    "id": "96",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to add CORS support?",
    "answer": "Add headers in API routes or middleware."
  },
  {
    "id": "97",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What’s the best way to structure a Next.js project?",
    "answer": "Use folders like components, pages, lib, styles, public, and hooks for better organization."
  },
  {
    "id": "98",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you add custom fonts?",
    "answer": "Add them to the public folder or use Google Fonts via _document.js."
  },
  {
    "id": "99",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How to create reusable layouts?",
    "answer": "Use layout components and wrap them in _app.js or App Router’s layout.tsx."
  },
  {
    "id": "100",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "How do you implement role-based access control?",
    "answer": "Check user roles in middleware, API routes, or getServerSideProps."
  },
  {
    "id": "101",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are the limitations of Next.js?",
    "answer": "Less flexible for dynamic content without SSR, Limited plugin ecosystem compared to Gatsby, SSR can increase server costs"
  },
  {
    "id": "102",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "What are some good libraries to use with Next.js?",
    "answer": "next-auth, swr, react-query, axios, tailwindcss"
  },
  {
    "id": "103",
    "category": "tailwind",
    "difficulty": "medium",
    "question": "Why choose Next.js for your next project?",
    "answer": "SEO-friendly, Fast performance, SSR/SSG flexibility, Developer experience"
  },
  {
    "id": "104",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is JavaScript?",
    "answer": "JavaScript is a high-level programming language mainly used to create interactive features on websites. It runs in browsers but can also run on servers with Node.js. It supports different programming styles like object-oriented and functional programming."
  },
  {
    "id": "105",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between var, let, and const?",
    "answer": "var is function-scoped, can be redeclared, and hoisted with an initial value of undefined. let is block-scoped, cannot be redeclared in the same scope, hoisted but uninitialized (temporal dead zone). const is block-scoped and cannot be reassigned, but objects declared with it can be mutated."
  },
  {
    "id": "106",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are data types in JavaScript?",
    "answer": "There are primitive types like string, number, boolean, null, undefined, symbol, bigint which are immutable and stored by value. Non-primitive types like objects, arrays, and functions are mutable and stored by reference."
  },
  {
    "id": "107",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the difference between == and ===?",
    "answer": "== compares values after type coercion (loose equality). === compares both value and type strictly. Use === to avoid unexpected bugs."
  },
  {
    "id": "108",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is hoisting in JavaScript?",
    "answer": "Hoisting means variable and function declarations are moved to the top of their scope before execution. var variables are hoisted and initialized with undefined. let and const are hoisted but not initialized (temporal dead zone). Functions are fully hoisted."
  },
  {
    "id": "109",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What are closures in JavaScript?",
    "answer": "Closures happen when a function remembers variables from its outer scope, even after the outer function has finished running."
  },
  {
    "id": "110",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between synchronous and asynchronous code?",
    "answer": "Synchronous code runs line by line and blocks further execution until it finishes. Asynchronous code runs in the background, letting other code continue, using callbacks, promises, or async/await."
  },
  {
    "id": "111",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are arrow functions?",
    "answer": "Arrow functions provide a shorter syntax and do not have their own this context, making them useful for callbacks but not as object methods or constructors."
  },
  {
    "id": "112",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is lexical scope?",
    "answer": "Lexical scope means variables are accessible based on where they are written in the code, not where they are called from."
  },
  {
    "id": "113",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the event loop?",
    "answer": "The event loop manages how JavaScript handles asynchronous tasks by moving them between the call stack and the task queue, ensuring the code runs smoothly without blocking."
  },
  {
    "id": "114",
    "category": "javascript",
    "difficulty": "hard",
    "question": "How do you clone an object?",
    "answer": "For shallow copies, use Object.assign({}, obj) or spread syntax {...obj}. For deep copies, use JSON.parse(JSON.stringify(obj)) but it loses functions and special types. For complex needs, use libraries like Lodash’s cloneDeep()."
  },
  {
    "id": "115",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between map(), filter(), and reduce()?",
    "answer": "map() transforms each item and returns a new array. filter() returns items that match a condition. reduce() combines all items into one value."
  },
  {
    "id": "116",
    "category": "javascript",
    "difficulty": "easy",
    "question": "How do you check if a value is an array?",
    "answer": "Use Array.isArray(value). Avoid typeof because it returns \"object\" for arrays."
  },
  {
    "id": "117",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is destructuring in JavaScript?",
    "answer": "Destructuring lets you extract values from arrays or objects into variables easily."
  },
  {
    "id": "118",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What is the spread operator?",
    "answer": "The spread operator ... expands elements of arrays or objects, useful for cloning or merging."
  },
  {
    "id": "119",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are promises in JavaScript?",
    "answer": "Promises represent the result of an async operation and have states: pending, fulfilled, or rejected. They help avoid callback hell."
  },
  {
    "id": "120",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is async/await?",
    "answer": "async functions return promises. await pauses the function until the promise resolves, making async code easier to read."
  },
  {
    "id": "121",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the use of fetch()?",
    "answer": "fetch() is a browser API to make HTTP requests. It returns a promise and works well with async/await."
  },
  {
    "id": "122",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How do you handle errors with async/await?",
    "answer": "Use try...catch blocks around await calls to catch errors gracefully."
  },
  {
    "id": "123",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is Promise.all()?",
    "answer": "Promise.all() runs multiple promises in parallel and resolves when all succeed or rejects if any fail."
  },
  {
    "id": "124",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are JavaScript modules?",
    "answer": "Modules let you organize code using export and import, making code reusable and maintainable."
  },
  {
    "id": "125",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What's the difference between null and undefined?",
    "answer": "undefined means a variable is declared but not assigned a value. null is an explicit assignment meaning no value."
  },
  {
    "id": "126",
    "category": "javascript",
    "difficulty": "hard",
    "question": "Explain debounce and throttle.",
    "answer": "Debounce delays a function until a certain time has passed since the last call. Throttle limits a function to run at most once in a set time interval."
  },
  {
    "id": "127",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the this keyword?",
    "answer": "this refers to the object that owns the current function or method. Arrow functions do not have their own this."
  },
  {
    "id": "128",
    "category": "javascript",
    "difficulty": "hard",
    "question": "What is prototypal inheritance?",
    "answer": "Objects inherit properties and methods from other objects through a prototype chain instead of classical classes."
  },
  {
    "id": "129",
    "category": "dom",
    "difficulty": "medium",
    "question": "What is the DOM?",
    "answer": "The Document Object Model is a tree structure representing HTML elements of a webpage, which JavaScript can manipulate."
  },
  {
    "id": "130",
    "category": "dom",
    "difficulty": "medium",
    "question": "What's the difference between == and === in DOM comparison?",
    "answer": "Use === to check if two DOM nodes refer to the exact same element."
  },
  {
    "id": "131",
    "category": "dom",
    "difficulty": "medium",
    "question": "How do you select elements in the DOM?",
    "answer": "Use methods like document.getElementById(), document.querySelector(), and document.querySelectorAll()."
  },
  {
    "id": "132",
    "category": "dom",
    "difficulty": "medium",
    "question": "What is event delegation?",
    "answer": "Event delegation involves attaching a single event listener to a parent element to handle events on its children, improving performance."
  },
  {
    "id": "133",
    "category": "dom",
    "difficulty": "medium",
    "question": "How do you prevent default behavior in an event?",
    "answer": "Call event.preventDefault() inside the event handler."
  },
  {
    "id": "134",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are template literals?",
    "answer": "Template literals use backticks to create strings with embedded expressions and multiline support."
  },
  {
    "id": "135",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is a callback function?",
    "answer": "A callback is a function passed to another function to be executed later, common in async programming and event handling."
  },
  {
    "id": "136",
    "category": "javascript",
    "difficulty": "easy",
    "question": "What are the falsy values in JavaScript?",
    "answer": "Falsy values are: false, 0, '' (empty string), null, undefined, and NaN."
  },
  {
    "id": "137",
    "category": "javascript",
    "difficulty": "medium",
    "question": "Difference between typeof and instanceof?",
    "answer": "typeof returns the type as a string. instanceof checks if an object inherits from a constructor’s prototype."
  },
  {
    "id": "138",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are immediately invoked function expressions (IIFE)?",
    "answer": "An IIFE is a function that runs as soon as it is defined, helping to avoid polluting the global scope."
  },
  {
    "id": "139",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What's the difference between shallow and deep copy?",
    "answer": "Shallow copy copies only the top-level properties, while deep copy duplicates everything recursively."
  },
  {
    "id": "140",
    "category": "javascript",
    "difficulty": "medium",
    "question": "How does garbage collection work in JavaScript?",
    "answer": "JavaScript automatically removes objects from memory when there are no references left to them."
  },
  {
    "id": "141",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What is the difference between localStorage, sessionStorage, and cookies?",
    "answer": "localStorage stores data permanently, sessionStorage clears data when the tab closes, and cookies are small data sent with requests and used for things like authentication."
  },
  {
    "id": "142",
    "category": "pwa",
    "difficulty": "medium",
    "question": "What is a service worker?",
    "answer": "A service worker is a background script that enables offline access, push notifications, and caching in Progressive Web Apps."
  },
  {
    "id": "143",
    "category": "javascript",
    "difficulty": "medium",
    "question": "What are higher-order functions?",
    "answer": "Higher-order functions take other functions as arguments or return functions, enabling powerful functional programming patterns."
  },
  {
    "id": "144",
    "category": "typescript",
    "difficulty": "easy",
    "question": "What is TypeScript, and how does it differ from JavaScript?",
    "answer": "TypeScript is a statically-typed superset of JavaScript that adds optional static typing, interfaces, and other advanced features to the language. Developed and maintained by Microsoft, TypeScript compiles down to standard JavaScript, which can then run anywhere JavaScript is supported, such as in browsers or Node.js."
  },
  {
    "id": "145",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the benefits of using TypeScript over JavaScript?",
    "answer": "Using TypeScript over JavaScript offers several substantial benefits, particularly in larger codebases or when working in teams. Here are some of the key advantages: Type Safety and Early Error Detection, Improved Developer Productivity, Enhanced Maintainability, Support for Modern JavaScript Features, Object-Oriented Programming Support, Better Tooling for Large Teams, Type Definitions for External Libraries"
  },
  {
    "id": "146",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of \"type annotations\" in TypeScript.",
    "answer": "Type annotations in TypeScript refer to the process of explicitly specifying the types of variables, function parameters, return values, and other data structures. By providing type annotations, you help TypeScript’s type checker understand the expected types in your code, which in turn allows TypeScript to catch potential errors during development before the code is executed."
  },
  {
    "id": "147",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a variable in TypeScript with a specific type?",
    "answer": "In TypeScript, you declare a variable with a specific type by using the : syntax followed by the type. TypeScript uses type annotations to ensure that variables hold values of the correct type, helping catch errors at compile time."
  },
  {
    "id": "148",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the any type in TypeScript, and when should it be used?",
    "answer": "The any type in TypeScript is a dynamic type that can represent any value, essentially opting out of TypeScript's strict type system for that variable. When you assign the any type to a variable, TypeScript allows that variable to hold any kind of data — be it a number, string, object, function, or even null."
  },
  {
    "id": "149",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a function in TypeScript with specific argument and return types?",
    "answer": "In TypeScript, you can define a function with specific argument types and a return type by annotating the types of the parameters and the return type after the function signature. Here’s the general syntax: function functionName(parameterName: type): returnType { // Function body }"
  },
  {
    "id": "150",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type inference in TypeScript?",
    "answer": "Type inference in TypeScript refers to the compiler's ability to automatically deduce the type of a variable or expression based on its assigned value, without needing explicit type annotations. TypeScript uses inference to determine the type of variables, function return types, and other expressions at compile time."
  },
  {
    "id": "151",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the difference between let, const, and var in TypeScript.",
    "answer": "In TypeScript (and JavaScript), there are three ways to declare variables: let, const, and var. These keywords differ in how they handle scoping, mutability, and hoisting. let: Scope: Block-scoped (limited to the block, statement, or expression where it is used). Mutability: Variables declared with let can be reassigned to new values. Hoisting: Variables declared with let are hoisted to the top of their block, but are not initialized until their actual declaration, leading to a \"temporal dead zone\" where the variable cannot be accessed before its declaration. const: Scope: Block-scoped (same as let). Mutability: Variables declared with const cannot be reassigned after initialization. Hoisting: Like let, const variables are hoisted, but are also not initialized until their declaration. var: Scope: Function-scoped (variables declared with var are scoped to the nearest function block, or globally if declared outside of any function). Mutability: Variables declared with var can be reassigned. Hoisting: var declarations are hoisted to the top of their scope and initialized with undefined."
  },
  {
    "id": "152",
    "category": "typescript",
    "difficulty": "easy",
    "question": "What are TypeScript's primitive types?",
    "answer": "TypeScript provides several built-in primitive types. These types represent the simplest form of data in the language and cannot be broken down further: number, string, boolean, null, undefined, symbol, bigint"
  },
  {
    "id": "153",
    "category": "typescript",
    "difficulty": "easy",
    "question": "What is the difference between undefined and null in TypeScript?",
    "answer": "Both undefined and null represent \"empty\" or \"no value\" in TypeScript, but they are used in different contexts: undefined: This is the default value for uninitialized variables. It is assigned to a variable when it is declared but not given a value. null: Represents the intentional absence of any object value. It is one of JavaScript's primitive values."
  },
  {
    "id": "154",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an array in TypeScript?",
    "answer": "In TypeScript, you can define arrays in a few different ways, each allowing you to specify the type of elements the array will hold. Using the Array<T> syntax: This is the generic form where you specify the type of elements the array will hold inside the angle brackets. Using the type[] syntax: This is a shorthand version where you specify the element type followed by square brackets."
  },
  {
    "id": "155",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a tuple in TypeScript?",
    "answer": "A tuple in TypeScript is an ordered collection of elements where each element can have a different type. Tuples are similar to arrays, but unlike arrays where all elements must be of the same type, tuples allow for heterogenous types (i.e., different types in the same collection)."
  },
  {
    "id": "156",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an enum in TypeScript, and how is it different from a regular object?",
    "answer": "An enum in TypeScript is a special \"object\" that allows you to define a set of named constants. Enums can be used to represent a collection of related values, making your code more readable and less error-prone. The values in a numeric enum are assigned numeric values, starting from 0 by default. In string enums, each member must be initialized with a string value. Enums are more readable and can be used to represent a set of related constants. The javascript engine does not throw an error if you try to access a property that does not exist on an enum. Objects can hold any type of key-value pairs, but enums are more structured and provide better tooling and type safety."
  },
  {
    "id": "157",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an object type in TypeScript?",
    "answer": "In TypeScript, you can define the type of an object using interface or type alias, but the simplest way is to define an inline object type directly in the code. Using object type annotation: let person: { name: string; age: number } = { name: \"Alice\", age: 30 };"
  },
  {
    "id": "158",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the differences between TypeScript interfaces and types?",
    "answer": "Both interfaces and type aliases in TypeScript can be used to define object shapes, function signatures, and other types. However, they have some differences in terms of usage, extensibility, and syntax. Interfaces can be extended using the extends keyword, making them more suitable for object-oriented designs and inheritance. Type aliases cannot use extends in the same way, but can be composed with intersection (&) and union (|) types. Interfaces support declaration merging, meaning if you declare the same interface multiple times, TypeScript will automatically merge their definitions. Type aliases do not support declaration merging."
  },
  {
    "id": "159",
    "category": "typescript",
    "difficulty": "easy",
    "question": "What is the void type in TypeScript?",
    "answer": "The void type in TypeScript represents the absence of any value, typically used for functions that do not return a value. In JavaScript, functions can implicitly return undefined, but in TypeScript, you can explicitly declare a function’s return type as void."
  },
  {
    "id": "160",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does never mean in TypeScript, and when is it used?",
    "answer": "The never type represents values that never occur. It is used to define the return type of a function that will never successfully return a value, such as functions that always throw an error, or enters an infinite loop."
  },
  {
    "id": "161",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle type compatibility?",
    "answer": "TypeScript uses structural typing to handle type compatibility, meaning that two types are compatible if they have the same structure (i.e., the same properties with matching types), rather than relying on their names or definitions."
  },
  {
    "id": "162",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a type alias, and how does it work in TypeScript?",
    "answer": "A type alias in TypeScript allows you to create a custom name for any type. You can use type aliases to simplify complex types, provide clarity, or define reusable type definitions."
  },
  {
    "id": "163",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an optional property in TypeScript?",
    "answer": "In TypeScript, you can define an optional property in an object or interface by appending a question mark (?) to the property name."
  },
  {
    "id": "164",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the readonly modifier in TypeScript?",
    "answer": "The readonly modifier in TypeScript is used to make properties or variables immutable, meaning their values cannot be changed once they are initialized. This can be applied to object properties, arrays, and class members."
  },
  {
    "id": "165",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a function with optional parameters in TypeScript?",
    "answer": "In TypeScript, you can define a function with optional parameters by appending a question mark (?) to the parameter's name in the function signature. This means that the parameter is not required when the function is called."
  },
  {
    "id": "166",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define default values for function parameters in TypeScript?",
    "answer": "In TypeScript, you can define default values for function parameters by assigning the default value directly in the function signature. This allows you to provide a fallback value if no argument is passed for that parameter."
  },
  {
    "id": "167",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the as keyword in TypeScript?",
    "answer": "The as keyword in TypeScript is used for type assertion, which tells the TypeScript compiler to treat a value as a specific type, overriding its inferred or existing type. It doesn’t perform any runtime type checking, it only affects TypeScript’s type system."
  },
  {
    "id": "168",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the typeof operator in TypeScript?",
    "answer": "In TypeScript, the typeof operator is used to obtain the type of a variable or expression. It can be used in both expressions and type annotations."
  },
  {
    "id": "169",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a namespace in TypeScript, and how is it used?",
    "answer": "A namespace in TypeScript is a way to group related code, such as functions, classes, or variables, under a common name to avoid name collisions. Namespaces were previously used for module systems in TypeScript, but with the introduction of ES6 modules, their use has become less common. However, namespaces can still be useful in certain scenarios, especially when organizing code in large applications."
  },
  {
    "id": "170",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you perform type checking in TypeScript?",
    "answer": "TypeScript is statically typed, meaning that type checking is done at compile time. However, there are times when you might need to perform type checks at runtime as well. You can perform type checks using the typeof operator (for primitive types) or instanceof (for class instances)."
  },
  {
    "id": "171",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between interface and class in TypeScript?",
    "answer": "interface: Defines a contract for the structure of objects, classes, or function signatures. It does not provide any implementation, only the method and property signatures. abstract class: Can define both abstract methods (without implementation) and concrete methods (with implementation). It allows you to define common functionality that will be shared by derived classes."
  },
  {
    "id": "172",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the different ways to import and export modules in TypeScript?",
    "answer": "TypeScript supports several ways to import and export modules, which align with ES6 module syntax. Named exports and imports: Export: You can export multiple named items from a module. Import: You import specific members from a module using curly braces. Default export and import: Export: You can export a single default value from a module. Import: You import the default value directly without curly braces."
  },
  {
    "id": "173",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of \"declaration merging\" in TypeScript.",
    "answer": "Declaration merging is a feature in TypeScript that allows multiple declarations with the same name to be merged into a single definition. This is particularly useful for augmenting types and interfaces, allowing for flexible extension of existing code."
  },
  {
    "id": "174",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Next.js?",
    "answer": "Next.js is a popular React framework designed for building scalable, production-ready web applications. It provides features like server-side rendering, static site generation, and API routes."
  },
  {
    "id": "175",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the key features of Next.js?",
    "answer": "Key features of Next.js include:\n\nServer-Side Rendering (SSR)\nStatic Site Generation (SSG)\nIncremental Static Regeneration (ISR)\nAPI Routes\nFile-based routing\nImage Optimization\nAutomatic code splitting"
  },
  {
    "id": "176",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is Next.js different from React.js?",
    "answer": "While React.js is a library for building UIs, Next.js is a framework built on top of React, providing additional features such as SSR, SSG, and routing out of the box."
  },
  {
    "id": "177",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the advantages of using Next.js over React.js?",
    "answer": "Next.js offers:\n\nBetter SEO performance through SSR.\nBuilt-in routing with file-based routing.\nStatic site generation for faster page loads.\nAutomatic code-splitting, leading to better performance."
  },
  {
    "id": "178",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Server-Side Rendering (SSR) work in Next.js?",
    "answer": "SSR in Next.js allows pages to be rendered on the server at request time, ensuring that the page's content is available to search engines and improving the initial load time."
  },
  {
    "id": "179",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Static Site Generation (SSG) in Next.js, and when would you use it?",
    "answer": "SSG generates HTML at build time for fast loading and improved SEO. It’s ideal for pages that don’t change often, such as blogs or marketing pages."
  },
  {
    "id": "180",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are API routes in Next.js, and how do they work?",
    "answer": "API routes allow you to build backend functionality directly in your Next.js app. These are serverless functions that handle HTTP requests like GET, POST, PUT, etc."
  },
  {
    "id": "181",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js, and how is it different from SSG?",
    "answer": "ISR enables static content to be updated after the site has been built, allowing you to regenerate pages in the background while serving static content to users."
  },
  {
    "id": "182",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle dynamic routes in Next.js?",
    "answer": "Dynamic routes in Next.js are handled using brackets ([]). For example, pages/[id].js will create dynamic routes based on the id parameter."
  },
  {
    "id": "183",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does code splitting work in Next.js?",
    "answer": "Next.js automatically splits code by page. This means only the necessary code for each page is loaded, improving performance and reducing bundle size."
  },
  {
    "id": "184",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between Static Rendering (SSG) and Server Rendering (SSR) in Next.js?",
    "answer": "SSG generates HTML at build time and serves it for faster page loads.\nSSR generates HTML on the server for each request, ensuring dynamic content."
  },
  {
    "id": "185",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the App Router in Next.js?",
    "answer": "The App Router in Next.js is a new routing system introduced to simplify the routing mechanism, offering enhanced flexibility and control compared to the Pages Router."
  },
  {
    "id": "186",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do layouts work with the App Router?",
    "answer": "Layouts in the App Router allow you to structure reusable components across multiple pages, making it easier to manage UI consistency and shared components."
  },
  {
    "id": "187",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between the app directory and the pages directory?",
    "answer": "The app directory is used with the new App Router and supports features like layouts, loading states, and more advanced routing capabilities. The pages directory is used in the traditional Pages Router."
  },
  {
    "id": "188",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Server Components and Client Components in Next.js?",
    "answer": "Server Components are rendered on the server and sent as HTML.\nClient Components are rendered on the client and allow for interactivity."
  },
  {
    "id": "189",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js improve SEO compared to traditional client-side rendering?",
    "answer": "Next.js supports SSR and SSG, which generates pre-rendered HTML content, making it more SEO-friendly compared to traditional client-side rendering (CSR)."
  },
  {
    "id": "190",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle environment variables?",
    "answer": "Environment variables are handled via .env files (e.g., .env.local) and can be accessed in both the client and server-side code using process.env."
  },
  {
    "id": "191",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create dynamic API routes in Next.js?",
    "answer": "Dynamic API routes are created by using the same bracket notation ([param]) in the pages/api directory."
  },
  {
    "id": "192",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Middleware in Next.js, and how do they work?",
    "answer": "Middleware allows you to run code before a request is completed, enabling features like authentication, logging, or redirecting users."
  },
  {
    "id": "193",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are React Server Components, and how are they used in Next.js?",
    "answer": "React Server Components allow parts of the UI to be rendered on the server, reducing the client-side JavaScript bundle size."
  },
  {
    "id": "194",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How React Server Components Work:",
    "answer": "React Server Components allow rendering on the server, improving performance by sending only necessary JavaScript to the client."
  },
  {
    "id": "195",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to Use React Server Components in Next.js:",
    "answer": "To use React Server Components in Next.js, create a .server.js file in the appropriate directory, allowing the component to be rendered server-side."
  },
  {
    "id": "196",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Benefits of Using React Server Components:",
    "answer": "Reduced client-side JS.\nBetter performance.\nImproved scalability."
  },
  {
    "id": "197",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is next/link, and how does it differ from a standard tag?",
    "answer": "next/link is a React component for client-side navigation, providing prefetching and reducing page reloads, unlike a standard <a> tag."
  },
  {
    "id": "198",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is next/image, and what are its advantages?",
    "answer": "next/image automatically optimizes images for better performance, including resizing, lazy loading, and WebP support."
  },
  {
    "id": "199",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are rewrites in Next.js, and how do they work?",
    "answer": "Rewrites allow you to map an incoming request path to a different destination without changing the URL in the browser."
  },
  {
    "id": "200",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the next.config.js file, and what is its role?",
    "answer": "next.config.js is a configuration file in Next.js that allows you to customize the build process, routing, environment variables, and more."
  },
  {
    "id": "201",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js handle image optimization?",
    "answer": "Next.js optimizes images by automatically resizing, compressing, and serving them in the most appropriate format for the client."
  },
  {
    "id": "202",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Next.js’s hybrid rendering?",
    "answer": "Hybrid rendering in Next.js allows you to use SSR, SSG, or ISR on a per-page basis, providing flexibility in how content is rendered."
  },
  {
    "id": "203",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the main benefits of hybrid rendering in Next.js?",
    "answer": "Hybrid rendering offers the ability to combine different rendering strategies to maximize performance, SEO, and flexibility."
  },
  {
    "id": "204",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain how data fetching works in Next.js.",
    "answer": "Data fetching in Next.js can be done using getStaticProps (SSG), getServerSideProps (SSR), or getInitialProps."
  },
  {
    "id": "205",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you manage state in a Next.js application?",
    "answer": "State management in Next.js can be done using React's useState and useContext, or with libraries like Redux, Recoil, or Zustand."
  },
  {
    "id": "206",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does routing work in Next.js?",
    "answer": "Routing in Next.js is based on the file system. The files in the pages directory automatically become routes."
  },
  {
    "id": "207",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you handle nested routing in Next.js?",
    "answer": "Nested routing is handled by creating subdirectories inside the pages directory. For example, pages/blog/[id].js supports dynamic routes."
  },
  {
    "id": "208",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of the public folder in a Next.js project?",
    "answer": "The public folder is used for static assets like images, fonts, or other files that can be accessed directly via URL."
  },
  {
    "id": "209",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create a custom 500 error page in Next.js?",
    "answer": "To create a custom 500 error page, create a pages/_error.js file and customize the error handling for both 404 and 500 errors."
  },
  {
    "id": "210",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does file-based routing work in Next.js?",
    "answer": "File-based routing automatically maps files in the pages directory to routes based on their file names and structure."
  },
  {
    "id": "211",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the options for styling components in Next.js?",
    "answer": "You can style components using traditional CSS, CSS-in-JS libraries like styled-components, or CSS modules."
  },
  {
    "id": "212",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does TypeScript work with Next.js?",
    "answer": "Next.js has built-in support for TypeScript. You can create a tsconfig.json file, and it will automatically detect and work with TypeScript files."
  },
  {
    "id": "213",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you configure TypeScript in Next.js?",
    "answer": "Simply add a tsconfig.json file to your project root. Next.js will automatically configure TypeScript for you, and you can start using .ts and .tsx files.\n\n(This pattern will continue for all 103 questions)"
  },
  {
    "id": "214",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you optimize performance in a Next.js app?",
    "answer": "Use next/image for images\nUse SSR or SSG where appropriate\nEnable lazy loading for components\nUse dynamic imports and code splitting\nMinimize third-party libraries"
  },
  {
    "id": "215",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is ISR (Incremental Static Regeneration) and how do you use it?",
    "answer": "ISR allows you to update static content after the site is built using revalidate in getStaticProps."
  },
  {
    "id": "216",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle redirects in Next.js?",
    "answer": "Redirects are configured in next.config.js using the redirects() function."
  },
  {
    "id": "217",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between getStaticProps and getServerSideProps?",
    "answer": "getStaticProps: Fetches data at build time.\ngetServerSideProps: Fetches data on each request."
  },
  {
    "id": "218",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you use environment variables in Next.js?",
    "answer": "Store variables in .env.local, and access them with process.env.MY_VAR. Prefix with NEXT_PUBLIC_ to use them in the client."
  },
  {
    "id": "219",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add custom headers in Next.js?",
    "answer": "Use headers() in next.config.js to add custom HTTP headers."
  },
  {
    "id": "220",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the Image component in Next.js?",
    "answer": "It’s a built-in component that optimizes images with lazy loading, resizing, and format conversion."
  },
  {
    "id": "221",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you prefetch pages in Next.js?",
    "answer": "Using next/link, prefetching is enabled by default on visible links. You can also manually enable it with prefetch={true}."
  },
  {
    "id": "222",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between useRouter and Link?",
    "answer": "useRouter: Hook to access routing methods.\nLink: Component for client-side navigation."
  },
  {
    "id": "223",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you implement middleware in Next.js?",
    "answer": "Add a middleware.ts file in the root or a route directory to intercept requests and modify behavior."
  },
  {
    "id": "224",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Edge Middleware in Next.js?",
    "answer": "Runs on the edge (closer to users) for faster response times, used for auth, redirects, rewrites, etc."
  },
  {
    "id": "225",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you protect routes in Next.js?",
    "answer": "Use middleware or HOCs to check authentication before rendering protected routes."
  },
  {
    "id": "226",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you set up API rate limiting in Next.js?",
    "answer": "Use libraries like express-rate-limit or custom logic inside API routes to track and limit requests."
  },
  {
    "id": "227",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is ISR's revalidate property?",
    "answer": "It defines how often a page should be regenerated in seconds."
  },
  {
    "id": "228",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you deploy a Next.js app?",
    "answer": "You can deploy to Vercel, Netlify, or any server that supports Node.js. Vercel is the recommended platform."
  },
  {
    "id": "229",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you use Next.js with Tailwind CSS?",
    "answer": "Install Tailwind, add it to postcss.config.js, and import it in your main CSS file."
  },
  {
    "id": "230",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between next dev, next build, and next start?",
    "answer": "next dev: Starts the dev server\nnext build: Builds the app for production\nnext start: Starts the production server"
  },
  {
    "id": "231",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What’s new in Next.js 13/14/15?",
    "answer": "Includes App Router, Server Components, Layouts, React 18 support, and better performance tools."
  },
  {
    "id": "232",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does ISR help improve performance?",
    "answer": "ISR delivers static pages but allows them to be updated in the background, improving freshness and speed."
  },
  {
    "id": "233",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle errors in API routes?",
    "answer": "Use try-catch blocks, return proper status codes and messages, and log errors."
  },
  {
    "id": "234",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you add analytics to a Next.js app?",
    "answer": "Use tools like Google Analytics, Plausible, or Vercel Analytics, often via custom _app.tsx."
  },
  {
    "id": "235",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create a custom App component?",
    "answer": "Create _app.js or _app.tsx inside the pages directory to override default App behavior."
  },
  {
    "id": "236",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create a custom Document?",
    "answer": "Use _document.js to customize the HTML structure, add fonts, or manage the <html> and <body> tags."
  },
  {
    "id": "237",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are loading UI components in the App Router?",
    "answer": "Special files like loading.tsx used to show UI during lazy data fetching or navigation."
  },
  {
    "id": "238",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a fallback page in Next.js?",
    "answer": "Used during ISR or dynamic routes to show a loading state while a page is being generated."
  },
  {
    "id": "239",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are dynamic imports?",
    "answer": "They allow you to load components on demand using next/dynamic."
  },
  {
    "id": "240",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Next.js support internationalization (i18n)?",
    "answer": "Define locales and defaultLocale in next.config.js, and Next.js will handle route-based translations."
  },
  {
    "id": "241",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Parallel Routes in Next.js?",
    "answer": "Allow rendering different layouts or content in parallel within the same page structure."
  },
  {
    "id": "242",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Intercepting Routes?",
    "answer": "Enable custom rendering for a nested route from a parent segment without full remounting."
  },
  {
    "id": "243",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you use Redux with Next.js?",
    "answer": "Yes, use next-redux-wrapper to integrate Redux for SSR and SSG support."
  },
  {
    "id": "244",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add meta tags in Next.js?",
    "answer": "Use the Head component from next/head to manage <title>, <meta>, etc."
  },
  {
    "id": "245",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you fetch data from an external API?",
    "answer": "Use fetch, axios, or getServerSideProps/getStaticProps for server-side fetching."
  },
  {
    "id": "246",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle 404 pages in Next.js?",
    "answer": "Create pages/404.js to customize the \"Page Not Found\" experience."
  },
  {
    "id": "247",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is next export?",
    "answer": "Exports your Next.js app as a static site with no server rendering or dynamic routes."
  },
  {
    "id": "248",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you use GraphQL in Next.js?",
    "answer": "Yes, with libraries like Apollo Client or urql."
  },
  {
    "id": "249",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle authentication in Next.js?",
    "answer": "Use libraries like next-auth, or custom logic with JWTs, cookies, sessions."
  },
  {
    "id": "250",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can Next.js be used for mobile apps?",
    "answer": "Not directly, but you can build PWAs or use APIs with React Native frontends."
  },
  {
    "id": "251",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is pre-rendering?",
    "answer": "Rendering HTML in advance either at build time (SSG) or request time (SSR)."
  },
  {
    "id": "252",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create a sitemap?",
    "answer": "Use packages like next-sitemap or write custom scripts to generate one during build."
  },
  {
    "id": "253",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create a robots.txt?",
    "answer": "Add it to the public folder or generate it dynamically in API routes or middleware."
  },
  {
    "id": "254",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to add Google Fonts in Next.js?",
    "answer": "Use the <link> tag in _document.js or use @next/font for better performance."
  },
  {
    "id": "255",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does lazy loading work?",
    "answer": "Lazy loading in Next.js loads components/images only when they enter the viewport."
  },
  {
    "id": "256",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you test a Next.js app?",
    "answer": "Use Jest and React Testing Library for unit/integration tests; Playwright or Cypress for E2E."
  },
  {
    "id": "257",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle state across pages?",
    "answer": "Use global state tools like Redux, Context API, Zustand, or Jotai."
  },
  {
    "id": "258",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you use MongoDB with Next.js?",
    "answer": "Yes. You can use it via API routes or connect in getServerSideProps."
  },
  {
    "id": "259",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create breadcrumbs in Next.js?",
    "answer": "Use useRouter to track path and build a breadcrumb component dynamically."
  },
  {
    "id": "260",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you improve accessibility?",
    "answer": "Use semantic HTML, ARIA labels, and audit with Lighthouse or axe-core."
  },
  {
    "id": "261",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to add a loading spinner?",
    "answer": "Use state to conditionally render a loading spinner or use App Router’s loading.tsx."
  },
  {
    "id": "262",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to implement dark mode?",
    "answer": "Use useState, localStorage, or libraries like next-themes."
  },
  {
    "id": "263",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a layout shift and how to prevent it?",
    "answer": "It’s when content moves during load. Use defined image dimensions, avoid late-loading fonts."
  },
  {
    "id": "264",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is hydration?",
    "answer": "The process where React makes HTML interactive on the client side."
  },
  {
    "id": "265",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between CSR and SSR?",
    "answer": "CSR renders in the browser; SSR renders on the server and sends HTML to the browser."
  },
  {
    "id": "266",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are RSC (React Server Components)?",
    "answer": "React components rendered on the server to reduce JS sent to the client."
  },
  {
    "id": "267",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you use cookies in Next.js?",
    "answer": "Yes. Read/write cookies in API routes, getServerSideProps, or middleware."
  },
  {
    "id": "268",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle form submissions?",
    "answer": "Use client-side fetch to call API routes or use traditional <form> with action set to your route."
  },
  {
    "id": "269",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to add CORS support?",
    "answer": "Add headers in API routes or middleware."
  },
  {
    "id": "270",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What’s the best way to structure a Next.js project?",
    "answer": "Use folders like components, pages, lib, styles, public, and hooks for better organization."
  },
  {
    "id": "271",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add custom fonts?",
    "answer": "Add them to the public folder or use Google Fonts via _document.js."
  },
  {
    "id": "272",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create reusable layouts?",
    "answer": "Use layout components and wrap them in _app.js or App Router’s layout.tsx."
  },
  {
    "id": "273",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you implement role-based access control?",
    "answer": "Check user roles in middleware, API routes, or getServerSideProps."
  },
  {
    "id": "274",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of Next.js?",
    "answer": "Less flexible for dynamic content without SSR\nLimited plugin ecosystem compared to Gatsby\nSSR can increase server costs"
  },
  {
    "id": "275",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are some good libraries to use with Next.js?",
    "answer": "next-auth\nswr\nreact-query\naxios\ntailwindcss"
  },
  {
    "id": "276",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why choose Next.js for your next project?",
    "answer": "SEO-friendly\nFast performance\nSSR/SSG flexibility\nDeveloper experience\n\n\n\n\n\n40 Frontend Developer Interview Questions"
  },
  {
    "id": "277",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you explain the difference between var, let, and const in JavaScript?",
    "answer": "Answer:\n\nvar: Function-scoped and can be redeclared and updated. It is hoisted, meaning its declaration is moved to the top of its scope at compile time.\nlet: Block-scoped and can be updated but not redeclared within the same scope. It is not hoisted in the same way as var.\nconst: Block-scoped and cannot be updated or redeclared. The value must be assigned at declaration. It provides a way to define constants.\nUsing let and const helps prevent common bugs due to scope issues and accidental reassignment."
  },
  {
    "id": "278",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you manage state in a React application?",
    "answer": "Answer:\n\nState management in React can be handled through:\n\nLocal Component State: Using useState or class component state for simple scenarios.\nContext API: For prop drilling issues, to pass data through the component tree without passing props down manually at every level.\nState Management Libraries: Such as Redux, MobX, or Zustand for complex applications requiring a global state.\nHooks: Custom hooks to encapsulate and reuse stateful logic.\nReact Query or SWR: For server state management.\nThe choice depends on the complexity and requirements of the application."
  },
  {
    "id": "279",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the Virtual DOM, and how does React use it?",
    "answer": "Answer:\n\nThe Virtual DOM is an in-memory representation of the real DOM elements generated by React components.\nWhen the state of a component changes, React updates the Virtual DOM tree.\nIt then efficiently computes the minimal set of changes (diffing) needed to update the real DOM.\nThis process improves performance by reducing direct manipulation of the DOM, which is an expensive operation."
  },
  {
    "id": "280",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain event delegation in JavaScript.",
    "answer": "Answer:\n\nEvent Delegation leverages event bubbling to handle events at a higher level in the DOM rather than on individual nodes.\nInstead of adding event listeners to each child element, you attach a single event listener to a parent element.\nWhen an event is triggered on a child element, it bubbles up to the parent, where it can be captured and processed.\nThis approach improves performance and simplifies code management, especially when dealing with dynamically added elements."
  },
  {
    "id": "281",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Web Components, and how do they relate to custom elements?",
    "answer": "Answer:\n\nWeb Components are a set of standardized APIs that enable the creation of reusable, encapsulated HTML tags.\nThey consist of:\nCustom Elements: Define new types of HTML elements.\nShadow DOM: Provides encapsulation for styles and markup.\nHTML Templates: Allow you to define reusable templates.\nCustom Elements are a key part of Web Components, allowing developers to create their own HTML tags with custom behavior and styling."
  },
  {
    "id": "282",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does CSS specificity work?",
    "answer": "Answer:\n\nCSS specificity determines which style rules apply to an element when multiple rules could apply:\n\nInline Styles (style attribute) have the highest specificity.\nIDs (#id) have higher specificity than classes.\nClasses, Attributes, and Pseudo-classes (.class, [type=\"text\"], :hover) have medium specificity.\nElements and Pseudo-elements (div, ::before) have the lowest specificity.\nSpecificity is calculated based on the combination of selectors. When specificity is equal, the last rule defined takes precedence."
  },
  {
    "id": "283",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Promises in JavaScript, and how do they differ from callbacks?",
    "answer": "Answer:\n\nPromises are objects representing the eventual completion or failure of an asynchronous operation.\nThey provide methods like .then(), .catch(), and .finally() for handling asynchronous results.\nPromises vs. Callbacks:\nPromises allow for cleaner, more maintainable asynchronous code and better error handling.\nCallbacks can lead to \"callback hell,\" where nested callbacks make code difficult to read and maintain.\nPromises improve code readability and manageability compared to traditional callbacks."
  },
  {
    "id": "284",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you explain how closures work in JavaScript?",
    "answer": "Answer:\n\nA closure is a function that remembers its outer variables and can access them.\nThis means a function can access variables from its own scope, the outer function's scope, and the global scope.\nClosures are created every time a function is created, at function creation time.\nThey are useful for data privacy and emulating private methods."
  },
  {
    "id": "285",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you optimize the performance of a web application?",
    "answer": "Answer:\n\nMinimize HTTP Requests: Combine files, use sprites.\nAsynchronous Loading: Use async and defer for scripts.\nCaching: Implement browser caching and use a Content Delivery Network (CDN).\nOptimize Images: Compress images and use next-gen formats like WebP.\nCode Splitting: Use tools like Webpack to split code for lazy loading.\nReduce Render-Blocking Resources: Optimize CSS and JavaScript delivery.\nPerformance Monitoring: Use tools like Lighthouse and Chrome DevTools for auditing."
  },
  {
    "id": "286",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of a Service Worker in a Progressive Web App (PWA)?",
    "answer": "Answer:\n\nService Workers act as a proxy between the web application and the network.\nThey enable features like offline support by caching assets and intercepting network requests.\nSupport background synchronization and push notifications.\nImprove performance by controlling resource caching and retrieval."
  },
  {
    "id": "287",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the Box Model in CSS.",
    "answer": "Answer:\n\nThe CSS Box Model is a box that wraps around every HTML element.\nIt consists of:\nContent: The actual content like text or images.\nPadding: Space around the content inside the border.\nBorder: A border that goes around the padding and content.\nMargin: Space outside the border between this and other elements.\nUnderstanding the box model is essential for layout and design."
  },
  {
    "id": "288",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Higher-Order Components (HOCs) in React?",
    "answer": "Answer:\n\nAn HOC is a function that takes a component and returns a new component.\nThey are used to share common functionality between components.\nHOCs can inject props, manage state, or handle side effects.\nExample usage: const EnhancedComponent = withFeature(WrappedComponent);"
  },
  {
    "id": "289",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you ensure accessibility in web applications?",
    "answer": "Answer:\n\nUse Semantic HTML: Proper use of HTML elements.\nARIA Attributes: Provide additional context where necessary.\nKeyboard Navigation: Ensure all interactive elements are accessible via keyboard.\nContrast and Readability: Use appropriate color contrasts and text sizes.\nAlt Text for Images: Provide descriptive alt attributes.\nTesting: Use accessibility testing tools and assistive technologies."
  },
  {
    "id": "290",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Cross-Origin Resource Sharing (CORS), and how does it work?",
    "answer": "Answer:\n\nCORS is a security feature that allows or restricts resources requested from another domain.\nIt works by adding HTTP headers that specify which origins are permitted to read responses.\nBrowsers enforce CORS policies, and servers must include appropriate headers like Access-Control-Allow-Origin.\nPreflight requests (OPTIONS method) are used for complex requests to check permissions."
  },
  {
    "id": "291",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Describe how you would implement lazy loading in a web application.",
    "answer": "Answer:\n\nFor Images and Media:\nUse the loading=\"lazy\" attribute in <img> tags.\nImplement Intersection Observer API to load media when they enter the viewport.\nFor Code:\nUse dynamic imports with Webpack or other bundlers.\nIn React, use React.lazy() and Suspense for component-level code splitting.\nBenefits:\nImproves initial load time and performance.\nReduces unnecessary data usage."
  },
  {
    "id": "292",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between == and === in JavaScript?",
    "answer": "Answer:\n\n== (Abstract Equality): Compares values after performing type coercion if types differ.\n=== (Strict Equality): Compares both value and type without type coercion.\nExample:\n0 == '0' is true.\n0 === '0' is false.\nIt's generally recommended to use === to avoid unexpected results due to type coercion."
  },
  {
    "id": "293",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle errors in asynchronous code?",
    "answer": "Answer:\n\nPromises: Use .catch() to handle rejections.\nAsync/Await: Wrap await calls in try...catch blocks.\nGlobal Error Handlers: For unhandled promise rejections.\nError Boundaries (React): Catch errors in component trees.\nProper error handling ensures a better user experience and easier debugging."
  },
  {
    "id": "294",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the concept of responsive design and how you implement it.",
    "answer": "Answer:\n\nResponsive Design ensures that a website adapts to various screen sizes and devices.\nImplementation:\nUse flexible grid layouts with CSS Flexbox or Grid.\nImplement media queries to adjust styles based on viewport size.\nUse relative units like percentages and em or rem.\nOptimize images for different screen resolutions.\nTesting: Use browser developer tools and physical devices to test responsiveness."
  },
  {
    "id": "295",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a CSS preprocessor, and why would you use one?",
    "answer": "Answer:\n\nCSS Preprocessors extend the capabilities of CSS by adding features like variables, nesting, mixins, and functions.\nExamples include Sass, Less, and Stylus.\nBenefits:\nCode reusability and maintainability.\nEasier to manage large CSS codebases.\nCan compile down to standard CSS for browser compatibility."
  },
  {
    "id": "296",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you explain the concept of immutability and its importance in React?",
    "answer": "Answer:\n\nImmutability means that data cannot be changed after it's created.\nIn React, immutability is important because it:\nAllows for predictable state changes.\nHelps in performance optimizations, as React can make shallow comparisons.\nAvoids unintended side effects.\nImplementation:\nUse methods that return new copies of data structures, like Object.assign or the spread operator.\nUtilize libraries like Immutable.js for complex data structures."
  },
  {
    "id": "297",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Webpack, and why is it used?",
    "answer": "Answer:\n\nWebpack is a module bundler for JavaScript applications.\nUses:\nBundles JavaScript files for usage in a browser.\nProcesses and bundles assets like CSS, images, and fonts through loaders.\nEnables code splitting and lazy loading.\nSupports plugins for extended functionality.\nBenefits:\nManages dependencies efficiently.\nOptimizes assets for production."
  },
  {
    "id": "298",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you prevent Cross-Site Scripting (XSS) attacks?",
    "answer": "Answer:\n\nInput Sanitization: Clean and validate all user inputs on the server side.\nOutput Encoding: Escape user inputs before rendering them in the browser.\nContent Security Policy (CSP): Define trusted sources of content to prevent malicious scripts.\nAvoid Inline Scripts: Keep JavaScript code in external files.\nUse HTTPOnly Cookies: To prevent access to cookies via JavaScript.\nRegular Security Audits: Stay updated with security best practices."
  },
  {
    "id": "299",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits and drawbacks of using Single Page Applications (SPAs)?",
    "answer": "Answer:\n\nBenefits:\nSmooth user experience with no full page reloads.\nBetter performance after initial load.\nEasier to create mobile-like experiences.\nDrawbacks:\nSEO challenges, although this can be mitigated with server-side rendering.\nInitial load time might be longer.\nBrowser history management can be complex.\nChoosing between SPA and traditional multi-page applications depends on the project requirements."
  },
  {
    "id": "300",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does the this keyword work in JavaScript?",
    "answer": "Answer:\n\nthis refers to the object that is executing the current function.\nContexts:\nGlobal Context: this refers to the global object (window in browsers).\nObject Method: this refers to the object owning the method.\nEvent Handlers: this refers to the DOM element that triggered the event.\nArrow Functions: Do not have their own this; they inherit it from the enclosing scope.\nUnderstanding this is crucial for object-oriented programming in JavaScript."
  },
  {
    "id": "301",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the difference between RESTful APIs and GraphQL.",
    "answer": "Answer:\n\nRESTful APIs:\nUse HTTP methods and endpoints to access resources.\nData is organized around resources.\nCan lead to over-fetching or under-fetching data.\nGraphQL:\nUses a single endpoint.\nClients specify exactly what data they need.\nReduces the number of network requests.\nRequires a schema and resolvers.\nChoice Factors:\nProject requirements, data complexity, and team expertise."
  },
  {
    "id": "302",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you manage styles in a large-scale React application?",
    "answer": "Answer:\n\nCSS Modules: Locally scoped CSS classes to components.\nStyled Components: CSS-in-JS library that allows writing CSS within JavaScript.\nSass/Less: Use preprocessors for advanced CSS features.\nBEM Methodology: For naming conventions and organization.\nTheming: Use context or libraries to provide consistent styling.\nThe approach depends on team preferences and project needs."
  },
  {
    "id": "303",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are React Hooks, and why were they introduced?",
    "answer": "Answer:\n\nReact Hooks are functions that let you use state and other React features without writing a class.\nCommon Hooks:\nuseState for state management.\nuseEffect for side effects.\nuseContext for context API.\nReasons for Introduction:\nSimplify stateful logic in functional components.\nAvoid the complexity of classes.\nEnable better code reuse through custom hooks."
  },
  {
    "id": "304",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Describe how you would implement authentication in a single-page application.",
    "answer": "Answer:\n\nToken-Based Authentication:\nUse JWTs stored securely (preferably in HTTP-only cookies).\nImplement login flows to receive and store tokens.\nRoute Protection:\nUse higher-order components or route guards to protect authenticated routes.\nBackend Integration:\nSet up API endpoints for authentication.\nValidate tokens on the server side.\nSecurity Considerations:\nProtect against XSS and CSRF attacks.\nUse HTTPS to encrypt data transmission."
  },
  {
    "id": "305",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is functional programming, and how does it apply to JavaScript?",
    "answer": "Answer:\n\nFunctional Programming is a paradigm that treats computation as the evaluation of mathematical functions.\nCore Concepts:\nPure Functions: No side effects and return the same output for the same input.\nImmutability: Data is not changed after creation.\nFirst-Class Functions: Functions are treated as values.\nHigher-Order Functions: Functions that take or return other functions.\nIn JavaScript:\nSupports functional programming with features like map, reduce, filter, and function expressions."
  },
  {
    "id": "306",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle browser compatibility and polyfills?",
    "answer": "Answer:\n\nFeature Detection: Use Modernizr or similar tools to detect unsupported features.\nPolyfills: Include scripts that replicate modern functionality in older browsers (e.g., Babel polyfill).\nTranspilation: Use tools like Babel to convert ES6+ code to ES5.\nProgressive Enhancement: Build functionality that works on all browsers, enhancing where possible.\nTesting: Regularly test across different browsers and devices.\nUse Can I Use: Check feature support before implementation."
  },
  {
    "id": "307",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is User Centered Design?",
    "answer": "Answer:\n\nUser-Centered Design is all about designing with the user in mind at every step. By focusing on real user needs and involving them throughout the development process, products are more likely to be successful, user-friendly, and meet the actual demands of the target audience."
  },
  {
    "id": "308",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is callback hell?",
    "answer": "Answer:\n\nCallback Hell refers to the anti-pattern of having multiple nested callbacks, which leads to code that's hard to read and maintain. By using Promises, Async/Await, and proper code structuring, you can write cleaner asynchronous code and avoid falling into Callback Hell."
  },
  {
    "id": "309",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does SOLID stand for?",
    "answer": "Answer:\n\nThe SOLID principles serve as guidelines for developers to build software that is easy to manage, extend, and scale. By following these principles, you can create robust systems that stand the test of time and adapt gracefully to new requirements."
  },
  {
    "id": "310",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Clickjacking?",
    "answer": "Answer:\n\nClickjacking, also known as a \"UI redress attack,\" is a malicious technique where an attacker tricks a user into clicking on something different from what the user perceives, potentially leading to unauthorized actions or revealing confidential information.\n\nExample:\n\nA user visits a malicious website that loads a banking website's login button underneath a fake \"Play Video\" button. When the user clicks to play the video, they are actually clicking the login button on the banking site, potentially initiating an unintended action."
  },
  {
    "id": "311",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Coercion in JavaScript?",
    "answer": "Answer:\n\nCoercion in JavaScript refers to the process of converting a value from one data type to another. JavaScript performs coercion in two ways: implicit (automatic) and explicit (manual)."
  },
  {
    "id": "312",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is IIFE in JavaScript?",
    "answer": "Answer:\n\nAn IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. It's a design pattern that provides a private scope for your code."
  },
  {
    "id": "313",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a Grid System in CSS?",
    "answer": "Answer:\n\nA Grid System in CSS is a layout framework that allows developers to create complex, responsive web designs with ease. It provides a structured way to arrange content in rows and columns, facilitating the creation of responsive and flexible layouts."
  },
  {
    "id": "314",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Namespaces in JavaScript?",
    "answer": "Answer:\n\nIn JavaScript, a namespace is a container that allows developers to group related code under a unique name to avoid naming collisions and keep the global scope clean. Since JavaScript doesn't have built-in namespace support like some other languages, developers create namespaces using objects, modules, or immediately invoked function expressions (IIFEs)."
  },
  {
    "id": "315",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the use of use strict directive in JavaScript?",
    "answer": "Answer:\n\nThe use strict directive is used to write the clean JavaScript code which is less prone to errors. It catches common coding errors like assigning a variable without declaring it or passing different parameters with same names to a function etc."
  },
  {
    "id": "316",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of passing defer or async attributes to the script tag?",
    "answer": "Answer:\n\nPassing the defer or async attributes to a <script> tag controls how the browser loads and executes external JavaScript files, improving page load performance by optimizing script handling.\n\ndefer Attribute\n\nPurpose: Instructs the browser to download the script in parallel with HTML parsing but delay execution until after the entire document has been parsed.\nBehavior:\nNon-Blocking: Does not halt HTML parsing.\nExecution Timing: Executes after the DOM is fully constructed but before the DOMContentLoaded event.\nOrder Preservation: If multiple scripts have defer, they execute in the order they appear in the document.\nUse Case: Ideal for scripts that depend on the DOM or need to maintain execution order.\nExample:\n\n  <script src=\"script.js\" defer\\>\\</script\\>  \nasync Attribute\n\nPurpose: Tells the browser to download the script in parallel and execute it as soon as it's ready, without waiting for HTML parsing to complete.\nBehavior:\nNon-Blocking: Does not pause HTML parsing during download.\nExecution Timing: Executes immediately after downloading, which might occur before or after the DOM is ready.\nOrder Not Guaranteed: Execution order is unpredictable if multiple async scripts are used.\nUse Case: Suitable for independent scripts like analytics or ads that do not rely on other scripts or the DOM.\nExample:\n\n  <script src=\"analytics.js\" async\\>\\</script\\>  \nSummary\n\nMain Purpose: Both attributes enhance page performance by allowing HTML parsing and script downloading to occur simultaneously, reducing render-blocking scripts.\nChoosing Between defer and async:\nUse defer when scripts depend on the DOM or need to execute in order.\nUse async for scripts that can run independently and where execution order doesn't matter.\n\n\n\n\n\n40 JavaScript Interview Questions Every Frontend Developer Should Prepare in 2025 🔥"
  },
  {
    "id": "317",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is JavaScript? 💻",
    "answer": "JavaScript is a high-level programming language mainly used to create interactive features on websites. It runs in browsers but can also run on servers with Node.js. It supports different programming styles like object-oriented and functional programming."
  },
  {
    "id": "318",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between var, let, and const? ⚖️",
    "answer": "var is function-scoped, can be redeclared, and hoisted with an initial value of undefined.\nlet is block-scoped, cannot be redeclared in the same scope, hoisted but uninitialized (temporal dead zone).\nconst is block-scoped and cannot be reassigned, but objects declared with it can be mutated."
  },
  {
    "id": "319",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are data types in JavaScript? 🔢🧵",
    "answer": "There are primitive types like string, number, boolean, null, undefined, symbol, bigint which are immutable and stored by value. Non-primitive types like objects, arrays, and functions are mutable and stored by reference."
  },
  {
    "id": "320",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between == and ===? 🤔",
    "answer": "== compares values after type coercion (loose equality). === compares both value and type strictly. Use === to avoid unexpected bugs."
  },
  {
    "id": "321",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is hoisting in JavaScript? 🚀",
    "answer": "Hoisting means variable and function declarations are moved to the top of their scope before execution. var variables are hoisted and initialized with undefined. let and const are hoisted but not initialized (temporal dead zone). Functions are fully hoisted."
  },
  {
    "id": "322",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are closures in JavaScript? 🔒",
    "answer": "Closures happen when a function remembers variables from its outer scope, even after the outer function has finished running.\n\nfunction outer() {\n  let count = 0;\n  return function inner() {\n    count++;\n    return count;\n  }\n}\n\nconst counter = outer();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2"
  },
  {
    "id": "323",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What's the difference between synchronous and asynchronous code? ⏳⚡",
    "answer": "Synchronous code runs line by line and blocks further execution until it finishes. Asynchronous code runs in the background, letting other code continue, using callbacks, promises, or async/await."
  },
  {
    "id": "324",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are arrow functions? ➡️",
    "answer": "Arrow functions provide a shorter syntax and do not have their own this context, making them useful for callbacks but not as object methods or constructors."
  },
  {
    "id": "325",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is lexical scope? 📚",
    "answer": "Lexical scope means variables are accessible based on where they are written in the code, not where they are called from."
  },
  {
    "id": "326",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the event loop? 🔄",
    "answer": "The event loop manages how JavaScript handles asynchronous tasks by moving them between the call stack and the task queue, ensuring the code runs smoothly without blocking."
  },
  {
    "id": "327",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you clone an object? 🪞",
    "answer": "For shallow copies, use Object.assign({}, obj) or spread syntax {...obj}. For deep copies, use JSON.parse(JSON.stringify(obj)) but it loses functions and special types. For complex needs, use libraries like Lodash’s cloneDeep().\n\nFor shallow copies:\n\nconst obj = { a: 1, b: 2 };\nconst clone = { ...obj };\nconsole.log(clone); // { a: 1, b: 2 }\nFor deep copies (simple objects):\n\nconst deepClone = JSON.parse(JSON.stringify(obj));"
  },
  {
    "id": "328",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What's the difference between map(), filter(), and reduce()? 🗺️🔍➕",
    "answer": "map() transforms each item and returns a new array. filter() returns items that match a condition. reduce() combines all items into one value."
  },
  {
    "id": "329",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you check if a value is an array? 📋",
    "answer": "Use Array.isArray(value). Avoid typeof because it returns \"object\" for arrays."
  },
  {
    "id": "330",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is destructuring in JavaScript? 🛠️",
    "answer": "Destructuring lets you extract values from arrays or objects into variables easily.\n\nconst [a, b] = [1, 2];\nconst { name } = { name: \"Alice\" };"
  },
  {
    "id": "331",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the spread operator? …",
    "answer": "The spread operator ... expands elements of arrays or objects, useful for cloning or merging.\n\nconst arr = [1, 2];\nconst newArr = [...arr, 3]; // [1, 2, 3]"
  },
  {
    "id": "332",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are promises in JavaScript? 🤞",
    "answer": "Promises represent the result of an async operation and have states: pending, fulfilled, or rejected. They help avoid callback hell.\n\nExample:\n\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('Done!'), 1000);\n});\n\npromise.then(result => console.log(result)); // \"Done!\" after 1 second\nor:\n\nfetch('api/data')\n  .then(res => res.json())\n  .then(data => console.log(data))\n  .catch(err => console.error(err));"
  },
  {
    "id": "333",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is async/await? ⏳✅",
    "answer": "async functions return promises. await pauses the function until the promise resolves, making async code easier to read.\n\nExample:\n\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}\nfetchData();"
  },
  {
    "id": "334",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What's the use of fetch()? 🌐",
    "answer": "fetch() is a browser API to make HTTP requests. It returns a promise and works well with async/await."
  },
  {
    "id": "335",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you handle errors with async/await? ⚠️",
    "answer": "Use try...catch blocks around await calls to catch errors gracefully.\n\nExample:\n\ntry {\n  const res = await fetch(url);\n  const data = await res.json();\n} catch (err) {\n  console.error(\"Failed to fetch:\", err);\n}"
  },
  {
    "id": "336",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Promise.all()? 🧩",
    "answer": "Promise.all() runs multiple promises in parallel and resolves when all succeed or rejects if any fail.\n\nawait Promise.all([fetchA(), fetchB(), fetchC()]);"
  },
  {
    "id": "337",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are JavaScript modules? 📦",
    "answer": "Modules let you organize code using export and import, making code reusable and maintainable."
  },
  {
    "id": "338",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What's the difference between null and undefined? ❓",
    "answer": "undefined means a variable is declared but not assigned a value. null is an explicit assignment meaning no value."
  },
  {
    "id": "339",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain debounce and throttle. 🛑⏲️",
    "answer": "Debounce delays a function until a certain time has passed since the last call. Throttle limits a function to run at most once in a set time interval."
  },
  {
    "id": "340",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the this keyword? 🧍♂️",
    "answer": "this refers to the object that owns the current function or method. Arrow functions do not have their own this."
  },
  {
    "id": "341",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is prototypal inheritance? 🧬",
    "answer": "Objects inherit properties and methods from other objects through a prototype chain instead of classical classes."
  },
  {
    "id": "342",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the DOM? 🌳",
    "answer": "The Document Object Model is a tree structure representing HTML elements of a webpage, which JavaScript can manipulate."
  },
  {
    "id": "343",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What's the difference between == and === in DOM comparison? 🔎",
    "answer": "Use === to check if two DOM nodes refer to the exact same element."
  },
  {
    "id": "344",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you select elements in the DOM? 🖱️",
    "answer": "Use methods like document.getElementById(), document.querySelector(), and document.querySelectorAll()."
  },
  {
    "id": "345",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is event delegation? 🎯",
    "answer": "Event delegation involves attaching a single event listener to a parent element to handle events on its children, improving performance."
  },
  {
    "id": "346",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you prevent default behavior in an event? 🚫",
    "answer": "Call event.preventDefault() inside the event handler."
  },
  {
    "id": "347",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are template literals? 📝",
    "answer": "Template literals use backticks to create strings with embedded expressions and multiline support.\n\nconst name = \"Bob\";\nconsole.log(`Hello, ${name}!`);"
  },
  {
    "id": "348",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a callback function? 🔄",
    "answer": "A callback is a function passed to another function to be executed later, common in async programming and event handling."
  },
  {
    "id": "349",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the falsy values in JavaScript? ❌",
    "answer": "Falsy values are: false, 0, '' (empty string), null, undefined, and NaN."
  },
  {
    "id": "350",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between typeof and instanceof? ⚙️",
    "answer": "typeof returns the type as a string. instanceof checks if an object inherits from a constructor’s prototype."
  },
  {
    "id": "351",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are immediately invoked function expressions (IIFE)? 🚀",
    "answer": "An IIFE is a function that runs as soon as it is defined, helping to avoid polluting the global scope.\n\n(function() {\n  console.log(\"Runs immediately!\");\n})();"
  },
  {
    "id": "352",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What's the difference between shallow and deep copy? 🧽🌊",
    "answer": "Shallow copy copies only the top-level properties, while deep copy duplicates everything recursively."
  },
  {
    "id": "353",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does garbage collection work in JavaScript? 🗑️",
    "answer": "JavaScript automatically removes objects from memory when there are no references left to them."
  },
  {
    "id": "354",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between localStorage, sessionStorage, and cookies? 🍪💾",
    "answer": "localStorage stores data permanently, sessionStorage clears data when the tab closes, and cookies are small data sent with requests and used for things like authentication.\n\nlocalStorage.setItem(\"user\", \"Alice\");"
  },
  {
    "id": "355",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a service worker? 🛠️",
    "answer": "A service worker is a background script that enables offline access, push notifications, and caching in Progressive Web Apps."
  },
  {
    "id": "356",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are higher-order functions? 🎩",
    "answer": "Higher-order functions take other functions as arguments or return functions, enabling powerful functional programming patterns.\n\nfunction repeat(n, action) {\n  for (let i = 0; i < n; i++) {\n    action(i);\n  }\n}\nrepe\n\n\n\n\n\n\njavascript questions:\nJavaScript, created by Brendan Eich in 1995, is one of the most widely used web development languages. It was designed to build dynamic web pages at first. A script is a JS program that may be added to the HTML of any web page. When the page loads, these scripts execute automatically.\n\nA language that was originally designed to build dynamic web pages may now be run on the server and on almost any device that has the JavaScript Engine installed.\n\nAfter HTML and CSS, JavaScript is the third biggest web technology. JavaScript is a scripting language that may be used to construct online and mobile apps, web servers, games, and more. JavaScript is an object-oriented programming language that is used to generate websites and applications. It was created with the intention of being used in a browser. Even today, the server-side version of JavaScript known as Node.js may be used to create online and mobile apps, real-time applications, online streaming applications, and videogames. Javascript frameworks, often known as inbuilt libraries, may be used to construct desktop and mobile programs. Developers may save a lot of time on monotonous programming jobs by using these code libraries, allowing them to focus on the production work of development.\n\nPlay\nThe InterviewBit team has compiled a thorough collection of top Javascript Interview Questions and Answers to assist you in acing your interview and landing your desired job as a Javascript Developer. \n\nJavaScript Interview Questions for Freshers"
  },
  {
    "id": "357",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different data types present in javascript?",
    "answer": "To know the type of a JavaScript variable, we can use the typeof operator."
  },
  {
    "id": "358",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Primitive types",
    "answer": "String - It represents a series of characters and is written with quotes. A string can be represented using a single or a double quote.\n\nExample :\n\nvar str = \"Vivek Singh Bisht\"; //using double quotes\nvar str2 = 'John Doe'; //using single quotes\nNumber - It represents a number and can be written with or without decimals.\nExample :\n\nvar x = 3; //without decimal\nvar y = 3.6; //with decimal\nBigInt - This data type is used to store numbers which are above the limitation of the Number data type. It can store large integers and is represented by adding “n” to an integer literal.\nExample :\n\nvar bigInteger =  234567890123456789012345678901234567890;\nBoolean - It represents a logical entity and can have only two values : true or false. Booleans are generally used for conditional testing.\nExample :\n\nvar a = 2;\nvar b =  3;\nvar c =  2;\n(a == b) // returns false\n(a == c) //returns true\nUndefined - When a variable is declared but not assigned, it has the value of undefined and it’s type is also undefined.\nExample :\n\nvar x; // value of x is undefined\nvar y = undefined; // we can also set the value of a variable as undefined\nNull - It represents a non-existent or a invalid value.\nExample :\n\nvar z = null;\nSymbol - It is a new data type introduced in the ES6 version of javascript. It is used to store an anonymous and unique value.\nExample :\n\nvar symbol1 = Symbol('symbol');\ntypeof of primitive types :\ntypeof \"John Doe\" // Returns \"string\"\ntypeof 3.14 // Returns \"number\"\ntypeof true // Returns \"boolean\"\ntypeof 234567890123456789012345678901234567890n // Returns bigint\ntypeof undefined // Returns \"undefined\"\ntypeof null // Returns \"object\" (kind of a bug in JavaScript)\ntypeof Symbol('symbol') // Returns Symbol"
  },
  {
    "id": "359",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Non-primitive types",
    "answer": "Primitive data types can store only a single value. To store multiple and complex values, non-primitive data types are used.\nObject - Used to store collection of data.\nExample:\n// Collection of data in key-value pairs\n\nvar obj1 = {\n   x:  43,\n   y:  \"Hello world!\",\n   z: function(){\n      return this.x;\n   }\n}\n      \n// Collection of data as an ordered list\n     \nvar array1 = [5, \"Hello\", true, 4.1]; \nNote- It is important to remember that any data type that is not a primitive data type, is of Object type in javascript.\n\nCreate a free personalised study plan\nGet into your dream companies with expert guidance\nReal-Life Problems\nPrep for Target Roles\nCustom Plan Duration\nCreate My Plan"
  },
  {
    "id": "360",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain Hoisting in javascript.",
    "answer": "Hoisting is the default behaviour of javascript where all the variable and function declarations are moved on top.\n\n\nThis means that irrespective of where the variables and functions are declared, they are moved on top of the scope. The scope can be both local and global.\n\nExample 1:\n\nhoistedVariable = 3;\nconsole.log(hoistedVariable); // outputs 3 even when the variable is declared after it is initialized\t\nvar hoistedVariable;\nExample 2:\n\nhoistedFunction();  // Outputs \" Hello world! \" even when the function is declared after calling\n\nfunction hoistedFunction(){ \n  console.log(\" Hello world! \");\n} \nExample 3:\n\n// Hoisting takes place in the local scope as well\nfunction doSomething(){\n  x = 33;\n  console.log(x);\n  var x;\n} \ndoSomething(); // Outputs 33 since the local variable “x” is hoisted inside the local scope\n\nNote - Variable initializations are not hoisted, only variable declarations are hoisted:\nvar x;\nconsole.log(x); // Outputs \"undefined\" since the initialization of \"x\" is not hoisted\nx = 23;\nNote - To avoid hoisting, you can run javascript in strict mode by using “use strict” on top of the code:\n\"use strict\";\nx = 23; // Gives an error since 'x' is not declared\nvar x;"
  },
  {
    "id": "361",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we use the word “debugger” in javascript?",
    "answer": "The debugger for the browser must be activated in order to debug the code. Built-in debuggers may be switched on and off, requiring the user to report faults. The remaining section of the code should stop execution before moving on to the next line while debugging.\n\nYou can download a PDF version of Javascript Interview Questions.\n\nDownload PDF"
  },
  {
    "id": "362",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between “ == “ and “ === “ operators.",
    "answer": "Both are comparison operators. The difference between both the operators is that “==” is used to compare values whereas, “ === “ is used to compare both values and types.\n\nExample:\n\nvar x = 2;\nvar y = \"2\";\n(x == y)  // Returns true since the value of both x and y is the same\n(x === y) // Returns false since the typeof x is \"number\" and typeof y is \"string\""
  },
  {
    "id": "363",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between var and let keyword in javascript.",
    "answer": "Some differences are \n\nFrom the very beginning, the 'var' keyword was used in JavaScript programming whereas the keyword 'let' was just added in 2015.\nThe keyword 'Var' has a function scope. Anywhere in the function, the variable specified using var is accessible but in ‘let’ the scope of a variable declared with the 'let' keyword is limited to the block in which it is declared. Let's start with a Block Scope.\nIn ECMAScript 2015, let and const are hoisted but not initialized. Referencing the variable in the block before the variable declaration results in a ReferenceError because the variable is in a \"temporal dead zone\" from the start of the block until the declaration is processed.\nExplore InterviewBit’s Exclusive Live Events\nBy\n\nNo More Events to show!"
  },
  {
    "id": "364",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain Implicit Type Coercion in javascript.",
    "answer": "Implicit type coercion in javascript is the automatic conversion of value from one data type to another. It takes place when the operands of an expression are of different data types.\n\nString coercion\nString coercion takes place while using the ‘ + ‘ operator. When a number is added to a string, the number type is always converted to the string type.\n\nExample 1:\n\nvar x = 3;\nvar y = \"3\";\nx + y // Returns \"33\" \nExample 2:\n\nvar x = 24;\nvar y = \"Hello\";\nx + y   // Returns \"24Hello\"; \nNote - ‘ + ‘ operator when used to add two numbers, outputs a number. The same ‘ + ‘ operator when used to add two strings, outputs the concatenated string:\nvar name = \"Vivek\";\nvar surname = \" Bisht\";\nname + surname     // Returns \"Vivek Bisht\" \nLet’s understand both the examples where we have added a number to a string,\n\nWhen JavaScript sees that the operands of the expression x + y are of different types ( one being a number type and the other being a string type ), it converts the number type to the string type and then performs the operation. Since after conversion, both the variables are of string type, the ‘ + ‘ operator outputs the concatenated string “33” in the first example and “24Hello” in the second example.\n\nNote - Type coercion also takes place when using the ‘ - ‘ operator, but the difference while using ‘ - ‘ operator is that, a string is converted to a number and then subtraction takes place.\nvar x = 3;\nVar y = \"3\";\nx - y    //Returns 0 since the variable y (string type) is converted to a number type\nBoolean Coercion\nBoolean coercion takes place when using logical operators, ternary operators, if statements, and loop checks. To understand boolean coercion in if statements and operators, we need to understand truthy and falsy values.\n\nTruthy values are those which will be converted (coerced) to true. Falsy values are those which will be converted to false.\n\nAll values except false, 0, 0n, -0, “”, null, undefined, and NaN are truthy values.\n\nIf statements:\n\nExample:\n\nvar x = 0;\nvar y = 23;\n        \nif(x) { console.log(x) }   // The code inside this block will not run since the value of x is 0(Falsy)  \n        \nif(y) { console.log(y) }    // The code inside this block will run since the value of y is 23 (Truthy)\nLogical operators:\nLogical operators in javascript, unlike operators in other programming languages, do not return true or false. They always return one of the operands.\n\nOR ( | | ) operator - If the first value is truthy, then the first value is returned. Otherwise, always the second value gets returned.\n\nAND ( && ) operator - If both the values are truthy, always the second value is returned. If the first value is falsy then the first value is returned or if the second value is falsy then the second value is returned.\n\nExample:\n\nvar x = 220;\nvar y = \"Hello\";\nvar z = undefined;\n        \nx | | y    // Returns 220 since the first value is truthy\n        \nx | | z   // Returns 220 since the first value is truthy\n        \nx && y    // Returns \"Hello\" since both the values are truthy\n        \ny && z   // Returns undefined since the second value is falsy\n        \nif( x && y ){ \n  console.log(\"Code runs\" ); // This block runs because x && y returns \"Hello\" (Truthy)\n}   \n        \nif( x || z ){\n  console.log(\"Code runs\");  // This block runs because x || y returns 220(Truthy)\n}\nEquality Coercion\nEquality coercion takes place when using ‘ == ‘ operator. As we have stated before\n\nThe ‘ == ‘ operator compares values and not types.\n\nWhile the above statement is a simple way to explain == operator, it’s not completely true\n\nThe reality is that while using the ‘==’ operator, coercion takes place.\n\nThe ‘==’ operator, converts both the operands to the same type and then compares them.\n\nExample:\n\nvar a = 12;\nvar b = \"12\";\na == b // Returns true because both 'a' and 'b' are converted to the same type and then compared. Hence the operands are equal.\nCoercion does not take place when using the ‘===’ operator. Both operands are not converted to the same type in the case of ‘===’ operator.\n\nExample:\n\nvar a = 226;\nvar b = \"226\";\n\na === b // Returns false because coercion does not take place and the  operands are of different types. Hence they are not equal."
  },
  {
    "id": "365",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is javascript a statically typed or a dynamically typed language?",
    "answer": "JavaScript is a dynamically typed language. In a dynamically typed language, the type of a variable is checked during run-time in contrast to a statically typed language, where the type of a variable is checked during compile-time.\n\n\nSince javascript is a loosely(dynamically) typed language, variables in JS are not associated with any type. A variable can hold the value of any data type.\n\nFor example, a variable that is assigned a number type can be converted to a string type:\n\nvar a = 23;\nvar a = \"Hello World!\";\n\nStart Your Coding Journey With Tracks\nMaster Data Structures and Algorithms with our Learning Tracks\nTopic Buckets\nMock Assessments\nReading Material\nView Tracks"
  },
  {
    "id": "366",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is NaN property in JavaScript?",
    "answer": "NaN property represents the “Not-a-Number” value. It indicates a value that is not a legal number.\n\ntypeof of NaN will return a Number.\n\nTo check if a value is NaN, we use the isNaN() function,\n\nNote- isNaN() function converts the given value to a Number type, and then equates to NaN.\nisNaN(\"Hello\")  // Returns true\nisNaN(345)   // Returns false\nisNaN('1')  // Returns false, since '1' is converted to Number type which results in 0 ( a number) \nisNaN(true) // Returns false, since true converted to Number type results in 1 ( a number)\nisNaN(false) // Returns false\nisNaN(undefined) // Returns true"
  },
  {
    "id": "367",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain passed by value and passed by reference.",
    "answer": "In JavaScript, primitive data types are passed by value and non-primitive data types are passed by reference.\n\nFor understanding passed by value and passed by reference, we need to understand what happens when we create a variable and assign a value to it,\n\nvar x = 2;\nIn the above example, we created a variable x and assigned it a value of “2”. In the background, the “=” (assign operator) allocates some space in the memory, stores the value “2” and returns the location of the allocated memory space. Therefore, the variable x in the above code points to the location of the memory space instead of pointing to the value 2 directly.\n\nAssign operator behaves differently when dealing with primitive and non-primitive data types,\n\nAssign operator dealing with primitive types:\n\n\nvar y = 234;\nvar z = y;\nIn the above example, the assign operator knows that the value assigned to y is a primitive type (number type in this case), so when the second line code executes, where the value of y is assigned to z, the assign operator takes the value of y (234) and allocates a new space in the memory and returns the address. Therefore, variable z is not pointing to the location of variable y, instead, it is pointing to a new location in the memory.\n\nvar y = #8454; // y pointing to address of the value 234\n\nvar z = y; \n     \nvar z = #5411; // z pointing to a completely new address of the value 234\n     \n// Changing the value of y\ny = 23;\nconsole.log(z);  // Returns 234, since z points to a new address in the memory so changes in y will not effect z\nFrom the above example, we can see that primitive data types when passed to another variable, are passed by value. Instead of just assigning the same address to another variable, the value is passed and new space of memory is created.\n\nAssign operator dealing with non-primitive types:\n\n\nvar obj = { name: \"Vivek\", surname: \"Bisht\" };\nvar obj2 = obj;\nIn the above example, the assign operator directly passes the location of the variable obj to the variable obj2. In other words, the reference of the variable obj is passed to the variable obj2.\n\nvar obj = #8711;  // obj pointing to address of { name: \"Vivek\", surname: \"Bisht\" }\nvar obj2 = obj;\n    \nvar obj2 = #8711; // obj2 pointing to the same address \n\n// changing the value of obj1\n        \nobj.name = \"Akki\";\nconsole.log(obj2);\n        \n// Returns {name:\"Akki\", surname:\"Bisht\"} since both the variables are pointing to the same address.\nFrom the above example, we can see that while passing non-primitive data types, the assigned operator directly passes the address (reference).\n\nTherefore, non-primitive data types are always passed by reference."
  },
  {
    "id": "368",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is an Immediately Invoked Function in JavaScript?",
    "answer": "An Immediately Invoked Function ( known as IIFE and pronounced as IIFY) is a function that runs as soon as it is defined.\n\nSyntax of IIFE :\n\n(function(){ \n  // Do something;\n})();\nTo understand IIFE, we need to understand the two sets of parentheses that are added while creating an IIFE :\n\nThe first set of parenthesis:\n\n(function (){\n   //Do something;\n})\nWhile executing javascript code, whenever the compiler sees the word “function”, it assumes that we are declaring a function in the code. Therefore, if we do not use the first set of parentheses, the compiler throws an error because it thinks we are declaring a function, and by the syntax of declaring a function, a function should always have a name.\n\nfunction() {\n  //Do something;\n}\n// Compiler gives an error since the syntax of declaring a function is wrong in the code above.\nTo remove this error, we add the first set of parenthesis that tells the compiler that the function is not a function declaration, instead, it’s a function expression.\n\nThe second set of parenthesis:\n\n(function (){\n  //Do something;\n})();\nFrom the definition of an IIFE, we know that our code should run as soon as it is defined. A function runs only when it is invoked. If we do not invoke the function, the function declaration is returned:\n\n(function (){\n  // Do something;\n})\n\n// Returns the function declaration\nTherefore to invoke the function, we use the second set of parenthesis."
  },
  {
    "id": "369",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you mean by strict mode in javascript and characteristics of javascript strict-mode?",
    "answer": "In ECMAScript 5, a new feature called JavaScript Strict Mode allows you to write a code or a function in a \"strict\" operational environment. In most cases, this language is 'not particularly severe' when it comes to throwing errors. In 'Strict mode,' however, all forms of errors, including silent errors, will be thrown. As a result, debugging becomes a lot simpler.  Thus programmer's chances of making an error are lowered.\n\nCharacteristics of strict mode in javascript\n\nDuplicate arguments are not allowed by developers.\nIn strict mode, you won't be able to use the JavaScript keyword as a parameter or function name.\nThe 'use strict' keyword is used to define strict mode at the start of the script. Strict mode is supported by all browsers.\nEngineers will not be allowed to create global variables in 'Strict Mode."
  },
  {
    "id": "370",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain Higher Order Functions in javascript.",
    "answer": "Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.\n\nHigher-order functions are a result of functions being first-class citizens in javascript.\n\nExamples of higher-order functions:\n\nfunction higherOrder(fn) {\n  fn();\n}\n   \nhigherOrder(function() { console.log(\"Hello world\") });  \nfunction higherOrder2() {\n  return function() {\n    return \"Do something\";\n  }\n}      \nvar x = higherOrder2();\nx()   // Returns \"Do something\"\n\nDiscover your path to a  \nSuccessful Tech Career for FREE!\nAnswer 4 simple questions & get a career plan tailored for you\nInterview Process\nCTC & Designation\nProjects on the Job\nTry It Out\n2 Lakh+ Roadmaps Created"
  },
  {
    "id": "371",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain “this” keyword.",
    "answer": "The “this” keyword refers to the object that the function is a property of.\n\nThe value of the “this” keyword will always depend on the object that is invoking the function.\\\n\nConfused? Let’s understand the above statements by examples:\n\nfunction doSomething() {\n  console.log(this);\n}\n   \ndoSomething();\nWhat do you think the output of the above code will be?\n\nNote - Observe the line where we are invoking the function.\n\nCheck the definition again:\n\nThe “this” keyword refers to the object that the function is a property of.\nIn the above code, the function is a property of which object?\n\nSince the function is invoked in the global context, the function is a property of the global object.\n\nTherefore, the output of the above code will be the global object. Since we ran the above code inside the browser, the global object is the window object.\n\nExample 2:\n\nvar obj = {\n    name:  \"vivek\",\n    getName: function(){\n    console.log(this.name);\n  }\n}\n   \nobj.getName();\nIn the above code, at the time of invocation, the getName function is a property of the object obj , therefore, this keyword will refer to the object obj, and hence the output will be “vivek”.\n\nExample 3:\n\n var obj = {\n    name:  \"vivek\",\n    getName: function(){\n    console.log(this.name);\n  }\n     \n}\n       \nvar getName = obj.getName;\n       \nvar obj2 = {name:\"akshay\", getName };\nobj2.getName();\nCan you guess the output here?\n\nThe output will be “akshay”.\n\nAlthough the getName function is declared inside the object obj, at the time of invocation, getName() is a property of obj2, therefore the “this” keyword will refer to obj2.\n\nThe silly way to understand the “this” keyword is, whenever the function is invoked, check the object before the dot. The value of this . keyword will always be the object before the dot.\n\nIf there is no object before the dot-like in example1, the value of this keyword will be the global object.\n\nExample 4:\n\nvar obj1 = {\n    address : \"Mumbai,India\",\n    getAddress: function(){\n    console.log(this.address); \n  }\n}\n   \nvar getAddress = obj1.getAddress;\nvar obj2 = {name:\"akshay\"};\nobj2.getAddress();    \nCan you guess the output?\n\nThe output will be an error.\n\nAlthough in the code above, this keyword refers to the object obj2, obj2 does not have the property “address”‘, hence the getAddress function throws an error."
  },
  {
    "id": "372",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you mean by Self Invoking Functions?",
    "answer": "Without being requested, a self-invoking expression is automatically invoked (initiated). If a function expression is followed by (), it will execute automatically. A function declaration cannot be invoked by itself.\n\nNormally, we declare a function and call it, however, anonymous functions may be used to run a function automatically when it is described and will not be called again. And there is no name for these kinds of functions."
  },
  {
    "id": "373",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain call(), apply() and, bind() methods.",
    "answer": "1. call():\n\nIt’s a predefined method in javascript.\nThis method invokes a method (function) by specifying the owner object.\nExample 1:\nfunction sayHello(){\n  return \"Hello \" + this.name;\n}\n        \nvar obj = {name: \"Sandy\"};\n        \nsayHello.call(obj);\n        \n// Returns \"Hello Sandy\"\t\ncall() method allows an object to use the method (function) of another object.\nExample 2:\nvar person = {\n  age: 23,\n  getAge: function(){\n    return this.age;\n  }\n}        \nvar person2 = {age:  54};\nperson.getAge.call(person2);      \n// Returns 54  \ncall() accepts arguments:\nfunction saySomething(message){\n  return this.name + \" is \" + message;\n}     \nvar person4 = {name:  \"John\"};     \nsaySomething.call(person4, \"awesome\");\n// Returns \"John is awesome\"    \napply()\n\nThe apply method is similar to the call() method. The only difference is that,\n\ncall() method takes arguments separately whereas, apply() method takes arguments as an array.\n\nfunction saySomething(message){\n  return this.name + \" is \" + message;\n}        \nvar person4 = {name:  \"John\"};\nsaySomething.apply(person4, [\"awesome\"]);"
  },
  {
    "id": "374",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "bind():",
    "answer": "This method returns a new function, where the value of “this” keyword will be bound to the owner object, which is provided as a parameter.\nExample with arguments:\nvar bikeDetails = {\n    displayDetails: function(registrationNumber,brandName){\n    return this.name+ \" , \"+ \"bike details: \"+ registrationNumber + \" , \" + brandName;\n  }\n}\n   \nvar person1 = {name:  \"Vivek\"};\n     \nvar detailsOfPerson1 = bikeDetails.displayDetails.bind(person1, \"TS0122\", \"Bullet\");\n      \n// Binds the displayDetails function to the person1 object\n        \n      \ndetailsOfPerson1();\n//Returns Vivek, bike details: TS0122, Bullet"
  },
  {
    "id": "375",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between exec () and test () methods in javascript?",
    "answer": "test () and exec () are RegExp expression methods used in javascript. \nWe'll use exec () to search a string for a specific pattern, and if it finds it, it'll return the pattern directly; else, it'll return an 'empty' result.\nWe will use a test () to find a string for a specific pattern. It will return the Boolean value 'true' on finding the given text otherwise, it will return 'false'."
  },
  {
    "id": "376",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is currying in JavaScript?",
    "answer": "Currying is an advanced technique to transform a function of arguments n, to n functions of one or fewer arguments.\n\nExample of a curried function:\n\nfunction add (a) {\n  return function(b){\n    return a + b;\n  }\n}\n\nadd(3)(4) \nFor Example, if we have a function f(a,b), then the function after currying, will be transformed to f(a)(b).\n\nBy using the currying technique, we do not change the functionality of a function, we just change the way it is invoked.\n\nLet’s see currying in action:\n\nfunction multiply(a,b){\n  return a*b;\n}\n\nfunction currying(fn){\n  return function(a){\n    return function(b){\n      return fn(a,b);\n    }\n  }\n}\n\nvar curriedMultiply = currying(multiply);\n\nmultiply(4, 3); // Returns 12\n\ncurriedMultiply(4)(3); // Also returns 12\nAs one can see in the code above, we have transformed the function multiply(a,b) to a function curriedMultiply , which takes in one parameter at a time."
  },
  {
    "id": "377",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are some advantages of using External JavaScript?",
    "answer": "External JavaScript is the JavaScript Code (script) written in a separate file with the extension.js, and then we link that file inside the <head> or <body> element of the HTML file where the code is to be placed. \n\nSome advantages of external javascript are\n\nIt allows web designers and developers to collaborate on HTML and javascript files.\nWe can reuse the code.\nCode readability is simple in external javascript."
  },
  {
    "id": "378",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain Scope and Scope Chain in javascript.",
    "answer": "Scope in JS determines the accessibility of variables and functions at various parts of one’s code.\n\nIn general terms, the scope will let us know at a given part of code, what are variables and functions we can or cannot access.\n\nThere are three types of scopes in JS:\n\nGlobal Scope\nLocal or Function Scope\nBlock Scope\nGlobal Scope: Variables or functions declared in the global namespace have global scope, which means all the variables and functions having global scope can be accessed from anywhere inside the code.\n\nvar globalVariable = \"Hello world\";\n\nfunction sendMessage(){\n  return globalVariable; // can access globalVariable since it's written in global space\n}\nfunction sendMessage2(){\n  return sendMessage(); // Can access sendMessage function since it's written in global space\n}\nsendMessage2();  // Returns “Hello world”\nFunction Scope: Any variables or functions declared inside a function have local/function scope, which means that all the variables and functions declared inside a function, can be accessed from within the function and not outside of it.\n\nfunction awesomeFunction(){\n  var a = 2;\n\n  var multiplyBy2 = function(){\n    console.log(a*2); // Can access variable \"a\" since a and multiplyBy2 both are written inside the same function\n  }\n}\nconsole.log(a); // Throws reference error since a is written in local scope and cannot be accessed outside\n\nmultiplyBy2(); // Throws reference error since multiplyBy2 is written in local scope\nBlock Scope: Block scope is related to the variables declared using let and const. Variables declared with var do not have block scope. Block scope tells us that any variable declared inside a block { }, can be accessed only inside that block and cannot be accessed outside of it.\n\n{\n  let x = 45;\n}\n\nconsole.log(x); // Gives reference error since x cannot be accessed outside of the block\n\nfor(let i=0; i<2; i++){\n  // do something\n}\n\nconsole.log(i); // Gives reference error since i cannot be accessed outside of the for loop block\nScope Chain: JavaScript engine also uses Scope to find variables. Let’s understand that using an example:\n\nvar y = 24;\n\nfunction favFunction(){\n  var x = 667;\n  var anotherFavFunction = function(){\n    console.log(x); // Does not find x inside anotherFavFunction, so looks for variable inside favFunction, outputs 667\n  }\n\n  var yetAnotherFavFunction = function(){\n    console.log(y); // Does not find y inside yetAnotherFavFunction, so looks for variable inside favFunction and does not find it, so looks for variable in global scope, finds it and outputs 24\n  }\n\n  anotherFavFunction();\n  yetAnotherFavFunction();\n}\nfavFunction();\nAs you can see in the code above, if the javascript engine does not find the variable in local scope, it tries to check for the variable in the outer scope. If the variable does not exist in the outer scope, it tries to find the variable in the global scope.\n\nIf the variable is not found in the global space as well, a reference error is thrown."
  },
  {
    "id": "379",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain Closures in JavaScript.",
    "answer": "Closures are an ability of a function to remember the variables and functions that are declared in its outer scope.\n\nvar Person = function(pName){\n  var name = pName;\n\n  this.getName = function(){\n    return name;\n  }\n}\n\nvar person = new Person(\"Neelesh\");\nconsole.log(person.getName());\nLet’s understand closures by example:\n\nfunction randomFunc(){\n  var obj1 = {name:\"Vivian\", age:45};\n\n  return function(){\n    console.log(obj1.name + \" is \"+ \"awesome\"); // Has access to obj1 even when the randomFunc function is executed\n\n  }\n}\n\nvar initialiseClosure = randomFunc(); // Returns a function\n\ninitialiseClosure(); \nLet’s understand the code above,\n\nThe function randomFunc() gets executed and returns a function when we assign it to a variable:\n\nvar initialiseClosure = randomFunc();\nThe returned function is then executed when we invoke initialiseClosure:\n\ninitialiseClosure(); \nThe line of code above outputs “Vivian is awesome” and this is possible because of closure.\n\nconsole.log(obj1.name + \" is \"+ \"awesome\");\nWhen the function randomFunc() runs, it seems that the returning function is using the variable obj1 inside it:\n\nTherefore randomFunc(), instead of destroying the value of obj1 after execution, saves the value in the memory for further reference. This is the reason why the returning function is able to use the variable declared in the outer scope even after the function is already executed.\n\nThis ability of a function to store a variable for further reference even after it is executed is called Closure."
  },
  {
    "id": "380",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Mention some advantages of javascript.",
    "answer": "There are many advantages of javascript. Some of them are \n\nJavascript is executed on the client-side as well as server-side also. There are a variety of Frontend Frameworks that you may study and utilize. However, if you want to use JavaScript on the backend, you'll need to learn NodeJS. It is currently the only JavaScript framework that may be used on the backend.\nJavascript is a simple language to learn.\nWeb pages now have more functionality because of Javascript.\nTo the end-user, Javascript is quite quick."
  },
  {
    "id": "381",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are object prototypes?",
    "answer": "All javascript objects inherit properties from a prototype. For example,\n\nDate objects inherit properties from the Date prototype\nMath objects inherit properties from the Math prototype\nArray objects inherit properties from the Array prototype.\nOn top of the chain is Object.prototype. Every prototype inherits properties and methods from the Object.prototype.\nA prototype is a blueprint of an object. The prototype allows us to use properties and methods on an object even if the properties and methods do not exist on the current object.\nLet’s see prototypes help us use methods and properties:\n\n\nvar arr = [];\narr.push(2);\n\nconsole.log(arr); // Outputs [2]\nIn the code above, as one can see, we have not defined any property or method called push on the array “arr” but the javascript engine does not throw an error.\n\nThe reason is the use of prototypes. As we discussed before, Array objects inherit properties from the Array prototype.\n\nThe javascript engine sees that the method push does not exist on the current array object and therefore, looks for the method push inside the Array prototype and it finds the method.\n\nWhenever the property or method is not found on the current object, the javascript engine will always try to look in its prototype and if it still does not exist, it looks inside the prototype's prototype and so on."
  },
  {
    "id": "382",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are callbacks?",
    "answer": "A callback is a function that will be executed after another function gets executed. In javascript, functions are treated as first-class citizens, they can be used as an argument of another function, can be returned by another function, and can be used as a property of an object.\n\nFunctions that are used as an argument to another function are called callback functions. Example:\n\nfunction divideByHalf(sum){\n  console.log(Math.floor(sum / 2));\n}\n\nfunction multiplyBy2(sum){\n  console.log(sum * 2);\n}\n\nfunction operationOnSum(num1,num2,operation){\n  var sum = num1 + num2;\n  operation(sum);\n}\n\noperationOnSum(3, 3, divideByHalf); // Outputs 3\n\noperationOnSum(5, 5, multiplyBy2); // Outputs 20\nIn the code above, we are performing mathematical operations on the sum of two numbers. The operationOnSum function takes 3 arguments, the first number, the second number, and the operation that is to be performed on their sum (callback).\nBoth divideByHalf and multiplyBy2 functions are used as callback functions in the code above.\nThese callback functions will be executed only after the function operationOnSum is executed.\nTherefore, a callback is a function that will be executed after another function gets executed."
  },
  {
    "id": "383",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the types of errors in javascript?",
    "answer": "There are two types of errors in javascript.\n\nSyntax error: Syntax errors are mistakes or spelling problems in the code that cause the program to not execute at all or to stop running halfway through. Error messages are usually supplied as well.\nLogical error: Reasoning mistakes occur when the syntax is proper but the logic or program is incorrect. The application executes without problems in this case. However, the output findings are inaccurate. These are sometimes more difficult to correct than syntax issues since these applications do not display error signals for logic faults."
  },
  {
    "id": "384",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is memoization?",
    "answer": "Memoization is a form of caching where the return value of a function is cached based on its parameters. If the parameter of that function is not changed, the cached version of the function is returned.\nLet’s understand memoization, by converting a simple function to a memoized function:\n\nNote- Memoization is used for expensive function calls but in the following example, we are considering a simple function for understanding the concept of memoization better.\n\nConsider the following function:\n\nfunction addTo256(num){\n  return num + 256;\n}\naddTo256(20); // Returns 276\naddTo256(40); // Returns 296\naddTo256(20); // Returns 276\nIn the code above, we have written a function that adds the parameter to 256 and returns it.\n\nWhen we are calling the function addTo256 again with the same parameter (“20” in the case above), we are computing the result again for the same parameter.\n\nComputing the result with the same parameter, again and again, is not a big deal in the above case, but imagine if the function does some heavy-duty work, then, computing the result again and again with the same parameter will lead to wastage of time.\n\nThis is where memoization comes in, by using memoization we can store(cache) the computed results based on the parameters. If the same parameter is used again while invoking the function, instead of computing the result, we directly return the stored (cached) value.\n\nLet’s convert the above function addTo256, to a memoized function:\n\nfunction memoizedAddTo256(){\n  var cache = {};\n\n  return function(num){\n    if(num in cache){\n      console.log(\"cached value\");\n      return cache[num]\n    }\n    else{\n      cache[num] = num + 256;\n      return cache[num];\n    }\n  }\n}\nvar memoizedFunc = memoizedAddTo256();\n\nmemoizedFunc(20); // Normal return\nmemoizedFunc(20); // Cached return\nIn the code above, if we run the memoizedFunc function with the same parameter, instead of computing the result again, it returns the cached result.\n\nNote- Although using memoization saves time, it results in larger consumption of memory since we are storing all the computed results."
  },
  {
    "id": "385",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is recursion in a programming language?",
    "answer": "Recursion is a technique to iterate over an operation by having a function call itself repeatedly until it arrives at a result.\n\nfunction add(number) {\n  if (number <= 0) {\n    return 0;\n  } else {\n    return number + add(number - 1);\n  }\n}\nadd(3) => 3 + add(2)\n          3 + 2 + add(1)\n          3 + 2 + 1 + add(0)\n          3 + 2 + 1 + 0 = 6  \nExample of a recursive function:\n\nThe following function calculates the sum of all the elements in an array by using recursion:\n\nfunction computeSum(arr){\n  if(arr.length === 1){\n    return arr[0];\n  }\n  else{\n    return arr.pop() + computeSum(arr);\n  }\n}\ncomputeSum([7, 8, 9, 99]); // Returns 123"
  },
  {
    "id": "386",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the use of a constructor function in javascript?",
    "answer": "Constructor functions are used to create objects in javascript.\n\nWhen do we use constructor functions?\n\nIf we want to create multiple objects having similar properties and methods, constructor functions are used.\n\nNote- The name of a constructor function should always be written in Pascal Notation: every word should start with a capital letter.\nExample:\n\nfunction Person(name,age,gender){\n  this.name = name;\n  this.age = age;\n  this.gender = gender;\n}\n\n\nvar person1 = new Person(\"Vivek\", 76, \"male\");\nconsole.log(person1);\n\nvar person2 = new Person(\"Courtney\", 34, \"female\");\nconsole.log(person2);\nIn the code above, we have created a constructor function named Person. Whenever we want to create a new object of the type Person, We need to create it using the new keyword:\n\nvar person3 = new Person(\"Lilly\", 17, \"female\");\nThe above line of code will create a new object of the type Person. Constructor functions allow us to group similar objects."
  },
  {
    "id": "387",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is DOM?",
    "answer": "DOM stands for Document Object Model.  DOM is a programming interface for HTML and XML documents.\nWhen the browser tries to render an HTML document, it creates an object based on the HTML document called DOM. Using this DOM, we can manipulate or change various elements inside the HTML document.\nExample of how HTML code gets converted to DOM:"
  },
  {
    "id": "388",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Which method is used to retrieve a character from a certain index?",
    "answer": "The charAt() function of the JavaScript string finds a char element at the supplied index. The index number begins at 0 and continues up to n-1, Here n is the string length. The index value must be positive, higher than, or the same as the string length."
  },
  {
    "id": "389",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you mean by BOM?",
    "answer": "Browser Object Model is known as BOM. It allows users to interact with the browser. A browser's initial object is a window. As a result, you may call all of the window's functions directly or by referencing the window. The document, history, screen, navigator, location, and other attributes are available in the window object."
  },
  {
    "id": "390",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the distinction between client-side and server-side JavaScript?",
    "answer": "Client-side JavaScript is made up of two parts, a fundamental language and predefined objects for performing JavaScript in a browser. JavaScript for the client is automatically included in the HTML pages. At runtime, the browser understands this script.\n\n\nServer-side JavaScript, involves the execution of JavaScript code on a server in response to client requests. It handles these requests and delivers the relevant response to the client, which may include client-side JavaScript for subsequent execution within the browser.\n\nJavaScript Interview Questions for Experienced"
  },
  {
    "id": "391",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are arrow functions?",
    "answer": "Arrow functions were introduced in the ES6 version of javascript. They provide us with a new and shorter syntax for declaring functions. Arrow functions can only be used as a function expression.\n\nLet’s compare the normal function declaration and the arrow function declaration in detail:\n\n// Traditional Function Expression\nvar add = function(a,b){\n  return a + b;\n}\n\n// Arrow Function Expression\nvar arrowAdd = (a,b) => a + b;\nArrow functions are declared without the function keyword. If there is only one returning expression then we don’t need to use the return keyword as well in an arrow function as shown in the example above. Also, for functions having just one line of code, curly braces { } can be omitted.\n\n// Traditional function expression\nvar multiplyBy2 = function(num){\n  return num * 2;\n}\n// Arrow function expression\nvar arrowMultiplyBy2 = num => num * 2;\nIf the function takes in only one argument, then the parenthesis () around the parameter can be omitted as shown in the code above. \n\nvar obj1 = {\n  valueOfThis: function(){\n    return this;\n  }\n}\nvar obj2 = {\n  valueOfThis: ()=>{\n    return this;\n  }\n}\n\nobj1.valueOfThis(); // Will return the object obj1\nobj2.valueOfThis(); // Will return window/global object\nThe biggest difference between the traditional function expression and the arrow function is the handling of this keyword. By general definition, this keyword always refers to the object that is calling the function. As you can see in the code above, obj1.valueOfThis() returns obj1 since this keyword refers to the object calling the function.\n\nIn the arrow functions, there is no binding of this keyword. This keyword inside an arrow function does not refer to the object calling it. It rather inherits its value from the parent scope which is the window object in this case. Therefore, in the code above, obj2.valueOfThis() returns the window object."
  },
  {
    "id": "392",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do mean by prototype design pattern?",
    "answer": "The Prototype Pattern produces different objects, but instead of returning uninitialized objects, it produces objects that have values replicated from a template – or sample – object. Also known as the Properties pattern, the Prototype pattern is used to create prototypes.\n\nThe introduction of business objects with parameters that match the database's default settings is a good example of where the Prototype pattern comes in handy. The default settings for a newly generated business object are stored in the prototype object.\n\nThe Prototype pattern is hardly used in traditional languages, however, it is used in the development of new objects and templates in JavaScript, which is a prototypal language."
  },
  {
    "id": "393",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Differences between declaring variables using var, let and const.",
    "answer": "Before the ES6 version of javascript, only the keyword var was used to declare variables. With the ES6 Version, keywords let and const were introduced to declare variables.\n\nkeyword\tconst\tlet\tvar\nglobal scope\tno\tno\tyes\nfunction scope\tyes\tyes\tyes\nblock scope\tyes\tyes\tno\ncan be reassigned\tno\tyes\tyes\nLet’s understand the differences with examples:\n\nvar variable1 = 23;\n\nlet variable2 = 89;\n\nfunction catchValues(){\n  console.log(variable1);\n  console.log(variable2);\n\n// Both the variables can be accessed anywhere since they are declared in the global scope\n}\n\nwindow.variable1; // Returns the value 23\n\nwindow.variable2; // Returns undefined\nThe variables declared with the let keyword in the global scope behave just like the variable declared with the var keyword in the global scope.\nVariables declared in the global scope with var and let keywords can be accessed from anywhere in the code.\nBut, there is one difference! Variables that are declared with the var keyword in the global scope are added to the window/global object. Therefore, they can be accessed using window.variableName.\nWhereas, the variables declared with the let keyword are not added to the global object, therefore, trying to access such variables using window.variableName results in an error.\nvar vs let in functional scope\n\nfunction varVsLetFunction(){\n  let awesomeCar1 = \"Audi\";\n  var awesomeCar2 = \"Mercedes\";\n}\n\nconsole.log(awesomeCar1); // Throws an error\nconsole.log(awesomeCar2); // Throws an error\nVariables are declared in a functional/local scope using var and let keywords behave exactly the same, meaning, they cannot be accessed from outside of the scope. \n\n{\n  var variable3 = [1, 2, 3, 4];\n}\n\nconsole.log(variable3); // Outputs [1,2,3,4]\n\n{\n  let variable4 = [6, 55, -1, 2];\n}\n\nconsole.log(variable4); // Throws error\n\nfor(let i = 0; i < 2; i++){\n  //Do something\n}\n\nconsole.log(i); // Throws error\n\nfor(var j = 0; j < 2; i++){\n  // Do something\n}\n\nconsole.log(j) // Outputs 2 \nIn javascript, a block means the code written inside the curly braces {}.\nVariables declared with var keyword do not have block scope. It means a variable declared in block scope {} with the var keyword is the same as declaring the variable in the global scope.\nVariables declared with let keyword inside the block scope cannot be accessed from outside of the block.\nConst keyword\n\nVariables with the const keyword behave exactly like a variable declared with the let keyword with only one difference, any variable declared with the const keyword cannot be reassigned.\nExample:\nconst x = {name:\"Vivek\"};\n\nx = {address: \"India\"}; // Throws an error\n\nx.name = \"Nikhil\"; // No error is thrown\n\nconst y = 23;\n\ny = 44; // Throws an error\nIn the code above, although we can change the value of a property inside the variable declared with const keyword, we cannot completely reassign the variable itself."
  },
  {
    "id": "394",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the rest parameter and spread operator?",
    "answer": "Both rest parameter and spread operator were introduced in the ES6 version of javascript.\n\nRest parameter ( … ):\n\nIt provides an improved way of handling the parameters of a function.\nUsing the rest parameter syntax, we can create functions that can take a variable number of arguments.\nAny number of arguments will be converted into an array using the rest parameter.\nIt also helps in extracting all or some parts of the arguments.\nRest parameters can be used by applying three dots (...) before the parameters.\nfunction extractingArgs(...args){\n  return args[1];\n}\n\n// extractingArgs(8,9,1); // Returns 9\n\nfunction addAllArgs(...args){\n  let sumOfArgs = 0;\n  let i = 0;\n  while(i < args.length){\n    sumOfArgs += args[i];\n    i++;\n  }\n  return sumOfArgs;\n}\n\naddAllArgs(6, 5, 7, 99); // Returns 117\naddAllArgs(1, 3, 4); // Returns 8\n**Note- Rest parameter should always be used at the last parameter of a function:\n\n// Incorrect way to use rest parameter\nfunction randomFunc(a,...args,c){\n//Do something\n}\n\n// Correct way to use rest parameter\nfunction randomFunc2(a,b,...args){\n//Do something\n}\nSpread operator (…): Although the syntax of the spread operator is exactly the same as the rest parameter, the spread operator is used to spreading an array, and object literals. We also use spread operators where one or more arguments are expected in a function call.\nfunction addFourNumbers(num1,num2,num3,num4){\n  return num1 + num2 + num3 + num4;\n}\n\nlet fourNumbers = [5, 6, 7, 8];\n\n\naddFourNumbers(...fourNumbers);\n// Spreads [5,6,7,8] as 5,6,7,8\n\nlet array1 = [3, 4, 5, 6];\nlet clonedArray1 = [...array1];\n// Spreads the array into 3,4,5,6\nconsole.log(clonedArray1); // Outputs [3,4,5,6]\n\n\nlet obj1 = {x:'Hello', y:'Bye'};\nlet clonedObj1 = {...obj1}; // Spreads and clones obj1\nconsole.log(obj1);\n\nlet obj2 = {z:'Yes', a:'No'};\nlet mergedObj = {...obj1, ...obj2}; // Spreads both the objects and merges it\nconsole.log(mergedObj);\n// Outputs {x:'Hello', y:'Bye',z:'Yes',a:'No'};\n***Note- Key differences between rest parameter and spread operator:\n\nRest parameter is used to take a variable number of arguments and turns them into an array while the spread operator takes an array or an object and spreads it\nRest parameter is used in function declaration whereas the spread operator is used in function calls."
  },
  {
    "id": "395",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In JavaScript, how many different methods can you make an object?",
    "answer": "In JavaScript, there are several ways to declare or construct an object.\n\nObject.\nusing Class.\ncreate Method.\nObject Literals.\nusing Function.\nObject Constructor."
  },
  {
    "id": "396",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the use of promises in javascript?",
    "answer": "Promises are used to handle asynchronous operations in javascript.\n\nBefore promises, callbacks were used to handle asynchronous operations. But due to the limited functionality of callbacks, using multiple callbacks to handle asynchronous code can lead to unmanageable code.\n\nPromise object has four states -\n\nPending - Initial state of promise. This state represents that the promise has neither been fulfilled nor been rejected, it is in the pending state.\nFulfilled - This state represents that the promise has been fulfilled, meaning the async operation is completed.\nRejected - This state represents that the promise has been rejected for some reason, meaning the async operation has failed.\nSettled - This state represents that the promise has been either rejected or fulfilled.\nA promise is created using the Promise constructor which takes in a callback function with two parameters, resolve and reject respectively.\n\n\nresolve is a function that will be called when the async operation has been successfully completed.\n\nreject is a function that will be called, when the async operation fails or if some error occurs.\n\nExample of a promise:\n\nPromises are used to handle asynchronous operations like server requests, for ease of understanding, we are using an operation to calculate the sum of three elements.\n\nIn the function below, we are returning a promise inside a function:\n\nfunction sumOfThreeElements(...elements){\n  return new Promise((resolve,reject)=>{\n    if(elements.length > 3 ){\n      reject(\"Only three elements or less are allowed\");\n    }\n    else{\n      let sum = 0;\n      let i = 0;\n      while(i < elements.length){\n        sum += elements[i];\n        i++;\n      }\n      resolve(\"Sum has been calculated: \"+sum);\n    }\n  })\n}\nIn the code above, we are calculating the sum of three elements, if the length of the elements array is more than 3, a promise is rejected, or else the promise is resolved and the sum is returned.\n\nWe can consume any promise by attaching then() and catch() methods to the consumer.\n\n\nthen() method is used to access the result when the promise is fulfilled.\n\ncatch() method is used to access the result/error when the promise is rejected. In the code below, we are consuming the promise:\n\nsumOfThreeElements(4, 5, 6)\n.then(result=> console.log(result))\n.catch(error=> console.log(error));\n// In the code above, the promise is fulfilled so the then() method gets executed\n\nsumOfThreeElements(7, 0, 33, 41)\n.then(result => console.log(result))\n.catch(error=> console.log(error));\n// In the code above, the promise is rejected hence the catch() method gets executed"
  },
  {
    "id": "397",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are classes in javascript?",
    "answer": "Introduced in the ES6 version, classes are nothing but syntactic sugars for constructor functions. They provide a new way of declaring constructor functions in javascript.  Below are the examples of how classes are declared and used:\n\n// Before ES6 version, using constructor functions\nfunction Student(name,rollNumber,grade,section){\n  this.name = name;\n  this.rollNumber = rollNumber;\n  this.grade = grade;\n  this.section = section;\n}\n\n// Way to add methods to a constructor function\nStudent.prototype.getDetails = function(){\n  return 'Name: ${this.name}, Roll no: ${this.rollNumber}, Grade: ${this.grade}, Section:${this.section}';\n}\n\n\nlet student1 = new Student(\"Vivek\", 354, \"6th\", \"A\");\nstudent1.getDetails();\n// Returns Name: Vivek, Roll no:354, Grade: 6th, Section:A\n\n// ES6 version classes\nclass Student{\n  constructor(name,rollNumber,grade,section){\n    this.name = name;\n    this.rollNumber = rollNumber;\n    this.grade = grade;\n    this.section = section;\n  }\n\n  // Methods can be directly added inside the class\n  getDetails(){\n    return 'Name: ${this.name}, Roll no: ${this.rollNumber}, Grade:${this.grade}, Section:${this.section}';\n  }\n}\n\nlet student2 = new Student(\"Garry\", 673, \"7th\", \"C\");\nstudent2.getDetails();\n// Returns Name: Garry, Roll no:673, Grade: 7th, Section:C\nKey points to remember about classes:\n\nUnlike functions, classes are not hoisted. A class cannot be used before it is declared.\nA class can inherit properties and methods from other classes by using the extend keyword.\nAll the syntaxes inside the class must follow the strict mode(‘use strict’) of javascript. An error will be thrown if the strict mode rules are not followed."
  },
  {
    "id": "398",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are generator functions?",
    "answer": "Introduced in the ES6 version, generator functions are a special class of functions.\n\nThey can be stopped midway and then continue from where they had stopped.\n\nGenerator functions are declared with the function* keyword instead of the normal function keyword:\n\nfunction* genFunc(){\n  // Perform operation\n}\nIn normal functions, we use the return keyword to return a value and as soon as the return statement gets executed, the function execution stops:\n\nfunction normalFunc(){\n  return 22;\n  console.log(2); // This line of code does not get executed\n}\nIn the case of generator functions, when called, they do not execute the code, instead, they return a generator object. This generator object handles the execution.\n\nfunction* genFunc(){\n  yield 3;\n  yield 4;\n}\ngenFunc(); // Returns Object [Generator] {}\nThe generator object consists of a method called next(), this method when called, executes the code until the nearest yield statement, and returns the yield value.\n\nFor example, if we run the next() method on the above code:\n\ngenFunc().next(); // Returns {value: 3, done:false}\nAs one can see the next method returns an object consisting of a value and done properties.  Value property represents the yielded value. Done property tells us whether the function code is finished or not. (Returns true if finished).\n\nGenerator functions are used to return iterators. Let’s see an example where an iterator is returned:\n\nfunction* iteratorFunc() {\n  let count = 0;\n  for (let i = 0; i < 2; i++) {\n      count++;\n      yield i;\n  }\n  return count;\n}\n\nlet iterator = iteratorFunc();\nconsole.log(iterator.next()); // {value:0,done:false}\nconsole.log(iterator.next()); // {value:1,done:false}\nconsole.log(iterator.next()); // {value:2,done:true}\nAs you can see in the code above, the last line returns done:true, since the code reaches the return statement."
  },
  {
    "id": "399",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain WeakSet in javascript.",
    "answer": "In javascript, a Set is a collection of unique and ordered elements. Just like Set, WeakSet is also a collection of unique and ordered elements with some key differences:\n\nWeakset contains only objects and no other type.\nAn object inside the weakset is referenced weakly. This means, that if the object inside the weakset does not have a reference, it will be garbage collected.\nUnlike Set, WeakSet only has three methods, add() , delete() and has() .\nconst newSet = new Set([4, 5, 6, 7]);\nconsole.log(newSet);// Outputs Set {4,5,6,7}\n\nconst newSet2 = new WeakSet([3, 4, 5]); //Throws an error\n\n\nlet obj1 = {message:\"Hello world\"};\nconst newSet3 = new WeakSet([obj1]);\nconsole.log(newSet3.has(obj1)); // true"
  },
  {
    "id": "400",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we use callbacks?",
    "answer": "A callback function is a method that is sent as an input to another function (now let us name this other function \"thisFunction\"), and it is performed inside the thisFunction after the function has completed execution.\n\nJavaScript is a scripting language that is based on events. Instead of waiting for a reply before continuing, JavaScript will continue to run while monitoring for additional events. Callbacks are a technique of ensuring that a particular code does not run until another code has completed its execution."
  },
  {
    "id": "401",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain WeakMap in javascript.",
    "answer": "In javascript, Map is used to store key-value pairs. The key-value pairs can be of both primitive and non-primitive types. WeakMap is similar to Map with key differences:\n\nThe keys and values in weakmap should always be an object.\nIf there are no references to the object, the object will be garbage collected.\nconst map1 = new Map();\nmap1.set('Value', 1);\n\nconst map2 = new WeakMap();\nmap2.set('Value', 2.3); // Throws an error\n\nlet obj = {name:\"Vivek\"};\nconst map3 = new WeakMap();\nmap3.set(obj, {age:23});"
  },
  {
    "id": "402",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Object Destructuring?",
    "answer": "Object destructuring is a new way to extract elements from an object or an array.\n\nObject destructuring: Before ES6 version:\nconst classDetails = {\n  strength: 78,\n  benches: 39,\n  blackBoard:1\n}\n\nconst classStrength = classDetails.strength;\nconst classBenches = classDetails.benches;\nconst classBlackBoard = classDetails.blackBoard;\nThe same example using object destructuring:\n\nconst classDetails = {\n  strength: 78,\n  benches: 39,\n  blackBoard:1\n}\n\nconst {strength:classStrength, benches:classBenches,blackBoard:classBlackBoard} = classDetails;\n\nconsole.log(classStrength); // Outputs 78\nconsole.log(classBenches); // Outputs 39\nconsole.log(classBlackBoard); // Outputs 1\nAs one can see, using object destructuring we have extracted all the elements inside an object in one line of code. If we want our new variable to have the same name as the property of an object we can remove the colon:\n\nconst {strength:strength} = classDetails;\n// The above line of code can be written as:\nconst {strength} = classDetails;\nArray destructuring: Before ES6 version:\nconst arr = [1, 2, 3, 4];\nconst first = arr[0];\nconst second = arr[1];\nconst third = arr[2];\nconst fourth = arr[3];\nThe same example using object destructuring:\n\nconst arr = [1, 2, 3, 4];\nconst [first,second,third,fourth] = arr;\nconsole.log(first); // Outputs 1\nconsole.log(second); // Outputs 2\nconsole.log(third); // Outputs 3\nconsole.log(fourth); // Outputs 4"
  },
  {
    "id": "403",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between prototypal and classical inheritance",
    "answer": "Programers build objects, which are representations of real-time entities, in traditional OO programming. Classes and objects are the two sorts of abstractions. A class is a generalization of an object, whereas an object is an abstraction of an actual thing. A Vehicle, for example, is a specialization of a Car. As a result, automobiles (class) are descended from vehicles (object).\n\nClassical inheritance differs from prototypal inheritance in that classical inheritance is confined to classes that inherit from those remaining classes, but prototypal inheritance allows any object to be cloned via an object linking method. Despite going into too many specifics, a prototype essentially serves as a template for those other objects, whether they extend the parent object or not."
  },
  {
    "id": "404",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a Temporal Dead Zone?",
    "answer": "Temporal Dead Zone is a behaviour that occurs with variables declared using let and const keywords. It is a behaviour where we try to access a variable before it is initialized. Examples of temporal dead zone:\n\nx = 23; // Gives reference error\n\nlet x;\n\nfunction anotherRandomFunc(){\n  message = \"Hello\"; // Throws a reference error\n\n  let message;\n}\nanotherRandomFunc();\nIn the code above, both in the global scope and functional scope, we are trying to access variables that have not been declared yet. This is called the Temporal Dead Zone."
  },
  {
    "id": "405",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you mean by JavaScript Design Patterns?",
    "answer": "JavaScript design patterns are repeatable approaches for errors that arise sometimes when building JavaScript browser applications. They truly assist us in making our code more stable.\n\nThey are divided mainly into 3 categories \n\nCreational Design Pattern\nStructural Design Pattern\nBehavioral Design Pattern.\nCreational Design Pattern: The object generation mechanism is addressed by the JavaScript Creational Design Pattern. They aim to make items that are appropriate for a certain scenario.\nStructural Design Pattern: The JavaScript Structural Design Pattern explains how the classes and objects we've generated so far can be combined to construct bigger frameworks. This pattern makes it easier to create relationships between items by defining a straightforward way to do so.\nBehavioral Design Pattern: This design pattern highlights typical patterns of communication between objects in JavaScript. As a result, the communication may be carried out with greater freedom."
  },
  {
    "id": "406",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is JavaScript a pass-by-reference or pass-by-value language?",
    "answer": "The variable's data is always a reference for objects, hence it's always pass by value. As a result, if you supply an object and alter its members inside the method, the changes continue outside of it. It appears to be pass by reference in this case. However, if you modify the values of the object variable, the change will not last, demonstrating that it is indeed passed by value."
  },
  {
    "id": "407",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between Async/Await and Generators usage to achieve the same functionality.",
    "answer": "Generator functions are run by their generator yield by yield which means one output at a time, whereas Async-await functions are executed sequentially one after another.\nAsync/await provides a certain use case for Generators easier to execute.\nThe output result of the Generator function is always value: X, done: Boolean, but the return value of the Async function is always an assurance or throws an error."
  },
  {
    "id": "408",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the primitive data types in JavaScript?",
    "answer": "A primitive is a data type that isn't composed of other data types. It's only capable of displaying one value at a time. By definition, every primitive is a built-in data type (the compiler must be knowledgeable of them) nevertheless, not all built-in datasets are primitives. In JavaScript, there are 5 different forms of basic data. The following values are available:\n\nBoolean\nUndefined\nNull\nNumber\nString"
  },
  {
    "id": "409",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of deferred scripts in JavaScript?",
    "answer": "The processing of HTML code while the page loads are disabled by nature till the script hasn't halted. Your page will be affected if your network is a bit slow, or if the script is very hefty. When you use Deferred, the script waits for the HTML parser to finish before executing it. This reduces the time it takes for web pages to load, allowing them to appear more quickly."
  },
  {
    "id": "410",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What has to be done in order to put Lexical Scoping into practice?",
    "answer": "To support lexical scoping, a JavaScript function object's internal state must include not just the function's code but also a reference to the current scope chain."
  },
  {
    "id": "411",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of the following JavaScript code?",
    "answer": "var scope = \"global scope\";\nfunction check() \n{\n    var scope = \"local scope\"; \n    function f() \n    { \n         return scope; \n    }\n    return f;\n}\nEvery executing function, code block, and script as a whole in JavaScript has a related object known as the Lexical Environment. The preceding code line returns the value in scope.\n\nJavaScript Coding Interview Questions"
  },
  {
    "id": "412",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of the following code?",
    "answer": "const b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nfor (let i = 0; i < 10; i++) {\n  setTimeout(() => console.log(b[i]), 1000);\n}\n\nfor (var i = 0; i < 10; i++) {\n  setTimeout(() => console.log(b[i]), 1000);\n}\nAns. \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nundefined\nundefined\nundefined\nundefined\nundefined\nundefined\nundefined\nundefined\nundefined\nundefined\nConclusion\nIt is preferable to keep the JavaScript, CSS, and HTML in distinct Separate 'javascript' files. Dividing the code and HTML sections will make them easier to understand and deal with. This strategy is also simpler for several programmers to use at the same time. JavaScript code is simple to update. Numerous pages can utilize the same group of JavaScript Codes. If we utilize External JavaScript scripts and need to alter the code, we must do it just once. So that we may utilize a number and maintain it much more easily. Remember that professional experience and expertise are only one aspect of recruitment. Previous experience and personal skills are both vital in landing (or finding the ideal applicant for the job.\n\nRemember that many JavaScript structured interviews are free and have no one proper answer. Interviewers would like to know why you answered the way you did, not if you remembered the answer. Explain your answer process and be prepared to address it. If you're looking to further enhance your JavaScript skills, consider enrolling in this free JavaScript course by Scaler Topics to gain hands-on experience and improve your problem-solving abilities.\n\nRecommended Resources\nJavaScript Cheat Sheet: Basics to Advanced(2023)\nOnline Javascript Compiler\nTop JavaScript Features You Must Know\n50 JavaScript MCQ With Answers\nTop 15+ JavaScript Projects for Beginners to Advanced [With Source Code]\n9 Best JavaScript IDE & Source Code Editors [2023]\nTop ES6 Interview Questions (2023)\n10 Best JavaScript Books for Beginners to Advanced [2023]\n30+ Top Node.js Interview Questions (2023)\nTypescript vs Javascript: What’s The Difference?\nTop 5 JavaScript Libraries You Must Know in 2023\nDifference Between HTML and JavaScript\nJavascript Vs jQuery: What’s the Difference? [2023]\nJavascript Vs Python: What’s The Difference? [2023]\nDifference Between Java and Javascript\nDifference between Typescript and Javascript\nInterview Guides\nThe Ultimate Guide to Acing Your Technical Interview\n300+ Must Do Coding Questions from Interviews\nMock Interview\nInterviewBit - No.1 Resource for Tech Interview Preparation"
  },
  {
    "id": "413",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In JavaScript, how do you turn an Object into an Array []?",
    "answer": "let obj = { id: \"1\", name: \"user22\", age: \"26\", work: \"programmer\" };\n\n//Method 1: Convert the keys to Array using - Object.keys()\nconsole.log(Object.keys(obj));\n// [\"id\", \"name\", \"age\", \"work\"]\n\n// Method 2 Converts the Values to Array using - Object.values()\nconsole.log(Object.values(obj));\n// [\"1\", \"user22r\", \"26\", \"programmer\"]\n\n// Method 3 Converts both keys and values using - Object.entries()\nconsole.log(Object.entries(obj));\n//[[\"id\", \"1\"],[\"name\", \"user22\"],[\"age\", \"26\"],[\"work\", “programmer\"]]"
  },
  {
    "id": "414",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Write the code to find the vowels",
    "answer": "const findVowels = str => {\n  let count = 0\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  for(let char of str.toLowerCase()) {\n    if(vowels.includes(char)) {\n      count++\n    }\n  }\n  return count\n}"
  },
  {
    "id": "415",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Write the code given If two strings are anagrams of one another, then return true.",
    "answer": "var firstWord = \"Deepak\";\nvar secondWord = \"Aman\";\n\nisAnagram(wordOne, wordTwo); // true\n\nfunction isAnagram(one, two) {\n  //Change both words to lowercase for case insensitivity..\n  var a = one.toLowerCase();\n  var b = two.toLowerCase();\n\n  // Sort the strings, then combine the array to a string. Examine the outcomes.\n  a = a.split(\"\").sort().join(\"\");\n  b = b.split(\"\").sort().join(\"\");\n\n  return a === b;\n}"
  },
  {
    "id": "416",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Write the code for dynamically inserting new components.",
    "answer": "<html> \n<head> \n<title>inserting new components dynamically</title> \n<script type=\"text/javascript\"> \n    function addNode () { var newP = document. createElement(\"p\"); \n    var textNode = document.createTextNode(\" This is other node\"); \n    newP.appendChild(textNode); document.getElementById(\"parent1\").appendChild(newP); } \n</script> \n</head> \n<body> <p id=\"parent1\">firstP<p> </body> \n</html>"
  },
  {
    "id": "417",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Implement a function that returns an updated array with r right rotations on an array of integers a .",
    "answer": "Example:\n\nGiven the following array: [2,3,4,5,7]\nPerform 3 right rotations:\nFirst rotation : [7,2,3,4,5] , Second rotation : [5,7,2,3,4] and, Third rotation: [4,5,7,2,3]\n\nreturn [4,5,7,2,3]\n\nAnswer:\n\nfunction rotateRight(arr,rotations){\n  if(rotations == 0) return arr;\n  for(let i = 0; i < rotations;i++){\n    let element = arr.pop();\n    arr.unshift(element);\n  }\n  return arr;\n}\nrotateRight([2, 3, 4, 5, 7], 3); // Return [4,5,7,2,3]\nrotateRight([44, 1, 22, 111], 5); // Returns [111,44,1,22]"
  },
  {
    "id": "418",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Write a function that performs binary search on a sorted array.",
    "answer": "function binarySearch(arr,value,startPos,endPos){\n  if(startPos > endPos) return -1;\n\n  let middleIndex = Math.floor(startPos+endPos)/2;\n\n  if(arr[middleIndex] === value) return middleIndex;\n\n  elsif(arr[middleIndex] > value){\n    return binarySearch(arr,value,startPos,middleIndex-1);\n  }\n  else{\n    return binarySearch(arr,value,middleIndex+1,endPos);\n  }\n}"
  },
  {
    "id": "419",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Guess the outputs of the following code:",
    "answer": "**Note - Code 2 and Code 3 require you to modify the code, instead of guessing the output.\n// Code 1\n\n(function(a){\n  return (function(){\n    console.log(a);\n    a = 23;\n  })()\n})(45);\n\n// Code 2\n\n// Each time bigFunc is called, an array of size 700 is being created,\n// Modify the code so that we don't create the same array again and again\n\nfunction bigFunc(element){\n  let newArray = new Array(700).fill('♥');\n  return newArray[element];\n}\n\nconsole.log(bigFunc(599)); // Array is created\nconsole.log(bigFunc(670)); // Array is created again\n\n// Code 3\n\n// The following code outputs 2 and 2 after waiting for one second\n// Modify the code to output 0 and 1 after one second.\n\nfunction randomFunc(){\n  for(var i = 0; i < 2; i++){\n    setTimeout(()=> console.log(i),1000);\n  }\n}\nrandomFunc();\nAnswers -\n\nCode 1 - Outputs 45.\n\nEven though a is defined in the outer function, due to closure the inner functions have access to it.\n\nCode 2 - This code can be modified by using closures,\n\nfunction bigFunc(){\n  let newArray = new Array(700).fill('♥');\n  return (element) => newArray[element];\n}\n\nlet getElement = bigFunc(); // Array is created only once\ngetElement(599);\ngetElement(670);  \nCode 3 - Can be modified in two ways:\n\nUsing let keyword:\n\nfunction randomFunc(){\n  for(let i = 0; i < 2; i++){\n    setTimeout(()=> console.log(i),1000);\n  }\n}\nrandomFunc(); \nUsing closure:\n\nfunction randomFunc(){\n  for(var i = 0; i < 2; i++){\n  (function(i){\n      setTimeout(()=>console.log(i),1000);\n    })(i);\n  }\n}\nrandomFunc();"
  },
  {
    "id": "420",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Guess the outputs of the following code:",
    "answer": "// Code 1\n\n  let hero = {\n    powerLevel: 99,\n    getPower(){\n      return this.powerLevel;\n    }\n  }\n  \n  let getPower = hero.getPower;\n  \n  let hero2 = {powerLevel:42};\n  console.log(getPower());\n  console.log(getPower.apply(hero2));\n  \n\n\n  // Code 2\n  \n  const a = function(){\n    console.log(this);\n  \n    const b = {\n      func1: function(){\n        console.log(this);\n      }  \n    }\n  \n    const c = {\n      func2: ()=>{\n        console.log(this);\n      }\n    }\n  \n    b.func1();\n    c.func2();\n  }\n  \n  a();\n  \n\n\n  // Code 3\n  \n  const b = {\n    name:\"Vivek\",\n    f: function(){\n      var self = this;\n      console.log(this.name);\n      (function(){\n        console.log(this.name);\n        console.log(self.name);\n      })();\n    }\n  }\n  b.f();\nAnswers:\n\nCode 1 - Output in the following order:\n\nundefined\n42\nReason - The first output is undefined since when the function is invoked, it is invoked referencing the global object:\n\nwindow.getPower() = getPower();\n\nCode 2 - Outputs in the following order:\n\nglobal/window object\nobject \"b\"\nglobal/window object\n\nSince we are using the arrow function inside func2, this keyword refers to the global object.\n\nCode 3 - Outputs in the following order:\n\n\"Vivek\"\nundefined\n\"Vivek\" \nOnly in the IIFE inside the function f, this keyword refers to the global/window object."
  },
  {
    "id": "421",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Guess the output of the following code:",
    "answer": "var x = 23;\n\n(function(){\n  var x = 43;\n  (function random(){\n    x++;\n    console.log(x);\n    var x = 21;\n  })();\n})(); \nAnswer:\nOutput is NaN.\n\nrandom() function has functional scope since x is declared and hoisted in the functional scope.\n\nRewriting the random function will give a better idea about the output:\n\nfunction random(){\n  var x; // x is hoisted\n  x++; // x is not a number since it is not initialized yet\n  console.log(x); // Outputs NaN\n  x = 21; // Initialization of x\n}"
  },
  {
    "id": "422",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Guess the outputs of the following code:",
    "answer": "// Code 1:\n\nlet x= {}, y = {name:\"Ronny\"},z = {name:\"John\"};\nx[y] = {name:\"Vivek\"};\nx[z] = {name:\"Akki\"};\nconsole.log(x[y]);\n\n// Code 2:\n\nfunction runFunc(){\n  console.log(\"1\" + 1);\n  console.log(\"A\" - 1);\n  console.log(2 + \"-2\" + \"2\");\n  console.log(\"Hello\" - \"World\" + 78);\n  console.log(\"Hello\"+ \"78\");\n}\nrunFunc();\n\n// Code 3:\n\nlet a = 0;\nlet b = false;\nconsole.log((a == b));\nconsole.log((a === b));\nAnswers:\n\nCode 1 - Output will be {name: “Akki”}.\n\nAdding objects as properties of another object should be done carefully.\n\nWriting x[y] = {name:”Vivek”} , is same as writing x[‘object Object’] = {name:”Vivek”} ,\n\nWhile setting a property of an object, javascript coerces the parameter into a string.\n\nTherefore, since y is an object, it will be converted to ‘object Object’.\n\nBoth x[y] and x[z] are referencing the same property.\n\nCode 2 - Outputs in the following order:\n\n11\nNan\n2-22\nNaN\nHello78\nCode 3 - Output in the following order due to equality coercion:\n\ntrue\nfalse"
  },
  {
    "id": "423",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Guess the outputs of the following codes:",
    "answer": "// Code 1:\n\nfunction func1(){\n  setTimeout(()=>{\n    console.log(x);\n    console.log(y);\n  },3000);\n\n  var x = 2;\n  let y = 12;\n}\nfunc1();\n\n// Code 2:\n\nfunction func2(){\n  for(var i = 0; i < 3; i++){\n    setTimeout(()=> console.log(i),2000);\n}\n}\nfunc2();\n\n// Code 3:\n\n(function(){\n  setTimeout(()=> console.log(1),2000);\n  console.log(2);\n  setTimeout(()=> console.log(3),0);\n  console.log(4);\n})();\nAnswers:\n\nCode 1 - Outputs 2 and 12. Since, even though let variables are not hoisted, due to the async nature of javascript, the complete function code runs before the setTimeout function. Therefore, it has access to both x and y.\nCode 2 - Outputs 3, three times since variable declared with var keyword does not have block scope. Also, inside the for loop, the variable i is incremented first and then checked.\nCode 3 - Output in the following order:\n2\n4\n3\n1 // After two seconds\nEven though the second timeout function has a waiting time of zero seconds, the javascript engine always evaluates the setTimeout function using the Web API, and therefore, the complete function executes before the setTimeout function can execute.\n\n\n\n\n\n\n\n\n\n\n\nWhat are the possible ways to create objects in JavaScript\nThere are many ways to create objects in javascript as mentioned below:\n\nObject literal syntax:\n\nThe object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.\n\nvar object = {\n  name: \"Sudheer\",\n  age: 34,\n};\nObject literal property values can be of any data type, including array, function, and nested object.\n\nNote: This is one of the easiest ways to create an object and it's most commonly used for creating simple, ad-hoc objects.\n\nObject constructor:\n\nThe simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.\n\nvar object = new Object();\nThe Object() is a built-in constructor function so \"new\" keyword is not required for creating plain objects. The above code snippet can be re-written as:\n\nvar object = Object();\nHowever, Object() can be used to either create a plain object or convert a given value into its corresponding object wrapper, whereas new Object() is specifically used to explicitly create a new object instance.\n\nObject's create method:\n\nThe create method of Object is used to create a new object by passing the specified prototype object and properties as arguments, i.e., this pattern is helpful to create new objects based on existing objects. In other words, this is useful for setting up prototypal inheritance. The second argument is optional and it is used to create properties on a newly created object.\n\nThe following code creates a new empty object whose prototype is null.\n\nvar object = Object.create(null);\nThe following example creates an object along with additional new properties.\n\nlet vehicle = {\n  wheels: \"4\",\n  fuelType: \"Gasoline\",\n  color: \"Green\",\n};\nlet carProps = {\n  type: {\n    value: \"Volkswagen\",\n  },\n  model: {\n    value: \"Golf\",\n  },\n};\n\nvar car = Object.create(vehicle, carProps);\nconsole.log(car);\nFunction constructor:\n\nIn this approach, create any function and apply the new operator to create object instances. This was the main way to do constructor-based OOP before ES6 classes.\n\nfunction Person(name) {\n  this.name = name;\n  this.age = 21;\n}\nvar object = new Person(\"Sudheer\");\nFunction constructor with prototype:\n\nThis is similar to function constructor but it uses prototype for their properties and methods. Using prototype means you're sharing methods/properties across instances, which saves memory and improve performance.\n\nfunction Person() {}\nPerson.prototype.name = \"Sudheer\";\nvar object = new Person();\nThis is equivalent to creating an instance with Object.create method with a function prototype and then calling that function with an instance and parameters as arguments.\n\nfunction func(x, y, z) {\n this.x = x;\n this.y = y;\n this.z = z;\n}\n\nvar instance = new func(1, 2, 3);\n(OR)\n\nfunction func(x, y, z) {\n   this.x = x;\n   this.y = y;\n   this.z = z;\n}\n// Create a new instance using function prototype.\nvar newInstance = Object.create(func.prototype)\n\n// Call the function\nvar result = func.call(newInstance, 1, 2, 3),\n\n// If the result is a non-null object then use it otherwise just use the new instance.\nconsole.log(result && typeof result === 'object' ? result : newInstance);\nObject's assign method:\n\nThe Object.assign method is used to copy all the properties from one or more source objects and stores them into a target object. This is mainly used for cloning and merging\n\nThe following code creates a new staff object by copying properties of his working company and the car he owns.\n\nconst orgObject = { company: \"XYZ Corp\" };\nconst carObject = { name: \"Toyota\" };\nconst staff = Object.assign({}, orgObject, carObject);\nES6 Class syntax:\n\nES6 introduces class feature to create objects. This is syntactic sugar over the prototype-based system.\n\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nvar object = new Person(\"Sudheer\");\nSingleton pattern:\n\nA Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance. This way one can ensure that they don't accidentally create multiple instances.\n\nSingleton with Closure (Classic JS Pattern)\nconst Singleton = (function () {\nlet instance;\n\nfunction createInstance() {\n  return { name: \"Sudheer\" };\n}\n\nreturn {\n  getInstance: function () {\n    if (!instance) {\n      instance = createInstance();\n    }\n    return instance;\n  }\n};\n})();\n\n// Usage\nconst obj1 = Singleton.getInstance();\nconst obj2 = Singleton.getInstance();\n\nconsole.log(obj1 === obj2); // true\nIn modern JavaScript applications, singletons are commonly implemented using ES6 modules for their built-in caching behavior, or closures for encapsulated state management.\n\n⬆ Back to Top\n\nWhat is a prototype chain\nThe prototype chain is a core concept in JavaScript’s inheritance model. It allows objects to inherit properties and methods from other objects. When you try to access a property or method on an object, JavaScript first looks for it on that object itself. If it’s not found, the engine looks up the object's internal [[Prototype]] reference (accessible via Object.getPrototypeOf(obj) or the deprecated __proto__ property) and continues searching up the chain until it finds the property or reaches the end (usually null).\n\nFor objects created via constructor functions, the prototype chain starts with the instance, then refers to the constructor’s .prototype object, and continues from there. For example:\n\nfunction Person() {}\nconst person1 = new Person();\n\nconsole.log(Object.getPrototypeOf(person1) === Person.prototype); // true\nThis mechanism allows for property and method sharing among objects, enabling code reuse and a form of inheritance.\n\nSummary:\n\nThe prototype chain enables inheritance in JavaScript.\nIf a property isn’t found on an object, JavaScript looks up its prototype chain.\nThe prototype of an object instance can be accessed with Object.getPrototypeOf(obj) or __proto__.\nThe prototype of a constructor function is available via Constructor.prototype.\nThe chain ends when the prototype is null.\nThe prototype chain among objects appears as below,\n\nScreenshot\n\n⬆ Back to Top\n\nWhat is the Difference Between call, apply, and bind\nIn JavaScript, call, apply, and bind are methods that allow you to control the context (this value) in which a function is executed. While their purposes are similar, they differ in how they handle arguments and when the function is invoked.\n\ncall\nDescription:\nThe call() method invokes a function immediately, allowing you to specify the value of this and pass arguments individually (comma-separated).\n\nSyntax:\n\nfunc.call(thisArg, arg1, arg2, ...)\nExample:\n\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\napply\nDescription:\nThe apply() method is similar to call(), but it takes the function arguments as an array (or array-like object) instead of individual arguments.\n\nSyntax:\n\nfunc.apply(thisArg, [argsArray])\nExample:\n\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?\nbind\nDescription:\nThe bind() method creates a new function with a specific this value and, optionally, preset initial arguments. Unlike call and apply, bind does not immediately invoke the function; instead, it returns a new function that you can call later.\n\nSyntax:\n\nvar boundFunc = func.bind(thisArg[, arg1[, arg2[, ...]]])\nExample:\n\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\n\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\nSummary\nMethod\tInvokes Function Immediately?\tHow Arguments Are Passed\tReturns\ncall\tYes\tComma-separated list\tFunction's result\napply\tYes\tArray or array-like object\tFunction's result\nbind\tNo\t(Optional) preset, then rest\tNew function\nKey Points\ncall and apply are almost interchangeable; both invoke the function immediately, but differ in how arguments are passed.\n\nTip: \"Call is for Comma-separated, Apply is for Array.\"\nbind does not execute the function immediately. Instead, it creates a new function with the specified this value and optional arguments, which can be called later.\n\nUse call or apply when you want to immediately invoke a function with a specific this context. Use bind when you want to create a new function with a specific this context to be invoked later.\n\n⬆ Back to Top\n\nWhat is JSON and its common operations\nJSON (JavaScript Object Notation) is a lightweight, text-based data format that uses JavaScript object syntax for structuring data. It was popularized by Douglas Crockford and is widely used for transmitting data between a server and a client in web applications. JSON files typically have a .json extension and use the MIME type application/json.\n\nCommon Operations with JSON\nParsing: Transforming a JSON-formatted string into a native JavaScript object.\nconst obj = JSON.parse(jsonString);\nExample:\nconst jsonString = '{\"name\":\"John\",\"age\":30}';\nconst obj = JSON.parse(jsonString);  // { name: \"John\", age: 30 }\nStringification: Converting a JavaScript object into a JSON-formatted string, commonly used for data transmission or storage.\nconst jsonString = JSON.stringify(object);\nExample:\nconst obj = { name: \"Jane\", age: 25 };\nconst jsonString = JSON.stringify(obj);  // '{\"name\":\"Jane\",\"age\":25}'\n⬆ Back to Top\n\nWhat is the purpose of the array slice method\nThe slice() method in JavaScript is used to extract a section of an array, returning a new array containing the selected elements. It does not modify the original array. The method takes two arguments:\n\nstart: The index at which extraction begins (inclusive).\nend (optional): The index before which to end extraction (exclusive). If omitted, extraction continues to the end of the array.\nYou can also use negative indices, which count from the end of the array.\n\nExamples:\nlet arrayIntegers = [1, 2, 3, 4, 5];\n\nlet arrayIntegers1 = arrayIntegers.slice(0, 2);    // [1, 2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3);    // [3]\nlet arrayIntegers3 = arrayIntegers.slice(4);       // [5]\nlet arrayIntegers4 = arrayIntegers.slice(-3, -1);  // [3, 4]\nNote:\nThe slice() method does not mutate (change) the original array; instead, it returns a new array containing the extracted elements.\n\n⬆ Back to Top\n\nWhat is the purpose of the array splice method\nThe splice() method in JavaScript is used to add, remove, or replace elements within an array. Unlike slice(), which creates a shallow copy and does not alter the original array, splice() modifies the original array in place and returns an array containing the removed elements.\n\nSyntax\narray.splice(start, deleteCount, item1, item2, ...)\nstart: The index at which to start changing the array.\ndeleteCount: (Optional) The number of elements to remove from the array. If omitted, all elements from the start index to the end of the array will be removed.\nitem1, item2, ...: (Optional) Elements to add to the array, starting at the start position.\nExamples\nlet arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\n\n// Remove the first two elements\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); \n// arrayIntegers1: [1, 2]\n// arrayIntegersOriginal1 (after): [3, 4, 5]\n\n// Remove all elements from index 3 onwards\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3);     \n// arrayIntegers2: [4, 5]\n// arrayIntegersOriginal2 (after): [1, 2, 3]\n\n// Remove 1 element at index 3, then insert \"a\", \"b\", \"c\" at that position\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \"a\", \"b\", \"c\"); \n// arrayIntegers3: [4]\n// arrayIntegersOriginal3 (after): [1, 2, 3, \"a\", \"b\", \"c\", 5]\nNote:\n\nThe splice() method modifies the original array.\nIt returns an array containing the elements that were removed (if any).\nYou can use it both to remove and insert elements in a single operation.\n⬆ Back to Top\n\nWhat is the difference between slice and splice\nHere are the key differences between slice() and splice() methods in JavaScript arrays:\n\nslice()\tsplice()\nDoes not modify the original array (immutable)\tModifies the original array (mutable)\nReturns a shallow copy (subset) of selected elements\tReturns an array of the removed elements\nUsed to extract elements from an array\tUsed to add, remove, or replace elements in an array\nSyntax: array.slice(start, end)\tSyntax: array.splice(start, deleteCount, ...items)\nSummary:\n\nUse slice() when you want to copy or extract elements without altering the original array.\nUse splice() when you need to add, remove, or replace elements and want to change the original array.\n⬆ Back to Top\n\nHow do you compare Object and Map\nObjects and Maps both allow you to associate keys with values, retrieve those values, delete keys, and check if a key exists. Historically, Objects have been used as Maps, but there are several key differences that make Map a better choice in certain scenarios:\n\nFeature\tObject\tMap\nKey Types\tOnly strings and symbols are valid keys\tAny value can be used as a key (objects, functions, primitives)\nKey Order\tKeys are unordered (in practice, insertion order is mostly preserved for string keys, but not guaranteed)\tKeys are ordered by insertion; iteration follows insertion order\nSize Property\tNo built-in way to get the number of keys; must use Object.keys(obj).length\tUse the .size property for the number of entries\nIterability\tNot directly iterable; must use Object.keys, Object.values, or Object.entries\tDirectly iterable with for...of, .keys(), .values(), .entries()\nPrototype\tHas a prototype chain; may have default properties that can collide with custom keys (can be avoided with Object.create(null))\tDoes not have a prototype, so there are no default keys\nPerformance\tMay be less efficient for frequent additions/removals\tOptimized for frequent additions and deletions\nSerialization\tCan be easily serialized to JSON\tCannot be directly serialized to JSON\n⬆ Back to Top\n\nWhat is the difference between == and === operators\nJavaScript provides two types of equality operators:\n\nLoose equality (==, !=): Performs type conversion if the types differ, comparing values after converting them to a common type.\nStrict equality (===, !==): Compares both value and type, without any type conversion.\nStrict Equality (===)\nTwo strings are strictly equal if they have exactly the same sequence of characters and length.\nTwo numbers are strictly equal if they have the same numeric value.\nSpecial cases:\nNaN === NaN is false\n+0 === -0 is true\nTwo booleans are strictly equal if both are true or both are false.\nTwo objects are strictly equal if they refer to the same object in memory.\nnull and undefined are not strictly equal.\nLoose Equality (==)\nConverts operands to the same type before making the comparison.\nnull == undefined is true.\n\"1\" == 1 is true because the string is converted to a number.\n0 == false is true because false is converted to 0.\nExamples:\n0 == false            // true      (loose equality, type coercion)\n0 === false           // false     (strict equality, different types)\n1 == \"1\"              // true      (string converted to number)\n1 === \"1\"             // false     (different types)\nnull == undefined     // true      (special case)\nnull === undefined    // false     (different types)\n'0' == false          // true      ('0' is converted to 0)\n'0' === false         // false     (different types)\nNaN == NaN            // false     (NaN is never equal to itself)\nNaN === NaN           // false\n[] == []              // false     (different array objects)\n[] === []             // false\n{} == {}              // false     (different object references)\n{} === {}             // false\n⬆ Back to Top\n\nWhat are lambda expressions or arrow functions\nArrow functions (also known as \"lambda expressions\") provide a concise syntax for writing function expressions in JavaScript. Introduced in ES6, arrow functions are often shorter and more readable, especially for simple operations or callbacks.\n\nKey Features:\nArrow functions do not have their own this, arguments, super, or new.target bindings. They inherit these from their surrounding (lexical) context.\nThey are best suited for non-method functions, such as callbacks or simple computations.\nArrow functions cannot be used as constructors and do not have a prototype property.\nThey also cannot be used with new, yield, or as generator functions.\nSyntax Examples:\nconst arrowFunc1 = (a, b) => a + b;    // Multiple parameters, returns a + b\nconst arrowFunc2 = a => a * 10;        // Single parameter (parentheses optional), returns a * 10\nconst arrowFunc3 = () => {};           // No parameters, returns undefined\nconst arrowFunc4 = (a, b) => {\n  // Multiple statements require curly braces and explicit return\n  const sum = a + b;\n  return sum * 2;\n};\n⬆ Back to Top\n\nWhat is a first class function\nIn JavaScript, first-class functions(first-class citizens) mean that functions are treated like any other variable. That means:\n\nYou can assign a function to a variable.\nYou can pass a function as an argument to another function.\nYou can return a function from another function.\nThis capability enables powerful patterns like callbacks, higher-order functions, event handling, and functional programming in JavaScript.\n\nFor example, the handler function below is assigned to a variable and then passed as an argument to the addEventListener method.\n\nconst handler = () => console.log(\"This is a click handler function\");\ndocument.addEventListener(\"click\", handler);\n⬆ Back to Top\n\nWhat is a first order function\nA first-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value. i.e, It's a regular function that works with primitive or non-function values.\n\nconst firstOrder = () => console.log(\"I am a first order function!\");\n⬆ Back to Top\n\nWhat is a higher order function\nA higher-order function is a function that either accepts another function as an argument, returns a function as its result, or both. This concept is a core part of JavaScript's functional programming capabilities and is widely used for creating modular, reusable, and expressive code.\n\nThe syntactic structure of higher order function will be explained with an example as follows,\n\n// First-order function (does not accept or return another function)\nconst firstOrderFunc = () => \n  console.log(\"Hello, I am a first-order function\");\n\n// Higher-order function (accepts a function as an argument)\nconst higherOrder = (callback) => callback();\n\n// Passing the first-order function to the higher-order function\nhigherOrder(firstOrderFunc);\nIn this example:\n\nfirstOrderFunc is a regular (first-order) function.\n\nhigherOrder is a higher-order function because it takes another function as an argument.\n\nfirstOrderFunc is also called a callback function because it is passed to and executed by another function.\n\n⬆ Back to Top\n\nWhat is a unary function\nA unary function (also known as a monadic function) is a function that accepts exactly one argument. The term \"unary\" simply refers to the function's arity—the number of arguments it takes.\n\nLet us take an example of unary function,\n\nconst unaryFunction = (a) => console.log(a + 10); // This will add 10 to the input and log the result\nunaryFunction(5); // Output: 15\nIn this example:\n\nunaryFunction takes a single parameter a, making it a unary function.\nIt performs a simple operation: adding 10 to the input and printing the result.\n⬆ Back to Top\n\nWhat is the currying function\nCurrying is the process of transforming a function with multiple arguments into a sequence of nested functions, each accepting only one argument at a time.\n\nThis concept is named after mathematician Haskell Curry, and is commonly used in functional programming to enhance modularity and reuse.\n\nBefore Currying (Normal n-ary Function)\nconst multiArgFunction = (a, b, c) => a + b + c;\n\nconsole.log(multiArgFunction(1, 2, 3)); // Output: 6\nThis is a standard function that takes three arguments at once.\n\nAfter Currying (Unary Function Chain)\nconst curryUnaryFunction = (a) => (b) => (c) => a + b + c;\n\nconsole.log(curryUnaryFunction(1));       // Returns: function (b) => ...\nconsole.log(curryUnaryFunction(1)(2));    // Returns: function (c) => ...\nconsole.log(curryUnaryFunction(1)(2)(3)); // Output: 6\nEach function in the chain accepts one argument and returns the next function, until all arguments are provided and the final result is computed.\n\nBenefits of Currying\nImproves code reusability → You can partially apply functions with known arguments.\n\nEnhances functional composition → Easier to compose small, pure functions.\n\nEncourages clean, modular code → You can split logic into smaller single-responsibility functions.\n\n⬆ Back to Top\n\nWhat is a pure function\nA pure function is a function whose output depends only on its input arguments and produces no side effects. This means that given the same inputs, a pure function will always return the same output, and it does not modify any external state or data.\n\nLet's take an example to see the difference between pure and impure functions,\n\nExample: Pure vs. Impure Functions\n// Impure Function\nlet numberArray = [];\nconst impureAddNumber = (number) => numberArray.push(number);\n\n// Pure Function\nconst pureAddNumber = (number) => (inputArray) =>\n  inputArray.concat([number]);\n\n// Usage\nconsole.log(impureAddNumber(6)); // returns 1\nconsole.log(numberArray);        // returns [6]\n\nconsole.log(pureAddNumber(7)(numberArray)); // returns [6, 7]\nconsole.log(numberArray);                   // remains [6]\nimpureAddNumber changes the external variable numberArray and returns the new length of the array, making it impure.\npureAddNumber creates a new array with the added number and does not modify the original array, making it pure.\nWhat are the benefits of pure functions\nSome of the major benefits of pure functions are listed below,\n\nEasier testing: Since output depends only on input, pure functions are simple to test.\nPredictability: No hidden side effects make behavior easier to reason about.\nImmutability: Pure functions align with ES6 best practices, such as preferring const over let, supporting safer and more maintainable code.\nNo side effects: Reduces bugs related to shared state or mutation.\n⬆ Back to Top\n\nWhat is the purpose of the let keyword\nThe let keyword in JavaScript is used to declare a block-scoped local variable. This means that variables declared with let are only accessible within the block, statement, or expression where they are defined. This is a significant improvement over the older var keyword, which is function-scoped (or globally-scoped if declared outside a function), and does not respect block-level scoping.\n\nKey Features of let:\nBlock Scope: The variable exists only within the nearest enclosing block (e.g., inside an {} pair).\nNo Hoisting Issues: While let declarations are hoisted, they are not initialized until the code defining them is executed. Accessing them before declaration results in a ReferenceError (temporal dead zone).\nNo Redeclaration: The same variable cannot be declared twice in the same scope with let.\nExample:\nlet counter = 30;\nif (counter === 30) {\n  let counter = 31;\n  console.log(counter); // Output: 31 (block-scoped variable inside if-block)\n}\nconsole.log(counter); // Output: 30 (outer variable, unaffected by inner block)\nIn this example, the counter inside the if block is a separate variable from the one outside. The let keyword ensures that both have their own distinct scope.\n\nIn summary, you need to use let when you want variables to be limited to the block in which they are defined, preventing accidental overwrites and bugs related to variable scope.\n\n⬆ Back to Top\n\nWhat is the difference between let and var\nYou can list out the differences in a tabular format\n\nvar\tlet\nIt has been available from the beginning of JavaScript\tIntroduced as part of ES6\nIt has function scope\tIt has block scope\nVariable declaration will be hoisted, initialized as undefined\tHoisted but not initialized\nIt is possible to re-declare the variable in the same scope\tIt is not possible to re-declare the variable\nLet's take an example to see the difference,\n\nfunction userDetails(username) {\n  if (username) {\n    console.log(salary); // undefined due to hoisting\n    console.log(age); // ReferenceError: Cannot access 'age' before initialization\n    let age = 30;\n    var salary = 10000;\n  }\n  console.log(salary); //10000 (accessible due to function scope)\n  console.log(age); //error: age is not defined(due to block scope)\n}\nuserDetails(\"John\");\n⬆ Back to Top\n\nWhat is the reason to choose the name let as a keyword\nThe keyword let was chosen because it originates from mathematical notation, where \"let\" is used to introduce new variables (for example, \"let x = 5\"). This term was adopted by several early programming languages such as Scheme and BASIC, establishing a tradition in computer science. JavaScript follows this convention by using let to declare variables with block scope, providing a modern alternative to var. The choice helps make the language more familiar to programmers coming from other languages and aligns with the mathematical practice of variable assignment.\n\n⬆ Back to Top\n\nHow do you redeclare variables in a switch block without an error\nWhen you try to redeclare variables using let or const in multiple case clauses of a switch statement, you will get a SyntaxError. This happens because, in JavaScript, all case clauses within a switch statement share the same block scope. For example:\n\nlet counter = 1;\nswitch (x) {\n  case 0:\n    let name;\n    break;\n  case 1:\n    let name; // SyntaxError: Identifier 'name' has already been declared\n    break;\n}\nTo avoid this error, you can create a new block scope within each case clause by wrapping the code in curly braces {}. This way, each let or const declaration is scoped only to that block, and redeclaration errors are avoided:\n\nlet counter = 1;\nswitch (x) {\n  case 0: {\n    let name;\n    // code for case 0\n    break;\n  }\n  case 1: {\n    let name; // No SyntaxError\n    // code for case 1\n    break;\n  }\n}\nThat means, to safely redeclare variables in different cases of a switch statement, wrap each case’s code in its own block using curly braces. This ensures each variable declaration is scoped to its specific case block.\n\n⬆ Back to Top\n\nWhat is the Temporal Dead Zone\nThe Temporal Dead Zone (TDZ) refers to the period between the start of a block and the point where a variable declared with let or const is initialized. During this time, the variable exists in scope but cannot be accessed, and attempting to do so results in a ReferenceError.\n\nThis behavior is part of JavaScript's ES6 (ECMAScript 2015) specification and applies only to variables declared with let and const, not var. Variables declared with var are hoisted and initialized with undefined, so accessing them before the declaration does not throw an error, though it can lead to unexpected results.\n\nExample\nfunction someMethod() {\n    console.log(counter1); // Output: undefined (due to var hoisting)\n    console.log(counter2); // Throws ReferenceError (TDZ for let)\n\n    var counter1 = 1;\n    let counter2 = 2;\n}\n⬆ Back to Top\n\nWhat is an IIFE (Immediately Invoked Function Expression)\nIIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,\n\n(function () {\n  // logic here\n})();\nThe primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables from the IIFE then it throws an error as below,\n\n(function () {\n  var message = \"IIFE\";\n  console.log(message);\n})();\nconsole.log(message); //Error: message is not defined\n⬆ Back to Top\n\nHow do you decode or encode a URL in JavaScript?\nencodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string. decodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.\n\nNote: If you want to encode characters such as / ? : @ & = + $ # then you need to use encodeURIComponent().\n\nlet uri = \"employeeDetails?name=john&occupation=manager\";\nlet encoded_uri = encodeURI(uri);\nlet decoded_uri = decodeURI(encoded_uri);\n⬆ Back to Top\n\nWhat is memoization\nMemoization is a functional programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache. Let's take an example of adding function with memoization,\n\nconst memoizeAddition = () => {\n  let cache = {};\n  return (value) => {\n    if (value in cache) {\n      console.log(\"Fetching from cache\");\n      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\n    } else {\n      console.log(\"Calculating result\");\n      let result = value + 20;\n      cache[value] = result;\n      return result;\n    }\n  };\n};\n// returned function from memoizeAddition\nconst addition = memoizeAddition();\nconsole.log(addition(20)); //output: 40 calculated\nconsole.log(addition(20)); //output: 40 cached\n⬆ Back to Top\n\nWhat is Hoisting\nHoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation. Let's take a simple example of variable hoisting,\n\nconsole.log(message); //output : undefined\nvar message = \"The variable Has been hoisted\";\nThe above code looks like as below to the interpreter,\n\nvar message;\nconsole.log(message);\nmessage = \"The variable Has been hoisted\";\nIn the same fashion, function declarations are hoisted too\n\nmessage(\"Good morning\"); //Good morning\n\nfunction message(name) {\n  console.log(name);\n}\nThis hoisting makes functions to be safely used in code before they are declared.\n\n⬆ Back to Top\n\nWhat are classes in ES6\nIn ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance. For example, the prototype based inheritance written in function expression as below,\n\nfunction Bike(model, color) {\n  this.model = model;\n  this.color = color;\n}\n\nBike.prototype.getDetails = function () {\n  return this.model + \" bike has\" + this.color + \" color\";\n};\nWhereas ES6 classes can be defined as an alternative\n\nclass Bike {\n  constructor(color, model) {\n    this.color = color;\n    this.model = model;\n  }\n\n  getDetails() {\n    return this.model + \" bike has\" + this.color + \" color\";\n  }\n}\n⬆ Back to Top\n\nWhat are closures\nA closure is the combination of a function bundled(enclosed) together with its lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables, functions and other data even after the outer function has finished its execution. The closure has three scope chains.\n\nOwn scope where variables defined between its curly brackets\nOuter function's variables\nGlobal variables\nLet's take an example of closure concept,\n\nfunction Welcome(name) {\n  var greetingInfo = function (message) {\n    console.log(message + \" \" + name);\n  };\n  return greetingInfo;\n}\nvar myFunction = Welcome(\"John\");\nmyFunction(\"Welcome \"); //Output: Welcome John\nmyFunction(\"Hello Mr.\"); //output: Hello Mr. John\nAs per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function scope(i.e, Welcome) even after the outer function has returned.\n\n⬆ Back to Top\n\nWhat are modules\nModules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor\n\n⬆ Back to Top\n\nWhy do you need modules\nBelow are the list of benefits using modules in javascript ecosystem\n\nMaintainability\nReusability\nNamespacing\n⬆ Back to Top\n\nWhat is scope in javascript\nScope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.\n\n⬆ Back to Top\n\nWhat is a service worker\nA Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.\n\n⬆ Back to Top\n\nHow do you manipulate DOM using a service worker\nService worker can't access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM.\n\n⬆ Back to Top\n\nHow do you reuse information across service worker restarts\nThe problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.\n\n⬆ Back to Top\n\nWhat is IndexedDB\nIndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.\n\n⬆ Back to Top\n\nWhat is web storage\nWeb storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.\n\nLocal storage: It stores data for current origin with no expiration date.\nSession storage: It stores data for one session and the data is lost when the browser tab is closed.\n⬆ Back to Top\n\nWhat is a post message\nPost message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).\n\n⬆ Back to Top\n\nWhat is a Cookie\nA cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs. For example, you can create a cookie named username as below,\n\ndocument.cookie = \"username=John\";\nScreenshot\n\n⬆ Back to Top\n\nWhy do you need a Cookie\nCookies are used to remember information about the user profile(such as username). It basically involves two steps,\n\nWhen a user visits a web page, the user profile can be stored in a cookie.\nNext time the user visits the page, the cookie remembers the user profile.\n⬆ Back to Top\n\nWhat are the options in a cookie\nThere are few below options available for a cookie,\n\nBy default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).\ndocument.cookie = \"username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC\";\nBy default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.\ndocument.cookie = \"username=John; path=/services\";\n⬆ Back to Top\n\nHow do you delete a cookie\nYou can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case. For example, you can delete a username cookie in the current page as below.\n\ndocument.cookie =\n  \"username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;\";\nNote: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.\n\n⬆ Back to Top\n\nWhat are the differences between cookie, local storage and session storage\nBelow are some of the differences between cookie, local storage and session storage,\n\nFeature\tCookie\tLocal storage\tSession storage\nAccessed on client or server side\tBoth server-side & client-side. The set-cookie HTTP response header is used by server inorder to send it to user.\tclient-side only\tclient-side only\nExpiry\tManually configured using Expires option\tForever until deleted\tuntil tab is closed\nSSL support\tSupported\tNot supported\tNot supported\nMaximum data size\t4KB\t5 MB\t5MB\nAccessible from\tAny window\tAny window\tSame tab\nSent with requests\tYes\tNo\tNo\n⬆ Back to Top\n\nWhat is the main difference between localStorage and sessionStorage\nLocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.\n\n⬆ Back to Top\n\nHow do you access web storage\nThe Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage(window.localStorage) and sessionStorage(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local). For example, you can read and write on local storage objects as below\n\nlocalStorage.setItem(\"logo\", document.getElementById(\"logo\").value);\nlocalStorage.getItem(\"logo\");\n⬆ Back to Top\n\nWhat are the methods available on session storage\nThe session storage provided methods for reading, writing and clearing the session data\n\n// Save data to sessionStorage\nsessionStorage.setItem(\"key\", \"value\");\n\n// Get saved data from sessionStorage\nlet data = sessionStorage.getItem(\"key\");\n\n// Remove saved data from sessionStorage\nsessionStorage.removeItem(\"key\");\n\n// Remove all saved data from sessionStorage\nsessionStorage.clear();\n⬆ Back to Top\n\nWhat is a storage event and its event handler\nThe StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events. The syntax would be as below\n\nwindow.onstorage = functionRef;\nLet's take the example usage of onstorage event handler which logs the storage key and it's values\n\nwindow.onstorage = function (e) {\n  console.log(\n    \"The \" +\n      e.key +\n      \" key has been changed from \" +\n      e.oldValue +\n      \" to \" +\n      e.newValue +\n      \".\"\n  );\n};\n⬆ Back to Top\n\nWhy do you need web storage\nWeb storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.\n\n⬆ Back to Top\n\nHow do you check web storage browser support\nYou need to check browser support for localStorage and sessionStorage before using web storage,\n\nif (typeof Storage !== \"undefined\") {\n  // Code for localStorage/sessionStorage.\n} else {\n  // Sorry! No Web Storage support..\n}\n⬆ Back to Top\n\nHow do you check web workers browser support\nYou need to check browser support for web workers before using it\n\nif (typeof Worker !== \"undefined\") {\n  // code for Web worker support.\n} else {\n  // Sorry! No Web Worker support..\n}\n⬆ Back to Top\n\nGive an example of a web worker\nYou need to follow below steps to start using web workers for counting example\n\nCreate a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.js\nlet i = 0;\n\nfunction timedCount() {\n  i = i + 1;\n  postMessage(i);\n  setTimeout(\"timedCount()\", 500);\n}\n\ntimedCount();\nHere postMessage() method is used to post a message back to the HTML page\n\nCreate a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this file as web_worker_example.js\nif (typeof w == \"undefined\") {\n  w = new Worker(\"counter.js\");\n}\nand we can receive messages from web worker\n\nw.onmessage = function (event) {\n  document.getElementById(\"message\").innerHTML = event.data;\n};\nTerminate a Web Worker: Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.\nw.terminate();\nReuse the Web Worker: If you set the worker variable to undefined you can reuse the code\nw = undefined;\n⬆ Back to Top\n\nWhat are the restrictions of web workers on DOM\nWebWorkers don't have access to below javascript objects since they are defined in an external files\n\nWindow object\nDocument object\nParent object\n⬆ Back to Top\n\nWhat is a promise\nA Promise is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It acts as a placeholder for a value that may not be available yet but will be resolved in the future.\n\nA Promise can be in one of three states:\n\npending: Initial state, neither fulfilled nor rejected.\nfulfilled: The operation completed successfully.\nrejected: The operation failed (e.g., due to a network error).\nPromise Syntax\nconst promise = new Promise(function (resolve, reject) {\n  // Perform async operation\n});\nExample: Creating and Using a Promise\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"I'm a Promise!\");\n  }, 5000);\n});\n\npromise\n  .then((value) => console.log(value)); // Logs after 5 seconds: \"I'm a Promise!\"\n  .catch((error) => console.error(error))  // Handles any rejection\n  .finally(() => console.log(\"Done\"));     // Runs regardless of success or failure\nIn the above example:\n\nA Promise is created to handle an asynchronous operation with resolve and reject callbacks.\nThe setTimeout resolves the promise with a value after 5 seconds.\n.then(), .catch(), and .finally() are used to handle success, errors, and cleanup respectively.\nThe action flow of a promise will be as below,\n\nScreenshot\n\n⬆ Back to Top\n\nWhy do you need a promise\nPromises are used to handle asynchronous operations, especially in languages like JavaScript, which often work with non-blocking operations such as network requests, file I/O, and timers. When an operation is asynchronous, it doesn't immediately return a result; instead, it works in the background and provides the result later. Handling this in a clean, organized way can be difficult without a structured approach.\n\nPromises are used to:\n\nHandle asynchronous operations.\nProvide a cleaner alternative to callbacks.\nAvoid callback hell.\nMake code more readable and maintainable.\n⬆ Back to Top\n\nExplain the three states of promise\nPromises have three states:\n\nPending: This is an initial state of the Promise before an operation begins\nFulfilled: This state indicates that the specified operation was completed.\nRejected: This state indicates that the operation did not complete. In this case an error value will be thrown.\n⬆ Back to Top\n\nWhat is a callback function\nA callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let's take a simple example of how to use callback function\n\nfunction callbackFunction(name) {\n  console.log(\"Hello \" + name);\n}\n\nfunction outerFunction(callback) {\n  let name = prompt(\"Please enter your name.\");\n  callback(name);\n}\n\nouterFunction(callbackFunction);\n⬆ Back to Top\n\nWhy do we need callbacks\nThe callbacks are needed because javascript is an event driven language. That means instead of waiting for a response, javascript will keep executing while listening for other events. Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.\n\nfunction firstFunction() {\n  // Simulate a code delay\n  setTimeout(function () {\n    console.log(\"First function called\");\n  }, 1000);\n}\nfunction secondFunction() {\n  console.log(\"Second function called\");\n}\nfirstFunction();\nsecondFunction();\n\n// Output:\n// Second function called\n// First function called\nAs observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.\n\n⬆ Back to Top\n\nWhat is a callback hell\nCallback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,\n\nasync1(function(){\n    async2(function(){\n        async3(function(){\n            async4(function(){\n                ....\n            });\n        });\n    });\n});\n⬆ Back to Top\n\nWhat are server-sent events\nServer-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter/X updates, stock price updates, news feeds etc.\n\n⬆ Back to Top\n\nHow do you receive server-sent event notifications\nThe EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,\n\nif (typeof EventSource !== \"undefined\") {\n  var source = new EventSource(\"sse_generator.js\");\n  source.onmessage = function (event) {\n    document.getElementById(\"output\").innerHTML += event.data + \"<br>\";\n  };\n}\n⬆ Back to Top\n\nHow do you check browser support for server-sent events\nYou can perform browser support for server-sent events before using it as below,\n\nif (typeof EventSource !== \"undefined\") {\n  // Server-sent events supported. Let's have some code here!\n} else {\n  // No server-sent events supported\n}\n⬆ Back to Top\n\nWhat are the events available for server sent events\nBelow are the list of events available for server sent events\n\nEvent\tDescription\nonopen\tIt is used when a connection to the server is opened\nonmessage\tThis event is used when a message is received\nonerror\tIt happens when an error occurs\n⬆ Back to Top\n\nWhat are the main rules of promise\nA promise must follow a specific set of rules:\n\nA promise is an object that supplies a standard-compliant .then() method\nA pending promise may transition into either fulfilled or rejected state\nA fulfilled or rejected promise is settled and it must not transition into any other state.\nOnce a promise is settled, the value must not change.\n⬆ Back to Top\n\nWhat is callback in callback\nYou can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks. Beware, too many levels of nesting lead to Callback hell\n\nloadScript(\"/script1.js\", function (script) {\n  console.log(\"first script is loaded\");\n\n  loadScript(\"/script2.js\", function (script) {\n    console.log(\"second script is loaded\");\n\n    loadScript(\"/script3.js\", function (script) {\n      console.log(\"third script is loaded\");\n      // after all scripts are loaded\n    });\n  });\n});\n⬆ Back to Top\n\nWhat is promise chaining\nThe process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result,\n\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });\nIn the above handlers, the result is passed to the chain of .then() handlers with the below work flow,\n\nThe initial promise resolves in 1 second,\nAfter that .then handler is called by logging the result(1) and then return a promise with the value of result * 2.\nAfter that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3.\nFinally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4.\n⬆ Back to Top\n\nWhat is promise.all\nPromise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,\n\nPromise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))\nNote: Remember that the order of the promises(output the result) is maintained as per input order.\n\n⬆ Back to Top\n\nWhat is the purpose of the race method in promise\nPromise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved first\n\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but promise2 is faster\n});\n⬆ Back to Top\n\nWhat is a strict mode in javascript\nJavaScript’s \"use strict\" directive is used to opt into a stricter parsing and error-handling mode for your scripts or functions. It helps catch common bugs, makes your code more secure, and prepares it for future versions of JavaScript.\n\nStrict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression \"use strict\"; instructs the browser to use the javascript code in the Strict mode. This also enables block-scoped variables.\n\n⬆ Back to Top\n\nWhy do you need strict mode\nStrict mode is useful to write \"secure\" JavaScript by notifying \"bad syntax\" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.\n\n⬆ Back to Top\n\nHow do you declare strict mode\nThe strict mode is declared by adding \"use strict\"; to the beginning of a script or a function. If declared at the beginning of a script, it has global scope.\n\n\"use strict\";\nx = 3.14; // This will cause an error because x is not declared\nand if you declare inside a function, it has local scope\n\nx = 3.14; // This will not cause an error.\nmyFunction();\n\nfunction myFunction() {\n  \"use strict\";\n  y = 3.14; // This will cause an error\n}\n⬆ Back to Top\n\nWhat is the purpose of double exclamation\nThe double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true. For example, you can test IE version using this expression as below,\n\nlet isIE8 = false;\nisIE8 = !!navigator.userAgent.match(/MSIE 8.0/);\nconsole.log(isIE8); // returns true or false\nIf you don't use this expression then it returns the original value.\n\nconsole.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or null\nNote: The expression !! is not an operator, but it is just twice of ! operator.\n\n⬆ Back to Top\n\nWhat is the purpose of the delete operator\nThe delete operator is used to delete the property as well as its value.\n\nvar user = { firstName: \"John\", lastName: \"Doe\", age: 20 };\ndelete user.age;\n\nconsole.log(user); // {firstName: \"John\", lastName:\"Doe\"}\n⬆ Back to Top\n\nWhat is typeof operator\nYou can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.\n\ntypeof \"John Abraham\"; // Returns \"string\"\ntypeof (1 + 2); // Returns \"number\"\ntypeof [1, 2, 3]; // Returns \"object\" because all arrays are also objects\n⬆ Back to Top\n\nWhat is undefined property\nThe undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.\n\nvar user; // Value is undefined, type is undefined\nconsole.log(typeof user); //undefined\nAny variable can be emptied by setting the value to undefined.\n\nuser = undefined;\n⬆ Back to Top\n\nWhat is null value\nThe value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object. You can empty the variable by setting the value to null.\n\nvar user = null;\nconsole.log(typeof user); //object\n⬆ Back to Top\n\nWhat is the difference between null and undefined\nBelow are the main differences between null and undefined,\n\nNull\tUndefined\nIt is an assignment value which indicates that variable points to no object.\tIt is not an assignment value where a variable has been declared but has not yet been assigned a value.\nType of null is object\tType of undefined is undefined\nThe null value is a primitive value that represents the null, empty, or non-existent reference.\tThe undefined value is a primitive value used when a variable has not been assigned a value.\nIndicates the absence of a value for a variable\tIndicates absence of variable itself\nConverted to zero (0) while performing primitive operations\tConverted to NaN while performing primitive operations\n⬆ Back to Top\n\nWhat is eval\nThe eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.\n\nconsole.log(eval(\"1 + 2\")); //  3\n⬆ Back to Top\n\nWhat is the difference between window and document\nBelow are the main differences between window and document,\n\nWindow\tDocument\nIt is the root level element in any web page\tIt is the direct child of the window object. This is also known as Document Object Model (DOM)\nBy default window object is available implicitly in the page\tYou can access it via window.document or document.\nIt has methods like alert(), confirm() and properties like document, location\tIt provides methods like getElementById, getElementsByTagName, createElement etc\n⬆ Back to Top\n\nHow do you access history in javascript\nThe window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.\n\nfunction goBack() {\n  window.history.back();\n}\nfunction goForward() {\n  window.history.forward();\n}\nNote: You can also access history without window prefix.\n\n⬆ Back to Top\n\nHow do you detect caps lock key turned on or not\nThe mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.\n\nLet's take an input element to detect the CapsLock on/off behavior with an example:\n\n<input type=\"password\" onmousedown=\"enterInput(event)\" />\n\n<p id=\"feedback\"></p>\n\n<script>\n  function enterInput(e) {\n    var flag = e.getModifierState(\"CapsLock\");\n    if (flag) {\n      document.getElementById(\"feedback\").innerHTML = \"CapsLock activated\";\n    } else {\n      document.getElementById(\"feedback\").innerHTML =\n        \"CapsLock not activated\";\n    }\n  }\n</script>\n⬆ Back to Top\n\nWhat is isNaN\nThe isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.\n\nisNaN(\"Hello\"); //true\nisNaN(\"100\"); //false\n⬆ Back to Top\n\nWhat are the differences between undeclared and undefined variables\nBelow are the major differences between undeclared(not defined) and undefined variables,\n\nundeclared\tundefined\nThese variables do not exist in a program and are not declared\tThese variables declared in the program but have not assigned any value\nIf you try to read the value of an undeclared variable, then a runtime error is encountered\tIf you try to read the value of an undefined variable, an undefined value is returned.\nvar a;\na; // yields undefined\n\nb; // Throws runtime error like \"Uncaught ReferenceError: b is not defined\"\nThis can be confusing, because it says not defined instead of not declared (Chrome)\n\n⬆ Back to Top\n\nWhat are global variables\nGlobal variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variable\n\nmsg = \"Hello\"; // var is missing, it becomes global variable\n⬆ Back to Top\n\nWhat are the problems with global variables\nThe problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.\n\n⬆ Back to Top\n\nWhat is NaN property\nThe NaN property is a global property that represents \"Not-a-Number\" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few cases\n\nMath.sqrt(-1);\nparseInt(\"Hello\");\n⬆ Back to Top\n\nWhat is the purpose of isFinite function\nThe isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.\n\nisFinite(Infinity); // false\nisFinite(NaN); // false\nisFinite(-Infinity); // false\n\nisFinite(100); // true\n⬆ Back to Top\n\nWhat is an event flow\nEvent flow refers to the order in which events are handled in the browser when a user interacts with elements on a webpage like clicking, typing, hovering, etc.\n\nWhen you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.\n\nHence, there are three phases in JavaScript’s event flow:\n\nEvent Capturing(Top to Bottom): The event starts from the window/document and moves down the DOM tree toward the target element.\nTarget phase: The event reaches the target element — the element that was actually interacted with.\nEvent Bubbling(Bottom to Top): The event then bubbles back up from the target element to the root.\n⬆ Back to Top\n\nWhat is event capturing\nEvent capturing is a phase of event propagation in which an event is first intercepted by the outermost ancestor element, then travels downward through the DOM hierarchy until it reaches the target (innermost) element.\n\nTo handle events during the capturing phase, you need to pass true as the third argument to the addEventListener method.\n\n <div>\n   <button class=\"child\">Hello</button>\n </div>\n\n <script>\n   const parent = document.querySelector(\"div\");\n   const child = document.querySelector(\".child\");\n\n   // Capturing phase: parent listener (runs first)\n   parent.addEventListener(\"click\", function () {\n     console.log(\"Parent (capturing)\");\n   }, true); // `true` enables capturing\n\n   // Bubbling phase: child listener (runs after)\n   child.addEventListener(\"click\", function () {\n     console.log(\"Child (bubbling)\");\n   });\n </script>\n // Parent (capturing)\n // Child (bubbling)\n⬆ Back to Top\n\nWhat is event bubbling\nEvent bubbling is a type of event propagation in which an event first triggers on the innermost target element (the one the user interacted with), and then bubbles up through its ancestors in the DOM hierarchy — eventually reaching the outermost elements, like the document or window.\n\nBy default, event listeners in JavaScript are triggered during the bubbling phase, unless specified otherwise.\n\n<div>\n  <button class=\"child\">Hello</button>\n</div>\n\n<script>\n  const parent = document.querySelector(\"div\");\n  const child = document.querySelector(\".child\");\n\n  // Bubbling phase (default)\n  parent.addEventListener(\"click\", function () {\n    console.log(\"Parent\");\n  });\n\n  child.addEventListener(\"click\", function () {\n    console.log(\"Child\");\n  });\n</script>\n//Child\n//Parent\nHere, at first, the event triggers on the child button. Thereafter it bubbles up and triggers the parent div's event handler.\n\n⬆ Back to Top\n\nHow do you submit a form using JavaScript\nYou can submit a form using document.forms[0].submit(). All the form input's information is submitted using onsubmit event handler\n\nfunction submit() {\n  document.forms[0].submit();\n}\n⬆ Back to Top\n\nHow do you find operating system details\nThe window.navigator object contains information about the visitor's browser OS details. Some of the OS properties are available under platform property,\n\nconsole.log(navigator.platform);\n⬆ Back to Top\n\nWhat is the difference between document load and DOMContentLoaded events\nThe DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).\n\n⬆ Back to Top\n\nWhat is the difference between native, host and user objects\nNative objects are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec. Host objects are objects provided by the browser or runtime environment (Node).\n\nFor example, window, XmlHttpRequest, DOM nodes etc are considered as host objects. User objects are objects defined in the javascript code. For example, User objects created for profile information.\n\n⬆ Back to Top\n\nWhat are the tools or techniques used for debugging JavaScript code\nYou can use below tools or techniques for debugging javascript\n\nChrome Devtools\ndebugger statement\nGood old console.log statement\n⬆ Back to Top\n\nWhat are the pros and cons of promises over callbacks\nBelow are the list of pros and cons of promises over callbacks,\n\nPros:\n\nIt avoids callback hell which is unreadable\nEasy to write sequential asynchronous code with .then()\nEasy to write parallel asynchronous code with Promise.all()\nSolves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)\nCons:\n\nIt makes little complex code\nYou need to load a polyfill if ES6 is not supported\n⬆ Back to Top\n\nWhat is the difference between an attribute and a property\nAttributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes: type and value,\n\n<input type=\"text\" value=\"Name:\">\nYou can retrieve the attribute value as below, for example after typing \"Good morning\" into the input field:\n\nconst input = document.querySelector(\"input\");\nconsole.log(input.getAttribute(\"value\")); // Good morning\nconsole.log(input.value); // Good morning\nAnd after you change the value of the text field to \"Good evening\", it becomes like\n\nconsole.log(input.getAttribute(\"value\")); // Good evening\nconsole.log(input.value); // Good evening\n⬆ Back to Top\n\nWhat is same-origin policy\nThe same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).\n\n⬆ Back to Top\n\nWhat is the purpose of void 0\nVoid(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=\"JavaScript:Void(0);\" within an <a> element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression. For example, the below link notify the message without reloading the page\n\n<a href=\"JavaScript:void(0);\" onclick=\"alert('Well done!')\">\n  Click Me!\n</a>\n⬆ Back to Top\n\nIs JavaScript a compiled or interpreted language\nJavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.\n\n⬆ Back to Top\n\nIs JavaScript a case-sensitive language\nYes, JavaScript is a case sensitive language. The language keywords, variables, function & object names, and any other identifiers must always be typed with a consistent capitalization of letters.\n\n⬆ Back to Top\n\nIs there any relation between Java and JavaScript\nNo, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).\n\n**[⬆ Back to Top](#table-of-contents)**\nWhat are events\nEvents are \"things\" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can react on these events. Some of the examples of HTML events are,\n\nWeb page has finished loading\nInput field was changed\nButton was clicked\nLet's describe the behavior of click event for button element,\n\n<!doctype html>\n<html>\n <head>\n   <script>\n     function greeting() {\n       alert('Hello! Good morning');\n     }\n   </script>\n </head>\n <body>\n   <button type=\"button\" onclick=\"greeting()\">Click me</button>\n </body>\n</html>\n⬆ Back to Top\n\nWho created javascript\nJavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name Mocha, but later the language was officially called LiveScript when it first shipped in beta releases of Netscape.\n\n⬆ Back to Top\n\nWhat is the use of preventDefault method\nThe preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.\n\ndocument\n  .getElementById(\"link\")\n  .addEventListener(\"click\", function (event) {\n    event.preventDefault();\n  });\nNote: Remember that not all events are cancelable.\n\n⬆ Back to Top\n\nWhat is the use of stopPropagation method\nThe stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)\n\n<p>Click DIV1 Element</p>\n<div onclick=\"secondFunc()\">DIV 2\n  <div onclick=\"firstFunc(event)\">DIV 1</div>\n</div>\n\n<script>\nfunction firstFunc(event) {\n  alert(\"DIV 1\");\n  event.stopPropagation();\n}\n\nfunction secondFunc() {\n  alert(\"DIV 2\");\n}\n</script>\n⬆ Back to Top\n\nWhat are the steps involved in return false usage\nThe return false statement in event handlers performs the below steps,\n\nFirst it stops the browser's default action or behaviour.\nIt prevents the event from propagating the DOM\nStops callback execution and returns immediately when called.\n⬆ Back to Top\n\nWhat is BOM\nThe Browser Object Model (BOM) allows JavaScript to \"talk to\" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.\n\nScreenshot\n\n⬆ Back to Top\n\nWhat is the use of setTimeout\nThe setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,\n\nsetTimeout(function () {\n  console.log(\"Good morning\");\n}, 2000);\n⬆ Back to Top\n\nWhat is the use of setInterval\nThe setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let's log a message after 2 seconds using setInterval method,\n\nsetInterval(function () {\n  console.log(\"Good morning\");\n}, 2000);\n⬆ Back to Top\n\nWhy is JavaScript treated as Single threaded\nJavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.\n\n⬆ Back to Top\n\nWhat is an event delegation\nEvent delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.\n\nFor example, if you wanted to detect field changes inside a specific form, you can use event delegation technique,\n\nvar form = document.querySelector(\"#registration-form\");\n\n// Listen for changes to fields inside the form\nform.addEventListener(\n  \"input\",\n  function (event) {\n    // Log the field that was changed\n    console.log(event.target);\n  },\n  false\n);\n⬆ Back to Top\n\nWhat is ECMAScript\nECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.\n\n⬆ Back to Top\n\nWhat is JSON\nJSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.\n\n⬆ Back to Top\n\nWhat are the syntax rules of JSON\nBelow are the list of syntax rules of JSON\n\nThe data is in name/value pairs\nThe data is separated by commas\nCurly braces hold objects\nSquare brackets hold arrays\n⬆ Back to Top\n\nWhat is the purpose JSON stringify\nWhen sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.\n\nvar userJSON = { name: \"John\", age: 31 };\nvar userString = JSON.stringify(userJSON);\nconsole.log(userString); //\"{\"name\":\"John\",\"age\":31}\"\n⬆ Back to Top\n\nHow do you parse JSON string\nWhen receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.\n\nvar userString = '{\"name\":\"John\",\"age\":31}';\nvar userJSON = JSON.parse(userString);\nconsole.log(userJSON); // {name: \"John\", age: 31}\n⬆ Back to Top\n\nWhy do you need JSON\nWhen exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.\n\n⬆ Back to Top\n\nWhat are PWAs\nProgressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.\n\n⬆ Back to Top\n\nWhat is the purpose of clearTimeout method\nThe clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer.\n\nFor example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.\n\n<script>\n     var msg;\n     function greeting() {\n        alert('Good morning');\n     }\n     function start() {\n       msg =setTimeout(greeting, 3000);\n\n     }\n\n     function stop() {\n         clearTimeout(msg);\n     }\n</script>\n⬆ Back to Top\n\nWhat is the purpose of clearInterval method\nThe clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval.\n\nFor example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.\n\n<script>\n     var msg;\n     function greeting() {\n        alert('Good morning');\n     }\n     function start() {\n       msg = setInterval(greeting, 3000);\n\n     }\n\n     function stop() {\n         clearInterval(msg);\n     }\n</script>\n⬆ Back to Top\n\nHow do you redirect new page in javascript\nIn vanilla javascript, you can redirect to a new page using the location property of window object. The syntax would be as follows,\n\nfunction redirect() {\n  window.location.href = \"newPage.html\";\n}\n⬆ Back to Top\n\nHow do you check whether a string contains a substring\nThere are 3 possible ways to check whether a string contains a substring or not,\n\nUsing includes: ES6 provided String.prototype.includes method to test a string contains a substring\nvar mainString = \"hello\",\n  subString = \"hell\";\nmainString.includes(subString);\nUsing indexOf: In an ES5 or older environment, you can use String.prototype.indexOf which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.\nvar mainString = \"hello\",\n  subString = \"hell\";\nmainString.indexOf(subString) !== -1;\nUsing RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressions\nvar mainString = \"hello\",\n  regex = /hell/;\nregex.test(mainString);\n⬆ Back to Top\n\nHow do you validate an email in javascript\nYou can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.\n\nfunction validateEmail(email) {\n  var re =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n⬆ Back to Top\n\nThe above regular expression accepts unicode characters.\n\nHow do you get the current url with javascript\nYou can use window.location.href expression to get the current url path and you can use the same expression for updating the URL too. You can also use document.URL for read-only purposes but this solution has issues in FF.\n\nconsole.log(\"location.href\", window.location.href); // Returns full URL\n⬆ Back to Top\n\nWhat are the various url properties of location object\nThe below Location object properties can be used to access URL components of the page,\n\nhref - The entire URL\nprotocol - The protocol of the URL\nhost - The hostname and port of the URL\nhostname - The hostname of the URL\nport - The port number in the URL\npathname - The path name of the URL\nsearch - The query portion of the URL\nhash - The anchor portion of the URL\n⬆ Back to Top\n\nHow do get query string values in javascript\nYou can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code value from URL query string,\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst clientCode = urlParams.get(\"clientCode\");\n⬆ Back to Top\n\nHow do you check if a key exists in an object\nYou can check whether a key exists in an object or not using three approaches,\n\nUsing in operator: You can use the in operator whether a key exists in an object or not\n\n\"key\" in obj;\nand If you want to check if a key doesn't exist, remember to use parenthesis,\n\n!(\"key\" in obj);\nUsing hasOwnProperty method: You can use hasOwnProperty to particularly test for properties of the object instance (and not inherited properties)\n\nobj.hasOwnProperty(\"key\"); // true\nUsing undefined comparison: If you access a non-existing property from an object, the result is undefined. Let’s compare the properties against undefined to determine the existence of the property.\n\nconst user = {\n  name: \"John\",\n};\n\nconsole.log(user.name !== undefined); // true\nconsole.log(user.nickName !== undefined); // false\n⬆ Back to Top\n\nHow do you loop through or enumerate javascript object\nYou can use the for-in loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn't come from the prototype using hasOwnProperty method.\n\nvar object = {\n  k1: \"value1\",\n  k2: \"value2\",\n  k3: \"value3\",\n};\n\nfor (var key in object) {\n  if (object.hasOwnProperty(key)) {\n    console.log(key + \" -> \" + object[key]); // k1 -> value1 ...\n  }\n}\n⬆ Back to Top\n\nHow do you test for an empty object\nThere are different solutions based on ECMAScript versions\n\nUsing Object entries(ECMA 7+): You can use object entries length along with constructor type.\nObject.entries(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well\nUsing Object keys(ECMA 5+): You can use object keys length along with constructor type.\nObject.keys(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well\nUsing for-in with hasOwnProperty(Pre-ECMA 5): You can use a for-in loop along with hasOwnProperty.\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n⬆ Back to Top\n\nWhat is an arguments object\nThe arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let's see how to use arguments object inside sum function,\n\nfunction sum() {\n  var total = 0;\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nsum(1, 2, 3); // returns 6\nNote: You can't apply array methods on arguments object. But you can convert into a regular array as below.\n\nvar argsArray = Array.prototype.slice.call(arguments);\n⬆ Back to Top\n\nHow do you make first letter of the string in an uppercase\nYou can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n⬆ Back to Top\n\nWhat are the pros and cons of for loops\nThe for-loop is a commonly used iteration syntax in javascript. It has both pros and cons\n\nPros\nWorks on every environment\nYou can use break and continue flow control statements\nCons\nToo verbose\nImperative\nYou might face off-by-one errors.\n⬆ Back to Top\n\nHow do you display the current date in javascript\nYou can use new Date() to generate a new Date object containing the current date and time. For example, let's display the current date in mm/dd/yyyy\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, \"0\");\nvar mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\nvar yyyy = today.getFullYear();\n\ntoday = mm + \"/\" + dd + \"/\" + yyyy;\ndocument.write(today);\n⬆ Back to Top\n\nHow do you compare two date objects\nYou need to use date.getTime() method in order to compare unix timestamp values\n\nvar d1 = new Date();\nvar d2 = new Date(d1);\nconsole.log(d1.getTime() === d2.getTime()); //True\nconsole.log(d1 === d2); // False\n⬆ Back to Top\n\nHow do you check if a string starts with another string\nYou can use ECMAScript 6's String.prototype.startsWith() method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let's see an example to see this usage,\n\n\"Good morning\".startsWith(\"Good\"); // true\n\"Good morning\".startsWith(\"morning\"); // false\n⬆ Back to Top\n\nHow do you trim a string in javascript\nJavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.\n\n\"  Hello World   \".trim(); //Hello World\nIf your browser(<IE9) doesn't support this method then you can use below polyfill.\n\nif (!String.prototype.trim) {\n  (function () {\n    // Make sure we trim BOM and NBSP\n    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    String.prototype.trim = function () {\n      return this.replace(rtrim, \"\");\n    };\n  })();\n}\n⬆ Back to Top\n\nHow do you add a key value pair in javascript\nThere are two possible solutions to add new properties to an object.\n\nLet's take a simple object to explain these solutions.\n\nvar object = {\n  key1: value1,\n  key2: value2,\n};\nUsing dot notation: This solution is useful when you know the name of the property\nobject.key3 = \"value3\";\nUsing square bracket notation: This solution is useful when the name of the property is dynamically determined or the key's name is non-JS like \"user-name\"\nobj[\"key3\"] = \"value3\";\n⬆ Back to Top\n\nIs the !-- notation represents a special operator\nNo,that's not a special operator. But it is a combination of 2 standard operators one after the other,\n\nA logical not (!)\nA prefix decrement (--)\nAt first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.\n\n⬆ Back to Top\n\nHow do you assign default values to variables\nYou can use the logical or operator || in an assignment expression to provide a default value. The syntax looks like as below,\n\nvar a = b || c;\nAs per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'.\n\n⬆ Back to Top\n\nHow do you define multiline strings\nYou can define multiline string literals using the '\\n' character followed by line terminator('').\n\nvar str = \"This is a \\n very lengthy \\n sentence!\";\nconsole.log(str);\nBut if you have a space after the '\\n' character, there will be indentation inconsistencies.\n\n⬆ Back to Top\n\nWhat is an app shell model\nAn application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.\n\n⬆ Back to Top\n\nCan we define properties for functions\nYes, we can define properties for functions because functions are also objects.\n\nfn = function (x) {\n  //Function code goes here\n};\n\nfn.name = \"John\";\n\nfn.profile = function (y) {\n  //Profile code goes here\n};\n⬆ Back to Top\n\nWhat is the way to find the number of parameters expected by a function\nYou can use function.length syntax to find the number of parameters expected by a function. Let's take an example of sum function to calculate the sum of numbers,\n\nfunction sum(num1, num2, num3, num4) {\n  return num1 + num2 + num3 + num4;\n}\nsum.length; // 4 is the number of parameters expected.\n⬆ Back to Top\n\nWhat is a polyfill\nA polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.\n\nThere are two main polyfill libraries available,\n\nCore.js: It is a modular javascript library used for cutting-edge ECMAScript features.\nPolyfill.io: It provides polyfills that are required for browser needs.\n⬆ Back to Top\n\nWhat are break and continue statements\nThe break statement is used to \"jump out\" of a loop. i.e, It breaks the loop and continues executing the code after the loop.\n\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\nThe continue statement is used to \"jump over\" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\n\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n⬆ Back to Top\n\nWhat are js labels\nThe label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,\n\nvar i, j;\n\nloop1: for (i = 0; i < 3; i++) {\n  loop2: for (j = 0; j < 3; j++) {\n    if (i === j) {\n      continue loop1;\n    }\n    console.log(\"i = \" + i + \", j = \" + j);\n  }\n}\n\n// Output is:\n//   \"i = 1, j = 0\"\n//   \"i = 2, j = 0\"\n//   \"i = 2, j = 1\"\n⬆ Back to Top\n\nWhat are the benefits of keeping declarations at the top\nIt is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,\n\nGives cleaner code\nIt provides a single place to look for local variables\nEasy to avoid unwanted global variables\nIt reduces the possibility of unwanted re-declarations\n⬆ Back to Top\n\nWhat are the benefits of initializing variables\nIt is recommended to initialize variables because of the below benefits,\n\nIt gives cleaner code\nIt provides a single place to initialize variables\nAvoid undefined values in the code\n⬆ Back to Top\n\nWhat are the recommendations to create new object\nIt is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on it's type to create the objects.\n\nAssign {} instead of new Object()\nAssign \"\" instead of new String()\nAssign 0 instead of new Number()\nAssign false instead of new Boolean()\nAssign [] instead of new Array()\nAssign /()/ instead of new RegExp()\nAssign function (){} instead of new Function()\nYou can define them as an example,\n\nvar v1 = {};\nvar v2 = \"\";\nvar v3 = 0;\nvar v4 = false;\nvar v5 = [];\nvar v6 = /()/;\nvar v7 = function () {};\n⬆ Back to Top\n\nHow do you define JSON arrays\nJSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,\n\n\"users\":[\n  {\"firstName\":\"John\", \"lastName\":\"Abrahm\"},\n  {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n  {\"firstName\":\"Shane\", \"lastName\":\"Warn\"}\n]\n⬆ Back to Top\n\nHow do you generate random integers\nYou can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,\n\nMath.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10\nMath.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100\nNote: Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)\n\n⬆ Back to Top\n\nCan you write a random integers function to print integers within a range\nYes, you can create a proper random function to return a random number between min and max (both included)\n\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nrandomInteger(1, 100); // returns a random integer from 1 to 100\nrandomInteger(1, 1000); // returns a random integer from 1 to 1000\n⬆ Back to Top\n\nWhat is tree shaking\nTree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup, these days practically all bundlers use this technique.\n\n⬆ Back to Top\n\nWhat is the need of tree shaking\nTree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a “Hello World” Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.\n\n⬆ Back to Top\n\nIs it recommended to use eval\nNo, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.\n\n⬆ Back to Top\n\nWhat is a Regular Expression\nA regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now,\n\n/pattern/modifiers;\nFor example, the regular expression or search pattern with case-insensitive username would be,\n\n/John/i;\n⬆ Back to Top\n\nWhat are the string methods that accept Regular expression\nThere are six string methods: search(), replace(), replaceAll(), match(), matchAll(), and split().\n\nThe search() method uses an expression to search for a match, and returns the position of the match.\n\nvar msg = \"Hello John\";\nvar n = msg.search(/John/i); // 6\nThe replace() and replaceAll() methods are used to return a modified string where the pattern is replaced.\n\nvar msg = \"ball bat\";\nvar n1 = msg.replace(/b/i, \"c\"); // call bat\nvar n2 = msg.replaceAll(/b/i, \"c\"); // call cat\nThe match() and matchAll() methods are used to return the matches when matching a string against a regular expression.\n\nvar msg = \"Hello John\";\nvar n1 = msg.match(/[A-Z]/g); // [\"H\", \"J\"]\nvar n2 = msg.matchAll(/[A-Z]/g); // this returns an iterator\nThe split() method is used to split a string into an array of substrings, and returns the new array.\n\nvar msg = \"Hello John\";\nvar n = msg.split(/\\s/); // [\"Hello\", \"John\"]\n⬆ Back to Top\n\nWhat are modifiers in regular expression\nModifiers can be used to perform case-insensitive and global searches. Let's list some of the modifiers,\n\nModifier\tDescription\ni\tPerform case-insensitive matching\ng\tPerform a global match rather than stops at first match\nm\tPerform multiline matching\nLet's take an example of global modifier,\n\nvar text = \"Learn JS one by one\";\nvar pattern = /one/g;\nvar result = text.match(pattern); // one,one\n⬆ Back to Top\n\nWhat are regular expression patterns\nRegular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,\n\nBrackets: These are used to find a range of characters. For example, below are some use cases,\n[abc]: Used to find any of the characters between the brackets(a,b,c)\n[0-9]: Used to find any of the digits between the brackets\n(a|b): Used to find any of the alternatives separated with |\nMetacharacters: These are characters with a special meaning. For example, below are some use cases,\n\\d: Used to find a digit\n\\s: Used to find a whitespace character\n\\b: Used to find a match at the beginning or ending of a word\nQuantifiers: These are useful to define quantities. For example, below are some use cases,\nn+: Used to find matches for any string that contains at least one n\nn*: Used to find matches for any string that contains zero or more occurrences of n\nn?: Used to find matches for any string that contains zero or one occurrences of n\n⬆ Back to Top\n\nWhat is a RegExp object\nRegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of RegExp object,\n\nvar regexp = new RegExp(\"\\\\w+\");\nconsole.log(regexp);\n// expected output: /\\w+/\n⬆ Back to Top\n\nHow do you search a string for a pattern\nYou can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.\n\nvar pattern = /you/;\nconsole.log(pattern.test(\"How are you?\")); //true\n⬆ Back to Top\n\nWhat is the purpose of exec method\nThe purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.\n\nvar pattern = /you/;\nconsole.log(pattern.exec(\"How are you?\")); //[\"you\", index: 8, input: \"How are you?\", groups: undefined]\n⬆ Back to Top\n\nHow do you change the style of a HTML element\nYou can change inline style or classname of a HTML element using javascript DOM-manipulation\n\nUsing style property: You can modify inline style using style property\ndocument.getElementById(\"title\").style.fontSize = \"30px\";\nUsing ClassName property: It is easy to modify element class using className property\ndocument.getElementById(\"title\").className = \"custom-title\";\n⬆ Back to Top\n\nWhat would be the result of 1+2+'3'\nThe output is going to be 33. Since 1 and 2 are numeric values, the result of the first two digits is going to be a numeric value 3. The next digit is a string type value because of that the addition of numeric value 3 and string type value 3 is just going to be a concatenation value 33. Other operationrs like 3 * '3' do yield correct results because the string is coerced into a number.\n\n⬆ Back to Top\n\nWhat is a debugger statement\nThe debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect. For example, in the below function a debugger statement has been inserted. So execution is paused at the debugger statement just like a breakpoint in the script source.\n\nfunction getProfile() {\n  // code goes here\n  debugger;\n  // code goes here\n}\n⬆ Back to Top\n\nWhat is the purpose of breakpoints in debugging\nYou can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.\n\n⬆ Back to Top\n\nCan I use reserved words as identifiers\nNo, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,\n\nvar else = \"hello\"; // Uncaught SyntaxError: Unexpected token else\n⬆ Back to Top\n\nHow do you detect a mobile browser\nYou can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.\n\nwindow.mobilecheck = function () {\n  var mobileCheck = false;\n  (function (a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      mobileCheck = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return mobileCheck;\n};\n⬆ Back to Top\n\nHow do you detect a mobile browser without regexp\nYou can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,\n\nfunction detectmob() {\n  if (\n    navigator.userAgent.match(/Android/i) ||\n    navigator.userAgent.match(/webOS/i) ||\n    navigator.userAgent.match(/iPhone/i) ||\n    navigator.userAgent.match(/iPad/i) ||\n    navigator.userAgent.match(/iPod/i) ||\n    navigator.userAgent.match(/BlackBerry/i) ||\n    navigator.userAgent.match(/Windows Phone/i)\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n⬆ Back to Top\n\nHow do you get the image width and height using JS\nYou can programmatically get the image and check the dimensions(width and height) using Javascript.\n\nvar img = new Image();\nimg.onload = function () {\n  console.log(this.width + \"x\" + this.height);\n};\nimg.src = \"http://www.google.com/intl/en_ALL/images/logo.gif\";\n⬆ Back to Top\n\nHow do you make synchronous HTTP request\nBrowsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScript.\n\nfunction httpGet(theUrl) {\n  var xmlHttpReq = new XMLHttpRequest();\n  xmlHttpReq.open(\"GET\", theUrl, false); // false for synchronous request\n  xmlHttpReq.send(null);\n  return xmlHttpReq.responseText;\n}\n⬆ Back to Top\n\nHow do you make asynchronous HTTP request\nBrowsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.\n\nfunction httpGetAsync(theUrl, callback) {\n  var xmlHttpReq = new XMLHttpRequest();\n  xmlHttpReq.onreadystatechange = function () {\n    if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)\n      callback(xmlHttpReq.responseText);\n  };\n  xmlHttpReq.open(\"GET\", theUrl, true); // true for asynchronous\n  xmlHttpReq.send(null);\n}\nToday this is considered deprecated, because an async fetch call (in browsers later than 2016) is simpler and more robust.\n\n⬆ Back to Top\n\nHow do you convert date to another timezone in javascript\nYou can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert current date to British English timezone as below,\n\nconsole.log(new Date().toLocaleString(\"en-GB\", { timeZone: \"UTC\" })); //29/06/2019, 09:56:00\n⬆ Back to Top\n\nWhat are the properties used to get size of window\nYou can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let's use them combination of these properties to calculate the size of a window or document,\n\nvar width =\n  window.innerWidth ||\n  document.documentElement.clientWidth ||\n  document.body.clientWidth;\n\nvar height =\n  window.innerHeight ||\n  document.documentElement.clientHeight ||\n  document.body.clientHeight;\n⬆ Back to Top\n\nWhat is a conditional operator in javascript\nThe conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.\n\nvar isAuthenticated = false;\nconsole.log(\n  isAuthenticated ? \"Hello, welcome\" : \"Sorry, you are not authenticated\"\n); // Sorry, you are not authenticated\n⬆ Back to Top\n\nCan you apply chaining on conditional operator\nYes, you can apply chaining on conditional operators similar to if … else if … else if … else chain. The syntax is going to be as below,\n\nfunction traceValue(someParam) {\n  return condition1\n    ? value1\n    : condition2\n    ? value2\n    : condition3\n    ? value3\n    : value4;\n}\n\n// The above conditional operator is equivalent to:\n\nfunction traceValue(someParam) {\n  if (condition1) {\n    return value1;\n  } else if (condition2) {\n    return value2;\n  } else if (condition3) {\n    return value3;\n  } else {\n    return value4;\n  }\n}\n⬆ Back to Top\n\nWhat are the ways to execute javascript after a page load\nYou can execute javascript after page load in many different ways,\n\nwindow.onload:\nwindow.onload = function ...\ndocument.onload:\ndocument.onload = function ...\nbody onload:\n<body onload=\"script();\">\n⬆ Back to Top\n\nWhat is the difference between proto and prototype\nThe __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas prototype is the object that is used to build __proto__ when you create an object with the new operator (a special variant of a function call).\n\nnew Employee().__proto__ === Employee.prototype;\nnew Employee().prototype === undefined;\nThere are few more differences,\n\nfeature\tPrototype\tproto\nAccess\tAll function constructors have prototype properties.\tAll objects have __proto__ property\nPurpose\tUsed to reduce memory wastage with a single copy of function\tUsed in lookup chain to resolve methods, constructors etc.\nECMAScript\tIntroduced in ES6\tIntroduced in ES5\nUsage\tFrequently used\tRarely used\n⬆ Back to Top\n\nCan you give an example of when you really need a semicolon\nIt is recommended to use semicolons after every statement in JavaScript. For example, in the below case (that is an IIFE = Immediately Invoked Function Expression) it throws an error \".. is not a function\" at runtime due to missing semicolon.\n\n// define a function\nvar fn = (function () {\n  //...\n})(\n  // semicolon missing at this line\n\n  // then execute some code inside a closure\n  function () {\n    //...\n  }\n)();\nand it will be interpreted as\n\nvar fn = (function () {\n  //...\n})(function () {\n  //...\n})();\nIn this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a \"... is not a function\" error at runtime.\n\n⬆ Back to Top\n\nWhat is the freeze method\nThe freeze() method is used to freeze an object. Freezing an object does not allow adding new properties to an object, prevents removing, and prevents changing the enumerability, configurability, or writability of existing properties. i.e. It returns the passed object and does not create a frozen copy.\n\nconst obj = {\n  prop: 100,\n};\n\nObject.freeze(obj);\nobj.prop = 200; // Throws an error in strict mode\n\nconsole.log(obj.prop); //100\nRemember freezing is only applied to the top-level properties in objects but not for nested objects. For example, let's try to freeze user object which has employment details as nested object and observe that details have been changed.\n\nconst user = {\n  name: \"John\",\n  employment: {\n    department: \"IT\",\n  },\n};\n\nObject.freeze(user);\nuser.employment.department = \"HR\";\nNote: It causes a TypeError if the argument passed is not an object.\n\n⬆ Back to Top\n\nWhat is the purpose of the freeze method\nBelow are the main benefits of using freeze method,\n\nIt is used for freezing objects and arrays.\nIt is used to make an object immutable.\n⬆ Back to Top\n\nWhy do I need to use the freeze method\nIn the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the final keyword which is used in various languages.\n\n⬆ Back to Top\n\nHow do you detect a browser language preference\nYou can use the navigator object to detect a browser language preference as below,\n\nvar language =\n  (navigator.languages && navigator.languages[0]) || // Chrome / Firefox\n  navigator.language || // All browsers\n  navigator.userLanguage; // IE <= 10\n\nconsole.log(language);\n⬆ Back to Top\n\nHow to convert a string to title case with javascript\nTitle case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,\n\nfunction toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();\n  });\n}\ntoTitleCase(\"good morning john\"); // Good Morning John\n⬆ Back to Top\n\nHow do you detect if javascript is disabled on the page\nYou can use the <noscript> tag to detect javascript disabled or not. The code block inside <noscript> gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.\n\n<script type=\"javascript\">\n    // JS related code goes here\n</script>\n<noscript>\n    <a href=\"next_page.html?noJS=true\">JavaScript is disabled in the page. Please click Next Page</a>\n</noscript>\n⬆ Back to Top\n\nWhat are various operators supported by javascript\nAn operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,\n\nArithmetic Operators: Includes + (Addition), – (Subtraction), * (Multiplication), / (Division), % (Modulus), ++ (Increment) and – – (Decrement)\nComparison Operators: Includes == (Equal), != (Not Equal), === (Equal with type), > (Greater than), >= (Greater than or Equal to), < (Less than), <= (Less than or Equal to)\nLogical Operators: Includes && (Logical AND), || (Logical OR), ! (Logical NOT)\nAssignment Operators: Includes = (Assignment Operator), += (Add and Assignment Operator), –= (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)\nTernary Operators: It includes conditional(: ?) Operator\ntypeof Operator: It uses to find type of variable. The syntax looks like typeof variable\n⬆ Back to Top\n\nWhat is a rest parameter\nRest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,\n\nfunction f(a, b, ...theArgs) {\n  // ...\n}\nFor example, let's take a sum example to calculate on dynamic number of parameters,\n\nfunction sum(...args) {\n  let total = 0;\n  for (const i of args) {\n    total += i;\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2)); //3\nconsole.log(sum(1, 2, 3)); //6\nconsole.log(sum(1, 2, 3, 4)); //10\nconsole.log(sum(1, 2, 3, 4, 5)); //15\nNote: Rest parameter is added in ES2015 or ES6\n\n⬆ Back to Top\n\nWhat happens if you do not use rest parameter as a last argument\nThe rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn’t make any sense and will throw an error.\n\nfunction someFunc(a,…b,c){\n//You code goes here\nreturn;\n}\n⬆ Back to Top\n\nWhat are the bitwise operators available in javascript\nBelow are the list of bitwise logical operators used in JavaScript\n\nBitwise AND ( & )\nBitwise OR ( | )\nBitwise XOR ( ^ )\nBitwise NOT ( ~ )\nLeft Shift ( << )\nSign Propagating Right Shift ( >> )\nZero fill Right Shift ( >>> )\n⬆ Back to Top\n\nWhat is a spread operator\nSpread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's take an example to see this behavior,\n\nfunction calculateSum(x, y, z) {\n  return x + y + z;\n}\n\nconst numbers = [1, 2, 3];\n\nconsole.log(calculateSum(...numbers)); // 6\n⬆ Back to Top\n\nHow do you determine whether object is frozen or not\nObject.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,\n\nIf it is not extensible.\nIf all of its properties are non-configurable.\nIf all its data properties are non-writable. The usage is going to be as follows,\nconst object = {\n  property: \"Welcome JS world\",\n};\nObject.freeze(object);\nconsole.log(Object.isFrozen(object));\n⬆ Back to Top\n\nHow do you determine two values same or not using object\nThe Object.is() method determines whether two values are the same value. For example, the usage with different types of values would be,\n\nObject.is(\"hello\", \"hello\"); // true\nObject.is(window, window); // true\nObject.is([], []); // false\nTwo values are considered identical if one of the following holds:\n\nboth undefined\nboth null\nboth true or both false\nboth strings of the same length with the same characters in the same order\nboth the same object (means both object have same reference)\nboth numbers and both +0 both -0 both NaN both non-zero and both not NaN and both have the same value.\n⬆ Back to Top\n\nWhat is the purpose of using object is method\nSome of the applications of Object's is method are follows,\n\nIt is used for comparison of two strings.\nIt is used for comparison of two numbers.\nIt is used for comparing the polarity of two numbers.\nIt is used for comparison of two objects.\n⬆ Back to Top\n\nHow do you copy properties from one object to other\nYou can use the Object.assign() method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the source objects. The syntax would be as below,\n\nObject.assign(target, ...sources);\nLet's take example with one source and one target object,\n\nconst target = { a: 1, b: 2 };\nconst source = { b: 3, c: 4 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target); // { a: 1, b: 3, c: 4 }\n\nconsole.log(returnedTarget); // { a: 1, b: 3, c: 4 }\nAs observed in the above code, there is a common property(b) from source to target so it's value has been overwritten.\n\n⬆ Back to Top\n\nWhat are the applications of the assign method\nBelow are the some of main applications of Object.assign() method,\n\nIt is used for cloning an object.\nIt is used to merge objects with the same properties.\n⬆ Back to Top\n\nWhat is a proxy object\nThe Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc.\n\nA proxy is created with two parameters: a target object which you want to proxy and a handler object which contains methods to intercept fundamental operations. The syntax would be as follows,\n\nvar p = new Proxy(target, handler);\nLet's take a look at below examples of proxy object and how the get method which customize the lookup behavior,\n\n//Example1:\n\nconst person = {\n  name: \"Sudheer Jonna\",\n  age: 35,\n};\n\nconst handler = {\n  get(target, prop) {\n    if (prop === \"name\") {\n      return \"Mr. \" + target[prop];\n    }\n    return target[prop];\n  },\n};\n\nconst proxy = new Proxy(person, handler);\n\n//Example2:\n\nvar handler1 = {\n  get: function (obj, prop) {\n    return prop in obj ? obj[prop] : 100;\n  },\n};\n\nvar p = new Proxy({}, handler1);\np.a = 10;\np.b = null;\n\nconsole.log(p.a, p.b); // 10, null\nconsole.log(\"c\" in p, p.c); // false, 100\nIn the above code, it uses get handler which define the behavior of the proxy when an operation is performed on it. These proxies are mainly used for some of the below cross-cutting concerns.\n\nLogging\nAuthentication or Authorization\nData binding and observables\nFunction parameter validation\nNote: This feature was introduced with ES6.\n\n⬆ Back to Top\n\nWhat is the purpose of the seal method\nThe Object.seal() method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But values of present properties can still be changed as long as they are writable. The next level of immutability would be the Object.freeze() method. Let's see the below example to understand more about seal() method\n\nconst object = {\n  property: \"Welcome JS world\",\n};\nObject.seal(object);\nobject.property = \"Welcome to object world\";\nconsole.log(Object.isSealed(object)); // true\ndelete object.property; // You cannot delete when sealed\nconsole.log(object.property); //Welcome to object world\n⬆ Back to Top\n\nWhat are the applications of the seal method\nBelow are the main applications of Object.seal() method,\n\nIt is used for sealing objects and arrays.\nIt is used to make properties of an object non-configurable.\n⬆ Back to Top\n\nWhat are the differences between the freeze and seal methods\nIf an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the existing properties of the object.\n\n⬆ Back to Top\n\nHow do you determine if an object is sealed or not\nThe Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold true\n\nIf it is not extensible.\nIf all of its properties are non-configurable.\nIf it is not removable (but not necessarily non-writable). Let's see it in the action\nconst object = {\n  property: \"Hello, Good morning\",\n};\n\nObject.seal(object); // Using seal() method to seal the object\n\nconsole.log(Object.isSealed(object)); // checking whether the object is sealed or not\n⬆ Back to Top\n\nHow do you get enumerable key and value pairs\nThe Object.entries() method is used to return an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop. Let's see the functionality of object.entries() method in an example,\n\nconst object = {\n  a: \"Good morning\",\n  b: 100,\n};\n\nfor (let [key, value] of Object.entries(object)) {\n  console.log(`${key}: ${value}`); // a: 'Good morning'\n  // b: 100\n}\nNote: The order is not guaranteed as object defined.\n\n⬆ Back to Top\n\nWhat is the main difference between Object.values and Object.entries method\nThe Object.values() method's behavior is similar to Object.entries() method but it returns an array of values instead [key,value] pairs.\n\nconst object = {\n  a: \"Good morning\",\n  b: 100,\n};\n\nfor (let value of Object.values(object)) {\n  console.log(`${value}`); // 'Good morning \\n100'\n}\n⬆ Back to Top\n\nHow can you get the list of keys of any object\nYou can use the Object.keys() method which is used to return an array of a given object's own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,\n\nconst user = {\n  name: \"John\",\n  gender: \"male\",\n  age: 40,\n};\n\nconsole.log(Object.keys(user)); //['name', 'gender', 'age']\n⬆ Back to Top\n\nHow do you create an object with a prototype\nThe Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.\n\nconst user = {\n  name: \"John\",\n  printInfo: function () {\n    console.log(`My name is ${this.name}.`);\n  },\n};\n\nconst admin = Object.create(user);\n\nadmin.name = \"Nick\"; // Remember that \"name\" is a property set on \"admin\" but not on \"user\" object\n\nadmin.printInfo(); // My name is Nick\n⬆ Back to Top\n\nWhat is a WeakSet\nA WeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,\n\nnew WeakSet([iterable]);\nLet's see the below example to explain it's behavior,\n\nvar ws = new WeakSet();\nvar user = {};\nws.add(user);\nws.has(user); // true\nws.delete(user); // removes user from the set\nws.has(user); // false, user has been removed\n⬆ Back to Top\n\nWhat are the differences between WeakSet and Set\nThe main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it. Other differences are:\n\nSet can store any value whereas WeakSet can store only collections of objects\nWeakSet does not have size property unlike Set\nWeakSet does not have methods such as clear, keys, values, entries, forEach.\nWeakSet is not iterable.\n⬆ Back to Top\n\nList down the collection of methods available on WeakSet\nBelow are the list of methods available on WeakSet,\n\nadd(value): A new object is appended with the given value\ndelete(value): Deletes the value from the collection.\nhas(value): It returns true if the value is present in the collection, otherwise it returns false.\nLet's see the functionality of all the above methods in an example,\n\nvar weakSetObject = new WeakSet();\nvar firstObject = {};\nvar secondObject = {};\n// add(value)\nweakSetObject.add(firstObject);\nweakSetObject.add(secondObject);\nconsole.log(weakSetObject.has(firstObject)); //true\nweakSetObject.delete(secondObject);\n⬆ Back to Top\n\nWhat is a WeakMap\nA WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax looks like the following:\n\nnew WeakMap([iterable]);\nLet's see the below example to explain it's behavior,\n\nvar ws = new WeakMap();\nvar user = {};\nws.set(user);\nws.has(user); // true\nws.delete(user); // removes user from the map\nws.has(user); // false, user has been removed\n⬆ Back to Top\n\nWhat are the differences between WeakMap and Map\nThe main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it. Other differences are,\n\nMap can store any key type whereas WeakMap can store only collections of key objects\nWeakMap does not have size property unlike Map\nWeakMap does not have methods such as clear, keys, values, entries, forEach.\nWeakMap is not iterable.\n⬆ Back to Top\n\nList down the collection of methods available on WeakMap\nBelow are the list of methods available on WeakMap,\n\nset(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.\ndelete(key): Removes any value associated to the key.\nhas(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.\nget(key): Returns the value associated to the key, or undefined if there is none. Let's see the functionality of all the above methods in an example,\nvar weakMapObject = new WeakMap();\nvar firstObject = {};\nvar secondObject = {};\n// set(key, value)\nweakMapObject.set(firstObject, \"John\");\nweakMapObject.set(secondObject, 100);\nconsole.log(weakMapObject.has(firstObject)); //true\nconsole.log(weakMapObject.get(firstObject)); // John\nweakMapObject.delete(secondObject);\n⬆ Back to Top\n\nWhat is the purpose of uneval\nThe uneval() is an builtin function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let's see the below example to know more about it's functionality,\n\nvar a = 1;\nuneval(a); // returns a String containing 1\nuneval(function user() {}); // returns \"(function user(){})\"\nThe uneval() function has been deprecated. It is recommended to use toString() for functions and JSON.stringify() for other cases.\n\nfunction user() {}\nconsole.log(user.toString()); // returns \"(function user(){})\"\n⬆ Back to Top\n\nHow do you encode an URL\nThe encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ & = + $ #) characters.\n\nvar uri = \"https://mozilla.org/?x=шеллы\";\nvar encoded = encodeURI(uri);\nconsole.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\n⬆ Back to Top\n\nHow do you decode an URL\nThe decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().\n\nvar uri = \"https://mozilla.org/?x=шеллы\";\nvar encoded = encodeURI(uri);\nconsole.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\ntry {\n  console.log(decodeURI(encoded)); // \"https://mozilla.org/?x=шеллы\"\n} catch (e) {\n  // catches a malformed URI\n  console.error(e);\n}\n⬆ Back to Top\n\nHow do you print the contents of web page\nThe window object provides a print() method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let's see the usage of print method in an example,\n\n<input type=\"button\" value=\"Print\" onclick=\"window.print()\" />\nNote: In most browsers, it will block while the print dialog is open.\n\n⬆ Back to Top\n\nWhat is the difference between uneval and eval\nThe uneval function returns the source of a given object; whereas the eval function does the opposite, by evaluating that source code in a different memory area. Let's see an example to clarify the difference,\n\nvar msg = uneval(function greeting() {\n  return \"Hello, Good morning\";\n});\nvar greeting = eval(msg);\ngreeting(); // returns \"Hello, Good morning\"\n⬆ Back to Top\n\nWhat is an anonymous function\nAn anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,\n\nfunction (optionalParameters) {\n  //do something\n}\n\nconst myFunction = function(){ //Anonymous function assigned to a variable\n  //do something\n};\n\n[1, 2, 3].map(function(element){ //Anonymous function used as a callback function\n  //do something\n});\nLet's see the above anonymous function in an example,\n\nvar x = function (a, b) {\n  return a * b;\n};\nvar z = x(5, 10);\nconsole.log(z); // 50\n⬆ Back to Top\n\nWhat is the precedence order between local and global variables\nA local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.\n\nvar msg = \"Good morning\";\nfunction greeting() {\n  msg = \"Good Evening\";\n  console.log(msg); // Good Evening\n}\ngreeting();\n⬆ Back to Top\n\nWhat are javascript accessors\nECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the get keyword whereas Setters uses the set keyword.\n\nvar user = {\n  firstName: \"John\",\n  lastName: \"Abraham\",\n  language: \"en\",\n  get lang() {\n    return this.language;\n  },\n  set lang(lang) {\n    this.language = lang;\n  },\n};\nconsole.log(user.lang); // getter access lang as en\nuser.lang = \"fr\";\nconsole.log(user.lang); // setter used to set lang as fr\n⬆ Back to Top\n\nHow do you define property on Object constructor\nThe Object.defineProperty() static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let's see an example to know how to define property,\n\nconst newObject = {};\n\nObject.defineProperty(newObject, \"newProperty\", {\n  value: 100,\n  writable: false,\n});\n\nconsole.log(newObject.newProperty); // 100\n\nnewObject.newProperty = 200; // It throws an error in strict mode due to writable setting\n⬆ Back to Top\n\nWhat is the difference between get and defineProperty\nBoth have similar results unless you use classes. If you use get the property will be defined on the prototype of the object whereas using Object.defineProperty() the property will be defined on the instance it is applied to.\n\n⬆ Back to Top\n\nWhat are the advantages of Getters and Setters\nBelow are the list of benefits of Getters and Setters,\n\nThey provide simpler syntax\nThey are used for defining computed properties, or accessors in JS.\nUseful to provide equivalence relation between properties and methods\nThey can provide better data quality\nUseful for doing things behind the scenes with the encapsulated logic.\n⬆ Back to Top\n\nCan I add getters and setters using defineProperty method\nYes, You can use the Object.defineProperty() method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,\n\nvar obj = { counter: 0 };\n\n// Define getters\nObject.defineProperty(obj, \"increment\", {\n  get: function () {\n    this.counter++;\n    return this.counter;\n  },\n});\nObject.defineProperty(obj, \"decrement\", {\n  get: function () {\n    this.counter--;\n    return this.counter;\n  },\n});\n\n// Define setters\nObject.defineProperty(obj, \"add\", {\n  set: function (value) {\n    this.counter += value;\n  },\n});\nObject.defineProperty(obj, \"subtract\", {\n  set: function (value) {\n    this.counter -= value;\n  },\n});\n\nobj.add = 10;\nobj.subtract = 5;\nconsole.log(obj.increment); //6\nconsole.log(obj.decrement); //5\n⬆ Back to Top\n\nWhat is the purpose of switch-case\nThe switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case statement is going to be more convenient than if-else statements. The syntax would be as below,\n\nswitch (expression)\n{\n    case value1:\n        statement1;\n        break;\n    case value2:\n        statement2;\n        break;\n    .\n    .\n    case valueN:\n        statementN;\n        break;\n    default:\n        statementDefault;\n}\nThe above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.\n\n⬆ Back to Top\n\nWhat are the conventions to be followed for the usage of switch case\nBelow are the list of conventions should be taken care,\n\nThe expression can be of type either number or string.\nDuplicate values are not allowed for the expression.\nThe default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.\nThe break statement is used inside the switch to terminate a statement sequence.\nThe break statement is optional. But if it is omitted, the execution will continue on into the next case.\n⬆ Back to Top\n\nWhat are primitive data types\nA primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of primitive data types.\n\nstring\nnumber\nboolean\nnull\nundefined\nbigint\nsymbol\n⬆ Back to Top\n\nWhat are the different ways to access object properties\nThere are 3 possible ways for accessing the property of an object.\n\nDot notation: It uses dot for accessing the properties\nobjectName.property;\nSquare brackets notation: It uses square brackets for property access\nobjectName[\"property\"];\nExpression notation: It uses expression in the square brackets\nobjectName[expression];\n⬆ Back to Top\n\nWhat are the function parameter rules\nJavaScript functions follow below rules for parameters,\n\nThe function definitions do not specify data types for parameters.\nDo not perform type checking on the passed arguments.\nDo not check the number of arguments received. i.e, The below function follows the above rules,\nfunction functionName(parameter1, parameter2, parameter3) {\n  console.log(parameter1); // 1\n}\nfunctionName(1);\n⬆ Back to Top\n\nWhat is an error object\nAn error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,\n\ntry {\n  greeting(\"Welcome\");\n} catch (err) {\n  console.log(err.name + \"<br>\" + err.message);\n}\n⬆ Back to Top\n\nWhen do you get a syntax error\nA SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax error\n\ntry {\n  eval(\"greeting('welcome)\"); // Missing ' will produce an error\n} catch (err) {\n  console.log(err.name);\n}\n⬆ Back to Top\n\nWhat are the different error names from error object\nThere are 7 different types of error names returned from error object,\n\nError Name\tDescription\nAggregateError\tAn error indicating that multiple errors occurred\nEvalError\tAn error has occurred in the eval() function\nRangeError\tAn error has occurred with a number \"out of range\"\nReferenceError\tAn error due to an illegal reference\nSyntaxError\tAn error due to a syntax error\nTypeError\tAn error due to a type error\nURIError\tAn error due to encodeURI()\n⬆ Back to Top\n\nWhat are the various statements in error handling\nBelow are the list of statements used in an error handling,\n\ntry: This statement is used to test a block of code for errors\ncatch: This statement is used to handle the error\nthrow: This statement is used to create custom errors.\nfinally: This statement is used to execute code after try and catch regardless of the result.\n⬆ Back to Top\n\nWhat are the two types of loops in javascript\nEntry Controlled loops: In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.\nExit Controlled Loops: In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.\n⬆ Back to Top\n\nWhat is nodejs\nNode.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google's V8 JavaScript engine and libuv library.\n\n⬆ Back to Top\n\nWhat is the Intl object\nThe Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.\n\n⬆ Back to Top\n\nHow do you perform language specific date and time formatting\nYou can use the Intl.DateTimeFormat object which is a constructor for objects that enable language-sensitive date and time formatting. Let's see this behavior with an example,\n\nvar date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));\nconsole.log(new Intl.DateTimeFormat(\"en-GB\").format(date)); // 07/08/2019\nconsole.log(new Intl.DateTimeFormat(\"en-AU\").format(date)); // 07/08/2019\n⬆ Back to Top\n\nWhat is an Iterator\nAn iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a next() method which returns an object with two properties: value (the next value in the sequence) and done (which is true if the last value in the sequence has been consumed).\n\n⬆ Back to Top\n\nHow does synchronous iteration works\nSynchronous iteration was introduced in ES6 and it works with below set of components,\n\nIterable: It is an object which can be iterated over via a method whose key is Symbol.iterator.\n\nIterator: It is an object returned by invoking [Symbol.iterator]() on an iterable. This iterator object wraps each iterated element in an object and returns it via next() method one by one.\n\nIteratorResult: It is an object returned by next() method. The object contains two properties; the value property contains an iterated element and the done property determines whether the element is the last element or not.\n\nLet's demonstrate synchronous iteration with an array as below\n\nconst iterable = [\"one\", \"two\", \"three\"];\nconst iterator = iterable[Symbol.iterator]();\nconsole.log(iterator.next()); // { value: 'one', done: false }\nconsole.log(iterator.next()); // { value: 'two', done: false }\nconsole.log(iterator.next()); // { value: 'three', done: false }\nconsole.log(iterator.next()); // { value: 'undefined, done: true }\n⬆ Back to Top\n\nWhat is the event loop\nThe event loop is a process that continuously monitors both the call stack and the event queue and checks whether or not the call stack is empty. If the call stack is empty and there are pending events in the event queue, the event loop dequeues the event from the event queue and pushes it to the call stack. The call stack executes the event, and any additional events generated during the execution are added to the end of the event queue.\n\nNote: The event loop allows Node.js to perform non-blocking I/O operations, even though JavaScript is single-threaded, by offloading operations to the system kernel whenever possible. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background.\n\n⬆ Back to Top\n\nWhat is the call stack\nCall Stack is a data structure for javascript interpreters to keep track of function calls(creates execution context) in the program. It has two major actions,\n\nWhenever you call a function for its execution, you are pushing it to the stack.\nWhenever the execution is completed, the function is popped out of the stack.\nLet's take an example and it's state representation in a diagram format\n\nfunction hungry() {\n  eatFruits();\n}\nfunction eatFruits() {\n  return \"I'm eating fruits\";\n}\n\n// Invoke the `hungry` function\nhungry();\nThe above code processed in a call stack as below,\n\nAdd the hungry() function to the call stack list and execute the code.\nAdd the eatFruits() function to the call stack list and execute the code.\nDelete the eatFruits() function from our call stack list.\nDelete the hungry() function from the call stack list since there are no items anymore.\nScreenshot\n\n⬆ Back to Top\n\nWhat is the event queue\nThe event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is also known as the Callback Queue or Macrotask Queue.\n\nWhenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API executes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of a promise is moved into the microtask queue).\n\nThe event loop constantly checks whether or not the call stack is empty. Once the call stack is empty and there is a callback in the event queue, the event loop moves the callback into the call stack. But if there is a callback in the microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue.\n\n⬆ Back to Top\n\nWhat is a decorator\nA decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define admin decorator for user class at design time,\n\nfunction admin(isAdmin) {\n   return function(target) {\n       target.isAdmin = isAdmin;\n   }\n}\n\n@admin(true)\nclass User() {\n}\nconsole.log(User.isAdmin); //true\n\n @admin(false)\n class User() {\n }\n console.log(User.isAdmin); //false\n⬆ Back to Top\n\nWhat are the properties of the Intl object\nBelow are the list of properties available on the Intl object,\n\nCollator: These are the objects that enable language-sensitive string comparison.\nDateTimeFormat: These are the objects that enable language-sensitive date and time formatting.\nListFormat: These are the objects that enable language-sensitive list formatting.\nNumberFormat: Objects that enable language-sensitive number formatting.\nPluralRules: Objects that enable plural-sensitive formatting and language-specific rules for plurals.\nRelativeTimeFormat: Objects that enable language-sensitive relative time formatting.\n⬆ Back to Top\n\nWhat is an Unary operator\nThe unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let's see this behavior in an action.\n\nvar x = \"100\";\nvar y = +x;\nconsole.log(typeof x, typeof y); // string, number\n\nvar a = \"Hello\";\nvar b = +a;\nconsole.log(typeof a, typeof b, b); // string, number, NaN\n⬆ Back to Top\n\nHow do you sort elements in an array\nThe sort() method is used to sort the elements of an array in place and returns the sorted array. The default sort order is ascending, based on the string Unicode order. The example usage would be as below,\n\nvar months = [\"Aug\", \"Sep\", \"Jan\", \"June\"];\nmonths.sort();\nconsole.log(months); //  [\"Aug\", \"Jan\", \"June\", \"Sep\"]\nBeware: sort() is changing the original array.\n\n⬆ Back to Top\n\nWhat is the purpose of compareFunction while sorting arrays\nThe compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.\n\nLet's take an example to see the usage of compareFunction,\n\nlet numbers = [1, 2, 5, 3, 4];\nnumbers.sort((a, b) => b - a);\nconsole.log(numbers); // [5, 4, 3, 2, 1]\n⬆ Back to Top\n\nHow do you reverse an array\nYou can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in descending order. Let's see the usage of reverse() method in an example,\n\nlet numbers = [1, 2, 5, 3, 4];\nnumbers.sort((a, b) => b - a);\nnumbers.reverse();\nconsole.log(numbers); // [1, 2, 3, 4 ,5]\n⬆ Back to Top\n\nHow do you find the min and max values in an array\nYou can use Math.min and Math.max methods on array variables to find the minimum and maximum elements within an array. Let's create two functions to find the min and max value with in an array,\n\nvar marks = [50, 20, 70, 60, 45, 30];\nfunction findMin(arr) {\n  return Math.min.apply(null, arr);\n}\nfunction findMax(arr) {\n  return Math.max.apply(null, arr);\n}\n\nconsole.log(findMin(marks));\nconsole.log(findMax(marks));\n⬆ Back to Top\n\nHow do you find the min and max values without Math functions\nYou can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let's create those functions to find min and max values,\n\nvar marks = [50, 20, 70, 60, 45, 30];\nfunction findMin(arr) {\n  var length = arr.length;\n  var min = Infinity;\n  while (length--) {\n    if (arr[length] < min) {\n      min = arr[length];\n    }\n  }\n  return min;\n}\n\nfunction findMax(arr) {\n  var length = arr.length;\n  var max = -Infinity;\n  while (length--) {\n    if (arr[length] > max) {\n      max = arr[length];\n    }\n  }\n  return max;\n}\n\nconsole.log(findMin(marks));\nconsole.log(findMax(marks));\n⬆ Back to Top\n\nWhat is an empty statement and purpose of it\nThe empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it's usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,\n\n// Initialize an array a\nfor (let i = 0; i < a.length; a[i++] = 0);\n⬆ Back to Top\n\nHow do you get the metadata of a module\nYou can use the import.meta object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module's URL. In browsers, you might get different meta data than NodeJS.\n\n<script type=\"module\" src=\"welcome-module.js\"></script>;\nconsole.log(import.meta); // { url: \"file:///home/user/welcome-module.js\" }\n⬆ Back to Top\n\nWhat is the comma operator\nThe comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,\n\nvar x = 1;\nx = (x++, x);\n\nconsole.log(x); // 2\n⬆ Back to Top\n\nWhat is the advantage of the comma operator\nIt is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a for loop. For example, the below for loop uses multiple expressions in a single location using comma operator,\n\nfor (var a = 0, b =10; a <= 10; a++, b--)\nYou can also use the comma operator in a return statement where it processes before returning.\n\nfunction myFunction() {\n  var a = 1;\n  return (a += 10), a; // 11\n}\n⬆ Back to Top\n\nWhat is typescript\nTypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes and many other features, and compiles to plain JavaScript. Angular is built entirely in TypeScript and it is used as the primary language there. You can install it globally as\n\nnpm install -g typescript\nLet's see a simple example of TypeScript usage,\n\nfunction greeting(name: string): string {\n  return \"Hello, \" + name;\n}\n\nlet user = \"Sudheer\";\n\nconsole.log(greeting(user));\nThe greeting method allows only string type as argument.\n\n⬆ Back to Top\n\nWhat are the differences between javascript and typescript\nBelow are the list of differences between javascript and typescript,\n\nfeature\ttypescript\tjavascript\nLanguage paradigm\tObject oriented programming language\tMulti-paradigm language\nTyping support\tSupports static typing\tDynamic typing\nModules\tSupported\tNot supported\nInterface\tIt has interfaces concept\tDoesn't support interfaces\nOptional parameters\tFunctions support optional parameters\tNo support of optional parameters for functions\n⬆ Back to Top\n\nWhat are the advantages of typescript over javascript\nBelow are some of the advantages of typescript over javascript,\n\nTypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.\nTypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.\nTypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.\n⬆ Back to Top\n\nWhat is an object initializer\nAn object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.\n\nvar initObject = { a: \"John\", b: 50, c: {} };\n\nconsole.log(initObject.a); // John\n⬆ Back to Top\n\nWhat is a constructor method\nThe constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,\n\nclass Employee {\n  constructor() {\n    this.name = \"John\";\n  }\n}\n\nvar employeeObject = new Employee();\n\nconsole.log(employeeObject.name); // John\n⬆ Back to Top\n\nWhat happens if you write constructor more than once in a class\nThe \"constructor\" in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a SyntaxError error.\n\n class Employee {\n   constructor() {\n     this.name = \"John\";\n   }\n   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor\n     this.age = 30;\n   }\n }\n\n var employeeObject = new Employee();\n\n console.log(employeeObject.name);\nThis constructor is called by using the special function call new (see example above).\n\n⬆ Back to Top\n\nHow do you call the constructor of a parent class\nYou can use the super keyword to call the constructor of a parent class. Remember that super() must be called before using this reference. Otherwise it will cause a reference error. Let's the usage of it,\n\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n⬆ Back to Top\n\nHow do you get the prototype of an object\nYou can use the Object.getPrototypeOf(obj) method to return the prototype of the specified object. i.e. The value of the internal prototype property. If there are no inherited properties then null value is returned.\n\nconst newPrototype = {};\nconst newObject = Object.create(newPrototype);\n\nconsole.log(Object.getPrototypeOf(newObject) === newPrototype); // true\n⬆ Back to Top\n\nWhat happens If I pass string type for getPrototype method\nIn ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter will be coerced to an Object.\n\n// ES5\nObject.getPrototypeOf(\"James\"); // TypeError: \"James\" is not an object\n// ES2015\nObject.getPrototypeOf(\"James\"); // String.prototype\n⬆ Back to Top\n\nHow do you set the prototype of one object to another\nYou can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,\n\nObject.setPrototypeOf(Square.prototype, Rectangle.prototype);\nObject.setPrototypeOf({}, null);\n⬆ Back to Top\n\nHow do you check whether an object can be extended or not\nThe Object.isExtensible() method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.\n\nconst newObject = {};\nconsole.log(Object.isExtensible(newObject)); //true\nNote: By default, all the objects are extendable. i.e, The new properties can be added or modified.\n\n⬆ Back to Top\n\nHow do you prevent an object from being extend\nThe Object.preventExtensions() method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let's see the usage of this property,\n\nconst newObject = {};\nObject.preventExtensions(newObject); // NOT extendable\n\ntry {\n  Object.defineProperty(newObject, \"newProperty\", {\n    // Adding new property\n    value: 100,\n  });\n} catch (e) {\n  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible\n}\n⬆ Back to Top\n\nWhat are the different ways to make an object non-extensible\nYou can mark an object non-extensible in 3 ways,\n\nObject.preventExtensions\nObject.seal\nObject.freeze\nvar newObject = {};\n\nObject.preventExtensions(newObject); // Prevent objects are non-extensible\nObject.isExtensible(newObject); // false\n\nvar sealedObject = Object.seal({}); // Sealed objects are non-extensible\nObject.isExtensible(sealedObject); // false\n\nvar frozenObject = Object.freeze({}); // Frozen objects are non-extensible\nObject.isExtensible(frozenObject); // false\n⬆ Back to Top\n\nHow do you define multiple properties on an object\nThe Object.defineProperties() method is used to define new or modify existing properties directly on an object and returning the object. Let's define multiple properties on an empty object,\n\nconst newObject = {};\n\nObject.defineProperties(newObject, {\n  newProperty1: {\n    value: \"John\",\n    writable: true,\n  },\n  newProperty2: {},\n});\n⬆ Back to Top\n\nWhat is the MEAN stack\nThe MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.\n\n⬆ Back to Top\n\nWhat is obfuscation in javascript\nObfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it. Let's see the below function before Obfuscation,\n\nfunction greeting() {\n  console.log(\"Hello, welcome to JS world\");\n}\nAnd after the code Obfuscation, it would be appeared as below,\n\neval(\n  (function (p, a, c, k, e, d) {\n    e = function (c) {\n      return c;\n    };\n    if (!\"\".replace(/^/, String)) {\n      while (c--) {\n        d[c] = k[c] || c;\n      }\n      k = [\n        function (e) {\n          return d[e];\n        },\n      ];\n      e = function () {\n        return \"\\\\w+\";\n      };\n      c = 1;\n    }\n    while (c--) {\n      if (k[c]) {\n        p = p.replace(new RegExp(\"\\\\b\" + e(c) + \"\\\\b\", \"g\"), k[c]);\n      }\n    }\n    return p;\n  })(\n    \"2 1(){0.3('4, 7 6 5 8')}\",\n    9,\n    9,\n    \"console|greeting|function|log|Hello|JS|to|welcome|world\".split(\"|\"),\n    0,\n    {}\n  )\n);\n⬆ Back to Top\n\nWhy do you need Obfuscation\nBelow are the few reasons for Obfuscation,\n\nThe Code size will be reduced. So data transfers between server and client will be fast.\nIt hides the business logic from outside world and protects the code from others\nReverse engineering is highly difficult\nThe download time will be reduced\n⬆ Back to Top\n\nWhat is Minification\nMinification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality. It is also a type of obfuscation .\n\n⬆ Back to Top\n\nWhat are the advantages of minification\nNormally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,\n\nDecreases loading times of a web page\nSaves bandwidth usages\n⬆ Back to Top\n\nWhat are the differences between obfuscation and Encryption\nBelow are the main differences between obfuscation and encryption,\n\nFeature\tObfuscation\tEncryption\nDefinition\tChanging the form of any data in any other form\tChanging the form of information to an unreadable format by using a key\nA key to decode\tIt can be decoded without any key\tIt is required\nTarget data format\tIt will be converted to a complex form\tConverted into an unreadable format\n⬆ Back to Top\n\nWhat are the common tools used for minification\nThere are many online/offline tools to minify the javascript files,\n\nGoogle's Closure Compiler\nUglifyJS2\njsmin\njavascript-minifier.com/\nprettydiff.com\n⬆ Back to Top\n\nHow do you perform form validation using javascript\nJavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted. Lets' perform user login in an html form,\n\n<form name=\"myForm\" onsubmit=\"return validateForm()\" method=\"post\">\n  User name:\n  <input type=\"text\" name=\"uname\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\nAnd the validation on user login is below,\n\nfunction validateForm() {\n  var x = document.forms[\"myForm\"][\"uname\"].value;\n  if (x == \"\") {\n    alert(\"The username shouldn't be empty\");\n    return false;\n  }\n}\n⬆ Back to Top\n\nHow do you perform form validation without javascript\nYou can perform HTML form validation automatically without using javascript. The validation enabled by applying the required attribute to prevent form submission when the input is empty.\n\n<form method=\"post\">\n  <input type=\"text\" name=\"uname\" required />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\nNote: Automatic form validation does not work in Internet Explorer 9 or earlier.\n\n⬆ Back to Top\n\nWhat are the DOM methods available for constraint validation\nThe below DOM methods are available for constraint validation on an invalid input,\n\ncheckValidity(): It returns true if an input element contains valid data.\nsetCustomValidity(): It is used to set the validationMessage property of an input element. Let's take an user login form with DOM validations\nfunction myFunction() {\n  var userName = document.getElementById(\"uname\");\n  if (!userName.checkValidity()) {\n    document.getElementById(\"message\").innerHTML =\n      userName.validationMessage;\n  } else {\n    document.getElementById(\"message\").innerHTML =\n      \"Entered a valid username\";\n  }\n}\n⬆ Back to Top\n\nWhat are the available constraint validation DOM properties\nBelow are the list of some of the constraint validation DOM properties available,\n\nvalidity: It provides a list of boolean properties related to the validity of an input element.\nvalidationMessage: It displays the message when the validity is false.\nwillValidate: It indicates if an input element will be validated or not.\n⬆ Back to Top\n\nWhat are the validity properties\nThe validity property of an input element provides a set of properties related to the validity of data.\n\ncustomError: It returns true, if a custom validity message is set.\npatternMismatch: It returns true, if an element's value does not match its pattern attribute.\nrangeOverflow: It returns true, if an element's value is greater than its max attribute.\nrangeUnderflow: It returns true, if an element's value is less than its min attribute.\nstepMismatch: It returns true, if an element's value is invalid according to step attribute.\ntooLong: It returns true, if an element's value exceeds its maxLength attribute.\ntypeMismatch: It returns true, if an element's value is invalid according to type attribute.\nvalueMissing: It returns true, if an element with a required attribute has no value.\nvalid: It returns true, if an element's value is valid.\n⬆ Back to Top\n\nGive an example usage of the rangeOverflow property\nIf an element's value is greater than its max attribute then the rangeOverflow property is true. For example, the below form submission throws an error if the value is more than 100,\n\n<input id=\"age\" type=\"number\" max=\"100\" />\n<button onclick=\"myOverflowFunction()\">OK</button>\nfunction myOverflowFunction() {\n  if (document.getElementById(\"age\").validity.rangeOverflow) {\n    alert(\"The mentioned age is not allowed\");\n  }\n}\n⬆ Back to Top\n\nAre enums available in javascript\nNo, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,\n\nvar DaysEnum = Object.freeze({\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...})\n⬆ Back to Top\n\nWhat is an enum\nAn enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.\n\nenum Color {\n RED, GREEN, BLUE\n}\n⬆ Back to Top\n\nHow do you list all properties of an object\nYou can use the Object.getOwnPropertyNames() method which returns an array of all properties found directly in a given object. Let's see the usage of this in an example below:\n\nconst newObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log(Object.getOwnPropertyNames(newObject));\n[\"a\", \"b\", \"c\"];\n⬆ Back to Top\n\nHow do you get property descriptors of an object\nYou can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given object. The example usage of this method is below,\n\nconst newObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\nconst descriptorsObject = Object.getOwnPropertyDescriptors(newObject);\nconsole.log(descriptorsObject.a.writable); //true\nconsole.log(descriptorsObject.a.configurable); //true\nconsole.log(descriptorsObject.a.enumerable); //true\nconsole.log(descriptorsObject.a.value); // 1\n⬆ Back to Top\n\nWhat are the attributes provided by a property descriptor\nA property descriptor is a record which has the following attributes\n\nvalue: The value associated with the property\nwritable: Determines whether the value associated with the property can be changed or not\nconfigurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.\nenumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.\nset: A function which serves as a setter for the property\nget: A function which serves as a getter for the property\n⬆ Back to Top\n\nHow do you extend classes\nThe extends keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,\n\nclass ChildClass extends ParentClass { ... }\nLet's take an example of Square subclass from Polygon parent class,\n\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n⬆ Back to Top\n\nHow do I modify the url without reloading the page\nThe window.location.href property will be helpful to modify the url but it reloads the page. HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,\n\nwindow.history.pushState(\"page2\", \"Title\", \"/page2.html\");\nThis mechanism is used by routing libraries of frameworks like React and Angular in order to simulate the behaviour of a multi-page-website, even though they are only SPA (Single Page Applications).\n\n⬆ Back to Top\n\nHow do you check whether or not an array includes a particular value\nThe Array#includes() method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array.\n\nvar numericArray = [1, 2, 3, 4];\nconsole.log(numericArray.includes(3)); // true\n\nvar stringArray = [\"green\", \"yellow\", \"blue\"];\nconsole.log(stringArray.includes(\"blue\")); //true\n⬆ Back to Top\n\nHow do you compare scalar arrays\nYou can use length and every method of arrays to compare two scalars (compared directly using ===) arrays. The combination of these expressions can give the expected result,\n\nconst arrayFirst = [1, 2, 3, 4, 5];\nconst arraySecond = [1, 2, 3, 4, 5];\nconsole.log(\n  arrayFirst.length === arraySecond.length &&\n    arrayFirst.every((value, index) => value === arraySecond[index])\n); // true\nIf you would like to compare arrays irrespective of order then you should sort them before,\n\nconst arrayFirst = [2, 3, 1, 4, 5];\nconst arraySecond = [1, 2, 3, 4, 5];\nconsole.log(\n  arrayFirst.length === arraySecond.length &&\n    arrayFirst\n      .sort()\n      .every((value, index) => value === arraySecond[index])\n); //true\n⬆ Back to Top\n\nHow to get the value from get parameters\nThe new URL() object accepts the url string and searchParams property of this object can be used to access the get parameters.\n\nlet urlString = \"http://www.some-domain.com/about.html?x=1&y=2&z=3\"; //window.location.href\nlet url = new URL(urlString);\nlet parameterZ = url.searchParams.get(\"z\");\nconsole.log(parameterZ); // 3\n⬆ Back to Top\n\nHow do you print numbers with commas as thousand separators\nYou can use the Number.prototype.toLocaleString() method which returns a string with a language-sensitive representation such as thousand separator, currency etc. of this number.\n\nfunction convertToThousandFormat(x) {\n  return x.toLocaleString(); // 12,345.679\n}\n\nconsole.log(convertToThousandFormat(12345.6789));\n⬆ Back to Top\n\nWhat is the difference between java and javascript\nBoth are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format,\n\nFeature\tJava\tJavaScript\nTyped\tIt's a strongly typed language\tIt's a dynamic typed language\nParadigm\tObject oriented programming\tPrototype based programming\nScoping\tBlock scoped\tFunction-scoped, block scoped since ES6\nConcurrency\tThread based\tevent based\n⬆ Back to Top\n\nDoes JavaScript support namespaces\nJavaScript doesn’t support namespaces by default. So if you create any element (function, method, object, variable) then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without any namespace,\n\nfunction func1() {\n  console.log(\"This is a first definition\");\n}\nfunction func1() {\n  console.log(\"This is a second definition\");\n}\nfunc1(); // This is a second definition\nIt always calls the second function definition. In this case, namespaces will solve the name collision problem.\n\n⬆ Back to Top\n\nHow do you declare a namespace\nEven though JavaScript lacks namespaces, we can use Objects, an IIFE (Immediately Invoked Function Expression) or let/const to create namespaces.\n\nUsing Object Literal Notation: Let's wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notation\n\nvar namespaceOne = {\n    function func1() {\n        console.log(\"This is a first definition\");\n    }\n}\nvar namespaceTwo = {\n      function func1() {\n          console.log(\"This is a second definition\");\n      }\n  }\nnamespaceOne.func1(); // This is a first definition\nnamespaceTwo.func1(); // This is a second definition\nUsing IIFE (Immediately invoked function expression): The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.\n\n(function () {\n  function fun1() {\n    console.log(\"This is a first definition\");\n  }\n  fun1();\n})();\n\n(function () {\n  function fun1() {\n    console.log(\"This is a second definition\");\n  }\n  fun1();\n})();\nUsing a block and a let/const declaration: In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.\n\n{\n  let myFunction = function fun1() {\n    console.log(\"This is a first definition\");\n  };\n  myFunction();\n}\n//myFunction(): ReferenceError: myFunction is not defined.\n\n{\n  let myFunction = function fun1() {\n    console.log(\"This is a second definition\");\n  };\n  myFunction();\n}\n//myFunction(): ReferenceError: myFunction is not defined.\n⬆ Back to Top\n\nHow do you invoke javascript code in an iframe from the parent page\nInitially iFrame needs to be accessed using either document.getElementBy or window.frames. After that contentWindow property of iFrame gives the access for targetFunction\n\ndocument.getElementById(\"targetFrame\").contentWindow.targetFunction();\nwindow.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox\n⬆ Back to Top\n\nHow do you get the timezone offset of a date object\nYou can use the getTimezoneOffset method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTC\n\nvar offset = new Date().getTimezoneOffset();\nconsole.log(offset); // -480\n⬆ Back to Top\n\nHow do you load CSS and JS files dynamically\nYou can create both link and script elements in the DOM and append them as child to head tag. Let's create a function to add script and style resources as below,\n\nfunction loadAssets(filename, filetype) {\n  if (filetype == \"css\") {\n    // External CSS file\n    var fileReference = document.createElement(\"link\");\n    fileReference.setAttribute(\"rel\", \"stylesheet\");\n    fileReference.setAttribute(\"type\", \"text/css\");\n    fileReference.setAttribute(\"href\", filename);\n  } else if (filetype == \"js\") {\n    // External JavaScript file\n    var fileReference = document.createElement(\"script\");\n    fileReference.setAttribute(\"type\", \"text/javascript\");\n    fileReference.setAttribute(\"src\", filename);\n  }\n  if (typeof fileReference != \"undefined\")\n    document.getElementsByTagName(\"head\")[0].appendChild(fileReference);\n}\n⬆ Back to Top\n\nWhat are the different methods to find HTML elements in DOM\nIf you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,\n\ndocument.getElementById(id): It finds an element by Id\ndocument.getElementsByTagName(name): It finds an element by tag name (returns an node list)\ndocument.getElementsByClassName(name): It finds an element by class name (returns an node list)\ndocument.querySelector(cssSelector): It finds an element by css selector\ndocument.querySelectorAll(cssSelector): It finds all elements by css selector (returns a node list)\n⬆ Back to Top\n\nWhat is jQuery\njQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using jQuery as below,\n\n$(document).ready(function () {\n  // It selects the document and apply the function on page load\n  alert(\"Welcome to jQuery world\");\n});\nNote: You can download it from jquery's official site or install it from CDNs, like google.\n\n⬆ Back to Top\n\nWhat is V8 JavaScript engine\nV8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. Note: It can run standalone, or can be embedded into any C++ application.\n\n⬆ Back to Top\n\nWhy do we call javascript as dynamic language\nJavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.\n\nlet age = 50; // age is a number now\nage = \"old\"; // age is a string now\nage = true; // age is a boolean\n⬆ Back to Top\n\nWhat is a void operator\nThe void operator evaluates the given expression and then returns undefined (i.e, without returning value). The syntax would be as below,\n\nvoid expression;\nvoid expression;\nLet's display a message without any redirection or reload\n\n<a href=\"javascript:void(alert('Welcome to JS world'))\">\n  Click here to see a message\n</a>\nNote: This operator is often used to obtain the undefined primitive value, using void(0). Also it can be used to call asynchronous functions without waiting for the result.\n\n⬆ Back to Top\n\nHow to set the cursor to wait\nThe cursor can be set to wait in JavaScript by using the property cursor. Let's perform this behavior on page load using the below function.\n\nfunction myFunction() {\n  window.document.body.style.cursor = \"wait\";\n}\nand this function invoked on page load\n\n<body onload=\"myFunction()\"></body>\n⬆ Back to Top\n\nHow do you create an infinite loop\nYou can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,\n\nfor (;;) {}\nwhile (true) {}\n⬆ Back to Top\n\nWhy do you need to avoid with statement\nJavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let's take an example where it is used to avoid redundancy when accessing an object several times.\n\na.b.c.greeting = \"welcome\";\na.b.c.age = 32;\nUsing with it turns this into:\n\nwith (a.b.c) {\n  greeting = \"welcome\";\n  age = 32;\n}\nBut this with statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.\n\n⬆ Back to Top\n\nWhat is the output of the following for loops\nfor (var i = 0; i < 4; i++) {\n  // global scope\n  setTimeout(() => console.log(i));\n}\n\nfor (let i = 0; i < 4; i++) {\n  // block scope\n  setTimeout(() => console.log(i));\n}\nThe output of the above for loops is 4 4 4 4 and 0 1 2 3\n\nExplanation: Due to the event queue/loop of javascript, the setTimeout callback function is called after the loop has been executed. Since the variable i is declared with the var keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the second loop is 4 4 4 4.\n\nWhereas in the second loop, the variable i is declared as the let keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is 0 1 2 3.\n\n⬆ Back to Top\n\nList down some of the features of ES6\nBelow are the list of some new features of ES6,\n\nSupport for constants or immutable variables\nBlock-scope support for variables, constants and functions\nArrow functions\nDefault parameters\nRest and Spread Parameters\nTemplate Literals\nMulti-line Strings\nDestructuring Assignment\nEnhanced Object Literals\nPromises\nClasses\nModules\n⬆ Back to Top\n\nWhat is ES6\nES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.\n\n⬆ Back to Top\n\nCan I redeclare let and const variables\nNo, you cannot redeclare let and const variables. If you do, it throws below error\n\nUncaught SyntaxError: Identifier 'someVariable' has already been declared\nExplanation: The variable declaration with var keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the same scope for both var and let/const variables.\n\nvar name = \"John\";\nfunction myFunc() {\n  var name = \"Nick\";\n  var name = \"Abraham\"; // Re-assigned in the same function block\n  alert(name); // Abraham\n}\nmyFunc();\nalert(name); // John\nThe block-scoped multi-declaration throws syntax error,\n\nlet name = \"John\";\nfunction myFunc() {\n  let name = \"Nick\";\n  let name = \"Abraham\"; // Uncaught SyntaxError: Identifier 'name' has already been declared\n  alert(name);\n}\n\nmyFunc();\nalert(name);\n⬆ Back to Top\n\nDoes the const variable make the value immutable\nNo, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can't assign another value later)\n\nconst userList = [];\nuserList.push(\"John\"); // Can mutate even though it can't re-assign\nconsole.log(userList); // ['John']\n⬆ Back to Top\n\nWhat are default parameters\nIn ES5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's compare the behavior with an examples,\n\n//ES5\nvar calculateArea = function (height, width) {\n  height = height || 50;\n  width = width || 60;\n\n  return width * height;\n};\nconsole.log(calculateArea()); //300\nThe default parameters makes the initialization more simpler,\n\n//ES6\nvar calculateArea = function (height = 50, width = 60) {\n  return width * height;\n};\n\nconsole.log(calculateArea()); //300\n⬆ Back to Top\n\nWhat are template literals\nTemplate literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes. In ES6, this feature enables using dynamic expressions as below,\n\nvar greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;\nIn ES5, you need break string like below,\n\nvar greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`\nNote: You can use multi-line strings and string interpolation features with template literals.\n\n⬆ Back to Top\n\nHow do you write multi-line strings in template literals\nIn ES5, you would have to use newline escape characters('\\n') and concatenation symbols(+) in order to get multi-line strings.\n\nconsole.log(\"This is string sentence 1\\n\" + \"This is string sentence 2\");\nWhereas in ES6, You don't need to mention any newline sequence character,\n\nconsole.log(`This is string sentence\n'This is string sentence 2`);\n⬆ Back to Top\n\nWhat are nesting templates\nThe nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,\n\nconst iconStyles = `icon ${\n  isMobilePlatform()\n    ? \"\"\n    : `icon-${user.isAuthorized ? \"submit\" : \"disabled\"}`\n}`;\nYou can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.\n\n//Without nesting templates\nconst iconStyles = `icon ${\n  isMobilePlatform()\n    ? \"\"\n    : user.isAuthorized\n    ? \"icon-submit\"\n    : \"icon-disabled\"\n}`;\n⬆ Back to Top\n\nWhat are tagged templates\nTagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this tagged template behavior of an IT professional skill set in an organization,\n\nvar user1 = \"John\";\nvar skill1 = \"JavaScript\";\nvar experience1 = 15;\n\nvar user2 = \"Kane\";\nvar skill2 = \"JavaScript\";\nvar experience2 = 5;\n\nfunction myInfoTag(strings, userExp, experienceExp, skillExp) {\n  var str0 = strings[0]; // \"Mr/Ms. \"\n  var str1 = strings[1]; // \" is a/an \"\n  var str2 = strings[2]; // \"in\"\n\n  var expertiseStr;\n  if (experienceExp > 10) {\n    expertiseStr = \"expert developer\";\n  } else if (skillExp > 5 && skillExp <= 10) {\n    expertiseStr = \"senior developer\";\n  } else {\n    expertiseStr = \"junior developer\";\n  }\n\n  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;\n}\n\nvar output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;\nvar output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;\n\nconsole.log(output1); // Mr/Ms. John is a/an expert developer in JavaScript\nconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript\n⬆ Back to Top\n\nWhat are raw strings\nES6 provides a raw strings feature using the String.raw() method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,\n\nvar calculationString = String.raw`The sum of numbers is \\n${\n  1 + 2 + 3 + 4\n}!`;\nconsole.log(calculationString); // The sum of numbers is \\n10!\nIf you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple lines\n\nvar calculationString = `The sum of numbers is \\n${1 + 2 + 3 + 4}!`;\nconsole.log(calculationString);\n// The sum of numbers is\n// 10!\nAlso, the raw property is available on the first argument to the tag function\n\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n}\n⬆ Back to Top\n\nWhat is destructuring assignment\nThe destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables. Let's get the month values from an array using destructuring assignment\n\nvar [one, two, three] = [\"JAN\", \"FEB\", \"MARCH\"];\n\nconsole.log(one); // \"JAN\"\nconsole.log(two); // \"FEB\"\nconsole.log(three); // \"MARCH\"\nand you can get user properties of an object using destructuring assignment,\n\nvar { name, age } = { name: \"John\", age: 32 };\n\nconsole.log(name); // John\nconsole.log(age); // 32\n⬆ Back to Top\n\nWhat are default values in destructuring assignment\nA variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an example for both arrays and object use cases,\n\nArrays destructuring:\n\nvar x, y, z;\n\n[x = 2, y = 4, z = 6] = [10];\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\nObjects destructuring:\n\nvar { x = 2, y = 4, z = 6 } = { x: 10 };\n\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n⬆ Back to Top\n\nHow do you swap variables in destructuring assignment\nIf you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number variables in array destructuring assignment,\n\nvar x = 10,\n  y = 20;\n\n[x, y] = [y, x];\nconsole.log(x); // 20\nconsole.log(y); // 10\n⬆ Back to Top\n\nWhat are enhanced object literals\nObject literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.\n\n//ES6\nvar x = 10,\n  y = 20;\nobj = { x, y };\nconsole.log(obj); // {x: 10, y:20}\n//ES5\nvar x = 10,\n  y = 20;\nobj = { x: x, y: y };\nconsole.log(obj); // {x: 10, y:20}\n⬆ Back to Top\n\nWhat are dynamic imports\nThe dynamic imports using import() function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in stage4 proposal. The main advantage of dynamic imports is reduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user experience. The syntax of dynamic imports would be as below,\n\nimport(\"./Module\").then((Module) => Module.method());\n⬆ Back to Top\n\nWhat are the use cases for dynamic imports\nBelow are some of the use cases of using dynamic imports over static imports,\n\nImport a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browser\n\nif (isLegacyBrowser()) {\n    import(···)\n    .then(···);\n}\nCompute the module specifier at runtime. For example, you can use it for internationalization.\n\nimport(`messages_${getLocale()}.js`).then(···);\nImport a module from within a regular script instead a module.\n\n⬆ Back to Top\n\nWhat are typed arrays\nTyped arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 12 Typed array types,\n\nInt8Array: An array of 8-bit signed integers\nUint8Array: An array of 8-bit unsigned integers\nUint8ClampedArray: An array of 8-bit unsigned integers clamped to 0-255\nInt16Array: An array of 16-bit signed integers\nUint16Array: An array of 16-bit unsigned integers\nInt32Array: An array of 32-bit signed integers\nUint32Array: An array of 32-bit unsigned integers\nBigInt64Array: An array of 64-bit signed BigInts\nBigUint64Array: An array of 64-bit unsigned BigInts\nFloat16Array: An array of 16-bit floating point numbers\nFloat32Array: An array of 32-bit floating point numbers\nFloat64Array: An array of 64-bit floating point numbers\nFor example, you can create an array of 8-bit signed integers as below\n\nconst a = new Int8Array();\n// You can pre-allocate n bytes\nconst bytes = 1024;\nconst a = new Int8Array(bytes);\n⬆ Back to Top\n\nWhat are the advantages of module loaders\nThe module loaders provides the below features,\n\nDynamic loading\nState isolation\nGlobal namespace isolation\nCompilation hooks\nNested virtualization\n⬆ Back to Top\n\nWhat is collation\nCollation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let's take comparison and sorting features,\n\nComparison:\nvar list = [\"ä\", \"a\", \"z\"]; // In German,  \"ä\" sorts with \"a\" Whereas in Swedish, \"ä\" sorts after \"z\"\nvar l10nDE = new Intl.Collator(\"de\");\nvar l10nSV = new Intl.Collator(\"sv\");\nconsole.log(l10nDE.compare(\"ä\", \"z\") === -1); // true\nconsole.log(l10nSV.compare(\"ä\", \"z\") === +1); // true\nSorting:\nvar list = [\"ä\", \"a\", \"z\"]; // In German,  \"ä\" sorts with \"a\" Whereas in Swedish, \"ä\" sorts after \"z\"\nvar l10nDE = new Intl.Collator(\"de\");\nvar l10nSV = new Intl.Collator(\"sv\");\nconsole.log(list.sort(l10nDE.compare)); // [ \"a\", \"ä\", \"z\" ]\nconsole.log(list.sort(l10nSV.compare)); // [ \"a\", \"z\", \"ä\" ]\n⬆ Back to Top\n\nWhat is for...of statement\nThe for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,\n\nlet arrayIterable = [10, 20, 30, 40, 50];\n\nfor (let value of arrayIterable) {\n  value++;\n  console.log(value); // 11 21 31 41 51\n}\n⬆ Back to Top\n\nWhat is the output of below spread operator array\n[...\"John Resig\"];\nThe output of the array is ['J', 'o', 'h', 'n', ' ', 'R', 'e', 's', 'i', 'g']\n\nExplanation: The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.\n\n⬆ Back to Top\n\nIs PostMessage secure\nYes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.\n\n⬆ Back to Top\n\nWhat are the problems with postmessage target origin as wildcard\nThe second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.\n\ntargetWindow.postMessage(message, \"*\");\n⬆ Back to Top\n\nHow do you avoid receiving postMessages from attackers\nSince the listener listens for any message, an attacker can trick the application by sending a message from the attacker’s origin, which gives an impression that the receiver received the message from the actual sender’s window. You can avoid this issue by validating the origin of the message on the receiver's end using the “message.origin” attribute.\n\nFor example, let's check the sender's origin http://www.some-sender.com on receiver side www.some-receiver.com,\n\n//Listener on http://www.some-receiver.com/\nwindow.addEventListener(\"message\", function(message){\n    if(/^http://www\\.some-sender\\.com$/.test(message.origin)){\n         console.log('You received the data from valid sender', message.data);\n   }\n});\n⬆ Back to Top\n\nCan I avoid using postMessages completely\nYou cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.\n\n⬆ Back to Top\n\nIs postMessages synchronous\nThe postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.\n\n⬆ Back to Top\n\nWhat paradigm is Javascript\nJavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.\n\n⬆ Back to Top\n\nWhat is the difference between internal and external javascript\nInternal JavaScript: It is the source code within the script tag. External JavaScript: The source code is stored in an external file(stored with .js extension) and referred with in the tag.\n\n⬆ Back to Top\n\nIs JavaScript faster than server side script\nYes, JavaScript is faster than server side scripts. Because JavaScript is a client-side script it does not require any web server’s help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.\n\n⬆ Back to Top\n\nHow do you get the status of a checkbox\nYou can apply the checked property on the selected checkbox in the DOM. If the value is true it means the checkbox is checked, otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below:\n\n<input type=\"checkbox\" id=\"checkboxname\" value=\"Agree\" />\nAgree the conditions\n<br />\nconsole.log(document.getElementById(‘checkboxname’).checked); // true or false\n⬆ Back to Top\n\nWhat is the purpose of double tilde operator\nThe double tilde operator(~~) is known as double NOT bitwise operator. This operator is a slightly quicker substitute for Math.floor().\n\n⬆ Back to Top\n\nHow do you convert character to ASCII code\nYou can use the String.prototype.charCodeAt() method to convert string characters to ASCII numbers. For example, let's find ASCII code for the first letter of 'ABC' string,\n\n\"ABC\".charCodeAt(0); // returns 65\nWhereas String.fromCharCode() method converts numbers to equal ASCII characters.\n\nString.fromCharCode(65, 66, 67); // returns 'ABC'\n⬆ Back to Top\n\nWhat is ArrayBuffer\nAn ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,\n\nlet buffer = new ArrayBuffer(16); // create a buffer of length 16\nalert(buffer.byteLength); // 16\nTo manipulate an ArrayBuffer, we need to use a “view” object.\n\n//Create a DataView referring to the buffer\nlet view = new DataView(buffer);\n⬆ Back to Top\n\nWhat is the output of below string expression\nconsole.log(\"Welcome to JS world\"[0]);\nThe output of the above expression is \"W\". Explanation: The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character \"W\" of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.\n\n⬆ Back to Top\n\nWhat is the purpose of Error object\nThe Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,\n\nnew Error([message[, fileName[, lineNumber]]])\nYou can throw user defined exceptions or errors using Error object in try...catch block as below,\n\ntry {\n  if (withdraw > balance)\n    throw new Error(\"Oops! You don't have enough balance\");\n} catch (e) {\n  console.log(e.name + \": \" + e.message);\n}\n⬆ Back to Top\n\nWhat is the purpose of EvalError object\nThe EvalError object indicates an error regarding the global eval() function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,\n\nnew EvalError([message[, fileName[, lineNumber]]])\nYou can throw EvalError with in try...catch block as below,\n\ntry {\n  throw new EvalError('Eval function error', 'someFile.js', 100);\n} catch (e) {\n  console.log(e.message, e.name, e.fileName);              // \"Eval function error\", \"EvalError\", \"someFile.js\"\n⬆ Back to Top\n\nWhat are the list of cases error thrown from non-strict mode to strict mode\nWhen you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the script\n\nWhen you use Octal syntax\nvar n = 022;\nUsing with statement\nWhen you use delete operator on a variable name\nUsing eval or arguments as variable or function argument name\nWhen you use newly reserved keywords\nWhen you declare a function in a block and access it from outside of the block\nif (someCondition) {\n  function f() {}\n}\nf(); // ReferenceError: f is not defined\nHence, the errors from above cases are helpful to avoid errors in development/production environments.\n\n⬆ Back to Top\n\nDo all objects have prototypes\nNo. All objects have prototypes except two exceptions:\n\nObject.prototype itself — This is the base object in the prototype chain, and its prototype is null.\nObjects created with **Object.create(null)** — These are deliberately created with no prototype, so they don’t inherit from Object.prototype.\nAll other standard objects do have a prototype.\n\n⬆ Back to Top\n\nWhat is the difference between a parameter and an argument\nParameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let's explain this with a simple function\n\nfunction myFunction(parameter1, parameter2, parameter3) {\n  console.log(arguments[0]); // \"argument1\"\n  console.log(arguments[1]); // \"argument2\"\n  console.log(arguments[2]); // \"argument3\"\n}\nmyFunction(\"argument1\", \"argument2\", \"argument3\");\n⬆ Back to Top\n\nWhat is the purpose of some method in arrays\nThe some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements,\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar odd = (element) => element % 2 !== 0;\n\nconsole.log(array.some(odd)); // true (the odd element exists)\n⬆ Back to Top\n\nHow do you combine two or more arrays\nThe concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,\n\narray1.concat(array2, array3, ..., arrayX)\nLet's take an example of array's concatenation with veggies and fruits arrays,\n\nvar veggies = [\"Tomato\", \"Carrot\", \"Cabbage\"];\nvar fruits = [\"Apple\", \"Orange\", \"Pears\"];\nvar veggiesAndFruits = veggies.concat(fruits);\nconsole.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears\n⬆ Back to Top\n\nWhat is the difference between Shallow and Deep copy\nThere are two ways to copy an object,\n\nShallow Copy: Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.\n\nExample\n\nvar empDetails = {\n  name: \"John\",\n  age: 25,\n  expertise: \"Software Developer\",\n};\nto create a duplicate\n\nvar empDetailsShallowCopy = empDetails; //Shallow copying!\nif we change some property value in the duplicate one like this:\n\nempDetailsShallowCopy.name = \"Johnson\";\nThe above statement will also change the name of empDetails, since we have a shallow copy. That means we're losing the original data as well.\n\nDeep copy: A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.\n\nExample\n\nvar empDetails = {\n  name: \"John\",\n  age: 25,\n  expertise: \"Software Developer\",\n};\nCreate a deep copy by using the properties from the original object into new variable\n\nvar empDetailsDeepCopy = {\n  name: empDetails.name,\n  age: empDetails.age,\n  expertise: empDetails.expertise,\n};\nNow if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails\n\n⬆ Back to Top\n\nHow do you create specific number of copies of a string\nThe repeat() method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification. Let's take an example of Hello string to repeat it 4 times,\n\n\"Hello\".repeat(4); // 'HelloHelloHelloHello'\nHow do you return all matching strings against a regular expression\nThe matchAll() method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,\n\nlet regexp = /Hello(\\d?)/g;\nlet greeting = \"Hello1Hello2Hello3\";\n\nlet greetingList = [...greeting.matchAll(regexp)];\n\nconsole.log(greetingList[0][0]); //Hello1\nconsole.log(greetingList[1][0]); //Hello2\nconsole.log(greetingList[2][0]); //Hello3\n⬆ Back to Top\n\nHow do you trim a string at the beginning or ending\nThe trim method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use trimStart/trimLeft and trimEnd/trimRight methods. Let's see an example of these methods on a greeting message,\n\nvar greeting = \"   Hello, Goodmorning!   \";\n\nconsole.log(greeting); // \"   Hello, Goodmorning!   \"\nconsole.log(greeting.trimStart()); // \"Hello, Goodmorning!   \"\nconsole.log(greeting.trimLeft()); // \"Hello, Goodmorning!   \"\n\nconsole.log(greeting.trimEnd()); // \"   Hello, Goodmorning!\"\nconsole.log(greeting.trimRight()); // \"   Hello, Goodmorning!\"\n⬆ Back to Top\n\nWhat is the output of below console statement with unary operator\nLet's take console statement with unary operator as given below,\n\nconsole.log(+\"Hello\"); // NaN\nThe output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.\n\n⬆ Back to Top\n\nDoes javascript uses mixins\nJavaScript does not have built-in support for mixins as a formal language feature. However, developers commonly implement mixins using various patterns to enable code reuse and composition.\n\nA mixin is a way to add reusable functionality from one or more objects into a class or another object, without using classical inheritance. It promotes object composition by combining behaviors or properties from different sources into a single destination.\n\nMixin Example using Object composition\n// Define a mixin\nconst canEat = {\n  eat() {\n    console.log(\"Eating...\");\n  }\n};\n\nconst canWalk = {\n  walk() {\n    console.log(\"Walking...\");\n  }\n};\n\nconst canRead = {\n  read() {\n    console.log(\"Reading...\");\n  }\n};\n\n// Create a class\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// Apply mixins\nObject.assign(Person.prototype, canEat, canWalk, canRead);\n\n// Use it\nconst person = new Person(\"Sudheer\");\nperson.eat();  // Output: Eating...\nperson.walk(); // Output: Walking...\nperson.read(); // Output: Reading...\nBenefits\nAvoids deep inheritance hierarchies\nEncourages composition over inheritance\nPromotes reusable and modular code\nModern JavaScript favors mixin alternatives like composition, delegation, higher-order functions, and class mixins to promote reusable and modular code. Libraries like Lodash offer utilities for object composition, while frameworks like Vue.js provide built-in mixin features to promote reusable and modular code.\n\n⬆ Back to Top\n\nWhat is a thunk function\nA thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let's take a synchronous example,\n\nconst add = (x, y) => x + y;\n\nconst thunk = () => add(2, 3);\n\nthunk(); // 5\n⬆ Back to Top\n\nWhat are asynchronous thunks\nThe asynchronous thunks are useful to make network requests. Let's see an example of network requests,\n\nfunction fetchData(fn) {\n  fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\n    .then((response) => response.json())\n    .then((json) => fn(json));\n}\n\nconst asyncThunk = function () {\n  return fetchData(function getData(data) {\n    console.log(data);\n  });\n};\n\nasyncThunk();\nThe getData function won't be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.\n\n⬆ Back to Top\n\nWhat is the output of below function calls\nCode snippet:\n\nconst circle = {\n  radius: 20,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius,\n};\nconsole.log(circle.diameter());\nconsole.log(circle.perimeter());\nOutput:\n\nThe output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The this keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.\n\n⬆ Back to Top\n\nHow to remove all line breaks from a string\nThe easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.\n\nfunction remove_linebreaks( var message ) {\n    return message.replace( /[\\r\\n]+/gm, \"\" );\n}\nIn the above expression, g and m are for global and multiline flags.\n\n⬆ Back to Top\n\nWhat is the difference between reflow and repaint\nA repaint occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A reflow involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.\n\n⬆ Back to Top\n\nWhat happens with negating an array\nNegating an array with ! character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return false.\n\nconsole.log(![]); // false\n⬆ Back to Top\n\nWhat happens if we add two arrays\nIf you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,\n\nconsole.log([\"a\"] + [\"b\"]); // \"ab\"\nconsole.log([] + []); // \"\"\nconsole.log(![] + []); // \"false\", because ![] returns false.\n⬆ Back to Top\n\nWhat is the output of prepend additive operator on falsy values\nIf you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \"\"), the falsy value converts to a number value zero. Let's display them on browser console as below,\n\nconsole.log(+null); // 0\nconsole.log(+undefined); // NaN\nconsole.log(+false); // 0\nconsole.log(+NaN); // NaN\nconsole.log(+\"\"); // 0\n⬆ Back to Top\n\nHow do you create self string using special characters\nThe self string can be formed with the combination of []()!+ characters. You need to remember the below conventions to achieve this pattern.\n\nSince Arrays are truthful values, negating the arrays will produce false: ![] === false\nAs per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === \"\"\nPrepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value '1': +(!(+[])) === 1\nBy applying the above rules, we can derive below conditions\n\n(![] + [] === \"false\" + !+[]) === 1;\nNow the character pattern would be created as below,\n\n      s               e               l               f\n ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^\n\n (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0]\n ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^\n(![] + [])[+!+[]+!+[]+!+[]] +\n(![] + [])[+!+[]+!+[]+!+[]+!+[]] +\n(![] + [])[+!+[]+!+[]] +\n(![] + [])[+[]]\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]\n⬆ Back to Top\n\nHow do you remove falsy values from an array\nYou can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and \"\") from the array.\n\nconst myArray = [false, null, 1, 5, undefined];\nmyArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x => x);\n⬆ Back to Top\n\nHow do you get unique values of an array\nYou can get unique values of an array with the combination of Set and rest expression/spread(...) syntax.\n\nconsole.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]\n⬆ Back to Top\n\nWhat is destructuring aliases\nSometimes you would like to have a destructured variable with a different name than the property name. In that case, you'll use a : newName to specify a name for the variable. This process is called destructuring aliases.\n\nconst obj = { x: 1 };\n// Grabs obj.x as as { otherName }\nconst { x: otherName } = obj;\n⬆ Back to Top\n\nHow do you map the array values without using map method\nYou can map the array values without using the map method by just using the from method of Array. Let's map city names from Countries array,\n\nconst countries = [\n  { name: \"India\", capital: \"Delhi\" },\n  { name: \"US\", capital: \"Washington\" },\n  { name: \"Russia\", capital: \"Moscow\" },\n  { name: \"Singapore\", capital: \"Singapore\" },\n  { name: \"China\", capital: \"Beijing\" },\n  { name: \"France\", capital: \"Paris\" },\n];\n\nconst cityNames = Array.from(countries, ({ capital }) => capital);\nconsole.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']\n⬆ Back to Top\n\nHow do you empty an array\nYou can empty an array quickly by setting the array length to zero.\n\nlet cities = [\"Singapore\", \"Delhi\", \"London\"];\ncities.length = 0; // cities becomes []\n⬆ Back to Top\n\nHow do you round numbers to certain decimals\nYou can round numbers to a certain number of decimals using toFixed method from native javascript.\n\nlet pie = 3.141592653;\npie = pie.toFixed(3); // 3.142\n⬆ Back to Top\n\nWhat is the easiest way to convert an array to an object\nYou can convert an array to an object with the same data using spread(...) operator.\n\nvar fruits = [\"banana\", \"apple\", \"orange\", \"watermelon\"];\nvar fruitsObject = { ...fruits };\nconsole.log(fruitsObject); // {0: \"banana\", 1: \"apple\", 2: \"orange\", 3: \"watermelon\"}\n⬆ Back to Top\n\nHow do you create an array with some data\nYou can create an array with some data or an array with the same values using fill method.\n\nvar newArray = new Array(5).fill(\"0\");\nconsole.log(newArray); // [\"0\", \"0\", \"0\", \"0\", \"0\"]\n⬆ Back to Top\n\nWhat are the placeholders from console object\nBelow are the list of placeholders available from console object,\n\n%o — It takes an object,\n%s — It takes a string,\n%d — It is used for a decimal or integer These placeholders can be represented in the console.log as below\nconst user = { name: \"John\", id: 1, city: \"Delhi\" };\nconsole.log(\n  \"Hello %s, your details %o are available in the object form\",\n  \"John\",\n  user\n); // Hello John, your details {name: \"John\", id: 1, city: \"Delhi\"} are available in object\n⬆ Back to Top\n\nIs it possible to add CSS to console messages\nYes, you can apply CSS styles to console messages similar to html text on the web page.\n\nconsole.log(\n  \"%c The text has blue color, with large font and red background\",\n  \"color: blue; font-size: x-large; background: red\"\n);\nThe text will be displayed as below, Screenshot\n\nNote: All CSS styles can be applied to console messages.\n\n⬆ Back to Top\n\nWhat is the purpose of dir method of console object\nThe console.dir() is used to display an interactive list of the properties of the specified JavaScript object as JSON.\n\nconst user = { name: \"John\", id: 1, city: \"Delhi\" };\nconsole.dir(user);\nThe user object displayed in JSON representation Screenshot\n\n⬆ Back to Top\n\nIs it possible to debug HTML elements in console\nYes, it is possible to get and debug HTML elements in the console just like inspecting elements.\n\nconst element = document.getElementsByTagName(\"body\")[0];\nconsole.log(element);\nIt prints the HTML element in the console,\n\nScreenshot\n\n⬆ Back to Top\n\nHow do you display data in a tabular format using console object\nThe console.table() is used to display data in the console in a tabular format to visualize complex arrays or objects.\n\nconst users = [\n  { name: \"John\", id: 1, city: \"Delhi\" },\n  { name: \"Max\", id: 2, city: \"London\" },\n  { name: \"Rod\", id: 3, city: \"Paris\" },\n];\nconsole.table(users);\nThe data visualized in a table format,\n\nScreenshot Not: Remember that console.table() is not supported in IE.\n\n⬆ Back to Top\n\nHow do you verify that an argument is a Number or not\nThe combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n⬆ Back to Top\n\nHow do you create copy to clipboard button\nYou need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.\n\ndocument.querySelector(\"#copy-button\").onclick = function () {\n  // Select the content\n  document.querySelector(\"#copy-input\").select();\n  // Copy to the clipboard\n  document.execCommand(\"copy\");\n};\n⬆ Back to Top\n\nWhat is the shortcut to get timestamp\nYou can use new Date().getTime() to get the current timestamp. There is an alternative shortcut to get the value.\n\nconsole.log(+new Date());\nconsole.log(Date.now());\n⬆ Back to Top\n\nHow do you flattening multi dimensional arrays\nFlattening bi-dimensional arrays is trivial with Spread operator.\n\nconst biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];\nconst flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\nBut you can make it work with multi-dimensional arrays by recursive calls,\n\nfunction flattenMultiArray(arr) {\n  const flattened = [].concat(...arr);\n  return flattened.some((item) => Array.isArray(item))\n    ? flattenMultiArray(flattened)\n    : flattened;\n}\nconst multiDimensionalArr = [\n  11,\n  [22, 33],\n  [44, [55, 66, [77, [88]], 99]],\n];\nconst flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\nAlso you can use the flat method of Array.\n\nconst arr = [1, [2, 3], 4, 5, [6, 7]];\nconst fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]\n\n// And for multiDimensional arrays\nconst multiDimensionalArr = [\n  11,\n  [22, 33],\n  [44, [55, 66, [77, [88]], 99]],\n];\nconst oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]\nconst towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]\nconst fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n⬆ Back to Top\n\nWhat is the easiest multi condition checking\nYou can use indexOf to compare input with multiple values instead of checking each value as one condition.\n\n// Verbose approach\nif (\n  input === \"first\" ||\n  input === 1 ||\n  input === \"second\" ||\n  input === 2\n) {\n  someFunction();\n}\n// Shortcut\nif ([\"first\", 1, \"second\", 2].indexOf(input) !== -1) {\n  someFunction();\n}\n⬆ Back to Top\n\nHow do you capture browser back button\nThe beforeunload event is triggered when the window, the document and its resources are about to be unloaded. This event is helpful to warn users about losing the current data and detect back button event.\n\nwindow.addEventListener(\"beforeunload\", () => {\n  console.log(\"Clicked browser back button\");\n});\nYou can also use popstate event to detect the browser back button. Note: The history entry has been activated using history.pushState method.\n\nwindow.addEventListener(\"popstate\", () => {\n  console.log(\"Clicked browser back button\");\n  box.style.backgroundColor = \"white\";\n});\n\nconst box = document.getElementById(\"div\");\n\nbox.addEventListener(\"click\", () => {\n  box.style.backgroundColor = \"blue\";\n  window.history.pushState({}, null, null);\n});\nIn the preceeding code, When the box element clicked, its background color appears in blue color and changed to while color upon clicking the browser back button using `popstate` event handler. The `state` property of `popstate` contains the copy of history entry's state object.\n\n **[⬆ Back to Top](#table-of-contents)**\nHow do you disable right click in the web page\nThe right click on the page can be disabled by returning false from the oncontextmenu attribute on the body element.\n\n<body oncontextmenu=\"return false;\"></body>\n⬆ Back to Top\n\nWhat are wrapper objects\nPrimitive Values like string,number and boolean don't have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.\n\nlet name = \"john\";\n\nconsole.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());\ni.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.\n\n⬆ Back to Top\n\nWhat is AJAX\nAJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.\n\n⬆ Back to Top\n\nWhat are the different ways to deal with Asynchronous Code\nBelow are the list of different ways to deal with Asynchronous code.\n\nCallbacks\nPromises\nAsync/await\nThird-party libraries such as async.js,bluebird etc\n⬆ Back to Top\n\nHow to cancel a fetch request\nUntil a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls. The basic flow of cancelling a fetch request would be as below,\n\nCreate an AbortController instance\nGet the signal property of an instance and pass the signal as a fetch option for signal\nCall the AbortController's abort property to cancel all fetches that use that signal For example, passing the same signal to multiple fetch calls will cancel all requests with that signal,\nconst controller = new AbortController();\nconst { signal } = controller;\n\nfetch(\"http://localhost:8000\", { signal })\n  .then((response) => {\n    console.log(`Request 1 is complete!`);\n  })\n  .catch((e) => {\n    if (e.name === \"AbortError\") {\n      // We know it's been canceled!\n    }\n  });\n\nfetch(\"http://localhost:8000\", { signal })\n  .then((response) => {\n    console.log(`Request 2 is complete!`);\n  })\n  .catch((e) => {\n    if (e.name === \"AbortError\") {\n      // We know it's been canceled!\n    }\n  });\n\n// Wait 2 seconds to abort both requests\nsetTimeout(() => controller.abort(), 2000);\n⬆ Back to Top\n\nWhat is web speech API\nWeb speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API was introduced by W3C Community in the year 2012. It has two main parts:\n\nSpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text): It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the SpeechRecognition interface. The example below shows how to use this API to get text from speech,\nwindow.SpeechRecognition =\n  window.webkitSpeechRecognition || window.SpeechRecognition; // webkitSpeechRecognition for Chrome and SpeechRecognition for FF\nconst recognition = new window.SpeechRecognition();\nrecognition.onresult = (event) => {\n  // SpeechRecognitionEvent type\n  const speechToText = event.results[0][0].transcript;\n  console.log(speechToText);\n};\nrecognition.start();\nIn this API, browser is going to ask you for permission to use your microphone\n\nSpeechSynthesis (Text-to-Speech): It provides the ability to recognize voice context from an audio input and respond. This is accessed by the SpeechSynthesis interface. For example, the below code is used to get voice/speech from text,\nif (\"speechSynthesis\" in window) {\n  var speech = new SpeechSynthesisUtterance(\"Hello World!\");\n  speech.lang = \"en-US\";\n  window.speechSynthesis.speak(speech);\n}\nThe above examples can be tested on chrome(33+) browser's developer console. Note: This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification)\n\n⬆ Back to Top\n\nWhat is minimum timeout throttling\nBoth browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously. Browsers: They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals. Note: The older browsers have a minimum delay of 10ms. Nodejs: They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1. The best example to explain this timeout throttling behavior is the order of below code snippet.\n\nfunction runMeFirst() {\n  console.log(\"My script is initialized\");\n}\nsetTimeout(runMeFirst, 0);\nconsole.log(\"Script loaded\");\nand the output would be in\n\nScript loaded\nMy script is initialized\nIf you don't use setTimeout, the order of logs will be sequential.\n\nfunction runMeFirst() {\n  console.log(\"My script is initialized\");\n}\nrunMeFirst();\nconsole.log(\"Script loaded\");\nand the output is,\n\nMy script is initialized\nScript loaded\n⬆ Back to Top\n\nHow do you implement zero timeout in modern browsers\nYou can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.\n\n⬆ Back to Top\n\nWhat are tasks in event loop\nA task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue. Below are the list of use cases to add tasks to the task queue,\n\nWhen a new javascript program is executed directly from console or running by the <script> element, the task will be added to the task queue.\nWhen an event fires, the event callback added to task queue\nWhen a setTimeout or setInterval is reached, the corresponding callback added to task queue\n⬆ Back to Top\n\nWhat is microtask\nA microtask is a type of JavaScript callback that is scheduled to run immediately after the currently executing script and before the next event loop tick. Microtasks are executed after the current task completes and before any new tasks (macrotasks) are run. This ensures a fast and predictable update cycle.\n\nCommon sources of microtasks stored in the microtask queue include:\n\nPromises: When a Promise is resolved or rejected, its .then(), .catch(), and .finally() callbacks are placed in the microtask queue.\n\nPromise.resolve().then(() => {\n console.log('Microtask from a Promise');\n});\nqueueMicrotask():\n\nA method that explicitly schedules a function to be run in the microtask queue.\n\n queueMicrotask(() => {\n    console.log('Microtask from  queueMicrotask');\n  });\nMutationObserver callbacks:\n\nObservers changes in the DOM and triggers a callback as a microtask.\n\n   const observer = new MutationObserver(() => {\n     console.log('Microtask from MutationObserver');\n   })\n   observer.observe(document.body, {childList: true});\nawait:\nAwait internally uses Promises, so the code after await is scheduled as a microtask.\n\n async function asyncFunction() {\n   await null;\n   console.log('Microtask from Await'); // Schedule this code as microtask\n }\nNote: All of these microtasks are processed in the same turn of the event loop.\n\n⬆ Back to Top\n\nWhat are different event loops\nIn JavaScript, there are multiple event loops that can be used depending on the context of your application. The most common event loops are:\n\nThe Browser Event Loop\nThe Node.js Event Loop\nBrowser Event Loop: The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.\n\nThe Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I/O, network I/O, and other asynchronous actions.\n\n⬆ Back to Top\n\nWhat is the purpose of queueMicrotask\nThe queueMicrotask function is used to schedule a microtask, which is a function that will be executed asynchronously in the microtask queue. The purpose of queueMicrotask is to ensure that a function is executed after the current task has finished, but before the browser performs any rendering or handles user events.\n\nExample:\n\nconsole.log(\"Start\"); //1\n\nqueueMicrotask(() => {\n  console.log(\"Inside microtask\"); // 3\n});\n\nconsole.log(\"End\"); //2\nBy using queueMicrotask, you can ensure that certain tasks or callbacks are executed at the earliest opportunity during the JavaScript event loop, making it useful for performing work that needs to be done asynchronously but with higher priority than regular setTimeout or setInterval callbacks.\n\n⬆ Back to Top\n\nHow do you use javascript libraries in typescript file\nIt is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in your TypeScript files without getting compilation errors, the only solution is declare keyword along with a variable declaration. For example, let's imagine you have a library called customLibrary that doesn’t have a TypeScript declaration and have a namespace called customLibrary in the global namespace. You can use this library in typescript code as below,\n\ndeclare var customLibrary;\nIn the runtime, typescript will provide the type to the customLibrary variable as any type. The another alternative without using declare keyword is below\n\nvar customLibrary: any;\n⬆ Back to Top\n\nWhat are the differences between promises and observables\nSome of the major difference in a tabular form\n\nPromises\tObservables\nEmits only a single value at a time\tEmits multiple values over a period of time(stream of values ranging from 0 to multiple)\nEager in nature; they are going to be called immediately\tLazy in nature; they require subscription to be invoked\nPromise is always asynchronous even though it resolved immediately\tObservable can be either synchronous or asynchronous\nDoesn't provide any operators\tProvides operators such as map, forEach, filter, reduce, retry, and retryWhen etc\nCannot be canceled\tCanceled by using unsubscribe() method\n⬆ Back to Top\n\nWhat is heap\nHeap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime. Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.\n\nScreenshot\n\n⬆ Back to Top\n\nWhat is an event table\nEvent Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table. It doesn't not execute functions on it’s own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.\n\nScreenshot\n\n⬆ Back to Top\n\nWhat is a microTask queue\nMicrotask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue. The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.\n\n⬆ Back to Top\n\nWhat is the difference between shim and polyfill\nA shim is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9). Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. In a simple sentence, a polyfill is a shim for a browser API.\n\n⬆ Back to Top\n\nHow do you detect primitive or non primitive value type\nIn JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,\n\nvar myPrimitive = 30;\nvar myNonPrimitive = {};\nfunction isPrimitive(val) {\n  return Object(val) !== val;\n}\n\nisPrimitive(myPrimitive);\nisPrimitive(myNonPrimitive);\nIf the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.\n\n⬆ Back to Top\n\nWhat is babel\nBabel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,\n\nTransform syntax\nPolyfill features that are missing in your target environment (using @babel/polyfill)\nSource code transformations (or codemods)\n⬆ Back to Top\n\nIs Node.js completely single threaded\nNode is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.\n\n⬆ Back to Top\n\nWhat are the common use cases of observables\nSome of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc\n\n⬆ Back to Top\n\nWhat is RxJS\nRxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.\n\n⬆ Back to Top\n\nWhat is the difference between Function constructor and function declaration\nThe functions which are created with Function constructor do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.\n\nLet's see this difference with an example,\n\nFunction Constructor:\n\nvar a = 100;\nfunction createFunction() {\n  var a = 200;\n  return new Function(\"return a;\");\n}\nconsole.log(createFunction()()); // 100\nFunction declaration:\n\nvar a = 100;\nfunction createFunction() {\n  var a = 200;\n  return function func() {\n    return a;\n  };\n}\nconsole.log(createFunction()()); // 200\n⬆ Back to Top\n\nWhat is a Short circuit condition\nShort circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,\n\nif (authenticate) {\n  loginToPorta();\n}\nSince the javascript logical operators evaluated from left to right, the above expression can be simplified using && logical operator\n\nauthenticate && loginToPorta();\n⬆ Back to Top\n\nWhat is the easiest way to resize an array\nThe length property of an array is useful to resize or empty an array quickly. Let's apply length property on number array to resize the number of elements from 5 to 2,\n\nvar array = [1, 2, 3, 4, 5];\nconsole.log(array.length); // 5\n\narray.length = 2;\nconsole.log(array.length); // 2\nconsole.log(array); // [1,2]\nand the array can be emptied too\n\nvar array = [1, 2, 3, 4, 5];\narray.length = 0;\nconsole.log(array.length); // 0\nconsole.log(array); // []\n⬆ Back to Top\n\nWhat is an observable\nAn Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling subscribe() method. Let's look at a simple example of an Observable\n\nimport { Observable } from \"rxjs\";\n\nconst observable = new Observable((observer) => {\n  setTimeout(() => {\n    observer.next(\"Message from a Observable!\");\n  }, 3000);\n});\n\nobservable.subscribe((value) => console.log(value));\nScreenshot\n\nNote: Observables are not part of the JavaScript language yet but they are being proposed to be added to the language\n\n⬆ Back to Top\n\nWhat is the difference between function and class declarations\nThe main difference between function declarations and class declarations is hoisting. The function declarations are hoisted but not class declarations.\n\nClasses:\n\nconst user = new User(); // ReferenceError\n\nclass User {}\nConstructor Function:\n\nconst user = new User(); // No error\n\nfunction User() {}\n⬆ Back to Top\n\nWhat is an async function\nAn async function is a function declared with the async keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more await expressions.\n\nLet's take a below async function example,\n\nasync function logger() {\n  let data = await fetch(\"http://someapi.com/users\"); // pause until fetch returns\n  console.log(data);\n}\nlogger();\nIt is basically syntax sugar over ES2015 promises and generators.\n\n⬆ Back to Top\n\nHow do you prevent promises swallowing errors\nWhile using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.\n\nLet's say you expect to print an error to the console for all the below cases,\n\nPromise.resolve(\"promised value\").then(function () {\n  throw new Error(\"error\");\n});\n\nPromise.reject(\"error value\").catch(function () {\n  throw new Error(\"error\");\n});\n\nnew Promise(function (resolve, reject) {\n  throw new Error(\"error\");\n});\nBut there are many modern JavaScript environments that won't print any errors. You can fix this problem in different ways,\n\nAdd catch block at the end of each chain: You can add catch block to the end of each of your promise chains\n\nPromise.resolve(\"promised value\")\n  .then(function () {\n    throw new Error(\"error\");\n  })\n  .catch(function (error) {\n    console.error(error.stack);\n  });\nBut it is quite difficult to type for each promise chain and verbose too.\n\nAdd done method: You can replace first solution's then and catch blocks with done method\n\nPromise.resolve(\"promised value\").done(function () {\n  throw new Error(\"error\");\n});\nLet's say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write done block as below,\n\ngetDataFromHttp()\n  .then(function (result) {\n    return processDataAsync(result);\n  })\n  .done(function (processed) {\n    displayData(processed);\n  });\nIn future, if the processing library API changed to synchronous then you can remove done block as below,\n\ngetDataFromHttp().then(function (result) {\n  return displayData(processDataAsync(result));\n});\nand then you forgot to add done block to then block leads to silent errors.\n\nExtend ES6 Promises by Bluebird: Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a “default” onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejections\n\nPromise.onPossiblyUnhandledRejection(function (error) {\n  throw error;\n});\nand discard a rejection, just handle it with an empty catch\n\nPromise.reject(\"error value\").catch(function () {});\n⬆ Back to Top\n\nWhat is deno\nDeno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language. It solves the inherent problems of Node.Js and has been officially released in May 2018. Unlike Node.JS, by default Deno executes the code in a sandbox, which means that runtime has no access to below areas:\n\nThe file system\nThe network\nExecution of other scripts\nThe environment variables\n⬆ Back to Top\n\nHow do you make an object iterable in javascript\nBy default, plain objects are not iterable. But you can make the object iterable by defining a Symbol.iterator property on it.\n\nLet's demonstrate this with an example,\n\nconst collection = {\n  one: 1,\n  two: 2,\n  three: 3,\n  [Symbol.iterator]() {\n    const values = Object.keys(this);\n    let i = 0;\n    return {\n      next: () => {\n        return {\n          value: this[values[i++]],\n          done: i > values.length,\n        };\n      },\n    };\n  },\n};\n\nconst iterator = collection[Symbol.iterator]();\n\nconsole.log(iterator.next()); // → {value: 1, done: false}\nconsole.log(iterator.next()); // → {value: 2, done: false}\nconsole.log(iterator.next()); // → {value: 3, done: false}\nconsole.log(iterator.next()); // → {value: undefined, done: true}\nThe above process can be simplified using a generator function,\n\nconst collection = {\n  one: 1,\n  two: 2,\n  three: 3,\n  [Symbol.iterator]: function* () {\n    for (let key in this) {\n      yield this[key];\n    }\n  },\n};\nconst iterator = collection[Symbol.iterator]();\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n⬆ Back to Top\n\nWhat is a Proper Tail Call\nFirst, we should know about tail call before talking about \"Proper Tail Call\". A tail call is a subroutine or function call performed as the final action of a calling function. Whereas Proper tail call(PTC) is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.\n\nFor example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto n * factorial(n - 1)\n\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(5)); //120\nBut if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.\n\nfunction factorial(n, acc = 1) {\n  if (n === 0) {\n    return acc;\n  }\n  return factorial(n - 1, n * acc);\n}\nconsole.log(factorial(5)); //120\nThe above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.\n\n⬆ Back to Top\n\nHow do you check an object is a promise or not\nIf you don't know if a value is a promise or not, wrapping the value as Promise.resolve(value) which returns a promise\n\nfunction isPromise(object) {\n  if (Promise && Promise.resolve) {\n    return Promise.resolve(object) == object;\n  } else {\n    throw \"Promise not supported in your environment\";\n  }\n}\n\nvar i = 1;\nvar promise = new Promise(function (resolve, reject) {\n  resolve();\n});\n\nconsole.log(isPromise(i)); // false\nconsole.log(isPromise(promise)); // true\nAnother way is to check for .then() handler type\n\nfunction isPromise(value) {\n  return Boolean(value && typeof value.then === \"function\");\n}\nvar i = 1;\nvar promise = new Promise(function (resolve, reject) {\n  resolve();\n});\n\nconsole.log(isPromise(i)); // false\nconsole.log(isPromise(promise)); // true\n⬆ Back to Top\n\nHow to detect if a function is called as constructor\nYou can use new.target pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.\n\nIf a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.\nFor function calls, new.target is undefined.\nfunction Myfunc() {\n  if (new.target) {\n    console.log(\"called with new\");\n  } else {\n    console.log(\"not called with new\");\n  }\n}\n\nnew Myfunc(); // called with new\nMyfunc(); // not called with new\nMyfunc.call({}); // not called with new\n⬆ Back to Top\n\nWhat are the differences between arguments object and rest parameter\nThere are three main differences between arguments object and rest parameters\n\nThe arguments object is an array-like but not an array. Whereas the rest parameters are array instances.\nThe arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.\nThe rest parameters are only the ones that haven’t been given a separate name, while the arguments object contains all arguments passed to the function\n⬆ Back to Top\n\nWhat are the differences between spread operator and rest parameter\nRest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.\n\n⬆ Back to Top\n\nWhat are the different kinds of generators\nThere are five kinds of generators,\n\nGenerator function declaration:\n\nfunction* myGenFunc() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nconst genObj = myGenFunc();\nGenerator function expressions:\n\nconst myGenFunc = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\nconst genObj = myGenFunc();\nGenerator method definitions in object literals:\n\nconst myObj = {\n  *myGeneratorMethod() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\nconst genObj = myObj.myGeneratorMethod();\nGenerator method definitions in class:\n\nclass MyClass {\n  *myGeneratorMethod() {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n}\nconst myObject = new MyClass();\nconst genObj = myObject.myGeneratorMethod();\nGenerator as a computed property:\n\nconst SomeObj = {\n  *[Symbol.iterator]() {\n    yield 1;\n    yield 2;\n    yield 3;\n  },\n};\n\nconsole.log(Array.from(SomeObj)); // [ 1, 2, 3 ]\n⬆ Back to Top\n\nWhat are the built-in iterables\nBelow are the list of built-in iterables in javascript,\n\nArrays and TypedArrays\nStrings: Iterate over each character or Unicode code-points\nMaps: iterate over its key-value pairs\nSets: iterates over their elements\narguments: An array-like special variable in functions\nDOM collection such as NodeList\n⬆ Back to Top\n\nWhat are the differences between for...of and for...in statements\nBoth for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:\n\nfor..in iterates over all enumerable property keys of an object\nfor..of iterates over the values of an iterable object.\nLet's explain this difference with an example,\n\nlet arr = [\"a\", \"b\", \"c\"];\n\narr.newProp = \"newVlue\";\n\n// key are the property keys\nfor (let key in arr) {\n  console.log(key); // 0, 1, 2 & newProp\n}\n\n// value are the property values\nfor (let value of arr) {\n  console.log(value); // a, b, c\n}\nSince for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.\n\n⬆ Back to Top\n\nHow do you define instance and non-instance properties\nThe Instance properties must be defined inside of class methods. For example, name and age properties defined inside constructor as below,\n\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\nBut Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign the age value for Person class as below,\n\nPerson.staticAge = 30;\nPerson.prototype.prototypeAge = 40;\n⬆ Back to Top\n\nWhat is the difference between isNaN and Number.isNaN?\nisNaN: The global function isNaN converts the argument to a Number and returns true if the resulting value is NaN.\nNumber.isNaN: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.\nLet's see the difference with an example,\n\nisNaN(‘hello’);   // true\nNumber.isNaN('hello'); // false\n⬆ Back to Top\n\nHow to invoke an IIFE without any extra brackets?\nImmediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains set of statements.\n\n(function (dt) {\n  console.log(dt.toLocaleTimeString());\n})(new Date());\nSince both IIFE and void operator discard the result of an expression, you can avoid the extra brackets using void operator for IIFE as below,\n\nvoid (function (dt) {\n  console.log(dt.toLocaleTimeString());\n})(new Date());\n⬆ Back to Top\n\nIs that possible to use expressions in switch cases?\nYou might have seen expressions used in switch condition but it is also possible to use for switch cases by assigning true value for the switch condition. Let's see the weather condition based on temperature as an example,\n\nconst weather = (function getWeather(temp) {\n  switch (true) {\n    case temp < 0:\n      return \"freezing\";\n    case temp < 10:\n      return \"cold\";\n    case temp < 24:\n      return \"cool\";\n    default:\n      return \"unknown\";\n  }\n})(10);\n⬆ Back to Top\n\nWhat is the easiest way to ignore promise errors?\nThe easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.\n\nawait promise.catch((e) => void e);\n⬆ Back to Top\n\nHow do style the console output using CSS?\nYou can add CSS styling to the console output using the CSS format content specifier %c. The console string message can be appended after the specifier and CSS style in another argument. Let's print the red color text using console.log and CSS specifier as below,\n\nconsole.log(\"%cThis is a red text\", \"color:red\");\nIt is also possible to add more styles for the content. For example, the font-size can be modified for the above text\n\nconsole.log(\n  \"%cThis is a red text with bigger font\",\n  \"color:red; font-size:20px\"\n);\n⬆ Back to Top\n\nWhat is nullish coalescing operator (??)?\nIt is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||) operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or undefined.\n\nconsole.log(null ?? true); // true\nconsole.log(false ?? true); // false\nconsole.log(undefined ?? true); // true\n⬆ Back to Top\n\nHow do you group and nest console output?\nThe console.group() can be used to group related log messages to be able to easily read the logs and use console.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in hierarchical manner.\n\nFor example, if you’re logging a user’s details:\n\nconsole.group(\"User Details\");\nconsole.log(\"name: Sudheer Jonna\");\nconsole.log(\"job: Software Developer\");\n\n// Nested Group\nconsole.group(\"Address\");\nconsole.log(\"Street: Commonwealth\");\nconsole.log(\"City: Los Angeles\");\nconsole.log(\"State: California\");\n\n// Close nested group\nconsole.groupEnd();\n\n// Close outer group\nconsole.groupEnd();\nYou can also use console.groupCollapsed() instead of console.group() if you want the groups to be collapsed by default.\n\n⬆ Back to Top\n\nWhat is the difference between dense and sparse arrays?\nAn array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array. Whereas if at least one item is missing at any index, the array is called as sparse.\n\nLet's see the below two kind of arrays,\n\nconst avengers = [\"Ironman\", \"Hulk\", \"CaptainAmerica\"];\nconsole.log(avengers[0]); // 'Ironman'\nconsole.log(avengers[1]); // 'Hulk'\nconsole.log(avengers[2]); // 'CaptainAmerica'\nconsole.log(avengers.length); // 3\n\nconst justiceLeague = [\"Superman\", \"Aquaman\", , \"Batman\"];\nconsole.log(justiceLeague[0]); // 'Superman'\nconsole.log(justiceLeague[1]); // 'Aquaman'\nconsole.log(justiceLeague[2]); // undefined\nconsole.log(justiceLeague[3]); // 'Batman'\nconsole.log(justiceLeague.length); // 4\n⬆ Back to Top\n\nWhat are the different ways to create sparse arrays?\nThere are 4 different ways to create sparse arrays in JavaScript\n\nArray literal: Omit a value when using the array literal\nconst justiceLeague = [\"Superman\", \"Aquaman\", , \"Batman\"];\nconsole.log(justiceLeague); // ['Superman', 'Aquaman', empty ,'Batman']\nArray() constructor: Invoking Array(length) or new Array(length)\nconst array = Array(3);\nconsole.log(array); // [empty, empty ,empty]\nDelete operator: Using delete array[index] operator on the array\nconst justiceLeague = [\"Superman\", \"Aquaman\", \"Batman\"];\ndelete justiceLeague[1];\nconsole.log(justiceLeague); // ['Superman', empty, ,'Batman']\nIncrease length property: Increasing length property of an array\nconst justiceLeague = [\"Superman\", \"Aquaman\", \"Batman\"];\njusticeLeague.length = 5;\nconsole.log(justiceLeague); // ['Superman', 'Aquaman', 'Batman', empty, empty]\n⬆ Back to Top\n\nWhat is the difference between setTimeout, setImmediate and process.nextTick?\nSet Timeout: setTimeout() is to schedule execution of a one-time callback after delay milliseconds.\nSet Immediate: The setImmediate function is used to execute a function right after the current event loop finishes.\nProcess NextTick: If process.nextTick() is called in a given phase, all the callbacks passed to process.nextTick() will be resolved before the event loop continues. This will block the event loop and create I/O Starvation if process.nextTick() is called recursively.\n⬆ Back to Top\n\nHow do you reverse an array without modifying original array?\nThe reverse() method reverses the order of the elements in an array but it mutates the original array. Let's take a simple example to demonistrate this case,\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = originalArray.reverse();\n\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\nconsole.log(originalArray); // [ 5, 4, 3, 2, 1]\nThere are few solutions that won't mutate the original array. Let's take a look.\n\nUsing slice and reverse methods: In this case, just invoke the slice() method on the array to create a shallow copy followed by reverse() method call on the copy.\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = originalArray.slice().reverse(); //Slice an array gives a new copy\n\nconsole.log(originalArray); // [1, 2, 3, 4, 5]\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\nUsing spread and reverse methods: In this case, let's use the spread syntax (...) to create a copy of the array followed by reverse() method call on the copy.\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = [...originalArray].reverse();\n\nconsole.log(originalArray); // [1, 2, 3, 4, 5]\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\nUsing reduce and spread methods: Here execute a reducer function on an array elements and append the accumulated array on right side using spread syntax\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = originalArray.reduce((accumulator, value) => {\n  return [value, ...accumulator];\n}, []);\n\nconsole.log(originalArray); // [1, 2, 3, 4, 5]\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\nUsing reduceRight and spread methods: Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and append the accumulated array on left side using spread syntax\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = originalArray.reduceRight((accumulator, value) => {\n  return [...accumulator, value];\n}, []);\n\nconsole.log(originalArray); // [1, 2, 3, 4, 5]\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\nUsing reduceRight and push methods: Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and push the iterated value to the accumulator\n\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = originalArray.reduceRight((accumulator, value) => {\n  accumulator.push(value);\n  return accumulator;\n}, []);\n\nconsole.log(originalArray); // [1, 2, 3, 4, 5]\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\n⬆ Back to Top\n\nHow do you create custom HTML element?\nThe creation of custom HTML elements involves two main steps,\n\nDefine your custom HTML element: First you need to define some custom class by extending HTMLElement class. After that define your component properties (styles,text etc) using connectedCallback method. Note: The browser exposes a function called customElements.define inorder to reuse the element.\nclass CustomElement extends HTMLElement {\n  connectedCallback() {\n    this.innerHTML = \"This is a custom element\";\n  }\n}\ncustomElements.define(\"custom-element\", CustomElement);\nUse custom element just like other HTML element: Declare your custom element as a HTML tag.\n   <body>\n        <custom-element>\n   </body>\n⬆ Back to Top\n\nWhat is global execution context?\nThe global execution context is the default or first execution context that is created by the JavaScript engine before any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside a function or object will be executed inside this global execution context. Since JS engine is single threaded there will be only one global environment and there will be only one global execution context.\n\nFor example, the below code other than code inside any function or object is executed inside the global execution context.\n\nvar x = 10;\n\nfunction A() {\n  console.log(\"Start function A\");\n\n  function B() {\n    console.log(\"In function B\");\n  }\n\n  B();\n}\n\nA();\n\nconsole.log(\"GlobalContext\");\n⬆ Back to Top\n\nWhat is function execution context?\nWhenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a Function Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within that function.\n\n⬆ Back to Top\n\nWhat is debouncing?\nDebouncing is a programming technique used to limit how often a function is executed. Specifically, it ensures that a function is only triggered after a certain amount of time has passed since it was last invoked. This prevents unnecessary or excessive function calls, which can help optimize performance and reduce unnecessary CPU usage or API requests.\n\nFor example, when a user types in a search box, you typically want to wait until they’ve finished typing before fetching suggestions. Without debouncing, an API call would be triggered on every keystroke, potentially causing performance issues. With debouncing, the function call is postponed until the user stops typing for a specified period (e.g., 300ms). If the user types again before this time elapses, the timer resets.\n\n**Typical use cases for debouncing include:**\n\n*   Search box suggestions (wait until typing pauses before fetching results)\n*   Auto-saving text fields (save only after the user stops typing)\n*   Preventing double-clicks on buttons\n*   Handling window resize or scroll events efficiently\n\n**Example Debounce Function:**\n\nJavaScript\n\n```css\nfunction debounce(func, timeout = 500) {\n  let timer;\n  return function (...args) {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n```\n\n**Usage Example:**\n\nJavaScript\n\n```css\nfunction fetchResults() {\n  console.log(\"Fetching input suggestions\");\n}\nconst processChange = debounce(fetchResults, 300);\n\n// Attach to input element\n<input type=\"text\" onkeyup=\"processChange()\" />\n\n// Attach to button\n<button onclick=\"processChange()\">Click me</button>\n\n// Attach to window event\nwindow.addEventListener(\"scroll\", processChange);\n```\n\n**How it works:**  \nWhen `processChange` is invoked (e.g., by typing or clicking), any pending execution is canceled, and the function is scheduled to run after the specified delay. If another event occurs before the delay is up, the timer resets, and the function will only run after events have stopped for the delay duration.\n\nDebouncing is an essential tool for improving user experience and application performance, especially when dealing with events that can fire rapidly and repeatedly.\n⬆ Back to Top\n\nWhat is throttling?\nThrottling is a programming technique used to control the rate at which a function is executed. When an event is triggered continuously—such as during window resizing, scrolling, or mouse movement—throttling ensures that the associated event handler is not called more often than a specified interval. This helps improve performance by reducing the number of expensive function calls and preventing performance bottlenecks.\n\nCommon use cases:\n\nWindow resize events\nScroll events\nMouse movement or drag events\nAPI rate limiting\nHow does throttling work?\nThrottling will execute the function at most once every specified time interval, ignoring additional calls until the interval has passed.\n\nExample: Throttle Implementation and Usage\n\nJavaScript\n\n// Simple throttle function: allows 'func' to run at most once every 'limit' ms\nfunction throttle(func, limit) {\n  let inThrottle = false;\n  return function(...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n// Usage: throttling a scroll event handler\nfunction handleScrollAnimation() {\n  console.log('Scroll event triggered');\n}\n\nwindow.addEventListener(\n  \"scroll\",\n  throttle(handleScrollAnimation, 100) // Will run at most once every 100ms\n);\n⬆ Back to Top\n\nWhat is optional chaining?\nAccording to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid.\n\nThe ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist.\n\nconst adventurer = {\n  name: \"Alice\",\n  cat: {\n    name: \"Dinah\",\n  },\n};\n\nconst dogName = adventurer.dog?.name;\nconsole.log(dogName);\n// expected output: undefined\n\nconsole.log(adventurer.someNonExistentMethod?.());\n// expected output: undefined\n⬆ Back to Top\n\nWhat is an environment record?\nAccording to ECMAScript specification 262 (9.1):\n\nEnvironment Record is a specification type used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting structure of ECMAScript code.\n\nUsually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.\n\nEach time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.\n\n⬆ Back to Top\n\nHow to verify if a variable is an array?\nIt is possible to check if a variable is an array instance using 3 different ways,\n\nArray.isArray() method:\n\nThe Array.isArray(value) utility function is used to determine whether value is an array or not. This function returns a true boolean value if the variable is an array and a false value if it is not.\n\nconst numbers = [1, 2, 3];\nconst user = { name: \"John\" };\nArray.isArray(numbers); // true\nArray.isArray(user); //false\ninstanceof operator:\n\nThe instanceof operator is used to check the type of an array at run time. It returns true if the type of a variable is an Array other false for other type.\n\nconst numbers = [1, 2, 3];\nconst user = { name: \"John\" };\nconsole.log(numbers instanceof Array); // true\nconsole.log(user instanceof Array); // false\nChecking constructor type:\n\nThe constructor property of the variable is used to determine whether the variable Array type or not.\n\nconst numbers = [1, 2, 3];\nconst user = { name: \"John\" };\nconsole.log(numbers.constructor === Array); // true\nconsole.log(user.constructor === Array); // false\n⬆ Back to Top\n\nWhat is pass by value and pass by reference?\nPass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.\n\nlet a = 5;\nlet b = a;\n\nb++;\nconsole.log(a, b); //5, 6\nIn the above code snippet, the value of a is assigned to b and the variable b has been incremented. Since there is a new space created for variable b, any update on this variable doesn't impact the variable a.\n\nPass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.\n\nlet user1 = {\n  name: \"John\",\n  age: 27,\n};\nlet user2 = user1;\nuser2.age = 30;\n\nconsole.log(user1.age, user2.age); // 30, 30\nIn the above code snippet, updating the age property of one object will impact the other property due to the same reference.\n\n⬆ Back to Top\n\nWhat are the differences between primitives and non-primitives?\nJavaScript language has both primitives and non-primitives but there are few differences between them as below,\n\nPrimitives\tNon-primitives\nThese types are predefined\tCreated by developer\nThese are immutable\tMutable\nCompare by value\tCompare by reference\nStored in Stack\tStored in heap\nContain certain value\tCan contain NULL too\n⬆ Back to Top\n\nHow do you create your own bind method using either call or apply method?\nThe custom bind function needs to be created on Function prototype inorder to use it as other builtin functions. This custom function should return a function similar to original bind method and the implementation of inner function needs to use apply method call.\n\nThe function which is going to bind using custom myOwnBind method act as the attached function(boundTargetFunction) and argument as the object for apply method call.\n\nFunction.prototype.myOwnBind = function (whoIsCallingMe) {\n  if (typeof this !== \"function\") {\n    throw new Error(this + \"cannot be bound as it's not callable\");\n  }\n  const boundTargetFunction = this;\n  return function () {\n    boundTargetFunction.apply(whoIsCallingMe, arguments);\n  };\n};\n⬆ Back to Top\n\nWhat are the differences between pure and impure functions?\nSome of the major differences between pure and impure function are as below,\n\nPure function\tImpure function\nIt has no side effects\tIt causes side effects\nIt is always return the same result\tIt returns different result on each call\nEasy to read and debug\tDifficult to read and debug because they are affected by external code\n⬆ Back to Top\n\nWhat is referential transparency?\nAn expression in javascript that can be replaced by its value without affecting the behaviour of the program is called referential transparency. Pure functions are referentially transparent.\n\nconst add = (x, y) => x + y;\nconst multiplyBy2 = (x) => x * 2;\n\n//Now add (2, 3) can be replaced by 5.\n\nmultiplyBy2(add(2, 3));\n⬆ Back to Top\n\nWhat are the possible side-effects in javascript?\nA side effect is the modification of the state through the invocation of a function or expression. These side effects make our function impure by default. Below are some side effects which make function impure,\n\nMaking an HTTP request. Asynchronous functions such as fetch and promise are impure.\nDOM manipulations\nMutating the input data\nPrinting to a screen or console: For example, console.log() and alert()\nFetching the current time\nMath.random() calls: Modifies the internal state of Math object\n⬆ Back to Top\n\nWhat are compose and pipe functions?\nThe \"compose\" and \"pipe\" are two techniques commonly used in functional programming to simplify complex operations and make code more readable. They are not native to JavaScript and higher-order functions. the compose() applies right to left any number of functions to the output of the previous function.\n\n⬆ Back to Top\n\nWhat is module pattern?\nModule pattern is a designed pattern used to wrap a set of variables and functions together in a single scope returned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Python, etc) to provide private scope. It uses IIFE (Immediately invoked function expression) to allow for private scopes. i.e., a closure that protect variables and methods.\n\nThe module pattern looks like below,\n\n(function () {\n  // Private variables or functions goes here.\n\n  return {\n    // Return public variables or functions here.\n  };\n})();\nLet's see an example of a module pattern for an employee with private and public access,\n\nconst createEmployee = (function () {\n  // Private\n  const name = \"John\";\n  const department = \"Sales\";\n  const getEmployeeName = () => name;\n  const getDepartmentName = () => department;\n\n  // Public\n  return {\n    name,\n    department,\n    getName: () => getEmployeeName(),\n    getDepartment: () => getDepartmentName(),\n  };\n})();\n\nconsole.log(createEmployee.name);\nconsole.log(createEmployee.department);\nconsole.log(createEmployee.getName());\nconsole.log(createEmployee.getDepartment());\nNote: It mimic the concepts of classes with private variables and methods.\n\n⬆ Back to Top\n\nWhat is Function Composition?\nIt is an approach where the result of one function is passed on to the next function, which is passed to another until the final function is executed for the final result.\n\n//example\nconst double = (x) => x * 2;\nconst square = (x) => x * x;\n\nvar output1 = double(2);\nvar output2 = square(output1);\nconsole.log(output2);\n\nvar output_final = square(double(2));\nconsole.log(output_final);\n⬆ Back to Top\n\nHow to use await outside of async function prior to ES2022?\nPrior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.\n\nawait Promise.resolve(console.log(\"Hello await\")); // SyntaxError: await is only valid in async function\nBut you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the feature.\n\n(async function () {\n  await Promise.resolve(console.log(\"Hello await\")); // Hello await\n})();\nIn ES2022, you can write top-level await without writing any hacks.\n\nawait Promise.resolve(console.log(\"Hello await\")); //Hello await\n⬆ Back to Top\n\nWhat is the purpose of the this keyword in JavaScript?\nThe this keyword in JavaScript refers to the object that is executing the current function. Its value is determined by how a function is called, not where it is defined. this is essential for writing object-oriented and event-driven code, as it allows methods to interact with the data of the object they belong to.\n\nExample 1: this in a Global Context\n\nconsole.log(this);\nIn a global context, this refers to the global object (e.g., window in a browser).\nExample 2: this in a Function\n\nfunction displayThis() {\n  console.log(this);\n}\n\ndisplayThis();\nIn a regular function, this refers to the global object(window in browser and global in nodejs) for non-strict mode. In strict mode, it's value is undefined.\nExample 3: this in a Method\n\nconst person = {\n  name: \"John\",\n  greet: function () {\n    console.log(\"Hello, \" + this.name);\n  },\n};\n\nperson.greet();\nIn a method, this refers to the object that owns the method (person in the case).\nExample 4: this in an Event Handler\n\n document.getElementById(\"myButton\").addEventListener(\"click\", function () {\n          console.log(this);\n });\nIn an event handler, this refers to the element that triggered the event (the button in this case).\nExample 5: this with Arrow Functions\n\n      const obj = {\n        age: 42,\n        regular: function() { console.log(this.age); },\n        arrow: () => { console.log(this.age); }\n      };\n      obj.regular(); // 42 (this refers to obj)\n      obj.arrow();   // undefined (this refers to the outer scope, not obj)\nArrow functions do not have their own this binding; they inherit it from their surrounding (lexical) context.\nExample 6: this in Constructor Functions / Classes\n\n  function Person(name) {\n    this.name = name;\n  }\n  \n  const p1 = new Person('Sudheer');\n  console.log(p1.name); // Sudheer\nWhen used with new, this refers to the newly created object.\n⬆ Back to Top\n\nWhat are the uses of closures?\nClosures are a powerful feature in programming languages like JavaScript. They allow functions to retain access to variables from their containing (enclosing) scope even after the outer function has finished executing. This means that a function defined within another function can access variables from the outer function, even if the outer function has already returned. Here are some common use cases of closures:\nData Privacy: Closures can be used to create private variables and methods. By defining variables within a function's scope and returning inner functions that have access to those variables, you can create a form of encapsulation, limiting access to certain data or functionality.\n\nFunction Factories: Closures are often used to create functions with pre-set parameters. This is useful when you need to create multiple functions with similar behavior but different configurations.\n\nCallback Functions: Closures are frequently used in asynchronous programming, such as handling event listeners or AJAX requests. The inner function captures variables from the outer scope and can access them when the callback is invoked.\n\nMemoization: Closures can be used for memoization, a technique to optimize performance by caching the results of expensive function calls. The inner function can remember the results of previous calls and return the cached result if the same input is provided again.\n\niterators and Generators: Closures can be used to create iterators and generators, which are essential for working with collections of data in modern JavaScript.\n\n⬆ Back to Top\n\nWhat are the phases of execution context?\nThe execution context in JavaScript is a data structure that stores the information necessary for executing a piece of code. It includes the code itself, the values of the variables used in the code, and the scope chain. The scope chain is a list of objects that are used to resolve variable names.\nThe execution context has two phases:\n\nCreation phase: In this phase, the JavaScript engine creates the execution context and sets up the script's environment. This includes creating the variable object and the scope chain.\nExecution phase: In this phase, the JavaScript engine executes the code in the execution context. This includes evaluating expressions, assigning values to variables, and calling functions.\nThe execution context is created when a function is called. The function's code is then executed in the execution context. When the function returns, the execution context is destroyed.\n\n⬆ Back to Top\n\nWhat are the possible reasons for memory leaks?\nMemory leaks can lead to poor performance, slow loading times and even crashes in web applications. Some of the common causes of memory leaks are listed below,\n\nThe execessive usage of global variables or omitting the var keyword in local scope.\nForgetting to clear the timers set up by setTimeout or setInterval.\nClosures retain references to variables from their parent scope, which leads to variables might not garbage collected even they are no longer used.\nWhat are the optimization techniques of V8 engine?\nV8 engine uses the below optimization techniques.\n\nInline expansion: It is a compiler optimization by replacing the function calls with the corresponding function blocks.\nCopy elision: This is a compiler optimization method to prevent expensive extra objects from being duplicated or copied.\nInline caching: It is a runtime optimization technique where it caches the execution of older tasks those can be lookup while executing the same task in the future.\n⬆ Back to Top\n\nWhat are the examples of built-in higher order functions?\nThere are several built-in higher order functions exists on arrays, strings, DOM and promise methods in javascript. These higher order functions provides significant level of abstraction. The list of functions on these categories are listed below,\n\narrays: map, filter, reduce, sort, forEach, some etc.\nDOM: The DOM method element.addEventListener(type, handler) also accepts the function handler as a second argument.\nStrings: replace() method.\n⬆ Back to Top\n\nWhat are the benefits higher order functions?\nThe main benefits of higher order functions are:\n\nAbstraction\nReusability\nImmutability\nModularity\n⬆ Back to Top\n\nHow do you create polyfills for map, filter and reduce methods?\nThe polyfills for array methods such as map, filter and reduce methods can be created using array prototype.\n\nmap:\n\nThe built-in Array.map method syntax will be helpful to write polyfill. The map method takes the callback function as an argument and that callback function can have below three arguments passed into it.\n\ni. Current value ii. Index of current value(optional) iii. array(optional)\n\nThe syntax would like below,\n\nlet newArray = arr.map(callback(currentValue[, index, arr) {\n   // return new array after executing the code\n})\nLet's build our map polyfill based on the above syntax,\n\nArray.prototype.myMap = function (cb) {\n  let newArr = [];\n  for (let i = 0; i < this.length; i++) {\n    newArr.push(cb(this[i], i, this));\n  }\n  return newArr;\n};\n\nconst nums = [1, 2, 3, 4, 5];\nconst multiplyByTwo = nums.myMap((x) => x * 2);\nconsole.log(multiplyByTwo); // [2, 4, 6, 8, 10]\nIn the above code, custom method name 'myMap' has been used to avoid conflicts with built-in method.\n\nfilter: Similar to map method, Array.filter method takes callback function as an argument and the callback function can have three agurguments passed into it.\n\ni. Current value\nii. Index of current value(optional)\niii. array(optional)\nThe syntax looks like below,\n\nlet newArray = arr.filter(callback(currentValue[, index, arr) {\n  // return new array whose elements satisfy the callback conditions\n})\nLet's build our filter polyfill based on the above syntax,\n\nArray.prototype.myFilter = function (cb) {\n  let newArr = [];\n  for (let i = 0; i < this.length; i++) {\n    if (cb(this[i], i, this)) {\n      newArr.push(this[i]);\n    }\n  }\n  return newArr;\n};\n\nconst nums = [1, 2, 3, 4, 5, 6];\nconst evenNums = nums.myFilter((x) => x % 2);\nconsole.log(evenNums); // [2, 4, 6]\nreduce:\n\n  The built-in `Array.reduce` method syntax will be helpful to write our own polyfill. The reduce method takes the callback function as first argument and the initial value as second argument.\n\n  The callback function can have four arguments passed into it.\n  i. Accumulator\n  ii. Current value\n  iii. Index of current value(optional)\n  iv. array(optional)\n\nThe syntax would like below,\n\n```js\narr.reduce(callback((acc, curr, i, arr) => {}), initValue);\n```\nLet's build our reduce polyfill based on the above syntax,\n\n```js\nArray.prototype.myReduce = function(cb, initialValue) {\n    let accumulator = initialValue;\n    for(let i=0; i< this.length; i++) {\n        accumulator = accumulator ? cb(accumulator, this[i], i, this) : this[i];\n    }\n    return accumulator;\n}\n  const nums = [1, 2, 3, 4, 5, 6];\n  const sum = nums.myReduce((acc, curr, i, arr) => {\n    return acc += curr\n  }, 0);\n  console.log(sum); // 21\n```\n⬆ Back to Top\n\nWhat is the difference between map and forEach functions?\nBoth map and forEach functions are used to iterate over an arrays but there are some differences in their functionality."
  },
  {
    "id": "424",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "**Returning values:** The `map` method returns a new array with transformed elements whereas `forEach` method returns `undefined` eventhough both of them are doing the same job.",
    "answer": "```javascript\n  const arr = [1, 2, 3, 4, 5];\n  arr.map(x => x * x); // [1, 4, 9, 16, 25]\n  arr.forEach(x => x * x); //\n\n  The `forEach()` method in JavaScript always returns undefined. This is because forEach() is used to iterate over arrays and perform side effects on each element, rather than returning a `new array or transforming the original array`\n```"
  },
  {
    "id": "425",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "**Chaining methods:** The `map` method is chainable. i.e, It can be attached with `reduce`, `filter`, `sort` and other methods as well. Whereas `forEach` cannot be attached with any other methods because it returns `undefined` value.",
    "answer": "```javascript\nconst arr = [1, 2, 3, 4, 5];\narr.map((x) => x * x).reduce((total, cur) => total + cur); // 55\narr.forEach((x) => x * x).reduce((total, cur) => total + cur); //Uncaught TypeError: Cannot read properties of undefine(reading 'reduce')\n```"
  },
  {
    "id": "426",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "**Mutation:** The `map` method doesn't mutate the original array by returning new array. Whereas `forEach` method also doesn't mutate the original array but it's callback is allowed to mutate the original array.",
    "answer": "**Note:** Both these methods existed since ES5 onwards.\n⬆ Back to Top\n\nGive an example of statements affected by automatic semicolon insertion?\nThe javascript parser will automatically add a semicolon while parsing the source code. For example, the below common statements affected by Automatic Semicolon Insertion(ASI).\n\nAn empty statement\nvar statement\nAn expression statement\ndo-while statement\ncontinue statement\nbreak statement\nreturn statement\nthrow statement\n⬆ Back to Top\n\nWhat are the event phases of a browser?\nThere are 3 phases in the lifecycle of an event propagation in JavaScript,\n\nCapturing phase: This phase goes down gradually from the top of the DOM tree to the target element when a nested element clicked. Before the click event reaching the final destination element, the click event of each parent's element must be triggered.\n\nTarget phase: This is the phase where the event originally occurred reached the target element .\n\nBubbling phase: This is reverse of the capturing phase. In this pase, the event bubbles up from the target element through it's parent element, an ancestor and goes all the way to the global window object.\n\nThe pictorial representation of these 3 event phases in DOM looks like below,\n\nScreenshot\n\n⬆ Back to Top\n\nWhat are the real world use cases of proxy?\nProxies are not used in regular day to day JavaScript work but they enabled many exciting programming patterns. Some of the real world use cases are listed below,\n\nVue3 used proxy concept to implement reactive state\nSolidJS implemented reactive stores\nImmerjs built upon proxy to track updates to immutable updates\nZenStack improved Prisma ORM for access control layer\n⬆ Back to Top\n\nWhat are hidden classes?\nSince JavaScript is a dynamic programming language, you can add or remove properties and methods from objects on the fly at runtime. This nature of JavaScript increases the dynamic dictionary lookups(because objects implemented as HashTables in memory) for retrieving a property on an object.\n\nLet's consider the following example to see how the additional properties age and gender added at runtime.\n\nfunction Person(name) {\n  this.name = name;\n}\n\nvar person1 = new Person(\"John\");\nvar person2 = new Person(\"Randy\");\n\nperson1.age = 40;\nperson1.gender = \"Male\";\n\nperson2.gender = \"Female\";\nperson2.age = 50;\nAs a result, this behavior leads to lower JavaScript performance compared to the contiguous buffer method used in non-dynamic languages. The V8 engine provided a solution named hidden classes to optimize the access time when retrieving a property on an object. This optimization is achieved by sharing hidden classes among objects created in a similar fashion. These hidden classes are attached to each and every object to track its shape.\n\nWhen V8 engine sees the constructor function(e.g, Person) is declared, it creates a hidden class (let's say Class01) without any offsets. Once the first property assignment statement (this.name = name) is executed, V8 engine will create a new hidden class (let's say Class02), inheriting all properties from the previous hidden class (Class01), and assign the property to offset 0. This process enables compiler to skip dictionary lookup when you try to retrieve the same property(i.e, name). Instead, V8 will directly point to Class02. The same procedure happens when you add new properties to the object.\n\nFor example, adding age and gender properties to Person constructor leads to transition of hidden classes(Class02 -> Class03 -> Class04). If you create a second object(Person2) based on the same Person object, both Class01 and Class02 hidden classes are going to be shared. However, the hidden classes Class03 and Class04 cannot be shared because second object has been modified with a different order of properties assignment.\n\nSince both the objects(person1 and person2) do not share the hidden classes, now V8 engine cannot use Inline Caching technique for the faster access of properties.\n\n⬆ Back to Top\n\nWhat is inline caching?\nInline caching is an optimization technique based on the observation that repeated calls to same function tends to occur on same type of objects. The V8 compiler stores a cache of the type of objects that were passed as a parameter in recent method calls. Upon next time when same function is called, compiler can directly search for the type in cache.\n\nLet's consider an example where the compiler stores the shape type in cache for repeated calls in the loop.\n\nlet shape = { width: 30, height: 20 }; // Compiler store the type in cache as { width: <int>, height: <int>} after repeated calls\n\nfunction area(obj) {\n  //Calculate area\n}\nfor (let i = 0; i < 100; i++) {\n  area(shape);\n}\nAfter few successful calls of the same area method to its same hidden class, V8 engine omits the hidden class lookup and simply adds the offset of the property to the object pointer itself. As a result, it increases the execution speed.\n\nThere are mainly 3 types of inline caching possible:\n\nMonomorphic: This is a optimized caching technique in which there can be always same type of objects passed.\nPolymorphic: This ia slightly optimized caching technique in which limited number of different types of objects can be passed.\nMegamorphic: It is an unoptimized caching in which any number of different objects can be passed.\n⬆ Back to Top\n\nWhat are the different ways to execute external scripts?\nThere are three different ways to execute external scripts,\n\nasync: The script is downloaded in parallel to parsing the page, and executed as soon as it is available even before parsing completes. The parsing of the page is going to be interuppted once the script is downloaded completely and then the script is executed. Thereafter, the parsing of the remaining page will continue.\n\nThe syntax for async usage is as shown below,\n\n<script src=\"demo.js\" async></script>\ndefer: The script is downloaded in parallel to parsing the page, and executed after the page has finished parsing.\n\nThe syntax for defer usage is as shown below,\n\n<script src=\"demo.js\" defer></script>\nNeither async or defer: The script is downloaded and executed immediately by blocking parsing of the page until the script execution is completed.\n\nNote: You should only use either async or defer attribute if the src attribute is present.\n\n⬆ Back to Top\n\nWhat is Lexical Scope?\nLexical scope is the ability for a function scope to access variables from the parent scope.\n\n<script>\n        function x(){\n          var a=10;\n          function y(){\n              console.log(a); // will print a , because of lexical scope, it will first look 'a' in\n          //its local memory space and then in its parent functions memory space\n          }\n          y();\n      }\n      x();\n</script>\n⬆ Back to Top\n\nHow to detect system dark mode in javascript?\nThe combination of Window.matchMedia() utility method along with media query is used to check if the user has selected a dark color scheme in their operating system settings or not. The CSS media query prefers-color-scheme needs to be passed to identify system color theme.\n\nThe following javascript code describes the usage,\n\nconst hasDarkColorScheme = () =>\n  window.matchMedia &&\n  window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\nYou can also watch changes to system color scheme using addEventListener,\n\nwindow\n  .matchMedia(\"(prefers-color-scheme: dark)\")\n  .addEventListener(\"change\", (event) => {\n    const theme = event.matches ? \"dark\" : \"light\";\n  });\nNote: The matchMedia method returns MediaQueryList object stores information from a media query.\n\n⬆ Back to Top\n\nWhat is the purpose of requestAnimationFrame method?\nThe requestAnimationFrame() method in JavaScript is used to schedule a function to be called before the next repaint of the browser window, allowing you to create smooth, efficient animations. It's primarily used for animations and visual updates, making it an essential tool for improving performance when you're animating elements on the web.\n\nconst element = document.getElementById(\"myElement\");\nfunction animate() {\n  let currentPosition = parseInt(window.getComputedStyle(element).left, 10);\n\n  // Move the element 2px per frame\n  currentPosition += 2;\n  element.style.left = currentPosition + \"px\";\n  // If the element hasn't moved off-screen, request the next frame\n  if (currentPosition < window.innerWidth) {\n    requestAnimationFrame(animate);\n  }\n}\n// Start the animation\nrequestAnimationFrame(animate);\n⬆ Back to Top\n\nWhat is the difference between substring and substr methods?\nBoth substring and substr are used to extract parts of a string, but there are subtle differences between the substring() and substr() methods in terms of syntax and behavior.\n\nsubstring(start, end)\n\nParameters:\nstart: The index to start extracting (inclusive).\nend: The index to stop extracting (exclusive).\nBehavior:\nIf start > end, it swaps the arguments.\nNegative values are treated as 0.\n let str = \"Hello World\";\n console.log(str.substring(0, 5));   // \"Hello\"\n console.log(str.substring(5, 0));   // \"Hello\" (swapped)\n console.log(str.substring(-3, 4));  // \"Hell\" (negative = 0)\nsubstr(start, length) (Deprecated)\n\nParameters:\nstart: The index to start extracting.\nlength: The number of characters to extract.\nBehavior:\nIf start is negative, it counts from the end of the string.\nIf length is omitted, it extracts to the end of the string.\nlet str = \"Hello World\"; console.log(str.substr(0, 5)); // \"Hello\" \nconsole.log(str.substr(-5, 3)); // \"Wor\" (starts from 'W')`\nNote: substr() is considered a legacy feature in ECMAScript, so it is best to avoid using it if possible.\n\n⬆ Back to Top\n\nHow to find the number of parameters expected by a function?\nThe function's object has a length property which tells you how many formal parameters expected by a function. This is a static value defined by the function, not the number of arguments the function is called with(arguments.length). The basic usage of length propery is,\nfunction multiply(x, y) {\n  return x * y;\n}\n\nfunction sum(a, b, c) {\n  return a + b + c;\n}\n\nconsole.log(multiply.length); //2\nconsole.log(sum.length); //3\nBut there are few important rules which needs to be noted while using length property.\n\nDefault values: Only the parameters which exists before a default value are considered.\n\nfunction sum(a, b = 2, c = 3) {\n  return a + b + c;\n}\nconsole.log(sum.length); // 1\nRest params: The rest parameters are excluded with in length property.\n\nfunction sum(a, b, ...moreArgs) {\n  let total = a + b;\n  for (const arg of moreArgs) {\n    total += arg;\n  }\n  return total;\n}\nconsole.log(sum.length); // 2\nDestructuring patterns: Each destructuring pattern counted as a single parameter.\n\nfunction func([a, b], { x, y }) {\n  console.log(a + b, x, y);\n}\n\nconsole.log(func.length); // 2\nNote: The Function constructor is itself a function object and it has a length property of 1.\n\n⬆ Back to Top\n\nWhat is globalThis, and what is the importance of it?\nNowadays JavaScript language is used in a wide variety of environments and each environment has its own object model. Due to this fact, there are different ways(syntax) to access the global object.\n\nIn web browser, the global object is accessible via window, self, or frames.\nIn Node environment, you have to use global.\nIn Web workers, the global object is available through self.\nThe globalThis property provides a standard way of accessing the global object without writing various code snippet to support multiple environments. For example, the global object retuned from multiple environments as shown below,\n\n//1. browser environment\nconsole.log(globalThis); // => Window {...}\n\n//2. node.js environment\nconsole.log(globalThis); // => Object [global] {...}\n\n//3. web worker environment\nconsole.log(globalThis); // => DedicatedWorkerGlobalScope {...}\n⬆ Back to Top\n\nWhat are the array mutation methods?\nJavaScript array methods can be categorized into two groups:\nMutating methods: These are the methods that directly modify the original array.\nNon-mutating methods: These methods return a new array without altering the original one.\nThere are 9 methods in total that mutate the arrays,\n\npush: Adds one or more elements to the end of the array and returns the new length.\npop: Removes the last element from the array and returns that element.\nunshift: Adds one or more elements to the beginning of the array and returns the new length..\nshift: Removes the first element from the array and returns that element.\nsplice: Adds or removes elements from the array at a specific index position.\nsort: Sorts the elements of the array in-place based on a given sorting criteria.\nreverse: Reverses the order of elements in the given array.\nfill: Fills all elements of the array with a specific value.\ncopyWithIn: Copies a sequence of elements within the array to a specified target index in the same array.\n⬆ Back to Top\n\nWhat is module scope in JavaScript?\nModule scope is a feature introduced with ES6 (ES2015) modules that creates a scope specific to a module file, isolating variables and functions declared within it from the global scope and other modules. Variables and functions declared in a module are private by default and can only be accessed by other modules if they are explicitly exported.\nKey characteristics of module scope:\n\nVariables declared in a module are scoped to that module only.\nEach module has its own top-level scope\nVariables and functions need to be explicitly exported to be used in other modules\nThe global scope cannot access module variables unless they are explicitly exported and imported\nModules are always executed in strict mode\n// moduleA.js\n\n// This variable is PRIVATE to moduleA. It's like a tool inside a closed box.\nconst privateVariable = \"I am private\";\n\n// This variable is PUBLIC because it's exported. Others can use it when they import moduleA.\nexport const publicVariable = \"I am public\";\n\n// PUBLIC function because it's exported. But it can still access privateVariable inside moduleA.\nexport function publicFunction() {\n  console.log(privateVariable); // ✅ This works because we're inside the same module.\n  return \"Hello from publicFunction!\";\n}\n\n// moduleB.js\n\n// Importing PUBLIC items from moduleA.\nimport { publicVariable, publicFunction } from \"./moduleA.js\";\n\nconsole.log(publicVariable); // ✅ \"I am public\" - Works because it's exported.\nconsole.log(publicFunction()); // ✅ \"Hello from publicFunction!\" - Works as well.\n\n// ❌ This will cause an ERROR because privateVariable was NOT exported from moduleA.\n// console.log(privateVariable);   // ❌ ReferenceError: privateVariable is not defined\nCommon use cases and benefits:\n\nEncapsulation of module-specific code\nPrevention of global scope pollution\nBetter code organization and maintenance\nExplicit dependency management\nProtection of private implementation details\n⬆ Back to Top\n\nWhat are shadowing and illegal shadowing?\nBoth shadowing and illegal shadowing refer to how variable names can \"hide\" or override others within nested scopes.\n\nShadowing occurs when a variable declared within a certain scope (like a function or block) has the same name as a variable declared in an outer scope. The inner variable shadows the outer one — meaning, the inner variable takes precedence in its own scope.\n\nLet's take an example where the inner a inside func() shadows the outer variable a.\n\nlet a = 10;\n\nfunction func() {\n  let a = 20; // Shadows the outer 'a'\n  console.log(a); // 20\n}\n\nfunc();\nconsole.log(a); // 10\nIllegal shadowing in JavaScript refers to a syntax error that happens when you try to declare a block-scoped variable (let or const) with the same name as a variable declared using var in the same or an overlapping scope.\n\nFor example, if you declare both block-scoped variable and function scoped variable using the same name inside a function causes an illegal shadowing.\n\nfunction test() {\n  var a = 10;\n  let a = 20; // SyntaxError: Identifier 'a' has already been declared\n}\nAs an another example, if you declare a variable with let or const in an outer scope, and then try to redeclare it with var inside a nested block, JavaScript throws an error — even though var is supposed to be function-scoped. Since the var appears in a block, it ends up trying to overwrite the let in the outer scope, which causes a conflict.\n\nlet a = 10;\n{\n  var a = 20; // SyntaxError: Identifier 'a' has already been declared\n  console.log(a);\n}\n⬆ Back to Top\n\nWhy is it important to remove event listeners after use?\nIn JavaScript, you need to be mindful of removing event listeners to avoid memory leaks — especially in long-lived apps like single-page applications (SPAs) or when working with frameworks/libraries. Eventhough JavaScript has automatic garbage collection, memory leaks can still happen if:\n\nA DOM element is removed, but a listener still references it.\nA callback (event listener) holds a reference to a large object or closure that can't be cleaned up.\nGlobal objects like window, document etc retain listeners indefinitely unless manually removed.\nSo if you add any event listeners to DOM element, it is a good practice to remove it after its usage as shown below,\n\n   const button = document.getElementById(\"btn\");\n\n    function handleClick() {\n      console.log(\"Clicked!\");\n    }\n\n    button.addEventListener(\"click\", handleClick);\n\n    // Always remove when done\n    button.removeEventListener(\"click\", handleClick);\n⬆ Back to Top\n\nCoding Exercise"
  },
  {
    "id": "427",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "var car = new Vehicle(\"Honda\", \"white\", \"2010\", \"UK\");\nconsole.log(car);\n\nfunction Vehicle(model, color, year, country) {\n  this.model = model;\n  this.color = color;\n  this.year = year;\n  this.country = country;\n}\n1: Undefined\n2: ReferenceError\n3: null\n4: {model: \"Honda\", color: \"white\", year: \"2010\", country: \"UK\"}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "428",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function foo() {\n  let x = (y = 0);\n  x++;\n  y++;\n  return x;\n}\n\nconsole.log(foo(), typeof x, typeof y);\n1: 1, undefined and undefined\n2: ReferenceError: X is not defined\n3: 1, undefined and number\n4: 1, number and number\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "429",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function main() {\n  console.log(\"A\");\n  setTimeout(function print() {\n    console.log(\"B\");\n  }, 0);\n  console.log(\"C\");\n}\nmain();\n1: A, B and C\n2: B, A and C\n3: A and C\n4: A, C and B\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "430",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below equality check",
    "answer": "console.log(0.1 + 0.2 === 0.3);\n1: false\n2: true\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "431",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "var y = 1;\nif (function f() {}) {\n  y += typeof f;\n}\nconsole.log(y);\n1: 1function\n2: 1object\n3: ReferenceError\n4: 1undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "432",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function foo() {\n  return;\n  {\n    message: \"Hello World\";\n  }\n}\nconsole.log(foo());\n1: Hello World\n2: Object {message: \"Hello World\"}\n3: Undefined\n4: SyntaxError\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "433",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "var myChars = [\"a\", \"b\", \"c\", \"d\"];\ndelete myChars[0];\nconsole.log(myChars);\nconsole.log(myChars[0]);\nconsole.log(myChars.length);\n1: [empty, 'b', 'c', 'd'], empty, 3\n2: [null, 'b', 'c', 'd'], empty, 3\n3: [empty, 'b', 'c', 'd'], undefined, 4\n4: [null, 'b', 'c', 'd'], undefined, 4\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "434",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code in latest Chrome",
    "answer": "var array1 = new Array(3);\nconsole.log(array1);\n\nvar array2 = [];\narray2[2] = 100;\nconsole.log(array2);\n\nvar array3 = [, , ,];\nconsole.log(array3);\n1: [undefined × 3], [undefined × 2, 100], [undefined × 3]\n2: [empty × 3], [empty × 2, 100], [empty × 3]\n3: [null × 3], [null × 2, 100], [null × 3]\n4: [], [100], []\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "435",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const obj = {\n  prop1: function () {\n    return 0;\n  },\n  prop2() {\n    return 1;\n  },\n  [\"prop\" + 3]() {\n    return 2;\n  },\n};\n\nconsole.log(obj.prop1());\nconsole.log(obj.prop2());\nconsole.log(obj.prop3());\n1: 0, 1, 2\n2: 0, { return 1 }, 2\n3: 0, { return 1 }, { return 2 }\n4: 0, 1, undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "436",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);\n1: true, true\n2: true, false\n3: SyntaxError, SyntaxError,\n4: false, false\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "437",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code in non-strict mode",
    "answer": "function printNumbers(first, second, first) {\n  console.log(first, second, first);\n}\nprintNumbers(1, 2, 3);\n1: 1, 2, 3\n2: 3, 2, 3\n3: SyntaxError: Duplicate parameter name not allowed in this context\n4: 1, 2, 1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "438",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const printNumbersArrow = (first, second, first) => {\n  console.log(first, second, first);\n};\nprintNumbersArrow(1, 2, 3);\n1: 1, 2, 3\n2: 3, 2, 3\n3: SyntaxError: Duplicate parameter name not allowed in this context\n4: 1, 2, 1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "439",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const arrowFunc = () => arguments.length;\nconsole.log(arrowFunc(1, 2, 3));\n1: ReferenceError: arguments is not defined\n2: 3\n3: undefined\n4: null\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "440",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(String.prototype.trimLeft.name === \"trimLeft\");\nconsole.log(String.prototype.trimLeft.name === \"trimStart\");\n1: True, False\n2: False, True\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "441",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(Math.max());\n1: undefined\n2: Infinity\n3: 0\n4: -Infinity\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "442",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(10 == [10]);\nconsole.log(10 == [[[[[[[10]]]]]]]);\n1: True, True\n2: True, False\n3: False, False\n4: False, True\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "443",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(10 + \"10\");\nconsole.log(10 - \"10\");\n1: 20, 0\n2: 1010, 0\n3: 1010, 10-10\n4: NaN, NaN\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "444",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log([0] == false);\nif ([0]) {\n  console.log(\"I'm True\");\n} else {\n  console.log(\"I'm False\");\n}\n1: True, I'm True\n2: True, I'm False\n3: False, I'm True\n4: False, I'm False\nAnswer"
  },
  {
    "id": "445",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log([1, 2] + [3, 4]);\n1: [1,2,3,4]\n2: [1,2][3,4]\n3: SyntaxError\n4: 1,23,4\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "446",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const numbers = new Set([1, 1, 2, 3, 4]);\nconsole.log(numbers);\n\nconst browser = new Set(\"Firefox\");\nconsole.log(browser);\n1: {1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\"}\n2: {1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"o\", \"x\"}\n3: [1, 2, 3, 4], [\"F\", \"i\", \"r\", \"e\", \"o\", \"x\"]\n4: {1, 1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\"}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "447",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(NaN === NaN);\n1: True\n2: False\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "448",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "let numbers = [1, 2, 3, 4, NaN];\nconsole.log(numbers.indexOf(NaN));\n1: 4\n2: NaN\n3: SyntaxError\n4: -1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "449",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "let [a, ...b, c] = [1, 2, 3, 4, 5];\nconsole.log(a, b, c);\n1: 1, [2, 3, 4, 5]\n2: 1, {2, 3, 4, 5}\n3: SyntaxError\n4: 1, [2, 3, 4]\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "450",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "async function func() {\n  return 10;\n}\nconsole.log(func());\n1: Promise {<fulfilled>: 10}\n2: 10\n3: SyntaxError\n4: Promise {<rejected>: 10}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "451",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "async function func() {\n  await 10;\n}\nconsole.log(func());\n1: Promise {<fulfilled>: 10}\n2: 10\n3: SyntaxError\n4: Promise {<resolved>: undefined}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "452",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function delay() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nasync function delayedLog(item) {\n  await delay();\n  console.log(item);\n}\n\nasync function processArray(array) {\n  array.forEach(item => {\n    await delayedLog(item);\n  })\n}\n\nprocessArray([1, 2, 3, 4]);\n1: SyntaxError\n2: 1, 2, 3, 4\n3: 4, 4, 4, 4\n4: 4, 3, 2, 1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "453",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function delay() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nasync function delayedLog(item) {\n  await delay();\n  console.log(item);\n}\n\nasync function process(array) {\n  array.forEach(async (item) => {\n    await delayedLog(item);\n  });\n  console.log(\"Process completed!\");\n}\nprocess([1, 2, 3, 5]);\n1: 1 2 3 5 and Process completed!\n2: 5 5 5 5 and Process completed!\n3: Process completed! and 5 5 5 5\n4: Process completed! and 1 2 3 5\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "454",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "var set = new Set();\nset.add(\"+0\").add(\"-0\").add(NaN).add(undefined).add(NaN);\nconsole.log(set);\n1: Set(4) {\"+0\", \"-0\", NaN, undefined}\n2: Set(3) {\"+0\", NaN, undefined}\n3: Set(5) {\"+0\", \"-0\", NaN, undefined, NaN}\n4: Set(4) {\"+0\", NaN, undefined, NaN}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "455",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const sym1 = Symbol(\"one\");\nconst sym2 = Symbol(\"one\");\n\nconst sym3 = Symbol.for(\"two\");\nconst sym4 = Symbol.for(\"two\");\n\nconsole.log(sym1 === sym2, sym3 === sym4);\n1: true, true\n2: true, false\n3: false, true\n4: false, false\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "456",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const sym1 = new Symbol(\"one\");\nconsole.log(sym1);\n1: SyntaxError\n2: one\n3: Symbol('one')\n4: Symbol\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "457",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "let myNumber = 100;\nlet myString = \"100\";\n\nif (!typeof myNumber === \"string\") {\n  console.log(\"It is not a string!\");\n} else {\n  console.log(\"It is a string!\");\n}\n\nif (!typeof myString === \"number\") {\n  console.log(\"It is not a number!\");\n} else {\n  console.log(\"It is a number!\");\n}\n1: SyntaxError\n2: It is not a string!, It is not a number!\n3: It is not a string!, It is a number!\n4: It is a string!, It is a number!\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "458",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(\n  JSON.stringify({ myArray: [\"one\", undefined, function () {}, Symbol(\"\")] })\n);\nconsole.log(\n  JSON.stringify({ [Symbol.for(\"one\")]: \"one\" }, [Symbol.for(\"one\")])\n);\n1: {\"myArray\":['one', undefined, {}, Symbol]}, {}\n2: {\"myArray\":['one', null,null,null]}, {}\n3: {\"myArray\":['one', null,null,null]}, \"{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]\"\n4: {\"myArray\":['one', undefined, function(){}, Symbol('')]}, {}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "459",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "class A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n\nnew A();\nnew B();\n1: A, A\n2: A, B\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "460",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const [x, ...y, z] = [1, 2, 3, 4];\nconsole.log(x, y, z);\n1: 1, [2, 3], 4\n2: 1, [2, 3, 4], undefined\n3: 1, [2], 3\n4: SyntaxError\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "461",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const { a: x = 10, b: y = 20 } = { a: 30 };\n\nconsole.log(x);\nconsole.log(y);\n1: 30, 20\n2: 10, 20\n3: 10, undefined\n4: 30, undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "462",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function area({ length = 10, width = 20 }) {\n  console.log(length * width);\n}\n\narea();\n1: 200\n2: Error\n3: undefined\n4: 0\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "463",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const props = [\n  { id: 1, name: \"John\" },\n  { id: 2, name: \"Jack\" },\n  { id: 3, name: \"Tom\" },\n];\n\nconst [, , { name }] = props;\nconsole.log(name);\n1: Tom\n2: Error\n3: undefined\n4: John\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "464",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function checkType(num = 1) {\n  console.log(typeof num);\n}\n\ncheckType();\ncheckType(undefined);\ncheckType(\"\");\ncheckType(null);\n1: number, undefined, string, object\n2: undefined, undefined, string, object\n3: number, number, string, object\n4: number, number, number, number\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "465",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function add(item, items = []) {\n  items.push(item);\n  return items;\n}\n\nconsole.log(add(\"Orange\"));\nconsole.log(add(\"Apple\"));\n1: ['Orange'], ['Orange', 'Apple']\n2: ['Orange'], ['Apple']\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "466",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function greet(greeting, name, message = greeting + \" \" + name) {\n  console.log([greeting, name, message]);\n}\n\ngreet(\"Hello\", \"John\");\ngreet(\"Hello\", \"John\", \"Good morning!\");\n1: SyntaxError\n2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "467",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function outer(f = inner()) {\n  function inner() {\n    return \"Inner\";\n  }\n}\nouter();\n1: ReferenceError\n2: Inner\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "468",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function myFun(x, y, ...manyMoreArgs) {\n  console.log(manyMoreArgs);\n}\n\nmyFun(1, 2, 3, 4, 5);\nmyFun(1, 2);\n1: [3, 4, 5], undefined\n2: SyntaxError\n3: [3, 4, 5], []\n4: [3, 4, 5], [undefined]\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "469",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const obj = { key: \"value\" };\nconst array = [...obj];\nconsole.log(array);\n1: ['key', 'value']\n2: TypeError\n3: []\n4: ['key']\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "470",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function* myGenFunc() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar myGenObj = new myGenFunc();\nconsole.log(myGenObj.next().value);\n1: 1\n2: undefined\n3: SyntaxError\n4: TypeError\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "471",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function* yieldAndReturn() {\n  yield 1;\n  return 2;\n  yield 3;\n}\n\nvar myGenObj = yieldAndReturn();\nconsole.log(myGenObj.next());\nconsole.log(myGenObj.next());\nconsole.log(myGenObj.next());\n1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }\n2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }\n3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }\n4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "472",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const myGenerator = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\nfor (const value of myGenerator) {\n  console.log(value);\n  break;\n}\n\nfor (const value of myGenerator) {\n  console.log(value);\n}\n1: 1,2,3 and 1,2,3\n2: 1,2,3 and 4,5,6\n3: 1 and 1\n4: 1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "473",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const num = 0o38;\nconsole.log(num);\n1: SyntaxError\n2: 38\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "474",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const squareObj = new Square(10);\nconsole.log(squareObj.area);\n\nclass Square {\n  constructor(length) {\n    this.length = length;\n  }\n\n  get area() {\n    return this.length * this.length;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n1: 100\n2: ReferenceError\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "475",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "function Person() {}\n\nPerson.prototype.walk = function () {\n  return this;\n};\n\nPerson.run = function () {\n  return this;\n};\n\nlet user = new Person();\nlet walk = user.walk;\nconsole.log(walk());\n\nlet run = Person.run;\nconsole.log(run());\n1: undefined, undefined\n2: Person, Person\n3: SyntaxError\n4: Window, Window\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "476",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "class Vehicle {\n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    console.log(`${this.name} vehicle started`);\n  }\n}\n\nclass Car extends Vehicle {\n  start() {\n    console.log(`${this.name} car started`);\n    super.start();\n  }\n}\n\nconst car = new Car(\"BMW\");\nconsole.log(car.start());\n1: SyntaxError\n2: BMW vehicle started, BMW car started\n3: BMW car started, BMW vehicle started\n4: BMW car started, BMW car started\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "477",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "const USER = { age: 30 };\nUSER.age = 25;\nconsole.log(USER.age);\n1: 30\n2: 25\n3: Uncaught TypeError\n4: SyntaxError\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "478",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code",
    "answer": "console.log(\"🙂\" === \"🙂\");\n1: false\n2: true\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "479",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "console.log(typeof typeof typeof true);\n1: string\n2: boolean\n3: NaN\n4: number\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "480",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let zero = new Number(0);\n\nif (zero) {\n  console.log(\"If\");\n} else {\n  console.log(\"Else\");\n}\n1: If\n2: Else\n3: NaN\n4: SyntaxError\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "481",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code in non strict mode?",
    "answer": "let msg = \"Good morning!!\";\n\nmsg.name = \"John\";\n\nconsole.log(msg.name);\n1: \"\"\n2: Error\n3: John\n4: Undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "482",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let count = 10;\n\n(function innerFunc() {\n  if (count === 10) {\n    let count = 11;\n    console.log(count);\n  }\n  console.log(count);\n})();\n1: 11, 10\n2: 11, 11\n3: 10, 11\n4: 10, 10\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "483",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code ?",
    "answer": "1: console.log(true && 'hi');\n2: console.log(true && 'hi' && 1);\n3: console.log(true && '' && 0);\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "484",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code ?",
    "answer": "let arr = [1, 2, 3];\nlet str = \"1,2,3\";\n\nconsole.log(arr == str);\n1: false\n2: Error\n3: true\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "485",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "getMessage();\n\nvar getMessage = () => {\n  console.log(\"Good morning\");\n};\n1: Good morning\n2: getMessage is not a function\n3: getMessage is not defined\n4: Undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "486",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let quickPromise = Promise.resolve();\n\nquickPromise.then(() => console.log(\"promise finished\"));\n\nconsole.log(\"program finished\");\n1: program finished\n2: Cannot predict the order\n3: program finished, promise finished\n4: promise finished, program finished\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "487",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "console\n  .log(\"First line\")\n  [(\"a\", \"b\", \"c\")].forEach((element) => console.log(element));\nconsole.log(\"Third line\");\n1: First line, then print a, b, c in a new line, and finally print Third line as next line\n2: First line, then print a, b, c in a first line, and print Third line as next line\n3: Missing semi-colon error\n4: Cannot read properties of undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "488",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Write a function that returns a random HEX color",
    "answer": "Solution 1 (Iterative generation)\nSolution 2 (One-liner)\n⬆ Back to Top"
  },
  {
    "id": "489",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "var of = [\"of\"];\nfor (var of of of) {\n  console.log(of);\n}\n1: of\n2: SyntaxError: Unexpected token of\n3: SyntaxError: Identifier 'of' has already been declared\n4: ReferenceError: of is not defined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "490",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "const numbers = [11, 25, 31, 23, 33, 18, 200];\nnumbers.sort();\nconsole.log(numbers);\n1: [11, 18, 23, 25, 31, 33, 200]\n2: [11, 18, 200, 23, 25, 31, 33]\n3: [11, 25, 31, 23, 33, 18, 200]\n4: Cannot sort numbers\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "491",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output order of below code?",
    "answer": "setTimeout(() => {\n  console.log(\"1\");\n}, 0);\nPromise.resolve(\"hello\").then(() => console.log(\"2\"));\nconsole.log(\"3\");\n1: 1, 2, 3\n2: 1, 3, 2\n3: 3, 1, 2\n4: 3, 2, 1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "492",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "console.log(name);\nconsole.log(message());\nvar name = \"John\";\n(function message() {\n  console.log(\"Hello John: Welcome\");\n});\n1: John, Hello John: Welcome\n2: undefined, Hello John, Welcome\n3: Reference error: name is not defined, Reference error: message is not defined\n4: undefined, Reference error: message is not defined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "493",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "message();\n\nfunction message() {\n  console.log(\"Hello\");\n}\nfunction message() {\n  console.log(\"Bye\");\n}\n1: Reference error: message is not defined\n2: Hello\n3: Bye\n4: Compile time error\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "494",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "var currentCity = \"NewYork\";\n\nvar changeCurrentCity = function () {\n  console.log(\"Current City:\", currentCity);\n  var currentCity = \"Singapore\";\n  console.log(\"Current City:\", currentCity);\n};\n\nchangeCurrentCity();\n1: NewYork, Singapore\n2: NewYork, NewYork\n3: undefined, Singapore\n4: Singapore, Singapore\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "495",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code in an order?",
    "answer": "function second() {\n  var message;\n  console.log(message);\n}\n\nfunction first() {\n  var message = \"first\";\n  second();\n  console.log(message);\n}\n\nvar message = \"default\";\nfirst();\nconsole.log(message);\n1: undefined, first, default\n2: default, default, default\n3: first, first, default\n4: undefined, undefined, undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "496",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "var expressionOne = function functionOne() {\n  console.log(\"functionOne\");\n};\nfunctionOne();\n1: functionOne is not defined\n2: functionOne\n3: console.log(\"functionOne\")\n4: undefined\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "497",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "const user = {\n  name: \"John\",\n  eat() {\n    console.log(this);\n    var eatFruit = function () {\n      console.log(this);\n    };\n    eatFruit();\n  },\n};\nuser.eat();\n1: {name: \"John\", eat: f}, {name: \"John\", eat: f}\n2: Window {...}, Window {...}\n3: {name: \"John\", eat: f}, undefined\n4: {name: \"John\", eat: f}, Window {...}\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "498",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let message = \"Hello World!\";\nmessage[0] = \"J\";\nconsole.log(message);\n\nlet name = \"John\";\nname = name + \" Smith\";\nconsole.log(name);\n1: Jello World!, John Smith\n2: Jello World!, John\n3: Hello World!, John Smith\n4: Hello World!, John\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "499",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let user1 = {\n  name: \"Jacob\",\n  age: 28,\n};\n\nlet user2 = {\n  name: \"Jacob\",\n  age: 28,\n};\n\nconsole.log(user1 === user2);\n1: True\n2: False\n3: Compile time error\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "500",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "function greeting() {\n  setTimeout(function () {\n    console.log(message);\n  }, 5000);\n  const message = \"Hello, Good morning\";\n}\ngreeting();\n1: Undefined\n2: Reference error:\n3: Hello, Good morning\n4: null\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "501",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "const a = new Number(10);\nconst b = 10;\nconsole.log(a === b);\n1: False\n2: True\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "502",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the type of below function?",
    "answer": "function add(a, b) {\n  console.log(\"The input arguments are: \", a, b);\n  return a + b;\n}\n1: Pure function\n2: Impure function\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "503",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "const promiseOne = new Promise((resolve, reject) => setTimeout(resolve, 4000));\nconst promiseTwo = new Promise((resolve, reject) => setTimeout(reject, 4000));\n\nPromise.all([promiseOne, promiseTwo]).then((data) => console.log(data));\n1: [{status: \"fulfilled\", value: undefined}, {status: \"rejected\", reason: undefined}]\n2: [{status: \"fulfilled\", value: undefined}, Uncaught(in promise)]\n3: Uncaught (in promise)\n4: [Uncaught(in promise), Uncaught(in promise)]\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "504",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "try {\n  setTimeout(() => {\n    console.log(\"try block\");\n    throw new Error(`An exception is thrown`);\n  }, 1000);\n} catch (err) {\n  console.log(\"Error: \", err);\n}\n1: try block, Error: An exception is thrown\n2: Error: An exception is thrown\n3: try block, Uncaught Error: Exception is thrown\n4: Uncaught Error: Exception is thrown\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "505",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let a = 10;\nif (true) {\n  let a = 20;\n  console.log(a, \"inside\");\n}\nconsole.log(a, \"outside\");\n1: 20, \"inside\" and 20, \"outside\"\n2: 20, \"inside\" and 10, \"outside\"\n3: 10, \"inside\" and 10, \"outside\"\n4: 10, \"inside\" and 20, \"outside\"\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "506",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let arr = [1, 2, 3, 4, 5, -6, 7];\narr.length = 0;\nconsole.log(arr);\n1: 0\n2: Undefined\n3: null\n4: [ ]\nAnswer\n---\n⬆ Back to Top"
  },
  {
    "id": "507",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you verify two strings are anagrams or not?",
    "answer": "An anagram is a word or phrase formed by rearranging all the letters of a different word or phrase exactly once. For example, the anagrams of \"eat\" word are \"tea\" and \"ate\".\n\nYou can split each word into characters, followed by sort action and later join them back. After that you can compare those two words to verify whether those two words are anagrams or not.\n\nfunction verifyAnagrams(word1, word2) {\n  return word1.split(\"\").sort().join(\"\") === word2.split(\"\").sort().join(\"\");\n}\nconsole.log(verifyAnagrams(\"eat\", \"ate\"));\n⬆ Back to Top"
  },
  {
    "id": "508",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "printHello();\n\nprintMessage();\n\nfunction printHello() {\n  console.log(\"Hello\");\n\n  function printMessage() {\n    console.log(\"Good day\");\n  }\n}\n1: Hello, Good day\n2: Reference Error: printHello is not defined, Reference Error: printMessage is not defined\n3: Reference Error: printHello is not defined, Good day\n4: Hello, Reference Error: printMessage is not defined\nAnswer\n---\n⬆ Back to Top"
  },
  {
    "id": "509",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the time taken to execute below timeout callback?",
    "answer": "console.log(\"Start code\");\n\nsetTimeout(function () {\n  console.log(\"Callback code\");\n}, 5000);\n\nconsole.log(\"After callback\");\n\nlet startTime = new Date().getTime();\nlet endTime = startTime;\n\nwhile (endTime <= startTime + 10000) {\n  endTime = new Date().getTime();\n}\n\nconsole.log(\"End code\");\n1: > 10 sec\n2: Immediately\n3: < 10 sec\n4: <= 5sec\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "510",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "let arr = [\"wöchentlich\", \"Woche\", \"wäre\", \"Wann\"];\nconsole.log(arr.sort());\n1: ['wöchentlich','Woche', 'wäre', 'Wann']\n2: ['Wann', 'wäre', 'Woche', 'wöchentlich']\n3: ['Wann', 'Woche', 'wäre', 'wöchentlich']\n4: ['wäre', 'Wann', 'wöchentlich','Woche']\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "511",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "function func(a, b = 2) {\n  console.log(arguments.length);\n}\n\nfunc(undefined);\nfunc();\n1: 1, 0\n2: 0, 0\n3: 0, 1\n4: 1, 1\nAnswer\n⬆ Back to Top"
  },
  {
    "id": "512",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the output of below code?",
    "answer": "function func(a, b = 2) {\n  console.log(arguments.length);\n}\n\nfunc(undefined);\nfunc();\n1: 1, 0\n2: 0, 0\n3: 0, 1\n4: 1, 1\nAnswer\n\n\n\n\n\n\n\nسوالات انتهای صفحه در آبان 1403 به این لیست اضافه شدن! ممنون از درخواست \"عارفه عزیز\" که در کامنت همین مقاله درخواست کرده بود.×\nری اکت چیست ؟\nری اکت یک کتابخونه جاوا اسکریپتی هست که توسط فیسبوک تو سال 2013 ساخته شده. کتابخانه ری اکت برای ساختن UI ( رابط کاربری ) برای اپیکیشن های تحت وب کاربرد داره.\n\nری اکت به ما اجازه میده که اپیکیشن های تحت وب بسیار کارآمد و بهینه رو در مدت زمان خیلی کمی بسازیم!\n\nپیشنهاد میکنم مقاله کتابخانه ریکت رو هم مطالعه کنید چون تو این مقاله خیلی جزئی تر به این موضوع پرداختیم که ریکت چیه و چه مزایایی داره.\n\nاینکه ری اکت چیست، جز مرسوم ترین سوالات مصاحبه ری اکت هست که تو هر مصاحبه ای پرسیده میشه.\n\nJSX در ری اکت چیست ؟\nJSX در ری اکت یک افزونه جاوااسکریپتی هست که به ما اجازه نوشتن کد های مشابه HTML رو در جاوااسکریپت میده! در واقع JSX به ما اجازه میده که تو فایل های جاوااسکریپتی مثل ری اکت، از HTML استفاده کنیم 🙂\n\nعبارت JSX مخفف JavaScript Syntax extention هست.\n\nبصورت پیشفرض ما نمیتونیم کد های HTML ( تگ های HTML ) رو داخل فایل های جاوااسکریپتی بنویسیم! از اونجاییکه تو ری اکت از جاوااسکریپت استفاده میشه، پس اینجا هم نمیونیم از HTML استفاده کنیم.\n\nراه حل JSX هست 🙂 به کمک JSX میشه از دستورات HMTL داخل فایل های React استفاده کرد..\n\nتو تیکه کد زیر که یک JSX هست، ما یک اِلِمان P ( مشابه P در HTML ) ساختیم و نتیجه رو داخل یک متغیر ذخیره کردیم :\n\nconst frontEndi = <p>سلام</p>\nProps در ریکت چیست؟ Props در ری اکت چیکار میکنه ؟\nProps در React برای انتقال یک دیتا از کامپوننت پدر به کامپوننت فرزند کاربرد داره !\n\nProps ها ، ورودی کامپوننت ها هستن ! به کمک Props در React میتونیم به کامپوننت های خودمون ورودی بدیم.\n\nاگه با جاوااسکریپت کار کرده باشید حتما با آرگومان های ورودی توابع آشنا هستین.. آرگومان های ورودی باعث میشدن ما بتونیم به تابع خودمون مقدار پاس بدیم و از اون مقدار در تابع استفاده کنیم.\n\n Props در ری اکت معادل آرگومان ورودی توابع در جاوااسکریپت هستن!\n\nProps ها به کامپوننت ها این اجازه رو میدن که مقادیر داینامیک و سفارشی داشته باشن. ( محتوا و خروجیشون استاتیک و ثابت نباشه ).\n\nدر حقیقت Props باعث میشه کامپوننت استاتیک ما ، داینامیک و reUsable ( قابل استفاده مجدد ) باشه . یعنی از یک کامپوننت بارها با اطلاعات متفاوت استفاده کنیم ( عکس ، متن و .. متفاوت )\n\nتو مقاله آموزش Props در ریکت بصورت دقیقتر و تخصصی تر به این موضوع پرداختیم و روش استفاده ، مثال و تیکه کد های Props در React رو قرار دادیم.\n\nدرک Props و کاربردش معمولا تو هر جلسه استخدامی ری اکت پرسیده میشه.\n\nState در ری اکت چیست ؟ هوک useState در ریکت چیکار میکنه ؟\nهوک useState ری اکت به ما این امکان رو میده که حالت ها و مقادیر کامپوننت خودمون رو در جایی ذخیره کنیم. این حالت ها (stateها) میتونن از هر نوعی ( string,number,array,object و..) باشن .\n\nبا ذخیره کردن این state ها ، میتونیم تو کل اون کامپوننت ازشون مثل یه متغیر استفاده کنیم و هر زمان نیاز داشتیم مقدارشون رو بروزرسانی کنیم .\n\nدر حقیقت State ها ، مقادیر یا حالت های کامپوننت ما هستن و میتونن هر مقداری داشته باشن ( عدد ، رشته ، آبجکت ، آرایه و .. )\n\nمثلا اگر میخوایم نام کاربر رو ذخیره کنیم، باید یک State براش درست کنیم ( اسمش هرچیزی میتونه باشه مثلا name )\n\nچطور از هوک useState در ریکت استفاده کنیم ؟\nبا ساختن هر state ( توسط useState ) باید یک مقدار اولیه به اون state بدید .\n\nمثلا اگه میخواید Theme اپیکیشن رو داخل state ذخیره کنید ، باید مشخص کنید که مقدار اولیه Theme چی باشه ؟!\n\nتو مثال زیر ما به کمک هوک useState حالت اپیکیشن رو ذخیره کردیم.\n(تو این مثال از theme برای دسترسی به مقدار و از setTheme برای بروز کردن مقدار استفاده میکنیم ):\n\nconst [theme,setTheme] = useState('DarkMode')\nاگه کد بالارو کامل متوجه نشدید ، اصلا نگران نباشید 🙂 تو مقاله useState در ریکت بصورت دقیقتر همراه با مثال و تیکه کد این هوک کاربردی رو توضیح دادیم .\n\n \n\nتفاوت Props و State در کامپوننت چیست ؟\nState و Props تا حدود زیادی شبیه به همدیگه هستن چون هم Props و هم State یک آبجکت جاوا اسکریپتی هستن و زمانیکه مقدارشون تغییر میکنه، کامپوننت ما re-render میشه.\n\nاما Props در کامپوننت مثل آرگومان ورودی یک تابع هست. درصورتیکه State در کامپوننت حکم یک متغیر در تابع رو داره که میتونه مقادیر مارو ذخیره کنه.\n\nState  و Props هرجفتشون برای مدیریت داده تو کامپوننت کاربرد دارن اما اهداف متفاوتی دارن!\n\nProps هایی که از کامپوننت والد به کامپوننت فرزند فرستاده میشن صرفا قابل خوندن هستن ( قابل ویرایش نیستن ) درصورتیکه State ها قابل ویرایش هستن.\n\nاین سوال از این بابت پرسیده میشه که درک عمیق شمارو نسبت به Props و State بسنجن. پس احتمالش زیاده که بین سوالات مصاحبه ری اکت ، این سوال هم وجود داشته باشه.\n\n \n\nمزایای کتابخانه ری اکت چیست ؟ ویژگی های کتابخانه React چیه ؟\nکتابخانه ری اکت چندین ویژگی داره که باعث شده پرطرفدارترین کتابخانه جاوا اسکریپتی محسوب بشه.\n\n \n\nدام مجازی در ریکت !\nاولین ویژگی ری اکت دام مجازی در ری اکت هست.  Virtual DOM تو ری اکت باعث شده که اپیکیشن های ری اکتی خیلی خیلی بهینه تر بشن .\n\nدر حقیقت تو اپیکیشن های ری اکتی ، ما بجای ارتباط مستقیم با DOM اصلی ، با DOM مجازی ارتباط برقرار میکنیم.\n\nبطور خلاصه و ساده Virtual DOM یک نسخه مجازی و کوچک شده از DOM اصلی وبسایت شماست که React از اون برای اعمال سریع تغییرات روی سایت استفاده میکنه.\n\nانجام اینکار باعث میشه که فقط همان اِلِمانی که تغییر داشته ، در UI بروزرسانی بشه .\n\nدام مجازی همانطور که از اسمش هم پیداست ، یک نسخه مجازی از DOM واقعیه .\n\nهربار که چیزی ( اِلِمانی ) در وبسایت ما تغییر میکنه ، بجای اینکه DOM اصلی بروزرسانی بشه ، دام مجازی بروزرسانی میشه .\n\nاگه هنوز دام مجازی رو خوب متوجه نشدید ، پیشنهاد میکنم مقاله Virtual DOM در ری اکت رو مطالعه کنید چون تو این مقاله بصورت 0 تا 100 به بررسی دام مجازی پرداختیم.\n\n \n\nکامپوننت های Reusable در ریکت\nدومین ویژگی React ، این هست که کامپوننت هایی به ما میده که قابلیت استفاده مجدد دارن ( Reusable Components )\n\nReact به ما اجازه میده کامپوننت هایی بسازیم که قابلیت استفاده مجدد دارن. از این کامپوننت ها میتونیم در هر صفحه ای و به هر تعداد که لازم داریم استفاده کنیم. کامپوننت های Reusable فرایند توسعه و مدیریت اپیکیشن رو خیلی راحت تر و سریع تر میکنن.\n\nبطور خلاصه کامپوننت ها در کتابخونه ری اکت یک تیکه کد مستقل و قابل استفاده مجدد هستن. نیازی نیست در هر صفحه اون تیکه کد رو بنویسیم، میتونیم یکبار اون تیکه کد رو در قالب یک کامپوننت بنویسیم و بارها ازش استفاده کنیم.\n\n \n\nرندر سمت سرور در ریکت ( Server Side Rendering )\nسومین ویژگی مهم ری اکت این هست که از SSR یا همون رندر سمت سرور پشتیبانی میکنه . این یعنی صفحات ما بجای اینکه در مرورگر render بشن، میتونن سمت سرور render بشن. SSR باعث میشه که اپیکیشن ما با سرعت خیلی بیشتری Render بشه.\n\nهمچنین SSR کمک میکنه تا مشکلات سئو تو اپیکیشن خودمون نداشته باشیم.\n\n \n\nهوک ها در ریکت ( React Hooks )\nچهارمین مورد از مزایای کتابخانه ری اکت، وجود هوک های قدرتمند ری اکت هستن. تو نسخه 16.8 ری اکت هوک های کاربردی و فوق العاده ای به React معرفی شد . هر کدوم از این Hook ها کار خاصی برای ما انجام میدن. و وجود داشتن این HOOK ها در ری اکت، قدرت ری اکت رو 2 چندان کرده.\n\n \n\nاحتمال اینکه این سوال مصاحبه ری اکت رو از شما بپرسن زیاده، چون ما به عنوان یک React Developer باید مزایای این کتابخانه ری اکتی رو بدونیم.\n\nچطور در ری اکت کامپوننت بسازیم ؟ انواع کامپوننت ها در React ؟\nبطور کل کتابخانه ری اکت دو نوع کامپوننت داریم :\n\n \n\nکامپوننت های فانکشنال ( Functional Component ) : \nکامپوننت های تابعی ( Functional Component ) رایج ترین نوع کامپوننت ها تو ری اکت هستن. استفاده کردن از این نوع کامپوننت ها خیلی ساده تره.  تو مثال زیر ما یک Functional Component ساختیم :\n\nfunction Parentheses() {\n    return (<h1>\n     من خروجی این کامپوننت هستم\n            </h1>);\n}\nکامپوننت های کلاسی ( Class Component ) :\nتا قبل از نسخه 16.8 ری اکت که کامپوننت های تابعی وجود نداشتن ، تنها گزینه ی ما برای ساختن کامپوننت ، کامپوننت های کلاسی ( Class Component )  بود.\n\nخود داکیومنت مرجع ری اکت، صادقانه گفته که پیشنهاد نمیشه از Class Component استفاده کنیم! پس همیشه باید سعی کنیم از Functional Component استفاده کنیم .\n\nروش ساختن یک Class Component بصورت زیر هست :\n\n \n\nclass Car extends React.Component {\n  render() {\n    return <h2>سلام من خروجی این کامپوننتم</h2>;\n  }\n}\nPure Component در ری اکت چیست ؟\nPure Component در ریکت یا همون کامپوننت های خالص هیچ مقداری رو خارج از خود کامپوننت تغییر نمیده. اگر مقدار State یا Props این نوع از کامپوننت ها با مقدار مشابه تغییر کنه، کامپوننت re-render نمیشه ( اما تو کامپوننت های عادی این مسئله باعث re-render شدن کامپوننت میشه)\n\nPureComponent در React با جلوگیری از re-render اضافه باعث بهبود عملکرد اپیکیشن ما میشه.\n\nتو مقاله PureComponent در ری اکت بصورت تخصصی این نوع از کامپوننت هارو بررسی کردیم و طرز استفاده و مزایای اون رو به همراه تیکه کد و مثال ذکر کردیم.\n\nمیشه State رو بصورت مستقیم آپدیت کرد ؟\nخیر! تغییر State بصورت مستقیم امکانپذیر نیست و صرفا از طریق متد setState امکانپذیره.\n\nیعنی اگه بخوایم مقدار name رو آپدیت کنیم باید بصورت زیر عمل کنیم :\n\nconst [name,setName] = React.useState(\"جعفر\");\n\nsetMessage(\"ممد\")\n \n\nحالا شاید ازمون بپرسن چرا نمیشه state رو مستقیما بروزرسانی کرد ؟\n\nچند دلیل مهم برای این مورد وجود داره.\n\nاولا ری اکت یک قابلیتی داره به اسم Batching! این قابلیت اینجوریه که خود ری اکت در پشت صحنه چندین بروزرسانی state رو بصورت یکجا اعمال میکنه. اینجوری دیگه نیازی نیست به ازای هر تغییر state یکبار re-render انجام بده.\n\nمورد بعدی این هست که ساختار خود state تغییر ناپذیر ( immutable ) هست چون ما میخوایم به تاریخچه state ها دسترسی داشته باشیم.\n\nConditional Rendering ( رندر شرطی ) چیست ؟\nConditional Rendering در ری اکت یک مفهوم بشدت کاربردی هست. به کمک این تکنیک ما میتونیم کامپوننت ها یا اِلِمان های خودمون رو بصورت شرطی رندر کنیم و به کاربر نمایش بدیم .\n\nمثلا میتونیم یک شرط رو بررسی کنیم و با توجه به نتیجه اون شرط، کامپوننت مدنظر خودمون یا کامپوننت های دیگری رو به کاربر نمایش بدیم.\n\nتو شرط زیر ، متغیر isGoal رو بررسی کردیم، درصورتیکه مقدار این متغیر True باشه کامپوننت MadeGoal به کاربر نمایش داده میشه، در غیراینصورت کامپوننت MissedGoal به کاربر نمایش داده میشه :\n\n{ isGoal ? <MadeGoal/> : <MissedGoal/> }\nناگفته نمونه که به چند روش مختلف میشه Conditional Rendering در ریکت رو پیاده سازی کرد که ما تو این مثال رایج ترین روش رو مطرح کردیم.\n\nممکنه این سوال مصاحبه React رو بصورت عملی از شما بپرسن. یعنی از شما بخوان تو یک محیط زنده ( Live ) کد بزنید و یک شرط در ریکت بنویسید.\n\nمقدار key تو ری اکت چیه و چه کاربردی داره ؟\nتو ری اکت اگه ما یک لیست داشته باشیم (مثل لیست کاربران ) یا اگه بخوایم روی یک آرایه متد .map رو اجرا کنیم باید به تک تک اِلِمان های return شده یک پارامتر به نام key بدیم.\n\nاین مورد تقریبا اجباریه !\n\nدر حقیقت اِلِمان هایی که داریم Return میکنیم باید یک خصوصیت منحصربفرد داشته باشن ( مثل کد ملی برای انسان ها که کاملا منحصر بفرده) پس اِلِمان ها تو react باید خصوصیت منحصربفرد داشته باشن.\n\nبرای اینکه بتونیم به Element های خودمون خصوصیت منحصر بفرد یا شناسه یکتا بدیم، میتونیم از key استفاده کنیم.\n\nمثلا زمانیکه روی یک آرایه map میزنیم، میتونیم مقدار index رو به عنوان key به اِلِمان های return شده بدیم تا شناسه یکتا داشته باشن :\n\n \n\nconst numbers = [1, 2, 3, 4, 5];\nconst updatedNums = numbers.map((number, index) =>\n    <li key={index}>\n        {number}\n    </li>\n);\nاگه به تیکه کد بالا دقت کنید میبینید که به اِلِمان های li خودمون key دادیم.\n\nاما مقدار index نمیتونه یک شناسه یکتا و منحصربفرد خوب باشه، تو سوال بعدی دلیل این مورد رو بررسی میکنیم.\n\nچرا مقدار index در متد map یک شناسه یکتای خوب برای key نیست ؟!\nشاید خیلی جاها دیده باشیم که از index به عنوان یک شناسه یکتا و منحصربفرد برای key در متد map استفاده میکنن، اما اینکار اصلا خوب نیست و ممکنه اپیکیشن شمارو دچار مشکل کنه.\n\nچون اگه ترتیب اِلِمان ها تغییر کنه ( مثلا sort بشه ) ری اکت قاطی میکنه!\n\nبهترین مقدار هایی که میشه برای key استفاده کرد، مقادیری هستن که از Back-End دریافت میشه مثل id ها.\n\nبطور مثال اگه لیست کاربران رو از سرور دریافت کردید و میخواید با متد map نمایش بدید ، میتونید آیدی کاربر رو به عنوان key در نظر بگیرید که کاملا منحصر بفرده.\n\nپاسخ صحیح به این سوال مصاحبه ری اکت نشون میده که تجربه کاری خوبی در این زمینه کاری دارید. ضمن اینکه در بین سوالات استخدامی ری اکت، این سوال خیلی زیاد مطرح میشه.\n\nref در ری اکت چیست ؟\nعبارت ref مخفف reference هست. تو ری اکت ما برای اینکه بتونیم به Element های موجود در DOM دسترسی داشته باشیم باید یک reference به اون اِلِمان ایجاد کنیم.\n\nدر حقیقت زمانیکه میخوایم اون اِلِمان رو وارد DOM کنیم یک ref براش میسازیم تا زمانیکه وارد DOM شد بتونیم بهش دسترسی داشته باشیم.\n\nتو سوال بعدی بررسی میکنیم که چطور باید یک ref برای Element های خودمون در ری اکت بسازیم :\n\n \n\nچطور به اِلِمان خودمون در ری اکت ref بدیم ؟\nبرای ساخت ref در ری اکت، باید از هوک useRef استفاده کنیم. اگه با این هوک آشنا نیستید پیشنهاد میکنم مقاله هوک useRef در ریکت رو مطالعه کنید.\n\nدر مرحله اول باید یک ref به کمک هوک useRef در ریکت بسازیم :\n\nconst myRef = useRef();\nحالا باید یک این Ref ساخته شده رو به یک اِلِمان بدیم تا وقتی اِلِمان وارد DOM شد بهش دسترسی داشته باشیم:\n\nmyRef.current = \"FrontEndi\";\nحالا میتونیم به این اِلِمان دسترسی داشته باشیم. مثلا تو مثال زیر من اِلِمان خودم رو که تو DOM وجود داره در Console چاپ میکنم :\n\nconsole.log(myRef.current);\nVirtual DOM در ریکت چیست ؟ دام مجازی ( VDOM ) چیست ؟\nبطور خلاصه و ساده Virtual DOM یک نسخه مجازی و کوچک شده از DOM اصلی وبسایت شماست که React از اون برای اعمال سریع تغییرات روی سایت استفاده میکنه.\n\nانجام اینکار باعث میشه که فقط همان اِلِمانی که تغییر داشته ، در UI بروزرسانی بشه .\n\nدر React ، به ازای هر Element در DOM واقعی ، یک Element در دام مجازی وجود دارد . ( یعنی در ازای هر div در DOM ، یک div با همان خصوصیات و ویژگی ها در دام مجازی وجود دارد )\n\n \n\nتو مقاله دام مجازی در ریکت بصورت تخصصی این موضوع رو بررسی کردیم و تیکه کد + تصویر برای هر بخش قرار دادیم.\n\n \n\nباتوجه به اینکه دام مجازی ریکت، یکی از اساسی ترین و مهمترین موارد در React بحساب میاد، اکیدا توصیه میکنم خوب درکش کنید چون احتمال اینکه تو مصاحبه استخدامی ریکت، این سوال رو به عنوان یکی از سوالات استخدامی react از شما بپرسن، خیلی خیلی زیاده.\n\nمفهوم reconciliation در ری اکت چیست ؟\nاین سوال رو احتمالا فقط تو مصاحبه های لول بالا از Senior Front-End Developer ها بپرسن.\n\nدام مجازی ( Virtual DOM ) یک مفهوم برنامه نویسیه که در آن یک نمایش مجازی از UI تو حافظه نگهداری میشه . همگام سازی این دام مجازی با دام واقعی تو ری اکت توسط کتابخونه ReactDOM انجام میشه . به این فرآیند در برنامه نویسی reconciliation میگیم .\n\nپاسخ به این سوال مصاحبه ریکت نشون میده به نحوه کار DOM آشنایی دارید و به خوبی درکش کردید!\n\nتفاوت DOM با Virtual DOM چیست ؟\nبروزرسانی DOM خیلی کند و زمانبره اما در عوض بروزرسانی VDOM ( دام مجازی ) خیلی سریعتره !\n\nچون در دام مجازی چیزی در صفحه ، نمایش داده نمیشه .\n\nچرا Virtual DOM سریعتر از DOM هست ؟\nبه عنوان یک Front-End Enginner باید دلیل سریعتر بودن دام مجازی رو بدونیم .\n\nزمانیکه یک Element به UI وبسایت اضافه میشه ، بلافاصله یک دام مجازی ایجاد میشه .\n\nبه محض تغییر در خصوصیات یا حالات هرکدوم از این Element ها ، یک دام مجازی دیگه ایجاد میشه .\n\nدر این مرحله VDOM اول با VDOM دوم مقایسه میشه.\n\nبعد از این مقایسه ، مشخص میشه که چه Element هایی تغییر داشتن و باید توی UI هم تغییر کنن .\n\nدر این مرحله دام مجازی بهترین و مناسبترین روش برای اعمال این تغییرات به DOM اصلی رو پیدا میکنه و اون تغییرات رو به DOM واقعی اضافه میکنه.\n\nانجام اینکار باعث میشه که کمترین زمان و هزینه برای بروزرسانی DOM صورت بگیره .\n\nتوی تصویر زیر میتونید عملیات مقایسه دام مجازی 1 با دام مجازی 2 رو ببینید :\n\nدام مجازی ری اکت - دام مجازی React - دام چیست ؟ - DOM چیست ؟ - VDOM چیست ؟ - Virtual DOM ری اکت\n\nبه تصویر بالا دقت کنید .\n\n3 دام مجازی در این پروسه مشخص شده . دایره های آبی رنگ Element هایی هستند که در UI به کاربر نشان میدهیم .\n\nدایره های سبز رنگ ، Element هایی هستن که تغییر وضعیت داشتن .\n\nزمانیکه وضعیت یک Element تغییر میکنه ، بلافاصله یک VDOM ساخته میشه و بصورت کامل با VDOM قبلی مقایسه میشه .\n\nنتیجه مقایسه VDOM اول ( دام قبلی ) با VDOM دوم ( دام فعلی ) یک VDOM جدید هست که وارد DOM واقعی میشه.\n\nReact Fiber چیست ؟\nتا قبل از نسخه 16 ری اکت، منطق و معماری Rendering ری اکت مشکلاتی داشت.\n\nهمچنین پروسه reconciliation در ریکت مشکلات مشابهی داشت.\n\nفیسبوک که متوجه این مشکلات شده بود در سال 2017 فایبر رو معرفی کرد. React Fiber یکسری تغییرات الگوریتمی روی عملکرد Rendering ریکت اعمال میکرد و مشکلات اون رو رفع میکرد.\n\nدر حقیقت نحوه کدنویسی و کار با React هیچ تغییری نکرد، فقط نحوه اجرا و عملکرد الگوریتمی کتابخانه React تغییر کرد. این تغییرات در نسخه 16 ری اکت در سال 2017 در دسترس عموم قرار گرفت.\n\nهدف دیگه ی معرفی React Fiber بهبود کارایی هسته ری اکت تو جاهایی بود که انیمیشن داشتیم یا میخواستیم روی Layout کار کنیم.\n\nاحتمالش خیلی کمه که این سوال react از شما پرسیده بشه، اما اگه مطرح شد و جواب شما مناسب بود نشون میده که درک خیلی عمیق و مناسبی نسبت به تغییرات ری اکت از گذشته تا به امروز دارید !\n\nتفاوت متد createElement و cloneElement در JSX چیست ؟\nهمونطور که میدونیم تو ری اکت از JSX استفاده میکنیم. تو JSX برای اینکه یک Element بسازیم ( مثل div ) باید از متد createElement استفاده کنیم ( البته ری اکت خودش پشت صحنه این متد رو صدا میزنه و نیازی نیست ما این متد رو بنویسیم، هرچند میتونیم اینکارو بکنیم )\n\nدرواقع وقتی ما تو کامپوننت خودمون یک اِلِمان JSX مینویسیم ( مثل span ) ری اکت در پشت صحنه متد createElement رو صدا میزنه تا اِلِمان درخواستی مارو بسازه.\n\nاما متد cloneElement زمانی استفاده میشه که کامپوننت والد بخواد Props کامپوننت فرزند خودش رو ویرایش یا اضافه کنه.\n\nهمونطور که از اسماشون پیداست، createElement برای ساختن اِلِمان کاربرد داره و cloneElement برای کلون کردن اون اِلِمان کاربرد داره.\n\n \n\nمفهوم Lifting State Up در ری اکت چیست ؟\nهمونطور که میدونیم کامپوننت های ری اکت میتونن شامل State هایی باشن که بهشون نیاز دارن.\n\nدر حقیقت میتونیم داده های هر کامپوننت رو بوسیله State تو خود کامپوننت ذخیره کنیم.\n\nحالا فرض کنید یک کامپوننت داریم که 2 کامپوننت فرزند داره و میخوایم یک داده مشترک رو تو هر 2 کامپوننت استفاده کنیم.\n\nبرای این سناریو 2 راه داریم :\n\n \n\nتو هر کامپوننت فرزند یک State بسازیم و State رو اونجا مدیریت کنیم. ( یعنی دو State )\nبا توجه به یکسان بودن State بین هر دو کامپوننت، صرفا یک State در کامپوننت والد بسازیم و به کامپوننت های فرزند پاس بدیم. ( یعنی یک State )\nمنطقا روش 2 ، روش بهتریه چون بجای State جداگانه ، یک State مرجع ساختیم.\nLift Up State همونطور که از اسمش پیداست به این معنی هست که State خودمون رو به کامپوننت والد منتقل کنیم.\n \nفرض کنید یک کامپوننت والد به اسم A داریم.\nاین کامپوننت والد دو کامپوننت فرزند به اسم B و C داره:\n \n\n \nفرض کنید تو کامپوننت B یک input داریم و میخوایم که مقدار تایپ شده در کامپوننت C نمایش داده بشه.\nاگه مقدار تایپ شده در input رو تو کامپوننت B ذخیره کنیم به مشکل میخوریم.\nتو این سناریو کافیه که به کمک تکنیک Lifting State Up ، صرفا State خودمون رو در کامپوننت والد (A) نگهداری و مدیریت کنیم.\nهمچنین گاهی اوغات که دیتا ها بین 2 کامپوننت یکسان هستن، نیازی به ساخت دو State نیست، صرفا ساختن یک State در کامپوننت والد کافیه.\nچرخه حیات کامپوننت ( Lifecycle ) چیست ؟\nتو ری اکت هر کامپوننت یک چرخه حیات داره. Lifecycle در ریکت همونطور که از اسمش هم پیداست به ما کمک میکنه تو پروسه حیات یک کامپوننت اون رو مدیریت و دستکاری کنیم :\n\nزمانیکه اون کامپوننت ایجاد میشه. ( Mounting )\nزمانیکه اون کامپوننت آپدیت میشه. ( Updating )\nزمانیکه اون کامپوننت از بین میره. ( Unmounting )\n از بین سوالات مصاحبه react ، این سوال یکی از مهمترین موارد به شمار میاد! به همین دلیل تو مقاله چرخه حیات کامپوننت در ری اکت ، بصورت تخصصی و جامع بررسیش کردیم.\nHigher-Order-Component چیست ؟ HOC چیست ؟\nHOC یا Higher-Order-Components در ری اکت یکی از مهمترین ویژگی های کتابخونه ری اکت هست که به ما اجازه میده از یک منطق ( Logic ) در چندین کامپوننت استفاده کنیم.\n\nHOC به ما این اجازه رو میده که یک قابلیت یا ویژگی رو به کامپوننت های خودمون اضافه کنیم، بدون اینکه اون کامپوننت هارو تغییر بدیم ( کدشون رو ویرایش کنیم ).\n\nدر واقع Higher-Order-Components در ری اکت از ما یک کامپوننت به عنوان ورودی میگیره و یک کامپوننت بروز شده تحویل میده.\n\nبطور مثال ما میتونیم قابلیت احراز هویت ( Authentication ) رو به کامپوننت ها و صفحات خودمون به صورتی اضافه کنیم که لازم نباشه هیچ تغییری در کامپوننت ها و صفحات خودمون اعمال کنیم!\n\nممکنه از بین سوالات استخدامی ریکت ، این سوال رو بصورت عملی از شما درخواست کنن تا یک HOC ایجاد کنید.\n\nویژگی HOC ( Higher Order Component ) چیست ؟\nHOC در ریکت برای Reusable کردن یک تیکه کد کاربرد دارن.\nHOC در ری اکت کامپوننت هارو ویرایش نمیکنه، بلکه یک نسخه بروز شده از اون کامپوننت میسازه.\nHigher Order Component در ریکت ، pure function هست  و هیچ side Effect نداره.\nContext در ریکت چیست ؟\nContext یک روش انتقال داده از کامپوننت والد به کامپوننت فرزند هست ( بدون اینکه اون داده رو مثل Props از کامپوننت والد به فرزند پاس بدیم )\n\nتو Context ما یک داده ( Data ) رو میتونیم در جایی ذخیره کنیم ( مثل Store در Redux ) و میتونیم از این مقدار ذخیره شده در هر کامپوننتی استفاده کنیم.\n\nبه تصویر زیر دقت کنید :\n\n \n\nهوک useContext - هوک useContext ری اکت - Context Api ری اکت - آموزش useContext ری اکت - useContext چیست\n\nانتقال داده به روش React Props\nبزرگترین مشکلی که تو این روش داریم ، اینه که دیتای ما داره به کامپوننت هایی ارسال میشه که تو اون کامپوننت ها اصلا به اون دیتا ها نیاز نداریم !!\n\nدر واقع تو کامپوننت 2 ما نیازی به اون دیتا ها نداریم ولی برای اینکه بتونیم دیتای خودمون رو به کامپوننت شماره 4 برسونیم ، باید از کامپوننت شماره 2 و 3 هم عبورشون بدیم .\n\nحالا فرض کنید تعداد کامپوننت های درخت ما 20 تا باشه و بخوایم یه دیتایی رو از کامپوننت 1 به آخرین فرزند این درخت ( کامپوننت 20 ) بفرستیم ، اینجوری باید اون Data رو از طریق تک تک Component ها انتقال بدیم .\n\nبه اینکار میگن Props Drilling و اصلا اصلا پیشنهاد نمیشه !\n\nاما خبر خوب اینه که یه روش بهتری برای اینجور وقتا داریم به اسم Context یا همون useContext 🙂\n\n \nانتقال داده به روش React Context\nاگه به تصویر بالا دقت کنید ، یک Context ساختیم که نقش منبع دیتا رو ایفا میکنه .\n\nحالا از تمامی کامپوننت هایی که داریم ، میتونیم به این منبع Data بصورت مستقیم دسترسی داشته باشیم .\n\nدیگه اینجا مشکل Props Drilling نداریم !\n\nخیلی راحت از کامپوننت شماره 4 به Data مورد نیاز دسترسی پیدا کردیم، بدون اینکه اون Data رو وارد کامپوننت های دیگه بکنیم .\n\nدر حقیقت React Context یک روش انتقال داده بین کامپوننت های مختلف اپیکیشن شماست بدون توجه به عمق اون Component !\n\nکاربرد Context در ری اکت چیه ؟ چه زمانهایی باید ازش استفاده کنیم ؟\nاز Context در ری اکت برای به اشتراک گذاری دیتا های Global مثل تنظیمات کاربر ، تم ( دارک مود و لایت مود ) و … میشه استفاده کرد.\n\nایده اصلی Context این هست که به ما اجازه میده یک مقدار رو بین کامپوننت های مختلف به اشتراک بزاریم و هر زمان این مقدار تغییر کرد ، اون کامپوننتی که از مقدارمون استفاده کرده بوده ، مجدد رندر بشه .\n\nدر حقیقت بهتره بگیم از Context برای به اشتراک گذاری State هایی استفاده میکنیم که میخوایم تو بخش های مختلف اپیکیشن در دسترس باشن .\n\nمواردی مثل :\n\nتم سایت ( دارک مود / لایت مود )\nتنظیمات سایت\nنام و اطلاعات کاربر احراز شده ( وارد شده )\nتنظیمات کاربر\nزبان سایت ( سایت های 2 زبانه )\nباتوجه به اهمیت context ، ممکنه این سوال در بین سوالات مصاحبه react قرار بگیره.\nدرصورت تغییر مقدار Context چه اتفاقی میوفته ؟\nاگر ما یک مقدار رو توسط Context به کامپوننت هامون پاس داده باشیم و این مقدار تغییر بکنه ، خود Context به تمام Consumer ها اطلاع میده که re-Render بشن !\n\nمثلا فرض کنید اطلاعات کاربر رو تو Context ذخیره کردیم و نام کاربر رو تو هدر سایت نمایش میدیم.\n\nدرصورتیکه این Context خالی بشه ( با Logout کردن کاربر ) کامپوننت هدر re-render میشه تا اسم کاربر از هدر پاک بشه.\n\nاین سوال هوشمندانه از این بابت پرسیده میشه تا درک عمیق مارو نسبت به context بسنجن! پس ممکنه بین سوالات استخدامی ریکت قرار داشته باشه\n\nProps Children در ری اکت چیست ؟\nشاید تو کامپوننت های ری اکتی به عبارت props.children برخورده باشید. اما بریم ببینیم که Props Children در ری اکت چیست ؟\n\nتمامی کامپوننت هایی که تو ری اکت داریم، میتونن children داشته باشن.\n\nبه مثال زیر دقت کنید:\n\n<App>\n<Image src=”/asset/profile-img.png” />\n<Detail name=”فرانت اندی” surname=”مرجع تخصصی فرانت اند” />\n</App>\n\n \n\nتو مثال بالا کامپوننت App دو فرزند ( children ) داره اما کامپوننت های Image و Detail هیچ فرزندی ندارن.\n\nدرواقع تو JSX میتونیم به 2 صورت کامپوننت بنویسیم :\n\n \n\n<Component/>\n<Component> فرزند کامپوننت</Component>\nتو مدل اول کامپوننت ما فاقد فرزند هست اما تو مدل دوم کامپوننت ما فرزند ( children ) داره.\n\nتو مدل دوم ما هر اِلِمان یا کامپوننتی رو میتونیم به عنوان children به کامپوننت خودمون پاس بدیم.\n\nمثلا فرض کنید ما میخوایم یک کامپوننت اسلایدر بسازیم. ما نیاز داریم که به اسلایدر خودمون چندین تصویر پاس بدیم تا نمایش داده بشه.\n\nدقیقا میخوایم بصورت زیر از کامپوننت Slider استفاده کنیم :\n\n<Slider>\n<img src=”/assets/img-1.pg” />\n<img src=”/assets/img-2.pg” />\n<img src=”/assets/img-3.pg” />\n</Slider>\n\n \n\nالان کامپوننت Slider یک Props داره که اسمش children هست. یعنی برای نمایش این تصاویر که با props children دریافت کردیمشون، باید کامپوننت Slider رو اینجوری بنویسیم :\n\n \n\nexport default function Slider(props) {\nreturn (\n<div className=”img-slider”>\n{props.children}\n</div>\n);\n}\n\n \n\nتو کامپوننت Slider تونستیم Props های دریافت شده بصورت children رو داخل یک div قرار بدیم و نمایش بدیم.\n\nتو ری اکت چطور کامنت ( Comment ) بنویسیم ؟\nبرای اینکه تو اپیکیشن ری اکت خودمون کامنت بنویسیم، کافیه بصورت زیر عمل کنیم :\n\n{/* من کامنت شدم و اجرا نمیشم */}\nچرا تو ری اکت از className بجای class استفاده میکنیم ؟\nتو ری اکت کلمه ی class یک کلمه رزرو شده در جاوا اسکریپت هست.\n\nبه همین دلیل ما برای اینکه بتونیم به Element های خودمون تو JSX کلاس بدیم باید بصورت زیر عمل کنیم :\n\n<div className=’header’>هدر</div>\n\nFragment در ری اکت چیست ؟\nکامپوننت هایی که در React ایجاد میکنیم از این 2 حالت خارج نیستند :\n\nکامپوننت ما یک  Element  برمیگرداند ( Return میکند )\nکامپوننت ما دو یا چند Element  برمیگرداند ( Return میکند )\nدر ری اکت ، اگر قصد داشته باشیم 2 یا چند  Element برگردانیم ( Return کنیم ) باید تمامی آنها را داخل یک Element مثل div قرار دهیم .\n\nچون طبق قانون JSX ، تمامی اِلِمان ها ( Elements ) باید یک والد داشته باشند .\n\nما میتونیم حتی از یک اِلِمان div به عنوان Parent اِلِمان های خودمون استفاده کنیم اما این کار درستی نیست و کار بهتر استفاده از ویژگی Fragment هست که توسط خود React معرفی شده.\n\nتو سوال بعدی بررسی میکنیم که چرا نباید از div یا سایر اِلِمان های JSX به عنوان والد اِلِمان ها استفاده کرد و استفاده از Fragment گزینه بهتریه .\n\nروش استفاده از Fragment به عنوان والد چندین Element بصورت زیر هست :\n\n \n\nconst App = () => {\n  return (\n  <Fragment> // من دور اِلِمان ها پیچیده شدم\n    <h1>من آیتم اول این کامپوننت هستم</h1>\n    <p>من آیتم دوم این کامپوننت هستم</p>\n  </Fragment>\n  );\n}\nexport default App\nآیا میشه از div به عنوان Wrapper استفاده کرد ؟\nاگر هدف شما از قرار دادن div به عنوان Wrapper ، افزون استایل است ( مثل hover ) هیچ مشکلی نیست و میتوانید از <div> استفاده کنید .\n\nاما اگر هدف شما برای استفاده از div ، صرفا بحث Wrapper بودن آن است ، قطعا انتخاب های بهتری هم وجود دارد و استفاده از div منطقی نیست .\n\nاستفاده از div به عنوان Wrapper خیلی اوغات میتواند مشکلاتی مثل بهم خوردن Style های Css را بهمراه داشته باشند مخصوصا زمانیکه از FlexBox و Grid استفاده میکنید .\n\nبه عنوان یک React Developer حرفه ای باید تمام تلاش خودتون رو بکنید که Element اضافی وارد DOM نکنید ! اما زمانیکه از div به عنوان والد استفاده میکنید ، اینکار را میکنید !\n\nراه حل Fragment هست که تو سوال قبلی درموردش صحبت کردیم.\n\nممکنه که این سوال هوشمندانه در بین سوالات استخدامی ریکت شما قرار داشته باشه. اگه پاسخ مناسبی بهش بدید، فوق العادس چون هرکسی این مورد رو رعایت نمیکنه 🙂\n\nمزیت استفاده از Fragment بجای اِلِمان های JSX چیه ؟\nدرصورتیکه از Fragment بجای div استفاده کنید مزایای زیر را برای شما خواهد داشت :\n\nاستفاده از React.Fragment باعث میشود کد شما تمیزتر و خواناتر باشد .\n\nکامپوننت شما سریعتر Render میشود و از حافظه کمتری استفاده میکند .\n\nاستفاده از div به دلیل اینکه ویژگی های بیشتری نسبت به Fragment دارد باعث سنگین شدن صفحه و  بارگذاری دیرتر صفحه میشود  ، پس زمانیکه از React.Fragment استفاده کنید سرعت بارگذاری صفحه نیز سریعتر خواهد بود .\n\nاگر از div استفاده کنید ، به دلیل تو در تو شدن Element ها در DOM ، دیباگ کردن کد سخت تر خواهد شد ، در مقابل استفاده از Fragment باعث میشود Element کمتری در DOM قرار بگیرد و دیباگ کد راحت تر باشد .\n\nکامپوننت stateless چیست ؟\nاگه یک کامپوننت داشته باشیم که داخلش هیچ State داخلی نداشته باشیم، به اون کامپوننت stateless Component میگیم. یعنی کامپوننت بدون State !\n\nکامپوننت statefull چیست ؟\nاگه تو کامپوننت خودمون حداقل یک state داشته باشیم ( به کمک هوک useState ) این یعنی کامپوننت ما stateFull هست.\n\nدر کل به کامپوننت هایی که State داخلی دارن statefull component میگیم.\n\nمعایب کتابخانه ری اکت چیست ؟ معایب ریکت ؟\nدرمورد معایب ری اکت میشه یه مقاله مفصل نوشت اما با توجه به ماهیت این مقاله که میخوایم به سوالات استخدامی ریکت بپردازیم، خلاصه گویی میکنیم.\n\n \n\nسرعت بالای تغییر !\nری اکت یک کتابخونه جاوا اسکریپتی هست که بشدت در معرض تغییره! تو نسخه های قبلی منتشر شده از ری اکت به وضوح دیدیم که چقدر تغییرات گسترده ای داشته.\n\nبطور مثال اضافه شدن هوک ها ، منسوخ شدن class Component ها و …\n\nقطعا این تغییرات مفید بودن اما خب  پروژه هایی که با React توسعه داده میشن همیشه باید بروزرسانی بشن.\n\nاین شما هستید که باید انتخاب کنید که حاضر به بروزرسانی مداوم پروژه هستید یا نه! ( کتابخونه های دیگه ای هستن که سرعت تغییر خیلی پایین تری دارن )\n\n \n\nری اکت یک فریمورک نیست!\nاگه به معماری MVC نگاه کنیم میبینیم که کتابخانه ری اکت فقط بخش View رو داره کنترل میکنه! و برای Controller و Model به ابزار ها و کتابخانه های جانبی احتیاج داره.\n\nهمین باعث میشه که ساختار و الگو های ضعیفی داشته باشیم. درصورتیکه در فریمورک های جاوااسکریپتی مثل Angular چنین مشکلاتی رو نداریم!\n\n \n\nمشکل سئو در ریکت !\nگرچه این مورد ثابت نشده اما تجربه نشون داده که Crawler ها توانایی مناسبی در سئو کردن سایت های ری اکتی ندارن. این صرفا در حد یک نگرانیه و البته که راه حل هایی برای این مشکل وجود داره.\n\nاما بهرحال سئو در ریکت یکی از چالش های اصلی این کتابخونه ی دوست داشتنیه.\n\n \n\nدونستن معایب کتابخانه React نشون میده که شما درک عمیقی از این کتابخانه دارید، پس احتمالش زیاده که از بین سوالات استخدامی React ، این سوال هم از شما پرسیده بشه.\n\nپکیج ReactDOM که تو ری اکت استفاده میشه چیه و چه کاربردی داره ؟\nاگه با ری اکت کار کرده باشید حتما به ReactDOM در ری اکت یا اسم react-dom در ری اکت برخوردید!\n\nاما بریم ببینیم که کار این پکیج چیه ؟\n\nReactDOM یکسری متد برای کار با DOM مرورگر در اختیار ما و ری اکت میزاره تا بتونیم DOM رو باهاش مدیریت کنیم.\n\nدر حقیقت به کمک ReactDOM در ریکت میتونیم DOM اصلی رو دستکاری کنیم.\n\nپکیج ReactDOM چندین متود و تابع در اختیار ما میزاره مثل :\n\nrender\nfindDOMNode\nunmountComponentAtNode\ncreatePortal\nتوضیح این متود ها خیلی مفصله و حتما در یک مقاله جداگانه بررسیشون میکنیم.\n\n \n\nچطور در ری اکت استایل دهی کنیم ؟ نحوه استایل دادن به اِلِمان های ریکت ؟\nتو ری اکت به چندین روش مختلف میشه استایل دهی رو انجام داد:\n\n \nاستایل درون خطی ( inline Styling ) :\nما میتونیم به اِلِمان های JSX خودمون یک خصوصیت style بدیم. خصوصیت style از ما یک Object جاوا اسکریپتی میگیره که میتونیم داخل این آبجکت استایل های خودمون رو مطرح کنیم.\n\nتو مثال زیر ما به اِلِمان h1 خودمون رنگ قرمز دادیم :\n\n<h1 style={{color: \"red\"}}>عاطفه</h1>\nاستایل های ما در این روش باید بصورت camelCase نوشته بشن. یعنی ما backgroundcolor رو بصورت backgroundColor باید بنویسیم.\n\n \nبه کمک یک فایل css :\nما میتونیم تمامی استایل های خودمون رو داخل یک فایل .css بنویسیم و صرفا داخل کامپوننت خودمون فراخوانیش کنیم.\n\nمثلا استایل زیر رو داخل فایل style.css مینویسیم :\n\nheader{\n  background-color: #282c34;}\nفقط فراموش نکنید که کلاس header رو به اِلِمان JSX خودتون پاس بدید.\n\n \n\nبه کمک یک ماژول css :\nیکی دیگه از روش های استایل دادن به کامپوننت ها و Element ها ، Css Modules هست.\n\nمزیت این روش این هست که دیگه نگران اسم تکراری class های خودتون نیستید، چون اون کلاس فقط در همون کامپوننت قابلیت استفاده داره.\n\nبرای اینکه یک فایل CSS Modules بسازیم باید آخر اسم فایل css ، عبارت module.css. رو قرار بدیم.\n\nمثلا اسم فایل ما style.module.css باشه . حالا میتونیم داخلش استایل های معمولی css رو قرار بدیم.\n\nچطوری یک کامپوننت رو memo کنیم ؟\nدر حقیقت memo به ما اجازه میده از re-Render اضافی کامپوننت تا زمانیکه Props اون تغییری نکرده، جلوگیری کنیم.\n\nتو تیکه کد زیر ، ما کامپوننت Music رو memo کردیم. خروجی یک کامپوننت جدید هست به اسم MemoizedMusic :\n\n \n\nexport function Music({ title, description }) {\n  return (\n    <div>\n      <div>Music title: {title}</div>\n      <div>Desc: {description}</div>\n    </div>\n  );\n}\n\nexport const MemoizedMusic = React.memo(Music);\nتو تیکه کد بالا ، ما کامپوننت Music رو داخل ()React.memo قرار دادیم .\n\nاگه به خط 10 دقت کنید میبینید که React.memo(music) یک مقدار جدید Return کرده به اسم MemoizedMusic .\n\nدر واقع خروجی کامپوننت MemoizedMusic با خود کامپوننت Music کاملا یکسانه ! با این تفاوت که کامپوننت MemoizedMusic فقط یکبار render میشه و تا زمانی که props هاش تغییر نکنه ، re-Render نمیشه !\n\nاما کامپوننت Music هر بار render میشه ( فارغ از اینکه props های اون تغییر میکنه یا نه )\n\nتو مقاله memo در ریکت بصورت تخصصی تر و جامع تر به بررسی memo در ریکت پرداختیم و تیکه کد و مثالهای بیشتری برای مطرح کردیم.\n\nدرک memo نشون میده که به مبحث Performance و بهینه سازی اپیکیشن های ری اکتی، مسلط هستیم.این احتمال وجود داره که از بین سوالات استخدامی ری اکت، این سوال هم مطرح بشه.\n\n \n\nچه جاهایی باید از memo در ری اکت استفاده کنیم ؟\nجاهایی که فکر میکنید کامپوننت با Props های یکسان render میشه !\nیکی از بهترین جاهایی که میشه از react.memo استفاده کرد ،  کامپوننت هایی هستن که اغلب با Props های یکسان render میشن !\n\nاستفاده اشتباه از memo باعث کاهش Performance اپیکیشن ما میشه ؟\nقطعا!\n\nدرصورت استفاده از memo در جای اشتباه ، Performance اپیکیشن شما کاهش پیدا خواهد کرد!\n\nفرض کنید یک کامپوننتی رو به memo دادید که همیشه Props های متفاوتی داره .\n\nبا انجام اینکار ، ری اکت هربار که Props های این کامپوننت رو با نسخه کش شده بررسی میکنه ،همیشه به false میرسه ( یعنی Props ها متفاوت هستن ! )\n\nو خب اینجا یعنی ری اکت یک مرحله مقایسه اضافه انجام داده که خودش باعث کاهش Performance اپیکیشن میشه .\n\nنه تنها هیچ مزیتی بدست نمیارید ، کلی قضیه رو پیچیده تر هم میکنید !\n\nاگه این سوال در بین سوالات مصاحبه react شما وجود داشته باشه، نشون میده که Performance برای اون شرکت حائز اهمیته.\n\nیک کامپوننت رو memo کنیم و Stateش تغییر کنه، re-render میشه ؟\nاصلا مهم نیست که کامپوننت memo شده باشه یا نه!\n\nتغییر State یک کامپوننت همیشه باعث re-Render شدنش میشه ! حتی اگه داخل ()memo باشه .\n\nچطور تو ری اکت SSR یا همون Server Side Rendering انجام بدیم ؟\nSSR یا همون Server Side Rendering یک تکنیک معروفه که باعث میشه بجای render صفحه سمت client ، رندر صفحه در سمت server انجام بشه. نتیجه رندر یک صفحه HTML کامل هست که به client ارسال و نمایش داده میشه.\n\nبرای اینکه یک کامپوننت رو در سمت سرور render کنیم باید بصورت زیر از ReactDOMServer استفاده کنیم:\n\nReactDOMServer.renderToString(<Blog />);\nبه کمک متود ReactDOMServer در ری اکت میتونیم رندر سمت سرور ( SSR ) داشته باشیم. البته این موضوع خیلی مفصله و حتما در یک مقاله جداگانه بررسیش میکنیم.\n\nبرای شرکت هایی که به سئو اهمیت میدن، این احتمال وجود داره که حداقل یک سوال ری اکت از مبحث SSR از شما بپرسن.\n\nLifecycle کامپوننت در ری اکت چیست ؟ چرخه حیات کامپوننت در ریکت یعنی چه ؟\nتو ری اکت، کامپوننت ها یک طول عمر ( چرخه حیات ) دارن !\n\nاین چرخه حیات از زمان ساخته شدن اون کامپوننت شروع میشه و تا هنگامی که اون کامپوننت از بین میره، ادامه داره.\n\nتو این حین ما میتونیم رفتار کامپوننت خودمون رو مدیریت کنیم.\n\nتو مقاله چرخه حیات کامپوننت در ری اکت بصورت جامع و تخصصی به این مبحث مهم پرداختیم. ممکنه که یک یا چند سوال React از مبحث Lifecycle از شما پرسیده بشه.\n\nمراحل چرخه حیات کامپوننت ها در ریکت رو نام ببرید ؟\nچرخه حیات کامپوننت در ری اکت شامل سه مرحله میشه :\n\n \n\nایجاد شدن کامپوننت ( mounting )\nبروز شدن کامپوننت ( updating )\nاز بین رفتن کامپوننت ( unmounting )\nمنظور از mounting در Component lifecycle چیست ؟\nmounting اولین مرحله از سه مرحله چرخه حیات کامپوننت در react هست.\n\nاین مرحله زمانی هست که کامپوننت ما ایجاد میشه و وارد DOM میشه. به عبارتی زمانیکه کامپوننت ما متولد میشه و زندگی خودش رو آغاز میکنه، مرحله mounting در کامپوننت میگیم.\n\nمنظور از updating در Component lifecycle چیست ؟\nبه زمانیکه کامپوننت ما به دلیل تغییر State یا تغییر Props، مجدد رندر میشه ( re-render میشه ) مرحله updating میگیم!\n\n \n\nمنظور از unmounting در Component lifecycle چیست ؟\nبه زمانیکه کامپوننت ما از DOM حذف میشه و دیگه نمایش داده نمیشه، مرحله unmounting کامپوننت میگیم.\n\nتو این مرحله میتونیم کنترل کنیم زمانیکه کامپوننت ما داشت از DOM حذف میشد، چه اتفاقی بیوفته.\n\nمتود constructor در ری اکت چیست ؟\nاین متد، اولین متدی هست که در زمان mounting کامپوننت اجرا میشه ( زمانیکه کامپوننت وارد DOM میشه ).\n\nاین متود تو کامپوننت های کلاسی ( class component ) کاربرد داره .\n\nداخل متد constructor نمیتونیم هیچ ساید افکتی ( Side Effect ) اجرا کنیم! چون اساسا این متد یک متد pure هست! مثلا نمیتونیم داخلش یک درخواست HTTP یه سرور بزنیم و اطلاعات مدنظرمون رو دریافت کنیم!\n\n \n\nمتد static getDerivedStateFromProps در ری اکت چیست ؟\nبه کمک متد getDerivedStateFromProps در ری اکت میتونیم State خودمون رو باتوجه به Props تغییر بدیم. این موضوع زمانهایی خیلی کاربرد داره که State ما قراره از طریق Props دریافت بشه.\n\nمتود render در ری اکت چیست ؟\nاین متد تنها متد ضروری برای Class Component ها هست و در فاز Mounting ( قرار گرفتن کامپوننت در DOM ) اجرا میشه.\n\nتو متد render در class Component ها نباید هیچ ساید افکتی ( side effect ) قرار بدیم. چون اساسا متد render یک متد Pure هست. بطور مثال ما نباید State خودمون رو اینجا تغییر بدیم، یا از سرور یکسری اطلاعات درخواست کنیم ( Http Request ) یا با Local Storage کار کنیم و ..\n\nمتد render در ریکت دقیقا بعد از متد قبلی ( getDerivedStateFromProps ) اجرا میشه.\n\nمتود componentDidMount در ری اکت چیست ؟\nآخرین متدی که تو فاز Mounting ( قرار گرفتن کامپوننت در DOM ) اجرا میشه، متد componentDidMount در ری اکت هست.\n\nبه کمک متود componentDidMount میتونیم ساید افکت ( side effect ) های خودمون رو اجرا کنیم.( مثل ارسال درخواست های HTTP به سرور و دریافت اطلاعات ) یا بروزرسانی State های کامپوننت.\n\nمتود static getDerivedStateFromProps در ری اکت چیست ؟\nتو فاز Updating ( هنگام re-render شدن کامپوننت) اولین متودی که اجرا میشه متود getDerivedStateFromProps هست.\n\nاین متود زمانی خیلی کاربردیه که Props ما تغییر میکنه و ما میخوایم با توجه به Props تغییر کرده، State خودمون رو بروزرسانی کنیم.\n\nمتود shouldComponentUpdate در ری اکت چیست ؟\nبه کمک متود shouldComponentUpdate میتونیم به ری اکت بگیم که درصورت تغییر State یا Props نیازی نیست re-render بشه. ( این اتفاق در حالت عادی میوفته )\n\nاین متود کمک میکنه که از re-render های غیرضروری جلوگیری کنیم، اما خیلی با احتیاط باید ازش استفاده کنیم چون ممکنه جاهایی که نیاز به re-render داریم، کامپوننت ما re-render نشه.\n\nخروجی این متود یک مقدار boolean هست که تعیین میکنه کامپوننت ما re-render بشه یا نشه .مقدار پیشفرض true هست که باعث میشه درصورت تغییر State یا Props، همیشه re-render داشته باشیم.\n\nمتود getSnapshotBeforeUpdate در ری اکت چیست ؟\nاین متود به ما اجازه میده که به مقدار قبلی Props و State دسترسی داشته باشیم. ( قبل بروزرسانی کامپوننت )\n\n \n\nمتود componentDidUpdate در ری اکت چیست ؟\nبه کمک متود componentDidUpdate در ری اکت میتونیم ساید افکت ( Side Effect ) های خودمون رو اجرا کنیم. مثل دریافت اطلاعات از سرور ( Http Request ) یا بروزرسانی State های کامپوننت!\n\nمتود componentDidUpdate در ریکت میتونه 3 آرگومان از ما بگیره که عبارتند از : prevProps ، PrevState و snapshot .( آرگومان snapshot فقط درصورتی دریافت میشه که از متود getSnapshotBeforeUpdate استفاده کرده باشیم.\n\nنکته ای که وجود داره این هست که این متود آخرین متود فاز updating در component lifecylce ری اکت هست.\n\nمتود componentWillUnmount در ری اکت چیست ؟\nمتود componentWillUnmount در ری اکت دقیقا قبل از حدف شدن کامپوننت از DOM اجرا میشه. اگه ما بخوایم توی کامپوننت خودمون یکسری موارد clean up اجرا کنیم، باید از این متود استفاده کنیم. مثل cancel کردن درخواست های شبکه!\n\nبعد از اجرای این متد، کامپوننت از DOM حذف میشه.\n\nStrictMode در ریکت چیست ؟\nقابلیت StrictMode به شما کمک میکنه که در مراحل فاز توسعه پروژه ( فاز Development ) باگ ها و مشکلات رایج پروژتون رو پیدا کنید .\n\nدر واقع StrictMode حالت سخت گیرانه ری اکت هست ! این ابزار فقط در فاز Development کاربرد داره و به شما کمک میکنه که مشکلات پروژتون رو در زمان توسعه پیدا کنید و اونهارو فیکس کنید .\n\nدر حقیقت وقتی حالت StrictMode رو در ری اکت فعال میکنیم ، در پشت صحنه react یکسری بررسی های اضافی روی اپیکیشن ما صورت میگیره تا کوچکترین مشکلات و باگ های احتمالی ، به ما اطلاع داده بشه .\n\nمیشه تو JSX از متود map استفاده کرد؟\nبله 🙂\n\nتو مثال زیر ما از متود map داخل JSX استفاده کردیم :\n\n<div>\n{items.map((item) => (\n<YeComponent key={item.id} title={item.title} />\n))}\n</div>\n\nچطور به یک اِلِمان ( Element ) در ری اکت کلاس ( className ) شرطی بدیم ؟\nبراحتی میتونیم یک شرط رو بررسی کنیم و باتوجه به نتیجه اون شرط، کلاس دلخواه خودمون رو به یک اِلِمان بدیم :\n\n<div className={darkMode ? ‘bg-gray-600’ : ‘bg-white’}>\nفِرانت اِندی\n</div>\n\nچطور درصورت تغییر یک State، یک کاری رو انجام بدیم؟\nبرای اینکه درصورت تغییر یک State مشخص، یک کاری رو انجام بدیم، باید به اون State گوش بدیم.\n\nیعنی حواسمون باشه که هر زمان اون State تغییر کرد، کار دلخواه ما صورت بگیره .\n\nبرای پیاده کردن چنین سناریویی، هوک useEffect به ما کمک میکنه.\n\nصرفا کافیه اون State دلخواه رو به عنوان Dependencies به هوک useEffect پاس بدیم تا حواسش به State ما باشه :\n\n \n\nconst [count,setCount] = useState();\nuseEffect(() => {\n// کار دلخواه ما که درصورت تغییر استیت اجرا میشه\n}, [count]);\n\n \n\nاگه با هوک useEffect آشنا نیستید، مقاله هوک useEffect در ری اکت رو مطالعه کنید چون بصورت جامع و تخصصی این هوک رو بررسی کردیم.\n\nمیشه Props های ری اکت رو تغییر داد ؟\nخیر !\n\nبه 2 دلیل نمیتونیم Props ها در ری اکت رو تغییر بدیم :\n\nProps ها immutable هستن .\nبه دلیل ساختار داده یک طرفه ری اکت.\nداده ها در React ، همیشه از بالا به سمت پایین منتقل میشن. یعنی از کامپوننت والد به کامپوننت فرزند!\n\nدر نتیجه کامپوننت فرزند صرفا توانایی خوندن و استفاده از props رو داره و نمیتونه اون props رو تغییر بده .\n\nبه اصطلاح Props ها صرفا read-only هستن.\n\nاز بین سوالات استخدامی react ، چنین سوالاتی معمولا از Senior ها پرسیده میشه که تسلط و تجربه بالایی در کار با React دارن.\n\nچطور میشه نسخه ری اکت استفاده شده در اپیکیشن رو متوجه شد ؟\nساده ترین راه استفاده از React.version هست که به ما نسخه استفاده شده در ری اکت پروژه رو بهمون برمیگردونه :\n\n \n\n<div>{`نسخه ری اکت : ${React.version}`}</div>,\n\nتفاوت Component و Element در ری اکت چیست ؟ تفاوت کامپوننت و اِلِمان در ری اکت چیه ؟\nقبل از اینکه تفاوت Component و Element در ری اکت رو بررسی کنیم، اجازه بدید یادآوری کنیم که اصلا خود Element و Component چی هستن و چه تعریفی دارن.\n\nElement ( اِلِمان ) در ری اکت پایه ای ترین جز اپیکیشن هست که به ما اجازه میده اپیکیشن خودمون رو بسازیم.هر Element یک Type و Propery داره. ممکنه Element ها دارای فرزند باشن. ( مثل یک div که شامل چندین span میشه )\n\nاِلِمان ها هیچ متودی ندارن.\n\nرندر شدن Element ها خیلی سریع صورت میگیره چون اصولا سبک هستن.\n\nتو تیکه کد زیر یک Element ساختیم که اسمش el هست :\n\nconst el = <h1>FrontEndi.com</h1>;\n \nهمچنین ما میتونیم به کمک متود React.createElement یک Element در ریکت بسازیم :\nconst el = React.createElement(‘h1’, { id: ‘site’ }, ‘فرانت اندی’);\n \nحالا بریم ببینیم کامپوننت چیه ؟\nکامپوننت یک تیکه کد مستقل و قابل استفاده مجدد هست ( reusable )\nخروجی کامپوننت، مجموعه ای از Element هاست.\nکامپوننت ها میتونن Class Component باشن یا Functional Component !\n \nتو مثال زیر ما یک کامپوننت ساختیم که نام کاربر رو دریافت میکنه و عبارت خوش آمدی {نام کاربر} رو برمیگردونه :\n \nfunction SayWelcomeToUser({name}) {\nreturn <div>\n<h3>Welcome {name}</h3>\n</div>\n}\n \nحالا بریم ببینیم تفاوت Component و Element در ریکت چیه ؟\n \n\nاِلِمان ها، همیشه توسط کامپوننت ها Return میشن.\nکامپوننت ها میتونن از نوع کلاسی یا تابعی باشن  اما اِلِمان ها این دو نوع رو ندارن.\nElement ها فاقد متود هستن اما Component ها متود های زیادی دارن.\nComponent ها، چرخه حیات در ری اکت دارن اما Element ها چرخه حیات ندارن!\nکامپوننت ها شامل اِلِمان ها هستن، اما اِلِمان ها نمیتونن توی خودشون کامپوننت داشته باشن!\nتفاوت Class Component و Functional Component چیست ؟\nمیدونیم که کامپوننت ها در ری اکت میتونن کلاسی ( class ) یا تابعی ( functional ) باشن. اما تفاوت این 2 نوع کامپوننت چیه ؟\n\nکامپوننت های تابعی ( Functional Component ) خیلی ساده هستن ! دقیقا مثل توابع جاوااسکریپتی نوشتن میشن و دردسر کامپوننت های کلاسی ( class Component ) رو تو نوشتن ندارن ( استفاده از متود render و extends و .. )\n\nمثلا تو مثال زیر یک کامپوننت تابعی در ری اکت ساختیم :\n\nconst Car=()=> {\nreturn <h2>سلام! من یه پیکانم</h2>;\n}\n\n \n\nکامپوننت های کلاسی ( class Component در ری اکت ) پیچیدگی بیشتری داره. تو کامپوننت های کلاسی ( class component ) نمیتونیم از هوک ها در ری اکت استفاده کنیم.\n\nدر نتیجه بخش عظیمی از قابلیت ها و ویژگی های ری اکت رو از دست میدیم.\n\nدر عوض تعداد خیلی زیادی از متود های مدیریت Lifecycle رو در Class Component ها داریم که تو Functional Component ها خبری ازشون نیست.\n\nتو مثال زیر،همون کامپوننت Car رو از نوع کامپوننت کلاسی ساختیم :\n\n \n\nclass Car extends React.Component {\nrender() {\nreturn <h2>سلام! من یه پیکانم<h2>;/\n}\n}\n\nحالا بریم چند تفاوت Class Component و Functional Component در ری اکت رو ببینیم:\n\nکامپوننت های تابعی، خیلی شبیه توابع جاوااسکریپتی هستن.\nاگه میخوایم کامپوننت کلاسی بسازیم باید حتما کامپوننتمون از React. Component  ارث ببره ( extends ) و حتما باید متود render رو داخل کامپوننت خودمون صدا بزنیم درصورتیکه در Functional Component اینطور نیست!\nتو Class Component ها متود های بیشتری برای مدیریت Lifecycle در React داریم.\nتو کامپوننت های کلاسی امکان استفاده از هوک های ریکت رو نداریم اما تو کامپوننت های تابعی میتونیم ازشون استفاده کنیم.\n \n\nچرا از callback ( توابع بازگشتی ) هنگام setState ( بروزرسانی state ) استفاده میکنیم ؟\nگاهی اوغات لازمه که بصورت مستقیم از setState استفاده نکنیم و بروزرسانی state خودمون رو به کمک یک callback انجام بدیم. مثل :\n\nsetCount(prevCount => prevCount + 1);\nاگه تو سوالات استخدامی ری اکت از ما پرسیدن چه زمانی از callback برای setState کردن باید استفاده کنیم، میتونیم جواب زیر رو بدیم :\n\nهر زمان بروزرسانی State ما، وابسه به مقدار قبلی State بود باید به کمک callback ، مقدار State خودمون رو بروز کنیم.\n\nمثلا اگه میخوایم با هر کلیک کاربر، مقدار State رو یکی بیشتر کنیم ( چون اینجا setState با توجه به مقدار قبلی State داره صورت میگیره باید به کمک callback این بروزرسانی رو انجام بدیم ). یعنی  اینجوری :\n\n \n\nconst [count, setCount] = useState(0);\n\n\nsetCount(prevCount => prevCount + 1);\n\nاما اگه پرسیدن چرا باید زمانیکه setState وابسه به مقدار قبلی state بود از callback استفاده کنیم ، میتونیم بگیم که :\n\nچون خود هوک useState به ما مقدار قبلی state رو نمیده. تنها راهی که میتونیم به مقدار قبلی state دسترسی داشته باشیم، callback function هست.\n\nچطور از ref در ریکت استفاده کنیم ؟ چطور از هوک useRef در ریکت استفاده کنیم ؟\nبطور کل برای استفاده از هوک useRef در ری اکت باید 3 مرحله زیر رو انجام داد :\n\nساختن Ref :\n\nconst myRef = useRef();\nاختصاص مقدار به Ref :\n\nmyRef.current = \"FrontEndi\";\nدسترسی به مقدار Ref :\nconsole.log(myRef.current);\n \n\nبرای دسترسی به Element های موجود در Dom شما باید طبق 3 مرحله بالا عمل کنید . یعنی :\n\nیک ref به کمک ()useRef بسازید .\nیک Element به آن ref اختصاص دهید.\nحالا مطابق مرحله 3 میتوانید به Element موجود در DOM دسترسی داشته باشید.\nforwardRef در ری اکت چیست ؟\nforwardRef در ری اکت یک ویژگی بسیار کاربردی هست که به ما اجازه میده یک ref رو از کامپوننت والد، به کامپوننت فرزند منتقل کنیم.\n\nتو مقاله forwardRef در ری اکت بصورت جامع و تخصصی این ویژگی رو بررسی کردیم.\n\nبدون forwardRef امکان ارسال props از کامپوننت والد به کامپوننت فرزند رو نداریم.\n\nPortals در ری اکت چیست ؟ پورتال در ری اکت چیست ؟\nPortals در ری اکت یک ویژگی حرفه ای هست که به توسعه دهنده های React این امکان رو میده که Element های خودشون رو خارج از سلسه مراتب درختی React ، رندر کنن.\n\nاکثر Element ها یا Component ها تو ری اکت داخل سلسله مراتب درختی ری اکت render میشن و این کار رو برای ما دشوار میکنه اگه بخوایم مودال یا پاپ آپ نمایش بدیم.\n\nPortal در ریکت چه جاهایی استفاده میشه ؟\nدر کل هرجایی که ما میخوایم یک Element رو بالاتر از سایر Element ها و خارج از سلسله مراتب درختی ری اکت render کنیم، میتونیم از پورتال در ریکت استفاده کنیم. چند مورد از کاربرد Portal در ری اکت :\n\n \n\nنمایش پیغام اجازه دسترسی به کوکی\n نمایش لودینگ\nنمایش کامپوننت چت آنلاین/ پشتیبانی\nچطور میتونیم Props های هر کامپوننت رو اعتبار سنجی کنیم ؟ بررسی تایپ Props چجوریه ؟\nما میتونیم Props های کامپوننت های خودمون رو چک کنیم تا type صحیحی داشته باشن و درصورتیکه Type اشتباهی داشتن ما warning دریافت کنیم.\n\nمثلا یکی از props های ما که اسمش name هست، صرفا باید string بگیره و اگه number بهش فرستاده شد، این اشتباهه و ما باید warning بگیریم تا مطلع بشیم.\n\nکتابخانه های مختلفی وجود دارن که نوع Props کامپوننت رو چک میکنن ( prop type )\n\nیکی از معروف ترینشون کتابخانه prop-types در ری اکت هست.\n\nمثلا میتونیم از تایپ های زیر برای Props های خودمون استفاده کنیم :\n\nPropTypes.any\nPropTypes.string\nPropTypes.number\nPropTypes.object\nPropTypes.array\nPropTypes.node\nPropTypes.func\nPropTypes.element\nPropTypes.bool\nPropTypes.symbol\n \n\nerror boundary در ری اکت چیست ؟ مدیریت خطا در ری اکت یعنی چه ؟\nبه کمک Error Boundary در ری اکت میتونیم خطاهای اپیکیشن رو مدیریت کنیم. یعنی هر زمان خطایی صورت گرفت، بجای کرش کردن اپیکیشن بتونیم یک UI مشخص به کاربر نمایش بدیم ( fallback )\n\nیا مثلا متن “مشکلی پیش آمد” نمایش بدیم.\n\nمرورگر ها میتونن کد های JSX رو بخونن ؟\nخیر !\n\nمرورگر ها فقط توانایی خوندن کد های جاوااسکریپتی رو دارن.\n\nJSX، جاوااسکریپت نیست.\n\nبرای اینکه کدهای JSX برای مرورگر ها قابل درک و خوندن باشن، باید به کمک Babel به جاوااسکریپت تبدیلشون کنیم.\n\nری اکت در پشت صحنه خودش JSX رو به جاوااسکریپت خام تبدیل میکنه ( به کمک Babel  )\n\nاز بین سوالات استخدامی ریکت ، این سوال از این بابت ممکنه مطرح بشه تا درک عمیق شمارو نسبت به React بسنجن.\n\nتفاوت کتابخانه ری اکت با انگولار چیه ؟ تفاوت React و Angular چیست ؟\nانگولار یک فریمورک کامله که تمامی ابزار های مورد نیاز شمارو داخل خودش داره اما ری کت یک کتابخانه هست هست و اکثر ابزارهای مورد نیاز رو داخلش نداره. ( باید بصورت پکیج یا کتابخانه های خارجی نصب کنید )\nری اکت فقط بخش view یک MVC رو به ما میده درصورتیکه انگولار کل MVC رو پوشش میده.\nری اکت از Virtual DOM استفاده میکنه ولی Angular از دام واقعی ( Real DOM ) استفاده میکنه.\nکامپوننت در ری اکت چیست ؟\nکامپوننت در ری اکت اجزای سازنده UI ما هست . به هر تیکه کد که یک وظیفه مشخص داره و یک بخش از UI رو نمایش میده کامپوننت میگیم.\n\nکامپوننت ها میتونن reusable ( قابل استفاده مجدد ) باشن.\n\nکامپوننت ها یک بخش مستقل از UI ما هستن. مثلا میتونیم هر کدوم از موارد زیر رو یک کامپوننت در نظر بگیریم :\n\nهدر\nفوتر\nدکمه\nجدول\nاینکه هر کامپوننت مستقل هست، کمک میکنه تا فرایند توسعه و دیباگ اون بخش راحت تر باشه چون ارتباطی با سایر بخش ها نداره.\n\nهمچنین کامپوننت ها reusable هستن یعنی اگر میخوایم 10 جدول نمایش بدیم، نیازی نیست که کد های مربوط به جدول رو 10 مرتبه ( تکراری ) بنویسیم.\n\nصرفا کافیه یکبار کامپوننت جدول رو بسازیم و 10 بار فراخوانیش کنیم.\n\nاین سوال جز پایه ای ترین موارد ری اکت هست و احتمالش وجود داره که حداقل یک سوال مصاحبه ریکت در مورد کامپوننت ها از شما بپرسن.\n\nتفاوت Props و State در ری اکت چیست ؟\nکامپوننت والد میتونه مقدار Props کامپوننت فرزندش رو تغییر بده اما مقدار State کامپوننت فرزند رو نمیتونه تغییر بده.\n\nاز داخل کامپوننت فرزند میتونیم State رو تغییر بدیم، اما Props رو نمیتونیم تغییر بدیم.\n\n \n\nشباهت Props و State در ری اکت چیست ؟\nهر دو میتونن از کامپوننت والد مقدار اولیه دریافت کنن.\n\nاز داخل کامپوننت فرزند، میتونیم به هر دو مقدار پیشفرض ( default value ) بدیم.\n\n \n\nانواع مختلف Side Effect که کامپوننت های ری اکتی میتونن داشته باشن چی هستن ؟\nکامپوننت ها در React دو نوع Side Effect میتونن داشته باشن :\n\nساید افکت های بدون Cleanup\nساید افکت های دارای Cleanup\nابزار CRA یا همون create-react-app چیست ؟\nCRA یا همون create-react-app یک ابزار CLI هست ( Command line interface ) که برای ایجاد پروژه های ری اکت کاربرد داره.\n\nتوسط دستور زیر میشه از این ابزار برای ساخت پروژه react استفاده کرد :\n\nCreate-react-app my-app\n\nمیشه از AJAX تو پروژه های ری اکتی استفاده کرد ؟\nبله براحتی ! ما میتونیم از هر کتابخونه ایجکس مثل axios استفاده کنیم.\n\nاگه اپیکیشن ری اکت ما کند باشه چیکار باید بکنیم ؟\nکند بودن اپیکیشن های ری اکتی دلایل زیادی میتونه داشته باشه اما معمولا بخاطر re-render زیادی و غیرضروری هست.\n\nبرای جلوگیری از re-render اضافی در ری اکت از 2 ویژگی قوی میشه استفاده کرد :\n\n \n\nmemo در ری اکت :\nmemo به ما کمک میکنه تا از رندر های غیرضروری جلوگیری کنیم. تو مقاله memo در ری اکت بصورت کامل این ویژگی رو بررسی کردیم.\n\nPureComponent در ری اکت :\nPureComponent تو ری اکت ، از re-render اضافی کامپوننت جلوگیری میکنه. دقت کنید که از این ویژگی فقط تو class Component ها میشه استفاده کرد.\n\nتو مقاله PureComponent در ریکت بصورت کامل بررسیش کردیم.\n\nری اکت روتر چیست ؟ ( React Router چیست ؟ )\nری اکت روتر یک کتابخانه ی استاندارد برای مدیریت Routing ( روتینگ ) در ری اکت هست. کتابخانه React Router به ما امکان جابجایی بین صفحات/کامپوننت های مختلف رو میده.\n\nبه کمک این کتابخانه میتونیم url مرورگر رو عوض کنیم و UI مطابق با url رو به کاربر نمایش بدیم ( sync )\n\nتقریبا تو همه ی پروژه های ری اکتی از React Router استفاده میشه، پس احتمال اینکه بین سوالات استخدامی react چند سوال React از React Router ازتون بپرسن وجود داره.\n\n \n\nویژگی BrowserRouter در ری اکت روتر چیست ؟\nبه کمک BrowserRouter  در ری اکت روتر میتونیم یک سیستم روتینگ ( router ) پیاده سازی کنیم. درحقیقت BrowserRouter  از history API خود HTML استفاده میکنه ( مثل pushstate , replaceState , postState ) برای اینکه UI نمایش داده شده رو با url مرورگر sync کنه.\n\nکامپوننت Routes در ری اکت روتر چیست ؟\nکامپوننت Routes در ری اکت روتر، تو نسخه 6 ری اکت روتر معرفی شد.\n\nدر واقع Routes در ریکت یک جایگزین برای Switch محسوب میشه چون بجای اینکه مسیر ها ( route ها ) بر اساس ترتیب انتخاب بشن، بر اساس بهترین تطابق انتخاب میشن.\n\n \n\nکامپوننت Route در ری اکت روتر چیست ؟\nکامپوننت Route در ری اکت، یک کامپوننت شرطی هست که از ما یک path  و یک UI دریافت میکنه. اگه کاربر به اون path مراجعه کنه (  اون path رو در url مرورگر وارد کنه ) UI ما به کاربر نمایش داده میشه.\n\nمثلا ما میخوایم اگ کاربر به آدرس shop رفت ، کامپوننت ShopComponent نمایش داده بشه، این شرط رو کامپوننت Route در ریکت برای ما پیاده سازی میکنه.\n\nکامپوننت Link در ری اکت روتر چیست ؟\nاگه با تگ a تو html کار کرده باشین، میدونیم که تگ a برای ریدایرکت کردن کاربر از صفحه ای به صفحه ی دیگه کاربرد داره. تگ Link هم دقیقا همین نقش رو تو React برای ما ایفا میکنه.\n\nبه کمک Link در ریکت روتر میتونیم کاربر رو از صفحه ای به صفحه ای دیگه ریدایرکت کنیم.\n\nکامپوننت NavLink در ری اکت روتر چیست ؟\nکامپوننت NavLink در ری اکت روتر مشابه کامپوننت Link هست. با این تفاوت که ما از NavLink در ریکت روتر برای ساختن منو هایی استفاده میکنیم که نیاز به لینک دارن.\n\nبطور مثال منوی هدر که شامل لینک صفحات وبلاگ، فروشگاه، تماس با ما و درباره ما میشه.\n\nما همچنین میتونیم ویژگی active رو تو این کامپوننت مدیریت کنیم. یعنی زمانیکه کاربر روی اون لینک کلیک کرد، چه استایلی به اون دکمه بدیم. ( مثلا رنگش فرق کنه با سایر آیتم ها )\n\nچرا ما به React Router نیاز داریم ؟ دلیل استفاده از ری اکت روتر چیست ؟\nما نیاز به اپیکیشنی داریم که صفحات زیادی داشته باشه ( از دو صفحه تا هزاران صفحه ).\n\nهمچنین ما میخوایم بین این صفحات جابجا بشیم ( کاربر رو ریدایرکت کنیم ) این جابجایی بین صفحات باید بصورتی انجام بشه که صفحه reload نشه!\n\nاین توقعات ما، صرفا با کتابخانه ری اکت روتر قابل انجام هست.\n\nمهمترین چیزی که باید اینجا به خودمون یادآوری کنیم، این هست که اپیکیشن های ری اکتی، SPA هستن ( single page application ).\n\nSPA یعنی اپیکیشن تک صفحه ای.\n\nتو اپیکیشن های SPA ما امکان جابجایی بین صفحات رو نداریم، مگر اینکه از کتابخانه های Routing استفاده کنیم.\n\nمزایای ری اکت روتر چیست ؟\nبرای ما client side routing پیاده سازی میکنه تا UI اپیکیشن خودمون رو با URL مرورگر sync کنیم.\nبه ما اجازه میده از کامپوننت Link استفاده کنیم ( بجای تگ a ) و میتونیم کاربر رو بدون reoad شدن ریدایرکت کنیم.\nبه ما اجازه رندر شرطی یک کامپوننت درصورت وجود داشتن آدرس اون کامپوننت در URL رو میده ( path )\nتفاوت React Router و React Router DOM چیست ؟\nکتابخانه React Router شامل هسته اصلی سیستم روتینگ هست ولی کتابخانه React Router DOM شامل اجرایی هست که تو ارتباط با DOM بهشون نیاز پیدا میکنیم مثل BrowsweRouter ، Link , NavLink و ..\n\nالبته که برای استفاده از ری اکت روتر ، باید هم React Router رو نصب کنیم، هم React Router DOM رو.\n\nکم پیش میاد که چنین سوالاتی در بین سوالات مصاحبه ریکت شما وجود داشته باشه، اما اگه ازش مطلع باشید 1 هیچ از بقیه جلو ترید 🙂\n\nچطور در ری اکت، کاربر رو ریدایرکت کنیم ؟\nبه کمک useNavigate در ریکت میتونیم کاربر رو ریدایرکت کنیم :\n\n \n\nconst Home = () => {\nconst navigate = useNavigate();\nreturn (\n<button\nonClick={() => {\nnavigate(\"/shop\");\n}}\n>\nاگه رو من کلیک کنی، به صفحه فروشگاه میری.\n</button>\n);\n};\n\n \n\n \n\nاگه با useNavigate در ریکت آشنا نیستید، پیشنهاد میکنم مقاله useNavigate در react رو مطالعه کنید.\n\nچطور در ری اکت روتر صفحه 404 بسازیم ؟\nتو کتابخانه React Router، ما یکسری مسیر ( path ) مشخص میکنیم که درصورت وارد شدن اون path ها در URL مرورگر، یکسری کامپوننت که خودمون مشخص کردیم به کاربر نمایش داده بشه.\n\nحالا اگه یک مسیر ( Path ) در URL مرورگر وارد بشه که اشتباهه، چه اتفاقی باید بیوفته ؟ منطقا باید یک صفحه 404 به کاربر نمایش داده بشه تا متوجه بشه که آدرس رو اشتباه وارد کرده.\n\n \n\n<Routes>\n\n<Route path='*' element={<NotFound />} />\n\n<Route path=\"/\" element={<Home />} />\nelement={<Settings />} />\n</Routes>\n\nسوالات مصاحبه ری اکت ( بخش ریداکس )\nسوالات مصاحبه ری اکت - سوالات مصاحبه ریکت - سوالات مصاحبه react - سوال مصاحبه ری اکت - سوال مصاحبه react سوالات استخدامی ری اکت - سوالات استخدامی ریکت - سوالات استخدامی react سوال استخدامی ری اکت - سوال استخدامی ریکت - سوال استخدامی react - سوال استخدامی ریاکت\nامکان نداره بحث سوال مصاحبه ری اکت باشه و یاد ریداکس نیوفتیم ! همیشه تو جلسات استخدامی ری اکت، چند مورد سوال react پرسیده میشه که به Redux مرتبط هست.\n\nتو این بخش سوالات استخدامی ری اکت و Redux رو بررسی میکنیم . . .\n\nریداکس چیست ؟\nریداکس یک کتابخانه مدیریت State هست ( State Management ) که تو تمام کتابخانه ها و فریمورک های جاوا اسکریپتی قابلیت استفاده داره.\n\nتو مقاله ریداکس در ری اکت بیشتر راجب Redux صحبت کردیم. ( پیشنهاد میکنم  برای درک بیشتر ریداکس، مطالعه کنید )\n\nشرکت هایی که از ریداکس استفاده میکنن معمولا چند سوال مصاحبه ری اکت از شما میپرسن ، پس لازمه که اطلاعات خوبی از Redux داشته باشید .\n\nریداکس قابلیت استفاده تو چه کتابخانه ها و فریمورک هایی رو داره ؟\nاز ریداکس میشه در تمامی کتابخانه ها و فریمورک های جاوا اسکریپتی استفاده کرد.\n\nمثل Angular , React , Vue , Jquery و حتی جاوااسکریپت خام\n\nچه زمانی از کتابخانه ریداکس استفاده کنیم ؟\n با بزرگتر شدن اپیکیشن ما، دیگه State Management های پیشفرض پاسخگو نیستن و کارایی ندارن. چنین مواقعی باید به سمت State Management های پیشرفته تر مثل کتابخانه ریداکس بریم.\n\nکاربرد ریداکس چیست ؟\nزمانیکه اپیکیشن ما بزرگ و بزرگتر میشه، ما نیاز داریم که یکسری از state های خودمون رو در یک بخش مجزا ذخیره کنیم ( نه داخل خود کامپوننت به کمک useState ) و این state ذخیره شده در یک بخش مجزا رو بین چندین کامپوننت مختلف به اشتراک بزاریم.\n\nدر چنین مواقعی ریداکس به ما کمک میکنه.\n\nمعمولا تو سوالات استخدامی ری اکت درمورد ریداکس و کاربردش سوالاتی مطرح میشه.\n\nاینکه میگیم ریداکس قابل پیش بینیه (Predictable) یعنی چی ؟\nریداکس خودش رو A Predictable State Container For Js App معرفی کرده. تو این جمله اشاره کرده که ریداکس یک کتابخانه ی قابل پیش بینی برای مدیریت State اپیکیشن های جاوا اسکریپتیه.\n\nتو ریداکس، State ها صرفا خواندنی هستن ( Read-only )\n\nبرای اینکه بتونیم State های خودمون تو ریداکس رو آپدیت کنیم، باید یک Action بفرستیم و تو این Action توضیح بدیم که چه تغییری روی این State، ما نیاز داریم ؟\n\nبه همین دلیل که برای بروزرسانی State های خودمون توضیح میدیم، اپیکیشن ما قابل پیشبینی ( Predictable ) میشه.\n\nوجود این سوال در بین سوالات مصاحبه ریکت شما، نشون میده میخوان درک عمیق شمارو نسبت به Redux بسنجن.\n\nStore در Redux چیست ؟\nتو کتابخانه ریداکس، ما تمامی State های خودمون رو داخل یک جایی ذخیره میکنیم که بهش Store میگیم.\n\nبعدا میتونیم به State های ذخیره شده در Store از هر کامپوننتی دسترسی داشته باشیم\n\nدر واقع Store یک Object جاوا اسکریپتی هست و شامل تمامی State هایی هست که ما داخلش ذخیره کردیم.\n\nما از داخل هر کامپوننتی میتونیم به store دسترسی داشته باشیم و مقدار ذخیره شده داخل store رو بخونیم، ویرایش کنیم یا حذف کنیم.\n\nAction در Redux چیست ؟\nAction در ریداکس در واقع نوعی event ( رویداد ) هست. تنها راهی که میتونیم State و داده های خودمون رو داخل Store ذخیره یا بروزرسانی کنیم، Action هست.\n\nخود Action یک Object جاوا اسکریپتیه که از type و payload تشکیل شده.\n\nمقدار Type در Redux Action چیست ؟\nهر اکشن یک type داره. type مشخص میکنه که event ما قراره چه کاری انجام بده. مثلا اگه قراره تو عملیات بروزرسانی State در ریداکس، یک کاربر جدید اضافه کنیم، میتونیم تایپِ اکشنِ خودمون رو add_user بزاریم.\n\nهمچنین اگه قراره کاربر رو از Store موجود در ریداکس حذف کنیم، میتونیم type اکشن خودمون رو remove_user بزاریم.\n\nمنطقا مقداری که برای type در نظر میگیریم باید مشخص کننده نوع کاری باشه که میخوایم انجامش بدیم. این مقدار هرچیزی میتونه باشه فقط باید مشخص کننده وظیفه ی action باشه.\n\nمقدار payload در Redux Action چیست ؟\nاین مقدار اختیاریه و میتونه داخل Action وجود داشته باشه یا وجود نداشته باشه.\n\nدرکل Payload در Action شامل اطلاعاتی هست که برای ذخیره یا بروزرسانی State موجود در Store بهش نیاز داریم.\n\nبرفرض ما قصد ذخیره کردن کاربر Login شده رو داخل Store داریم. در این سناریو مقدار Payload باید شامل اطلاعات کاربر باشه مثل : نام کاربر، فامیل، شماره تلفن، کدملی و ..\n\nتو این سناریو مقدار Type این Action میتونه ADD_USER باشه.\n\nخود Payload یک Object جاوا اسکریپتیه.\n\nدر برخی موارد نیازی به اضافه کردن payload در action نداریم. مثلا یک action وظیفه ی حذف اطلاعات تمامی کاربران از store رو داره . در این سناریو دیگه هیچ payload نداریم و صرفا باید type اکشن رو مشخص کنیم.\n\nکاربرد Action در Redux چیست ؟\nهمونطور که گفتیم، برای اینکه بتونیم یک State رو داخل Store ذخیره یا بروزرسانی کنیم، نیاز به یک Action داریم.\n\nبدون Action نمیتونیم State خودمون رو داخل Store ذخیره یا بروزرسانی کنیم!!\n\nزمانیکه Action خودمون رو ساختیم، میتونیم به کمک متود dispatch ، اکشن خودمون رو به Store بفرستیم.\n\nreducer در Redux چیست ؟\nreducer در ریداکس یک Pure Function هست که از ما مقدار فعلی State رو میگیره، action رو به Store میفرسته و مقدار جدید state رو به ما برمیگردونه.\n\nریداکس تولکیت چیست ؟\nریداکس تولکیت تمامی پروسه هایی که تو ریداکس داریم رو برای ما راحت تر میکنه.\n\nریداکس تولکیت شامل مجموعه ای از ابزار ها و توابع هست که کمک میکنه خیلی ساده تر و راحت تر بتونیم با ریداکس کار کنیم! در حقیقت تو Redux Toolkit از اضافه گویی و موارد اضافی که تو ریداکس خام داشتیم، پرهیز میکنیم.\n\nاستفاده از ریداکس تولکیت باعث میشه حجم کد کمتری بنویسیم و استفاده از کتابخانه ریداکس، آسونتر بشه.\n\nباتوجه به مزیت هایی که ریداکس تولکیت داره و درنظر گرفتن این موضوع که شرکت های خیلی زیادی از Redux Toolkit استفاده میکنن، احتمالا یک سوال مصاحبه react از ریداکس تولکیت از شما بپرسن.\n\nچطور با ریداکس تولکیت Store بسازیم ؟\nبه کمک تابع configureStore خیلی ساده و راحت میتونیم Store بسازیم.\n\nممکنه در بین سوالات استخدامی react ، این سوال از شما پرسیده بشه تا بصورت عملی یک Store به کمک ریداکس تولکیت ایجاد کنید.\n\n \n\nچطور با ریداکس تولکیت Action بسازیم ؟\nما میتونیم به کمک تابع createAction در ریداکس یک action بسازیم.\n\nفقط کافیه آرگومان های ورودی مورد نیاز برای ساخت action در ریداکس رو بهش پاس بدیم ( type , payload ) .\n\nخروجی createAction، یک تابع هست که هر زمان صداش بزنیم، action ما dispatch میشه.\n\nچطور با ریداکس تولکیت reducer بسازیم ؟\nبه کمک تابع createReducer  میتونیم در ریداکس تولکیت، reducer ایجاد کنیم.\n\n \n\nmiddleware در ریداکس چیست ؟\nکتابخانه Redux به ما اجازه میده Action های ارسال شده از کامپوننت رو تا زمانیکه به reducer میرسه رهگیری کنیم.\n\nاین رهگیری به کمک middleware در ریداکس امکانپذیره.\n\nاز بین سوالات استخدامی react این سوال هم ممکنه مطرح بشه ( مخصوصا در شرکت هایی که از ریداکس استفاده میکنن )\n\nمزایای Redux در ری اکت چیست ؟\nریداکس برای ما State های قابل پیش بینی میسازه\nریداکس اپیکیشن مارو قابل نگهداری میکنه\nدیباگ ریداکس آسونه !\nریداکس باعث بهبود عملکرد ( Performance ) اپیکیشن میشه\nتست ریداکس آسونه\nریداکس میتونه State های مارو دائمی ذخیره کنه!\nریداکس از رندر سمت سرور ( Server-Side-Rendering ) پشتیبانی میکنه\nباتوجه به محبوبیت زیاد ریداکس، احتمالش خیلی زیاده که چند سوال مصاحبه react از شما درمورد Redux بپرسن.\nهمیشه باید از Redux تو پروژه ها استفاده کنیم ؟\nاستفاده از ریداکس در ری اکت، صرفا برای پروژه های بزرگ و سنگین  و زمانیکه State های مشترک زیادی دارید که قراره تو کامپوننت های مختلف استفاده بشه، پیشنهاد میشه.\n\nبا اینکه استفاده از Redux Toolkit در ریداکس، پیچیدگی ریداکس رو کم کردیم اما با این حال کمی پیچیدگی به اپیکیشن ما اضافه میکنه. پس در جریان باشید که چه چیزی رو در ازای چه چیزی بدست میاریم..\n\nکتابخانه React Redux چیست ؟\nکتابخانه React Redux منتشر شد تا بتونیم از Redux در ری اکت هم استفاده کنیم.\n\nکتابخانه React Redux توسط تیم Redux ساخته شده و نگهداری میشه.\n\nمیتونیم توی reducer یک action صدا بزنیم ( dispatch کنیم ) ؟\nهمونطور که تو مقاله ریداکس در ریکت مطرح کرده بودیم، reducer نباید هیچ side effect داشته باشه.\n\nreducer صرفا باید State فعلی و Action رو دریافت کنه و یک State جدید به ما تحویل بده ( بدون هیچ ساید افکتی )\n\n \n\nباید تمامی State های اپیکیشن رو تو Redux ذخیره کرد ؟\nخیر. ما میتونیم State هایی که فقط مرتبط با یک کامپوننت هستن رو داخل همون کامپوننت ذخیره کنیم.\n\nو State هایی که بین چندین کامپوننت مشترک هستن و عمومی تر هستن رو داخل Redux ذخیره کنیم.\n\nپاسخ صحیح شما به این سوال در مصاحبه استخدامی ریکت ، نشون میده که چه مقدار به Redux تسلط دارید.\n\nredux-saga چیست ؟\nredux-saga یک کتابخانه ی middleware است که در کنار ریداکس استفاده میشه و به ما اجازه میده بطور ناهمزمان ( async ) با منابع خارجی تعامل داشته باشیم. مواردی مثل دریافت اطلاعات از سرور ( Http-request ) و فضای ذخیره سازی مرورگر ( Local Storage )\n\nredux-thunk چیست ؟\nredux-thunk کتابخانه ی middleware هست که در کنار ریداکس مورد استفاده قرار میگیره.\n\nredux-thunk به ما اجازه میده که بجای نوشتن action در ریداکس، یک تابع برگردونیم ( return کنیم ). همین موضوع به ما اجازه میده که\n\nسوالات مصاحبه ری اکت ( بخش تایپ اسکریپت )\n\nتو این بخش از سوالات مصاحبه ریکت ، میخوایم به بررسی سوالات تایپ اسکریپت بپردازیم.\n\nاز بین سوالات استخدامی React ، همیشه چند مورد سوال تایپ اسکریپت هم پرسیده میشه که تو این بخش هم میخوایم بررسیشون کنیم.\n\nتایپ اسکریپت چیست ؟\nتایپ اسکریپت یک زبان برنامه نویسیه که میشه به چشم جاوا اسکریپت پیشرفته بهش نگاه کرد:) در حقیقت تایپ اسکریپت همون زبان برنامه نویسی جاوا اسکریپت هست با این تفاوت که بهش یکسری امکانات و ویژگی ها اضافه شده.\n\nباتوجه به اهمیت خیلی خیلی زیاد تایپ اسکریپت برای شرکت ها، ممکنه در بین سوالات مصاحبه ریکت ، درمورد تایپ اسکریپت از شما سوال بشه.\n\nتفاوت تایپ اسکریپت و جاوااسکریپت چیست ؟\nتفاوت اول ( تایپ ) : تایپ اسکریپت تایپ های ثابتی داره و ما باید مشخص کنیم که هر متغیر، تابع و .. چه تایپی داره. همین مسئله احتمال بروز خطا در اپیکیشن رو خیلی کمتر میکنه.\n\nاما جاوااسکریپت تایپ های متغیر داره، بعنی ما هنگام تعریف متغیر تایپش رو مشخص نمیکنیم. پس داخل متغیر های جاوااسکریپت میتونیم هر نوع داده ای ( رشته، عدد، اعشاری و .. ) بریزیم.\n\n \n\nتفاوت دوم ( الگو ) : جاوااسکریپت یک زبان اسکریپت نویسی هست اما تایپ اسکریپت یک زبان برنامه نویسی شی گرا که از مفاهمی پیشرفته مثل وراثت، کلاس، شی گرایی و .. پشتیبانی میکنه.\n\n \n\nتفاوت سوم ( Prototype ) : ما تو تایپ اسکریپت امکان استفاده از ProtoType هارو داریم درصورتیکه تو جاوااسکریپت مستقیما به این ویژگی دسترسی نداریم. Prototype ها الگو های طراحی هستن و تو یه مقاله بصورت مفصل راجبشون صحبت میکنیم.\n\n \n\nتفاوت چهارم ( Syntax ) : ما کد های جاوااسکریپت رو داخل تگ script و فایل هایی با فرمت js مینویسیم که درنهایت این کد ها توسط مرورگر اجرا میشن، درصورتیکه کد های تایپ اسکریپت در فایلهایی با فرمت ts یا tsx نوشته میشن و توسط کامپایلر، کامپایل میشن.\n\n \n\n \n\nتایپ اسکریپت در ریکت قابلیت استفاده داره ؟\nبله 🙂\n\nاستفاده از تایپ اسکریپت در ریکت باعث میشه پروژه اصولی تر و توسعه پذیر تری داشته باشیم. همچنین دیباگ و نگهداری از پروژه راحت تر میشه و انرژی و زمان کمتری از ما میگیره.\n\nتو مقاله تایپ اسکریپت در ریکت حسابی درمورد این موضوع صحبت کردیم ( پیشنهاد میکنم مطالعه کنید )\n\nفایل tsconfig.json در تایپ اسکریپت چیه ؟\nبه کمک فایل tsconfig.json در تایپ اسکریپت میتونیم تنظیمات کامپایلر تایپ اسکریپت رو انجام بدیم .\n\nمعمولا در سوالات استخدامی react تا همینجا پرسیده میشه و سوالی درمورد چگونگی کانفیگ تایپ اسکریپت پرسیده نمیشه.\n\nمزایای تایپ اسکریپت در React چیست ؟\nچک کردن نوع متغیر ها در تایپ اسکریپت!\nافزایش خوانایی کد!\nاینترفیس های تایپ اسکریپت!\nپشتیبانی کامل از JSX در ریکت!\nپشتیبانی از تمامی IDE ها!\nجامعه آماری بالا!\nتفاوت فرمت فایل .tsx و .ts چیست ؟\nفرمت فایل .ts برای فایلهایی استفاده میشه که ما داخلشون میخوایم توابع، کلاس ها، reducer و .. داشته باشیم و هیچ نوع کد JSX داخلشون لازم نداریم ( مثل اِلِمان ها )\n\nاما فرمت فایل .tsx به ما اجازه استفاده از JSX در کنار تایپ اسکریپت رو میده.\n\nپاسخ صحیح به این سوال نشون میده که تجربه خوبی در کار با TypeScript دارید پس ممکنه در بین سوالات استخدامی ری اکت مطرح بشه.\n\nانواع داده ( تایپ های مختلف ) در تایپ اسکریپت رو نام ببرید ؟\nتو تایپ اسکریپت تایپ های زیر رو داریم :\n\nنوع رشته ای\nنوع عددی\nنوع Boolean\nنوع Null\nنوع Undefiend\nنوع Void\nسوالات مصاحبه ری اکت ( کتابخانه های ری اکتی )\n\nاز بین سوالات استخدامی ری اکت ، همیشه چند مورد سوال React درمورد کتابخانه های ریکت پرسیده میشه !\n\nما باید یکسری اطلاعات عمومی درمورد کتابخانه های پرطرفدار و پرکاربرد ری اکت داشته باشیم. که اگر درمورد این کتابخانه ها از ما سوالی پرسیده شد، امکان پاسخ دادن به اون سوالات رو داشته باشیم . . .\n\nتو این بخش به بررسی اون دسته از سوالات استخدامی react میپردازیم که به کتابخانه های جانبی ری اکت مرتبط هستن.\n\nکتابخانه Axios تو ری اکت چیه و چیکار میکنه ؟\nکتابخانه Axios در ریکت یکی از مهمترین و کاربردی ترین کتابخانه های فِرانت اِند هست که به ما اجازه میده با سرور Back-End خودمون ارتباط بگیریم. ( دریافت، ارسال، ویرایش و حذف اطلاعات )\n\nکتابخانه axios یک کتابخانه جاوا اسکریپتی جهت ارتباط با Back-End هست که به ما اجازه میده درخواست های API به سرور Back-End خودمون ارسال کنیم.\n\nدر حقیقت axios یک کتابخانه promise-based هست که به ما اجازه میده کد های Async به کمک Async و Await بنویسیم.\n\nتو مقاله آموزش axios در react خیلی مفصل و جامع درمورد این کتابخانه کاربردی صحبت کردیم.\n\nاین کتابخانه تقریبا تو همه پروژه ها استفاده میشه، پس این احتمال وجود داره که از بین سوالات استخدامی react ، این سوال از شما پرسیده بشه.\n\nکتابخانه React Router در ریکت چیست ؟\nکتابخانه React-Router تمامی پروسه Routing رو برای ما مدیریت میکنه و دیگه نگرانی از بابت جابجایی بین صفحات مختلف وبسایت نخواهیم داشت!\n\nکتابخانه ری اکت روتر تقریبا تو همه پروژه هایی که نیاز به چندین صفحه و جابجایی بین صفحات دارن، استفاده میشه. پس میشه گفت استفاده نکردن ازش غیر ممکنه !\n\nکتابخانه Ant Design در ریکت چیست ؟\nکتابخانه Ant Design در ری اکت شامل مجموعه بسیار گسترده و متنوع از کامپوننت های از پیش ساخته شده و آماده برای توسعه اپیکیشن های ری اکتی هست!\n\nاستفاده از Ant Design در ری اکت کمک میکنه تا زمان کمتری صرف ساخت و پیاده سازی UI کنیم و زمان و تمرکز خودمون رو روی Logic بزاریم.\n\nاگر شرکتی که باهاش قرار مصاحبه دارید از کتابخانه Ant Design استفاده میکنه، این احتمال وجود داره که چند سوال مصاحبه ری اکت درمورد Ant Design از شما پرسیده بشه.\n\nکتابخانه Tailwind UI در ریکت چیست ؟\nبا کتابخانه Tailwind UI در ری اکت به صدها کامپوننت و طرح آماده دسترسی دارین.\n\nتمامی طرح ها و کامپوننت های آماده ی این کتابخانه، قابل ویرایش و شخصی سازی هستن، فقط کافیه به Tailwind تسلط داشته باشید.\n\nکتابخانه Semantic UI در ریکت چیست ؟\nاگه دمبال کامپوننت ها و طرح های آماده هستید یا زمان لازم برای نوشتن کامپوننت های دلخواهتون رو ندارید، Semantic UI در ری اکت انتخاب خوبی میتونه براتون باشه.\n\nSemantic UI جامعه آماری خیلی خوبی داره و توسط کمپانی های مشهوری درحال استفادس.\n\nکتابخانه React Bootstrap در ریکت چیست ؟\nکتابخانه React Bootstrap در ری اکت از کتابخانه بوت استرپ الهام گرفته تا مجموعه ای بزرگ از کامپوننت ها و طرح های آماده رو در اختیار توسعه دهندگان ری اکت بزارن.\n\nکتابخانه Fabric React در ریکت چیست ؟\nکتابخانه Fabric React در ری اکت معمولا با اسم Office UI Fabric هم شناخته میشه و یکی از مشهور ترین کتابخانه های UI برای کتابخانه ری اکت هست.\n\nکتابخانه styled-components در ریکت چیست ؟\nکتابخانه Styled-Components در ری اکت به ما اجازه میده از تکنیک css-in-js استفاده کنیم. در حقیقت به کمک Styled-Components در ریکت میتونیم درون کامپوننت خودمون از Css و JS درکنار هم استفاده کنیم و ترکیبشون کنیم.\n\nممکنه در بین سوالات مصاحبه react یک سوال در این مورد از شما پرسیده بشه.\n\nکتابخانه React DnD در ریکت چیست ؟\nکتابخانه React Dnd در ری اکت به ما اجازه میده از قابلیت Drag & Drop تو اپیکیشن خودمون استفاده کنیم.\n\nپیاده سازی ویژگی Drag & Drop در ری اکت بدون React DnD کار سخت، پیچیده و زمانبری هست اما به لطف وجود این کتابخونه دیگه نگرانی از این بابت نداریم.\n\nکتابخانه OnsenUI در ریکت چیست ؟\nکتابخانه OnsenUI در ری اکت یک کتابخانه UI محسوب میشه که به ما اجازه میده از کامپوننت ها و طرح های آماده از پیش ساخته شده استفاده کنیم.\n\nکتابخانه Rebass در ریکت چیست ؟\nکتابخانه Rebass در ری اکت نیز یک کتابخانه UI هست که شامل ده ها کامپوننت و طرح از پیش ساخته شده هست. طبق گفته سازندگان Rebass، این کتابخانه خیلی سبکه و سازگاری خیلی خوبی با اکوسیستم ری اکت داره.\n\nکتابخانه Material UI در ریکت چیست ؟\nبی تعارف بخوایم بگیم کتابخانه Material UI در ری اکت یکی از پرکاربردترین و قابل اعتماد ترین کتابخانه های مربوط به UI هست که شامل صدها طرح و کامپوننت آماده و از پیش ساخته شدس.\n\nکتابخانه Material UI بیش از 2.5 میلیون دانلود در هفته داره ( آمار Npm ) که نشون میده جامعه آماری فوق العاده و بزرگی داره.\n\nاگه شرکتی که باهاش قرار مصاحبه دارید از Material UI استفاده میکنه، ممکنه چند سوال مصاحبه React درمورد Material UI از شما پرسیده بشه.\n\nکتابخانه React motion در ریکت چیست ؟\nکتابخانه های خیلی زیادی برای بحث انیمیشن در ری اکت وجود دارن اما کتابخانه React-motion از spring configuration برای اعمال انیمیشن استفاده میکنه و پیچیدگی خیلی کمی داره.\n\nپیاده سازی انیمیشن به کمک React-motion در ریکت خیلی آسونه و نیاز به یادگیری خاصی نداره.\n\nکتابخانه React Spinners در ریکت چیست ؟\nکتابخانه React Spinners در ری اکت شامل مجموعه ای عظیم از Spinner ها هست که مناسب ایجاد وضعیت Loading هستن.\n\nمعمولا اگه چنین سوالاتی در بین سوالات مصاحبه ریکت شما وجود داشته باشه، به این دلیل هست که اطلاعات عمومی و تجربه کار شمارو با React بسنجن.\n\nکتابخانه React Hook Form در ریکت چیست ؟\nکتابخانه React Hook Form در ری اکت به ما اجازه میده فرم های کارآمد، انعطاف پذیر و توسعه پذیر ایجاد کنیم که قابلیت اعتبار سنجی ( Validation ) داشته باشن.\n\nکتابخانه Enzyme در ریکت چیست ؟\nکتابخانه Enzyme در ری اکت برای تست نویسی کاربرد داره و معمولا نسبت به سایر کتابخانه های تست نویسی در ری اکت محبوب تره.\n\nاگه شرکت مدنظر شما از تست نویسی استفاده میکنه، احتمالش زیاده که سوال مصاحبه ری اکت از شما بپرسه.\n\nکتابخانه MobX در ریکت چیست ؟\nکتابخانه MobX در ری اکت یک State Management ساده و مقیاس پذیر هست که محبوبیت خیلی زیادی داره و خیلی زیاد با Redux مقایسه میشه چون مشابه یکدیگه هستن.\n\nبطور کل کتابخانه MobX در ریکت برای مدیریت State کاربرد داره ( یک State Management هست ) که پیچیدگی خیلی کمتری نسبت به Redux داره.\n\nاگر شرکت مدنظر شما از MobX استفاده میکنه، حتما درمورد MobX بیشتر مطالعه کنید چون احتمالا سوالات تخصصی بیشتری در مورد MobX در بین سوالات مصاحبه ریکت شما وجود داشته باشه.\n\nکتابخانه Stripe در ریکت چیست ؟\nاگه تو پروژه ری اکتی خودمون درگاه پرداخت داریم، کتابخانه Stripe در ری اکت میتونه به ما خیلی خیلی کمک کنه. شاید بپرسید چطور ؟\n\nکتابخانه Stripe در ریکت شامل مجموعه ای گسترده از کامپوننت ها، اِلِمان ها، متود های پرداخت ، احراز فرم و .. هست و میتونه پروسه خرید از سایت رو برای ما مدیریت کنه.\n\nکتابخانه React 360 در ریکت چیست ؟\nکتابخانه React 360 در ری اکت به ما تو ایجاد یک تجربه دید 360 درجه یا VR کمک میکنه.\n\nاگه قصد پیاده سازی VR در ری اکت رو داشته باشیم، کتابخانه React 360 در ریکت بشدت برای ما کاربردیه چون از واقعیت مجازی در دسکتاپ، موبایل و دستگاه های VR پشتیبانی میکنه.\n\nکتابخانه Tremor در ریکت چیست ؟\nکتابخانه tremor در ری اکت به ما اجازه میده که به راحتی آب خوردن داشبورد در ری اکت بسازیم!\n\nدرواقع کتابخانه tremor در ریکت شامل مجموعه ای از ابزارها، کامپوننت های ماژولار و هوک ها هست که به ما در ایجاد یک داشبورد ری اکت کمک میکنه.\n\nکتابخانه Planby در ریکت چیست ؟\nکتابخانه Planby در ری اکت به ما اجازه میده ایده های مختلفی مثل استریم زنده ،برنامه زمانی و رویداد موسیقی برگزار کنیم!\n\nکتابخانه Advance Cropper در ریکت چیست ؟\nکتابخانه React Advanced Cropper به ما اجازه میده تصاویر رو در اپیکیشن های ری اکتی، برش بدیم ( ابزار Crop )\n\nکتابخانه Zod در ریکت چیست ؟\nکتابخانه Zod در ری اکت به ما اجازه میده برای دیتا های خودمون اسکیما ( الگو/ساختار ) بسازیم و سپس Validation روی دیتا های خودمون انجام بدیم.\n\nکتابخانه ریکت کوئری چیست ؟\nری اکت کوئری پروسه دریافت داده از سرور ( Data Fetching ) و کش کردن اطلاعات ( Cashing ) رو برای ما مدیریت میکنه. React Query به ما در مدیریت State هم کمک میکنه.\n\nما تو مقاله ری اکت کوئری در ری اکت خیلی مفصل درمورد این کتابخانه ارزشمند صحبت کردیم ( پیشنهاد میکنم مطالعه کنید )\n\nشرکت هایی که از ری اکت کوئری استفاده میکنن، حداقل یک سوال مصاحبه react از شما میپرسن.\n\nکتابخانه React Windows در ری اکت چیست ؟\nفرض کنیم یک لیست بزرگ از اطلاعات و داده داریم که میخوایم به کاربر نمایش بدیم. بصورت پیشفرض تمامی اطلاعات Render میشن و در DOM قرار میگیرن ( بدون توجه به این موضوع که شاید کاربر کل اون لیست رو اسکرول نکنه و همش رو نبینه )\n\nکتابخانه React Windows فقط همون بخش قابل مشاهده رو برای کاربر Render میکنه و داخل DOM قرار میده !!\n\nهمین موضوع ساده کمک میکنه تا Performance اپیکیشن ما تا حد خیلی زیادی بهبود پیدا کنه و کاربر UX بهتری رو تجربه کنه.\n\nکتابخانه headless UI در ریکت چیست ؟\nکتابخانه headlessui در ری اکت شامل مجموعه بزرگی از کامپوننت ها و طرح های آمادست که میتونیم ازشون استفاده کنیم.\n\nکتابخانه EvenGreen در ریکت چیست ؟\nکتابخانه evergreen-ui در ری اکت یک React UI Freamwork هست که شامل ده ها کامپوننت از پیش ساخته شده هست و برای توسعه اپیکیشن های ری اکتی مورد استفاده قرار میگیره.\n\nکتابخانه React Helmet در ریکت چیست ؟\nکتابخانه React Helmet یک کامپوننت بسیار کاربردیه که در زمینه مدیریت تگ head هر صفحه به ما کمک میکنه.\n\nبه کمک این کتابخانه میتونیم تمامی تگ های مورد نیاز برای SEO در ری اکت رو داخل صفحات خودمون قرار بدیم.\n\nتو مقاله سئو در ریکت ، بصورت تخصصی و کامل درمورد این کتابخانه صحبت کردیم.\n\nاگه سئو برای شرکت مدنظر شما حائز اهمیته، بیشتر درمورد سئو تو ریکت مطالعه کنید. احتمالا در بین سوالات مصاحبه ریکت شما سوالات بیشتری درمورد SEO وجود داشته باشه.\n\nکتابخانه SWR در ریکت چیست ؟\nکتابخاته SWR در ریکت تا حدود خیلی زیادی شبیه React Query هست و میشه به چشم رقیب ریکت کوئری بهش نگاه کرد!\n\nاین کتابخونه در زمینه دریافت اطلاعات از سرور ( Data Fetching ) و کش کردن اطلاعات ( Data Cashing ) کاربرد داره.\n\nکتابخانه React Select چیست ؟\nاگه با Select Input در ری اکت کار کرده باشید میدونید که شخصی سازیش چقدر سخت و زمانبره. کتابخانه React Select در ری اکت به ما کامپوننت های Select حرفه ای و از پیش ساخته شده ( آماده ) میده.\n\nمثل کامپوننت های Select که قابلیت انتخاب چندین آیتم داشته باشن و قابلیت افزودن و حذف آیتم توسط کاربر رو داشته باشن!\n\nسوالات مصاحبه ری اکت ( بخش PWA )\nسوالات مصاحبه ری اکت - سوالات مصاحبه ریکت - سوالات مصاحبه react - سوال مصاحبه ری اکت - سوال مصاحبه react سوالات استخدامی ری اکت - سوالات استخدامی ریکت - سوالات استخدامی react سوال استخدامی ری اکت - سوال استخدامی ریکت - سوال استخدامی react - سوال استخدامی ریاکت\nتو این بخش از مجموعه سوالات مصاحبه react ، میریم سراغ PWA تو ری اکت !\n\nمعمولا بین سوالات مصاحبه react ، چند سوال PWA هم پرسیده میشه که در ادامه میخوایم بررسیشون کنیم 🙂\n\nPWA یا همون Progressive web application چیست ؟\nPWA یک تکنولوژی فوق العاده و کاربردیه که اجازه میده اپیکیشن ما تو دیوایس های مختلف قابلیت نصب و استفاده داشته باشه.\n\nاز بین سوالات مصاحبه ریکت ، ممکنه در مورد PWA هم از شما پرسیده بشه، پس بهتره یک آشنایی نسبی با PWA داشته باشید.\n\nPWA در ریکت هم کاربرد داره ؟\nبله 🙂\n\nPWA در ری اکت هم قابل استفادس! یعنی ما میتونیم اپیکیشن های ری اکت خودمون رو PWA کنیم تا اپیکیشن ما علاوه بر وب، تو دیوایس های مختلف ( ویندوز ، اندروید ، IOS و .. ) بصورت یک اپیکیشن قابل نصب و استفاده باشه 🙂\n\nتو مقاله PWA در ری اکت بصورت کامل و تخصصی درمورد  PWA تو ریکت صحبت کردیم.\n\nخود کلمه PWA مخفف چیه ؟\nPWA مخفف عبارت Progressive Web App هست. این عبارت یعنی اپیکیشن تحت وب پیشرفته!\n\nمزایای PWA چیه ؟\nچند مورد از مهمترین مزایای PWA عبارتند از :\n\nپرفورمنس عالی ( Performance )\nقابلیت استفاده بدون اینترنت ( آفلاین )\nقابلیت استفاده در تمامی پلتفرم ها و سیستم عامل ها\nقابلیت نصب ( قابل install و uninstall روی دستگاه های مختلف )\nفایل service-worker.js که تو PWA برامون ایجاد میشه، چیه ؟\nاین فایل شامل اسکریپتی هست که در پشت صحنه اجرا میشه ( در زمان اجرای اپیکیشن ) این اسکریپت کمک میکنه تا اپیکیشن ما بصورت آفلاین اجرا بشه و بتونیم چندین Request رو بصورت همزمان تو اپیکیشن پشتیبانی کنیم.\n\nپاسخ صحیح به این سوال نشون میده که به PWA تسلط عمیقی دارید، پس ممکنه بین سوالات استخدامی react ، این سوال از شما پرسیده بشه.\n\nفایل manifest.json که تو PWA برامون ایجاد میشه، چیه ؟\nاین فایل شامل اطلاعات اپیکیشن ما هست که در نهایت به مرورگر تحویل داده میشه. مثل نام اپیکیشن، لوگوی اپیکیشن و ..\n\nپاسخ صحیح به این سوالِ مصاحبه react نشون میده که تجربه کاری خوبی با PWA در React دارید.\n\nفایل serviceWorkerRegistration.js که تو PWA برامون ایجاد میشه، چیه ؟\nاین فایل مشخص میکند که service-worker ما register شده است یا خیر.\n\nاپیکیشن های PWA قابلیت اجرای آفلاین ( بدون اینترنت ) رو دارن ؟\nبله.\n\nیکی از ویژگی های خفن PWA این هست که به ما اجازه میده بدون توجه به وضعیت شبکه کاربر ( آفلاین بودن یا ضعیف بودن اینترنت کاربر ) سایت رو بهش نمایش بدیم.\n\n \n\nWorkbox تو PWA چیه ؟\nworkbox در PWA مجموعه ای از ابزار ها، امکانات و ماژول هایی هست که وظیفه کش کردن Assets ها و ارائه یکسری امکانات برای ساختن اپیکیشن PWA رو در اختیار ما میزاره.\n\nمعمولا چنین سوالاتی بین سوال های استخدامی ری اکت جایی نداره، اما درصورتیکه برای یک موقعیت شغلی Senior React Developer اقدام کردید، ممکنه به عنوان یک سوال مصاحبه react از شما پرسیده بشه.\n\nآپدیت آبان 1403\nسوالات زیر در آبان 1403 به این لیست اضافه شدن! ممنون از درخواست \"عارفه عزیز\" که در کامنت همین مقاله درخواست کرده بود.×\nتفاوت بین useCallback و useMemo چیست؟\nuseCallback: یک تابع ممورایز شده برمیگرداند که فقط زمانی مجدد اجرا میشود که وابستگی ها تغییر کنند.\nuseMemo: نتیجه اجرای یک تابع را ممورایز میکند و فقط در صورت تغییر وابستگی ها، مقدار جدید محاسبه میشود.\nتفاوت بین useEffect و useLayoutEffect چیست؟\nuseEffect: بعد از رندر کامپوننت اجرا میشود و به کاربر نشان داده میشود.\nuseLayoutEffect: قبل از نمایش نتیجه به کاربر اجرا میشود. این هوک بیشتر برای تغییرات DOM استفاده میشود.\nچطور میشه عملکرد کامپوننت‌ های ری‌ اکت را بهینه کرد؟\nبرای بهینه سازی عملکرد کامپوننت های ری اکت، چندین روش وجود دارد:\n\nاستفاده از React.memo: این ابزار از رندرهای غیرضروری کامپوننت های تابعی جلوگیری میکند. اگر پراپس ها تغییری نکرده باشند، کامپوننت دوباره رندر نمیشود.\nکاهش تعداد رندرها: با استفاده از هوک هایی مثل useCallback و useMemo میتوان از بازسازی مکرر توابع و محاسبات سنگین جلوگیری کرد.\nبهینه سازی لیست های بزرگ با Virtualization: ابزارهایی مثل react-window یا react-virtualized فقط بخشی از داده ها را که در صفحه نمایش داده می شوند، رندر میکنند.\nکاهش اندازه فایل باندل: با استفاده از تکنیک هایی مثل کد اسپلیتینگ (Code Splitting) و لود تنبل (Lazy Loading)، میتوان فایل های غیرضروری را از لود اولیه حذف کرد.\nمدیریت وضعیت بهینه: استفاده از Context API، Redux یا Recoil به جای پراپس دریلینگ وضعیت ها را بهتر مدیریت میکند.\nکاهش تعاملات با DOM: به حداقل رساندن تغییرات مستقیم DOM، سرعت برنامه را افزایش می دهد.\nچه زمانی باید از useReducer به جای useState استفاده کرد؟\nاگر State پیچیده باشد یا نیاز به مدیریت چندین اکشن مختلف داشته باشیم، بهتر است به جای useState از useReducer استفاده کنیم.\n\nموارد مناسب برای استفاده از useReducer:\n\nمدیریت وضعیت پیچیده: اگر وضعیت شامل چندین مقدار وابسته به هم باشد (مثلاً یک فرم با چندین ورودی)، استفاده از useReducer خوانایی کد را بهبود می بخشد.\nاکشن های متعدد: وقتی تغییر وضعیت به اکشن های متنوع (مثل افزودن، حذف و ویرایش) نیاز دارد.\nساختار کد تمیزتر: با استفاده از reducer function می توان وضعیت ها را بهتر سازماندهی کرد.\nچطور میتوان از لود تنبل (Lazy Loading) در ری اکت برای بهبود عملکرد استفاده کرد؟\nلود تنبل روشی برای بارگذاری بخشی از برنامه یا کامپوننت‌ ها در زمان نیاز است. به جای بارگذاری کل برنامه هنگام شروع، فقط بخش‌ هایی که کاربر به آن‌ ها نیاز دارد بارگذاری میشوند. این تکنیک باعث کاهش زمان بارگذاری اولیه (Initial Load Time) و بهبود تجربه کاربری میشود.\n\nدر ری اکت، این کار با استفاده از React.lazy و Suspense انجام میشود:\n\nReact.lazy: امکان لود تنبل کامپوننت‌ ها را فراهم میکند.\nSuspense: به ری اکت کمک میکند تا در زمان لود شدن کامپوننت، یک کامپوننت جایگزین (مثل Spinner یا Skeleton) نمایش دهد.\nاین روش در پروژه‌ هایی که شامل کامپوننت‌ های بزرگ یا ماژول‌ های متعدد هستند، بسیار مفید است.\n\nچه زمانی استفاده از کتابخانه‌هایی مثل Redux یا MobX ضروری میشود؟\nاستفاده از کتابخانه‌هایی مثل Redux یا MobX زمانی ضروری است که نیاز به مدیریت وضعیت پیچیده در پروژه وجود داشته باشد. برخی از شرایط که این ابزارها مفید هستند:\n\nوضعیت پیچیده: اگر پروژه شامل داده‌ های متعددی باشد که در بخش‌ های مختلف برنامه استفاده میشوند (مثل وضعیت کاربر، تنظیمات، یا دادههای API).\nنیاز به همگام‌ سازی: وقتی چندین کامپوننت به صورت همزمان باید به یک منبع داده دسترسی داشته باشند و تغییرات آن را دنبال کنند.\nمدیریت اکشن‌ های پیچیده: در پروژه‌ هایی که اکشن‌ های متعدد (مثل افزودن، ویرایش، حذف و فیلتر کردن) وجود دارد.\nتوسعه تیمی: در تیم‌ های بزرگ، Redux یا MobX میتوانند ساختار و هماهنگی بهتری برای مدیریت وضعیت فراهم کنند.\nاگر وضعیت پروژه ساده باشد، استفاده از Context API یا هوک‌ های ری اکت مثل useState و useReducer کافی است.\n\nچگونه میتوان خطاهای کامپوننت‌ ها را مدیریت کرد؟\nمدیریت خطا ها در ری اکت به دو سطح اصلی تقسیم میشود:\n\nخطاهای داخلی کامپوننت‌ها (Runtime Errors): این خطا ها در طول اجرای کامپوننت‌ ها رخ میدهند. برای مدیریت آن‌ها می‌توان از Error Boundaries استفاده کرد. Error Boundary یک کامپوننت است که خطاهای فرزندانش را شناسایی و مدیریت میکند، بدون اینکه برنامه از کار بیفتد.\n\nخطاهای ناشی از درخواست‌های API یا عملیات Async: برای این نوع خطاها می‌توان از ابزارهایی مثل try-catch و مدیریت وضعیت خطاها در State استفاده کرد. علاوه بر این، نمایش پیام‌ های مناسب به کاربر (مثل “مشکلی رخ داده است”) اهمیت دارد.\n\nتوجه داشته باشید که Error Boundaries فقط خطاهای موجود در متدهای رندر و چرخه حیات را پوشش میدهند و خطاهای رویدادها یا کدهای Async را مدیریت نمیکنند.\n\nHydration در ری اکت چیست و چه نقشی در برنامه‌های SSR دارد؟\nHydration فرآیندی است که در برنامه‌ های سرور ساید رندرینگ (SSR) استفاده میشود. در این فرآیند، کد جاوااسکریپت در سمت کلاینت بارگذاری میشود و تعاملات را به صفحه‌ای که از قبل در سرور رندر شده متصل می‌کند.\n\nاهمیت Hydration:\n\nتعامل‌پذیری: بدون Hydration، صفحات رندر شده در سمت سرور استاتیک خواهند بود و قابلیت تعامل نخواهند داشت.\nبهبود سرعت اولیه: چون HTML از قبل رندر شده است، کاربر محتوا را سریع‌ تر می‌بیند. سپس جاوااسکریپت تعاملات را اضافه میکند.\nاین فرآیند معمولاً در ابزارهایی مثل Next.js برای بهبود SEO و تجربه کاربری به کار میرود.\n\nForward Ref چیست و چه زمانی استفاده میشود؟\nForward Ref روشی در ری اکت است که به شما اجازه میدهد رفرنسی (Ref) را از والد به یک عنصر یا کامپوننت فرزند پاس دهید. این ابزار برای دسترسی مستقیم به DOM یا کنترل یک کامپوننت فرزند بدون تغییر مستقیم آن استفاده میشود.\n\nکاربردهای اصلی:\n\nکنترل DOM مستقیم: برای مثال، در کامپوننت‌ های شخصی‌ سازی شده (مثل اینپوت سفارشی) که باید مستقیماً فوکوس شوند.\nیکپارچگی با کتابخانه‌های خارجی: بسیاری از کتابخانه‌ ها نیاز به دسترسی مستقیم به ریشه DOM دارند و Forward Ref این نیاز را حل میکند.\nاستفاده از این ابزار باعث افزایش انعطاف‌ پذیری کامپوننت‌ ها میشود.\n\nتفاوت اصلی بین Controlled و Uncontrolled Components در ری اکت چیست؟\nکامپوننت های Controlled: این نوع کامپوننت‌ ها داده‌ های ورودی خود (مانند مقدار یک input) را از طریق وضعیت (State) مدیریت می‌کنند. یعنی هر بار که کاربر مقداری وارد کند، وضعیت بروزرسانی میشود و مقدار ورودی توسط ری اکت کنترل میشود.\n\nمزایا: کنترل کامل بر روی داده‌ ها و تعاملات کاربر.\nمعایب: نیاز به نوشتن کد بیشتر برای مدیریت وضعیت.\nکامپوننت های Uncontrolled: این نوع کامپوننت‌ ها به صورت مستقل عمل میکنند و داده‌ های ورودی مستقیماً در DOM ذخیره میشود. برای دسترسی به مقدار آن‌ها از Ref استفاده میشود.\n\nمزایا: کد کمتر و ساده‌ تر برای پیاده‌ سازی.\nمعایب: کنترل کمتر بر روی داده‌ ها و رفتار کاربر.\nچه مشکلاتی ممکن است در استفاده از Key در لیست‌ها پیش بیاید؟\nدر ری اکت، Key‌ها برای شناسایی منحصر به فرد عناصر در یک لیست استفاده میشوند تا الگوریتم Reconciliation به درستی کار کند. مشکلات رایج عبارتند از:\n\nاستفاده از ایندکس آرایه به عنوان Key: این روش باعث میشود ری اکت نتواند به درستی عناصر را شناسایی کند، به ویژه زمانی که لیست تغییر میکند (مانند اضافه یا حذف شدن یک عنصر).\nعدم وجود Key‌های منحصر به فرد: اگر Key‌ها تکراری باشند، ممکن است باعث رندر های غیرضروری یا رفتارهای پیشبینی‌ نشده شود.\nبهترین روش: استفاده از مقادیر منحصر به فرد (مانند ID) به عنوان Key.\n\nچرا باید از کد اسپلیتینگ (Code Splitting) استفاده کنیم؟\nکد اسپلیتینگ تکنیکی است که به ما اجازه میدهد کدها را به بخش‌ های کوچکتر تقسیم کنیم و فقط زمانی آن‌ ها را لود کنیم که واقعاً نیاز باشد.\n\nمزایا:\n\nزمان بارگذاری اولیه کمتر: فقط بخش‌ های ضروری در زمان بارگذاری لود میشوند.\nبهبود عملکرد: حجم کمتری از کد به مرورگر ارسال میشود، بنابراین اپلیکیشن سریعتر اجرا میشود.\nمدیریت بهتر منابع: کاربر فقط کدهایی را دریافت میکند که در همان لحظه نیاز دارد.\nاین تکنیک معمولاً با استفاده از ابزار هایی مثل Webpack یا Parcel پیاده‌ سازی میشود.\n\n\n\n\n\n\n\n\n\ntailwind:\nTailwind CSS Interview Questions and Answers -2025\nLast Updated : 23 Jul, 2025\nTailwind CSS is a popular utility-first CSS framework that helps developers build responsive and modern web applications quickly without writing custom CSS. Created by Adam Wathan in 2017, it’s widely adopted by companies like GitHub, Mozilla, and Vercel for its flexibility and performance.\n\nIn this article, we’ve compiled the Top 60+ Tailwind CSS interview questions and answers 2025, covering essential concepts like utility classes, responsive design, customization, and purging unused styles. Whether you're a beginner or a professional with 2-10 years of experience, these questions will help you confidently ace your next Tailwind CSS interview.\n\nTable of Content\n\nBasic level Interview Questions\nIntermediate Level interview questions\nAdvanced Level interview questions\nTailwind CSS Interview Questions - FAQs\nBasic level Interview Questions"
  },
  {
    "id": "513",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we use Tailwind CSS?",
    "answer": "Tailwind CSS is used to design and style web pages fast and Responsive. Rapid Development, Highly Customizable, Reduced CSS File Size, Great Documentation, and Community Support are the main reasons for using Tailwind CSS."
  },
  {
    "id": "514",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the concept of utility-first in Tailwind CSS",
    "answer": "Tailwind CSS is a utility-first CSS framework which means we can use utility classes to build custom designs without writing CSS as in the traditional approach.\nThis approach prioritizes simplicity, rapid development, and a modular way of applying styles."
  },
  {
    "id": "515",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to set up the Tailwind CSS in a project?",
    "answer": "There are two ways to use the Tailwind CSS we can install them on our server or we can use the CDN link as well.\n\nMethod 1: Using Tailwind via CDN\n\n<link href=”https://unpkg.com/tailwindcss@1.9.6/dist/tailwind.min.css%E2%80%9D rel=”stylesheet”>\nMethod 2: Install Tailwind via npm\n\nnpm init -y\nnpm install tailwindcss\nUse the @tailwind directive to inject Tailwind’s base, components, and utility styles into your CSS file.\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\nThis is used to create a config file to customize the designs. It is an optional step.\n\nnpx tailwindcss init\nThis command is used to compile style.css is the file that has to be compiled and output.css is the file on which it has to be compiled. If the file output.css is not created earlier then it will automatically be created.\n\nnpx tailwindcss build styles.css -o output.css"
  },
  {
    "id": "516",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is Tailwind CSS open-source (FREE to use)?",
    "answer": "Tailwind CSS is an open-source project, available for free usage and utility-first CSS framework that provides responsiveness."
  },
  {
    "id": "517",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Drop Shadow in Tailwind CSS ?",
    "answer": "The Drop Shadow class is used in Tailwind CSS to apply a filter to the image for setting the shadow of the image. There are various utility classes applied including drop-shadow-sm, drop-shadow, drop-shadow-md, drop-shadow-lg, drop-shadow-xl, drop-shadow-2xl and drop-shadow-none."
  },
  {
    "id": "518",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the primary purpose of the container class in Tailwind CSS?",
    "answer": "In Tailwind CSS, a container offers responsive layout, it is used to fix the max-width of an element to match the min-width of the breakpoint.\nTo center the container, we use mx-auto utility class."
  },
  {
    "id": "519",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to make text bold in Tailwind CSS?",
    "answer": "For achieving the bold text we can easily add utility class font-bold."
  },
  {
    "id": "520",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to center both horizontally and vertically?",
    "answer": "Use self-center to align an item vertically and mx-auto for horizontal centering in Tailwind CSS."
  },
  {
    "id": "521",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to define horizontal spacing and vertical spacing between elements with Tailwind CSS?",
    "answer": "The horizontal and vertical spacing can easily achieved with Tailwind CSS with various utility classes including space-x-{n} for horizontal Spacing and space-y-{n} for vertical Spacing.\n\n<div class=\"flex space-x-4\">...\n</div><div class=\"space-y-4\">...</div>\nNote: The utility classes mentioned above are applied to the child elements."
  },
  {
    "id": "522",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to use CSS Grid with Tailwind CSS?",
    "answer": "Tailwind CSS makes the concept of grid CSS Grid simple for creating complex grid structure. With the help of various utility classes defined in the tailwind CSS we can easily achieve the grid layout. The utility class .grid is used to create grid container.\n\n<div class=\"grid\">...</div>\nFor defining the rows and columns use the utility classes \"grid-cols-{n}\" and \"grid-rows-{n}\".\nFor defining the gap between grid items use the utility classes gap-{n}, col-gap-{n}, and row-gap-{n}.\nFor defining the position and size of grid items use the utility classes col-span-{n}, row-span-{n}, col-start-{n}, col-end-{n}, row-start-{n}, and row-end-{n}."
  },
  {
    "id": "523",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to apply Rotate property to the elements with Tailwind CSS?",
    "answer": "Tailwind CSS offers different CSS utility classes for rotate the elements clock-wise as well as anticlock-wise.\n\nClockwise Rotation: For clockwise rotation we have utility classes rotate-0, rotate-1, rotate-2, rotate-3, rotate-6, rotate-12, rotate-45, rotate-90 and rotate-180.\nAnti-Clockwise Rotation: For anti-clockwise rotation we have utility classes -rotate-0, -rotate-1, -rotate-2, -rotate-3, -rotate-6, -rotate-12, -rotate-45, -rotate-90 and -rotate-180.\nSyntax\n\n<element class=\"rotate-{degree}\">...</element>\nNote: rotate-0 defines no rotation"
  },
  {
    "id": "524",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to apply border collapse property to the elements with Tailwind CSS?",
    "answer": "Tailwind CSS Border Collapse class is used to set the borders of the cell present inside the table and tells whether these cells will share a common border or not.\n\n<element class=\"border-collapse\">...</element>"
  },
  {
    "id": "525",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to align form elements to center using Tailwind CSS ?",
    "answer": "For achieving aligniment form elements to center, Tailwind CSS uses justify-center and items-center property which is an alternative to the flex-property in CSS. Other flex properties like flex-col, justify-center, items-center are use for alignment purposes.\n\n<div class=\"flex flex-col justify-center items-center\">    ....</div>"
  },
  {
    "id": "526",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you use Tailwind CSS to position two elements to the left and right?",
    "answer": "You can position elements to the left and right in Tailwind CSS using either the flex or flow-root classes. The flow-root class efficiently clears floated content within a container, ensuring proper layout structure. Simultaneously, the position class enables precise control over the placement of positioned elements, offering flexibility in alignment."
  },
  {
    "id": "527",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to add new colors to tailwind-css and keep the originals ones?",
    "answer": "You can effortlessly incorporate additional colors into Tailwind CSS while keep the original ones through customization configuration.\nSimply, configure your colors within the \"colors\" key found in the theme section of your tailwind.config.js file."
  },
  {
    "id": "528",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you apply a shadow effect to an element in Tailwind CSS?",
    "answer": "Tailwind CSS offers utilities like shadow, shadow-lg, shadow-xl, etc., to apply shadows.\n\n<div class=\"bg-white p-4 shadow-lg\">Box with Shadow</div>"
  },
  {
    "id": "529",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to make an element fill its parent container in Tailwind CSS?",
    "answer": "Use the w-full utility class to make the element take 100% of the width of its parent.\n\n<div class=\"w-full bg-blue-500 p-4\">Full-width element</div>"
  },
  {
    "id": "530",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does it differ from traditional CSS frameworks like Bootstrap?",
    "answer": "Unlike traditional frameworks like Bootstrap, which come with predefined components, Tailwind focuses on utility classes to create reusable components. This approach allows for more flexibility and customizability."
  },
  {
    "id": "531",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of the @apply directive in Tailwind CSS?",
    "answer": "The @apply directive allows you to group multiple utility classes into one custom CSS rule. This helps avoid repetitive code and promotes reusability of common style patterns. It is useful when a group of utility classes needs to be applied to multiple elements."
  },
  {
    "id": "532",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the benefits and its limitations of Tailwind CSS ?",
    "answer": "Tailwind CSS has many advantages includes, minimum lines of Code in CSS file, easily customizable for design a components, website responsive. Tailwind CSS offers many features, but it does have some limitations. The major drawbacks frequently observed are illustrated in the table below.\n\nLimitation\tDescription\nLearning Curve\tAdapting to utility-first CSS may have a learning curve for developers unfamiliar with the approach.\nDesign Consistency\tMaintaining design consistency across projects may require additional effort due to high customization.\nNot Suitable for Every Project\tTailwind may not be the best fit for projects with strict design systems or complex layouts.\nReadability in HTML\tSome developers find utility classes in HTML markup less readable compared to separate stylesheets.\nIntermediate Level interview questions"
  },
  {
    "id": "533",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Tailwind CSS handle flex direction in its utility classes?",
    "answer": "Tailwind CSS offers various flex directions including flex-row, flex-row-reverse, flex-col, and flex-col-reverse. To achieve the flex-direction properties, you have to include the flex class in your element before the flex-direction class.\n\n<element class=\"flex flex-row\"> Contents... </element>"
  },
  {
    "id": "534",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to manage order property in Tailwind CSS utility classes?",
    "answer": "By using the 'order' class in Tailwind CSS, we can arrange the flex and grid items according to our requirements. This class is utilized to display flex and grid items in an order different from their appearance in the DOM. The classes are order-1, order-2, order-3, order-4, order-5, order-6, order-7, order-8, order-9, order-10, order-11, order-12, order-first, order-last, order-none.\n\n<element order- number | string >"
  },
  {
    "id": "535",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can we change the base font-family in Tailwind config?",
    "answer": "Yes, we can change the base font-family in Tailwind config. To adjust the main font style in Tailwind CSS, you can modify it by making changes in the \"theme\" part of your configuration file (tailwind.config.js). Just open that file, find the theme section, and add or update the fontFamily setting."
  },
  {
    "id": "536",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Do Tailwind CSS Classes Override Previous Classes?",
    "answer": "Tailwind CSS is designed to be a low-level utility-first framework, which means that classes are not automatically overridden by default. This make the styling process for form elements simple and allowing easy customization with utilities."
  },
  {
    "id": "537",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create a form with Tailwind CSS?",
    "answer": "Tailwind CSS, offers Tailwind forms as plugins that provide a foundational reset for form styles. We can also use utility classes to make a form with Tailwind CSS, use the easy-to-apply classes for backgrounds, borders, shadows, etc. Start by creating the form element and use the space-y-{n} class to add vertical spacing between the form controls."
  },
  {
    "id": "538",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Does Tailwind CSS provide overscroll behavior customization?",
    "answer": "Yes, Tailwing CSS provide several Overscroll Behavior classes these. The syntax provide is an example hoe other can be used in this way\n\n<element class=\"overscroll-auto\">...</element>\nThe below table illustrates the various Overscroll Behavior class with their description.\n\nOverscroll Behavior class\n\nDescription\n\noverscroll-auto\n\nIt is used to set the scrolling behavior to default. The whole page along with the element will scroll even if the boundary of the element is reached.\n\noverscroll-contain\n\nIt is used to set the scrolling behavior to default only on the element used.\n\noverscroll-none\n\nIt is used to prevent scroll-chaining on all elements. The default scroll overflow behavior is also prevented.\n\noverscroll-y-auto\n\nThis is used to set the scrolling behavior on the y-axis to default on all the elements.\n\noverscroll-y-contain\n\nIt makes scrolling only affect the element it's applied to. When the element reaches its limit, scrolling more won't affect things behind it.\n\noverscroll-y-none\n\nIt is used to prevent scroll-chaining on all elements. The default scroll overflow behavior is also prevented.\n\noverscroll-x-auto\n\nIt is used to set the scrolling behavior on the x-axis to default on all the elements.\n\noverscroll-x-contain\n\nIt is used to set the scrolling behavior on the x-axis to default only on the element used.\n\noverscroll-x-none\n\nIt is used to prevent scroll-chaining on the x-axis on all elements. The default scroll overflow behavior is also prevented."
  },
  {
    "id": "539",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Tailwind CSS handle font families?",
    "answer": "The Tailwind CSS class, an alternative to CSS font-family, accepts multiple font names in a single class, covering various properties and allowing fallback fonts for browser compatibility.\n\nSyntax\n\n<element class=\"font-sans\">...</element>\nFont family classes\n\nfont-sans\nfont-serif\nfont-mono"
  },
  {
    "id": "540",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can you use Tailwind CSS to position two elements to the left and right?",
    "answer": "You can position elements to the left and right in Tailwind CSS using either the flex or flow-root classes. The flow-root class efficiently clears floated content within a container, ensuring proper layout structure."
  },
  {
    "id": "541",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to add new colors to tailwind-css and keep the originals ones?",
    "answer": "You can effortlessly incorporate additional colors into Tailwind CSS while keep the original ones through customation configuration.\nSimply, configure your colors within the \"colors\" key found in the theme section of your tailwind.config.js file."
  },
  {
    "id": "542",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to use CSS Grid with Tailwind CSS?",
    "answer": "Tailwind CSS makes the concept of grid CSS Grid simple for creating complex grid structure. With the help of various utility classes defined in the tailwind CSS we can easily achieve the grid layout. The utility class .grid is used to create grid container.\n\nSyntax\n\n<div class=\"grid\">...</div>\nFor defining the rows and columns use the utility classes \"grid-cols-{n}\" and \"grid-rows-{n}\".\nFor defining the gap between grid items use the utility classes gap-{n}, col-gap-{n}, and row-gap-{n}.\nFor defining the position and size of grid items use the utility classes col-span-{n}, row-span-{n}, col-start-{n}, col-end-{n}, row-start-{n}, and row-end-{n}."
  },
  {
    "id": "543",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can Tailwind CSS be utilized to implement box shadows effectively?",
    "answer": "This Tailwind CSS class makes it easy to control the box-shadow of an element by offering various options, similar to the CSS box-shadow properties.\n\nSyntax:\n\n<element class=\"shadow-{shadow-depth}\">...</element>\nThe below table illustrates various Box Shadow classes with their description.\n\nshadow-sm\n\nFaded or small shadow effects on the box.\n\nshadow\n\nNormal shadow effects on the box.\n\nshadow-md\n\nMedium (md) shadow effects on the box.\n\nshadow-lg\n\nLarge (lg) shadow effects on the box.\n\nshadow-xl\n\nExtra-large (xl) shadow effects on the box.\n\nshadow-2xl\n\n2x large shadow effects on the box.\n\nshadow-inner\n\nShadow effects inside the box.\n\nshadow-none\n\nNo shadow effects (dilutes shadow)."
  },
  {
    "id": "544",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Tailwind CSS handle opacity?",
    "answer": "Tailwind CSS controls opacity using utility classes like opacity-0 (fully transparent), opacity-50 (50% opacity), and opacity-100 (fully opaque). You can adjust background, text, and border opacity with classes like bg-opacity-50, text-opacity-75, and border-opacity-25.\n\nIt also supports hover and focus states (e.g., hover:opacity-75). For more control, custom opacity values can be defined in tailwind.config.js.\n\n\n<div class=\"opacity-75 hover:opacity-100 bg-blue-500 text-white p-4\">\n    Hover over me!\n</div>"
  },
  {
    "id": "545",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to use responsive variants in Tailwind CSS?",
    "answer": "Tailwind CSS provide different Default breakpoints these are illustrated in the table. With the help of these we can make website responsive. Also, we can customize breakpoints in Tailwind CSS and override the default breakpoints.\n\nBreakpoint\n\nDescription\n\nsm\n\nUsed for screens with a width of at least 576px, like small laptops and tablets in portrait mode.\n\nmd\n\nUsed for screens with a width of at least 768px, such as tablets in landscape mode and larger laptops.\n\nlg\n\nUsed for screens with a width of at least 992px, like large desktop monitors.\n\nxl\n\nUsed for screens with a width of at least 1200px, such as extra-large desktop monitors."
  },
  {
    "id": "546",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to purge unused CSS in production using Tailwind CSS?",
    "answer": "Use Tailwind’s purge feature to remove unused CSS when building for production.\n\n\nmodule.exports = {\n    purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],\n    darkMode: 'media', // or 'class'\n    theme: {\n        extend: {},\n    },\n}"
  },
  {
    "id": "547",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Tailwind CSS handle theming and customization of colors or fonts?",
    "answer": "Tailwind CSS uses a configuration file (tailwind.config.js) where you can extend or override the default theme. You can define custom colors, fonts, and other design tokens in the theme section, which Tailwind will then use throughout your project."
  },
  {
    "id": "548",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of the hover: pseudo-class in Tailwind CSS?",
    "answer": "The hover: pseudo-class in Tailwind CSS allows you to define styles that should be applied when an element is hovered over. This is part of Tailwind's state-based styling system, which includes other pseudo-classes like focus:, active:, etc.\n\n\n\n\n<button class=\"bg-blue-500 hover:bg-blue-700\">Hover Me</button>"
  },
  {
    "id": "549",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the significance of the container class in Tailwind CSS?",
    "answer": "The container class in Tailwind CSS centers the content and applies responsive padding on both sides.\nIt helps maintain a consistent layout across various screen sizes by setting a maximum width for the layout while ensuring it adjusts fluidly on smaller screens."
  },
  {
    "id": "550",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to implement dark mode using Tailwind CSS?",
    "answer": "Use the dark: variant to apply styles when dark mode is enabled, or enable it globally using class or media.\n\n<div class=\"dark:bg-gray-800 bg-white\">Dark Mode</div>"
  },
  {
    "id": "551",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to make a container responsive and center its content with Tailwind CSS?",
    "answer": "Use max-w-{size}, mx-auto for centering, and lg: for responsiveness.\n\n<div class=\"max-w-screen-lg mx-auto p-4\">Responsive Centered Container</div>\nAdvanced Level interview questions"
  },
  {
    "id": "552",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to use CSS animations with Tailwind CSS?",
    "answer": "This Tailwind CSS class allows you to easily animate elements using CSS animations by providing a range of values and covering all necessary properties.\n\nSyntax:\n\n<element class=\"animate-{animation_name}\">...</element>\nThe table below shows the different utility classes with their description.\n\nClass\n\nDescription\n\nanimate-spin\n\nAdds a linear spin animation to elements.\n\nanimate-ping\n\nMakes an element scale and fade like a radar ping or ripple of water\n\nanimate-ping\n\nMakes an element bounce up and down.\n\nanimate-pulse\n\nGently fades an element in and out."
  },
  {
    "id": "553",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Tailwind CSS differ from other CSS frameworks?",
    "answer": "Tailwind CSSoffers various differences in the below table the key differences are defined.\n\nFeature\tTraditional CSS Frameworks\tTailwind CSS\nApproach\tComponent-First\tUtility-First\nPre-Designed Components\tPre-designed components (buttons, cards, etc.)\tNo pre-designed components\nCustomization\tCustomizable, but may have limitations\tHighly customizable\nFile Size and Performance\tLarger file size; may impact performance\tSmaller file size\nFlexibility\tFlexible, but may limit control in some cases.\tHigh flexibility\nDocumentation\tWell-documented, but learning curve varies\tExcellent, well-organized, beginner-friendly\nCommunity Support\tEstablished community for popular frameworks\tLarge and active community"
  },
  {
    "id": "554",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to install Tailwind CSS custom forms?",
    "answer": "Use the given command to effortlessly install Tailwind CSS Custom Forms, enhancing form styling and customization in your project.\n\nnpm install @tailwindcss/custom-forms - - save-dev\n\n\n\n\n\n\n\nTailwind CSS Interview Questions and Answers for Freshers:\nTailwind CSS has become a popular choice for building modern and responsive user interfaces. Its utility-first approach offers rapid development and a clean separation of concerns. If you're a fresher aiming to land a web development role and Tailwind CSS is on the tech stack, this guide will equip you with the top 30 interview questions and answers.\n\nQ1. What is Tailwind CSS?\nAns: Tailwind CSS is a utility-first CSS framework that provides pre-built utility classes to style your HTML elements directly. Unlike traditional frameworks with pre-defined components, Tailwind gives you granular control over the look and feel of your UI.\n\nQ2. Why use Tailwind CSS?\nAns: Here are some key benefits:\n\nRapid Development: Quickly style your UI with pre-built classes, reducing development time.\nHighly Customizable: Tailwind offers extensive customization options through its configuration file.\nResponsive Design: Built-in responsive variants allow for easy adaptation across devices.\nReduced CSS Size: Only the classes you use are included in the final CSS file.\n\nQ3. How do you integrate Tailwind CSS into a project?\nAns: There are two main ways:\n\nUsing a CDN: Include the Tailwind CSS library directly from a CDN link in your HTML.\nInstalling with npm or yarn: Install Tailwind CSS as a package and configure it using a tailwind.config.js file.\n\nQ4. How do you apply text alignment (left, center, right) in Tailwind CSS?\nAns: Use classes like text-left, text-center, and text-right to align text horizontally within an element.\n\nQ5. Explain how to create responsive margins and paddings in Tailwind CSS.\nAns: Tailwind provides responsive variants like sm, md, lg, and xl alongside margin and padding utility classes. For example, mr-4 adds a 1rem margin-right on all screens, while mr-sm-2 adds a 0.5rem margin-right only on small screens.\n\nQ6. How can you center an element horizontally and vertically within its container?\nAns: Combine the flex and justify-center and items-center utilities. The flex class enables flexbox layout, and justify-center and items-center center the content along the main and cross axes, respectively.\n\nQ7. What are the flexbox and grid layout utilities available in Tailwind CSS?\nAns: Tailwind offers a wide range of flexbox and grid utilities for creating responsive layouts. Some common ones include flex, flex-row, flex-col, grid, grid-cols-2 (for two columns), and gap-4 (for spacing between elements).\n\nQ8. How do you create a responsive card layout with Tailwind CSS?\nAns: Use a combination of classes like w-full (full width), rounded, shadow, and p-4 (padding) for the basic card structure. Apply responsive variants for different screen sizes to adjust width, padding, or margins.\n\nQ9. Explain how Tailwind CSS handles responsive design.\nAns: Tailwind provides responsive variants for most utility classes, allowing you to define styles for different screen sizes (e.g., sm for small screens, md for medium screens).\n\nQ10. What is the @apply directive in Tailwind CSS?\nAns: The @apply directive allows you to combine multiple utility classes into a single custom class. This helps write cleaner HTML and maintain a more organized stylesheet.\n\nQ11. How can you customize the default theme colors in Tailwind CSS?\nAns: Edit the theme section in your tailwind.config.js file. Define new colors and use them with utility classes like text-red-500 (for red color with opacity of 50%).\n\nQ12. Explain the concept of Just-in-Time (JIT) compilation in Tailwind CSS.\nAns: JIT compilation generates Tailwind CSS styles only for the classes used in your HTML. This can significantly reduce the final CSS file size and improve website performance.\n\nQ13. How do you enable dark mode in Tailwind CSS?\nAns: Tailwind allows you to define dark variants of your styles and configure them in the tailwind.config.js file. This lets your website adapt to user preferences for light or dark mode.\n\nQ14. What is the purge option in Tailwind CSS?\nAns: The purge option removes unused CSS classes from the final styles\n\nQ15. How can you create a button with rounded corners and a hover effect in Tailwind CSS?\nAns: Use classes like rounded, bg-blue-500 (for blue background), text-white (for white text), and hover:bg-blue-700 (changes background color to blue with 70% opacity on hover).\n\nQ16. What are some utilities for adding borders and shadows to elements?\nAns: Tailwind provides classes like border, border-2 (specifies border width), border-dashed (for a dashed border), and shadow (adds a shadow effect) with various customization options.\n\nQ17. How do you control the spacing between elements in Tailwind CSS?\nAns: Use margin and padding utilities like m-4 (margin on all sides), mt-2 (margin-top), p-x-4 (padding on left and right sides), and responsive variants for different screen sizes.\n\nQ18. Explain how to truncate text with ellipsis (...) when it overflows its container.\nAns: Use the truncate class. This ensures text doesn't overflow the element and displays an ellipsis at the end.\n\nQ19. What utilities are available for styling forms (inputs, buttons)?\nAns: Tailwind offers classes for various form elements like input, rounded, border, focus:outline-none (removes default outline on focus), and focus:ring (adds a focus ring effect).\n\nQ20. How does Tailwind CSS promote accessibility?\nAns: While Tailwind doesn't handle accessibility by default, it allows you to build accessible UIs by using appropriate semantic HTML elements and adding accessibility attributes when necessary.\n\nQ21. How can you ensure your Tailwind CSS components are responsive across different devices?\nAns: Utilize Tailwind's responsive variants alongside media queries (if needed) to adjust styles for various screen sizes. Think about adapting font sizes, paddings, margins, and layout elements for optimal viewing on all devices.\n\nQ22. Explain how to use plugins to extend Tailwind CSS functionality.\nAns: Tailwind supports various plugins that provide additional utility classes for specific functionalities like forms, typography, or animations. You can install plugins using npm or yarn and add them to the plugins section in your tailwind.config.js file.\n\nQ23. How do you define custom utility classes in Tailwind CSS?\nAns: Use the extend section in your tailwind.config.js file. Here, you can create new utility classes with custom styles tailored to your project's needs.\n\nQ24. What is the group utility class used for?\nAns: The group utility targets child elements based on a parent class. This allows you to apply styles (like hover or focus effects) when hovering or focusing on the parent element.\n\nQ25. How can you troubleshoot issues with Tailwind CSS styles not being applied correctly?\nCheck for typos in class names.\nEnsure Tailwind is properly configured and integrated.\nVerify if any other styles have higher specificity, overriding Tailwind classes.\n\nQ26. What are some best practices for optimizing Tailwind CSS performance?\nAns: There are three types of tailwind css performance types in below:\n\nUtilize the purge option to remove unused classes.\nEnable JIT compilation for smaller CSS file size.\nAvoid unnecessary nesting of utility classes.\n\nQ27. Explain the difference between rtl and ltr layouts in Tailwind CSS.\nAns: rtl (right-to-left) and ltr (left-to-right) settings control the directionality of your layout. Tailwind allows you to configure it for languages that read from right to left.\n\nQ28. How can you create a responsive navigation bar with Tailwind CSS?\nAns: Use classes like flex, justify-between (spaces items evenly), items-center, and responsive variants to adjust spacing and layout for different screen sizes. Include anchor tags (<a>) for navigation links.\n\nQ29. What is the prose utility class used for?\nAns: The prose class adds beautiful and consistent typography and spacing styles to your content-rich pages, simplifying the styling process.\n\nQ30. Explain the difference between margin and padding utilities in Tailwind CSS.\nAns: margin controls the spacing outside of an element, while padding controls the spacing between the content and the element's border. This helps adjust spacing within layouts and around elements.\n\n\n\n\n\ntailwind:\nCore Concepts\nWhat is Tailwind CSS, and how does it differ from traditional CSS frameworks?\nTailwind CSS: A Utility-First CSS Framework\nTailwind CSS is a utility-first CSS framework that provides a set of low-level utility classes instead of pre-designed components. Unlike traditional CSS frameworks like Bootstrap or Foundation, Tailwind CSS doesn't include pre-built UI components. Instead, it offers a collection of small, reusable classes that can be combined to build custom designs.\n\nThe key difference lies in the approach: traditional frameworks offer pre-designed components, while Tailwind CSS allows developers to build custom designs by composing utility classes together.\n\nExplain the concept of utility classes in Tailwind CSS.\nUtility classes in Tailwind CSS are low-level, single-purpose classes that apply specific styles to HTML elements. These classes are named using a descriptive naming convention that reflects the CSS property and value they apply. For example:\n\n\n\n  \n\nIn this example, bg-red-500 sets the background color, text-white sets the text color, p-4 adds padding, and rounded applies a border radius.\n\nHow does Tailwind CSS handle responsive design?\nTailwind CSS provides a comprehensive set of responsive utility classes that allow developers to apply styles based on different screen sizes or breakpoints. These utility classes follow a naming convention that includes the breakpoint prefix, such as sm:, md:, lg:, and xl:.\n\n\n\n  \n\nIn this example, sm:p-8 applies larger padding on small screens, and md:bg-green-500 changes the background color to green on medium screens and larger.\n\nHow can you extend or customize Tailwind CSS styles?\nTailwind CSS provides several ways to extend or customize styles:\n\nUsing the @apply directive: You can create custom CSS classes by combining existing utility classes using the @apply directive in your CSS files.\nExtending the configuration file: Tailwind CSS allows you to extend the default configuration by modifying the tailwind.config.js file. You can add new utility classes, customize existing ones, or define new color palettes, spacing scales, and more.\nWriting additional CSS: While Tailwind CSS encourages using utility classes, you can still write additional CSS to handle more complex styles or overrides.\nWhat is the purpose of the `@tailwind` directives in Tailwind CSS?\nThe @tailwind directives are used in your CSS files to inject Tailwind's base, component, and utility styles into your project. There are three main directives:\n\n@tailwind base; - Injects Tailwind's base styles, including resets and normalization.\n@tailwind components; - Injects Tailwind's component classes, which are a set of pre-designed component classes like buttons, cards, and alerts.\n@tailwind utilities; - Injects Tailwind's utility classes, which are the low-level, single-purpose classes that form the core of Tailwind CSS.\nThese directives ensure that the appropriate Tailwind styles are included in your project and applied correctly.\n\nHow does Tailwind CSS handle CSS purging or tree-shaking?\nTailwind CSS includes a built-in purge mechanism that removes unused styles from the final CSS output, resulting in a smaller file size. This process, known as CSS purging or tree-shaking, analyzes your HTML, JavaScript, and CSS files to identify which classes are actually used and removes the unused ones.\n\nTo enable CSS purging, you need to configure the purge option in the tailwind.config.js file and specify the paths to your template files (e.g., HTML, Vue, React components). This ensures that Tailwind CSS only includes the styles that are actually used in your project.\n\nWhat is the purpose of the `tailwind.config.js` file?\nThe tailwind.config.js file is the configuration file for Tailwind CSS. It allows you to customize various aspects of Tailwind CSS, such as:\n\nDefining custom color palettes, spacing scales, and other design tokens\nEnabling or disabling specific plugins or features\nConfiguring responsive breakpoints and screen sizes\nSpecifying the paths for CSS purging or tree-shaking\nExtending or overriding default Tailwind CSS styles\nThis file provides a centralized location for managing Tailwind CSS configuration and allows you to tailor the framework to your project's specific needs.\n\nHow can you create custom utility classes in Tailwind CSS?\nTailwind CSS allows you to create custom utility classes by extending the default configuration in the tailwind.config.js file. Here's an example of how to add a custom utility class for a specific font family:\n\nmodule.exports = {\n  theme: {\n    extend: {\n      fontFamily: {\n        'custom': ['Custom Font', 'sans-serif']\n      }\n    }\n  },\n  variants: {\n    fontFamily: ['responsive']\n  },\n  plugins: []\n}\nIn this example, we define a new fontFamily key under the extend object and specify the custom font family name and fallback. We also add fontFamily to the variants object to enable responsive variants for the custom utility class.\n\nExplain the concept of design tokens in Tailwind CSS.\nDesign tokens in Tailwind CSS refer to the predefined values for various design properties, such as colors, spacing, font sizes, and more. These tokens are defined in the tailwind.config.js file and can be easily customized to match your project's design system.\n\nFor example, the default color palette in Tailwind CSS is defined as a design token:\n\nmodule.exports = {\n  theme: {\n    colors: {\n      'red': '#e3342f',\n      'green': '#38c172',\n      'blue': '#3490dc',\n      // ...\n    }\n  }\n}\nBy using design tokens, you can ensure consistency across your application and easily update design values in a centralized location.\n\nHow does Tailwind CSS handle dark mode styling?\nTailwind CSS provides built-in support for dark mode styling through the dark variant. You can define custom styles for dark mode by adding the dark: prefix to utility classes or by creating custom CSS rules with the @media (prefers-color-scheme: dark) media query.\n\nFor example, to apply a different background color in dark mode:\n\n\n  \n\nTailwind CSS also includes a dark mode plugin that provides additional utilities and configuration options for handling dark mode styling.\n\nData Structures and Algorithms\nHow would you implement a set data structure in Tailwind CSS?\nSet Implementation\nTo implement a set in Tailwind CSS, you can use a flex layout with unique classes for each element:\n\nCreate a flex container to hold the set elements\nAdd unique classes to each element (e.g., .item-1, .item-2)\nUse :not selector to remove duplicates\n\n\n  \nItem 1\n\n  \nItem 2\n\n  \nItem 1\n\n  \nHow would you implement a stack data structure in Tailwind CSS?\nStack Implementation\nCreate a container div with a flex layout and flex-col direction\nAdd new items at the top using order-first\nRemove items from the top by removing order-first\n\n\n  \nItem 1\n\n  \nItem 2\n\n  \nItem 3\n\nExplain the time complexity of searching an element in a sorted array using binary search.\nBinary Search Time Complexity\nThe time complexity of binary search on a sorted array is O(log n), where n is the size of the array. This is because in each iteration, the search space is reduced by half.\n\nBest case: O(1) if the target is the middle element\nAverage case: O(log n)\nWorst case: O(log n) if the target is not present\nHow would you implement an LRU (Least Recently Used) cache in Tailwind CSS?\nLRU Cache Implementation\nTo implement an LRU cache in Tailwind CSS, you can use a combination of flexbox and order utilities:\n\nCreate a flex container with flex-row to represent the cache\nAdd new items at the end using order-last\nWhen cache limit is reached, remove the first item (order-first)\nUpdate order of accessed items to order-last\n\n\n  \nLeast Recent\n\n  \n...\n\n  \nMost Recent\n\nExplain the time complexity of the quicksort algorithm and its best and worst cases.\nQuicksort Time Complexity\nThe average time complexity of the quicksort algorithm is O(n log n), where n is the number of elements in the input array.\n\nBest case: O(n log n) when the pivot divides the array into roughly equal parts\nAverage case: O(n log n)\nWorst case: O(n^2) when the pivot is the smallest or largest element in the array\nHow would you implement a dictionary or hash table data structure in Tailwind CSS?\nDictionary/Hash Table Implementation\nIn Tailwind CSS, you can represent a dictionary or hash table using a grid layout:\n\nCreate a grid container with grid-cols-2 for key-value pairs\nUse nth-child selectors to style keys and values differently\nAdd/remove grid rows to insert/delete key-value pairs\n\n\n  \nkey1\n\n  \nvalue1\n\n  \nkey2\n\n  \nvalue2\n\nExplain the time complexity of the merge sort algorithm and its best and worst cases.\nMerge Sort Time Complexity\nThe time complexity of the merge sort algorithm is O(n log n) in all cases, where n is the number of elements in the input array.\n\nBest case: O(n log n)\nAverage case: O(n log n)\nWorst case: O(n log n)\nThis is because merge sort always divides the array into two halves and merges them back in a sorted manner.\n\nExplain the time complexity of the breadth-first search (BFS) algorithm and its use cases.\nBreadth-First Search (BFS) Time Complexity\nThe time complexity of the BFS algorithm is O(V + E), where V is the number of vertices and E is the number of edges in the graph.\n\nBFS is commonly used for:\n\nFinding the shortest path between two nodes in an unweighted graph\nTraversing or searching a tree or graph data structure\nFinding connected components in a graph\nHow would you implement a queue data structure in Tailwind CSS?\nQueue Implementation\nTo implement a queue in Tailwind CSS, you can use a flex layout with order utilities:\n\nCreate a flex container with flex-row direction\nAdd new items at the end using order-last\nRemove items from the start by removing order-first\n\n\n  \nFirst\n\n  \nSecond\n\n  \nLast\n\nExplain the time complexity of the depth-first search (DFS) algorithm and its use cases.\nDepth-First Search (DFS) Time Complexity\nThe time complexity of the DFS algorithm is O(V + E), where V is the number of vertices and E is the number of edges in the graph.\n\nDFS is commonly used for:\n\nTraversing or searching a tree or graph data structure\nFinding connected components in a graph\nSolving maze or labyrinth problems\nTopological sorting\nSystem Design\nHow would you design a scalable URL shortener service?\nKey Requirements:\nAbility to generate short, unique URLs\nRedirect short URLs to original URLs\nHigh availability and low latency\nData partitioning and replication\nProposed Architecture:\nUse a key-value store or database to store the mapping of short URLs to original URLs\nImplement a service to generate unique short URLs, e.g., using a hash function or sequential counter\nUse a load balancer to distribute traffic across multiple application servers\nImplement caching for frequently accessed URLs to reduce database load\nUse a content delivery network (CDN) to serve static content and handle redirects\nHow would you design a social media feed system?\nKey Requirements:\nAbility to display posts from users and their friends/followers\nSupport for various content types (text, images, videos)\nReal-time updates and notifications\nScalability and high availability\nProposed Architecture:\nUse a NoSQL database like MongoDB or Cassandra to store user data, posts, and social graph\nImplement a feed generation service to fetch and rank posts based on relevance\nUse message queues (e.g., RabbitMQ or Apache Kafka) for real-time updates and notifications\nImplement caching for frequently accessed data\nUse a content delivery network (CDN) to serve static content\nImplement load balancing and auto-scaling for handling high traffic\nHow would you design a real-time chat application?\nKey Requirements:\nReal-time messaging between users\nSupport for group chats and channels\nScalability and high availability\nPersistent message storage\nProposed Architecture:\nUse WebSockets for real-time, bidirectional communication between clients and servers\nImplement a message broker (e.g., RabbitMQ, Apache Kafka) for message queueing and delivery\nStore chat messages in a database (e.g., MongoDB, Cassandra) for persistence\nUse load balancers and auto-scaling to handle high traffic\nImplement caching for frequently accessed data\nUse a content delivery network (CDN) to serve static content\nWhat is the CAP theorem, and how does it relate to distributed system design?\nThe CAP theorem states that in a distributed system, it is impossible to simultaneously achieve all three of the following properties: Consistency, Availability, and Partition Tolerance. At most, two of these properties can be guaranteed at any given time.\nConsistency: All nodes see the same data at the same time\nAvailability: Every request receives a response, even if it's a stale or inconsistent response\nPartition Tolerance: The system continues to operate despite network partitions or node failures\nWhen designing distributed systems, architects must choose which two properties are most important based on the system's requirements and make trade-offs accordingly.\nWhat is the difference between stateless and stateful design?\nStateless Design: In a stateless architecture, the server does not store any client-specific data or session information. Each request from the client is treated as an independent transaction, and all necessary information is contained within the request itself. This design is generally more scalable and fault-tolerant, as servers can be easily added or removed without affecting the application's state.\n\nStateful Design: In a stateful architecture, the server maintains client-specific data or session information, typically stored in memory or a database. This state is used to process subsequent requests from the same client. While stateful designs can provide a more personalized experience, they are generally less scalable and fault-tolerant, as server failures or restarts can result in loss of client state.\nHow would you implement caching in a distributed system?\nImplementing caching in a distributed system can improve performance and reduce load on the backend data stores. Here are some common caching strategies:\nClient-side Caching: Cache data on the client (e.g., browser) using techniques like HTTP caching headers or service workers.\nServer-side Caching: Cache data on the server-side, either in-memory (e.g., Redis, Memcached) or on disk (e.g., CDN, reverse proxy caches).\nDistributed Cache: Use a distributed caching system like Redis Cluster or Memcached Cluster for shared caching across multiple servers.\nCache Invalidation: Implement cache invalidation strategies (e.g., time-based expiration, write-through, write-behind) to keep cached data consistent with the data store.\nWhat is load balancing, and how would you implement it in a distributed system?\nLoad balancing is a technique used to distribute incoming network traffic across multiple servers or resources, improving overall performance, availability, and scalability. Some common load balancing strategies include:\nRound-Robin: Requests are distributed sequentially across servers.\nLeast Connections: Requests are sent to the server with the fewest active connections.\nIP Hash: Requests from the same client IP are consistently routed to the same server.\nLoad balancing can be implemented using hardware load balancers, software load balancers (e.g., NGINX, HAProxy), or cloud-based load balancing services (e.g., AWS Elastic Load Balancing, Google Cloud Load Balancing).\nHow would you handle data partitioning and replication in a distributed system?\nData Partitioning:\nData partitioning involves dividing data across multiple servers or nodes to improve scalability and performance. Common partitioning strategies include:\nHorizontal Partitioning: Data is partitioned by rows (e.g., user data stored on different servers based on user ID).\nVertical Partitioning: Data is partitioned by columns (e.g., user profile data and activity data stored separately).\nDirectory-Based Partitioning: A lookup service is used to locate the partition storing a particular data item.\nData Replication:\nData replication involves creating and maintaining multiple copies of data across different servers or nodes to improve availability and fault tolerance. Common replication strategies include:\nMaster-Slave Replication: One master node handles writes, and changes are replicated to multiple read-only slave nodes.\nMulti-Master Replication: Multiple master nodes can handle writes, and changes are replicated across all nodes.\nWhat is the purpose of a message queue in a distributed system?\nA message queue is a component used in distributed systems to facilitate asynchronous communication and decouple different parts of the system. The main purposes of using a message queue include:\nDecoupling: Message queues allow producers and consumers to operate independently, without being tightly coupled or requiring synchronous communication.\nBuffering: Message queues can act as buffers, storing messages temporarily when consumers are unavailable or overloaded, preventing data loss.\nScalability: Message queues enable horizontal scaling by allowing multiple consumers to process messages concurrently, improving throughput and fault tolerance.\nReliability: Message queues provide reliable message delivery, ensuring that messages are processed at least once, even in the event of failures.\nPopular message queue systems include RabbitMQ, Apache Kafka, and Amazon Simple Queue Service (SQS).\nHow would you handle failover and high availability in a distributed system?\nHandling failover and ensuring high availability in a distributed system involves implementing redundancy and fault tolerance mechanisms. Some common strategies include:\nRedundancy: Deploy multiple instances of critical components (e.g., load balancers, application servers, databases) across different availability zones or regions.\nFailover: Implement automatic failover mechanisms to switch to a standby or replica instance in case of failure (e.g., using load balancers, health checks, and automated failover scripts).\nReplication: Replicate data across multiple nodes or data centers to ensure data availability and consistency in case of failures.\nCircuit Breakers: Implement circuit breakers to prevent cascading failures by temporarily disabling or degrading non-critical functionality when upstream services are unavailable.\nMonitoring and Alerting: Implement robust monitoring and alerting systems to detect and respond to failures or performance issues quickly.\nCoding and Debugging\nWrite a function to flatten a nested array\nUsing recursion:\nfunction flatten(arr) {\n  return arr.reduce((flat, toFlatten) =>\n    flat.concat(\n      Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten\n    ), []);\n}\nReverse a string in JavaScript\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\nCheck if a string is a palindrome\nfunction isPalindrome(str) {\n  const cleanStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n  return cleanStr === cleanStr.split('').reverse().join('');\n}\nWhat is the purpose of the Tailwind CSS 'container' class?\nThe container class in Tailwind CSS sets max-width and applies horizontal padding to create a responsive container that scales with the viewport size. This helps to maintain consistent spacing and layout across different screen sizes.\nHow would you create a custom utility class in Tailwind CSS?\nTo create a custom utility class in Tailwind CSS, you need to add it to the tailwind.config.js file in the theme.extend section. For example:\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'brand': '#FF0000',\n      }\n    }\n  }\n}\nThis would create a new text-brand and bg-brand utility class.\nHow do you debug CSS issues in Tailwind CSS?\nUse @apply to apply utility classes in your CSS and inspect elements in browser DevTools\nAdd !important to utility classes to increase specificity\nUtilize the @layer directive to control CSS specificity\nCheck for conflicts with other CSS frameworks or libraries\nExplain the concept of 'responsive design' in Tailwind CSS\nTailwind CSS embraces a utility-first approach to responsive design by providing a set of responsive utility classes that can be applied conditionally based on the viewport size. For example, md:flex would apply the flex utility only on medium screens and larger. This allows for granular control over layout and styling at different breakpoints.\nHow would you use Tailwind CSS in a React project?\nInstall Tailwind CSS and its peer dependencies (e.g., npm install -D tailwindcss postcss autoprefixer)\nInitialize Tailwind CSS configuration files (e.g., npx tailwindcss init)\nInclude Tailwind directives in your CSS file (e.g., @tailwind base;@tailwind components;@tailwind utilities;)\nImport the CSS file in your React app\nUse Tailwind utility classes in your JSX code\nWhat is the difference between 'hover', 'focus', and 'active' state styles in Tailwind CSS?\nhover: Styles applied when the user hovers over an element with a cursor\nfocus: Styles applied when an element receives keyboard focus\nactive: Styles applied when an element is being activated (e.g., a button is being clicked)\nThese state styles are commonly used for accessibility and enhancing user experience.\nHow would you create a custom responsive breakpoint in Tailwind CSS?\nTo create a custom responsive breakpoint in Tailwind CSS, you need to modify the screens section in the tailwind.config.js file. For example:\nmodule.exports = {\n  theme: {\n    screens: {\n      'sm': '640px',\n      'md': '768px',\n      'lg': '1024px',\n      'xl': '1280px',\n      '2xl': '1536px',\n      'custom': '1920px',\n    }\n  }\n}\nThis would add a new custom breakpoint at 1920px, allowing you to use utility classes like custom:flex.\nBehavioral Questions\nTell me about a time when you had to learn a new technology or framework quickly to meet a project deadline.\nSituation:\nOur team was tasked with building a new feature-rich web application with a tight deadline. The project required using Tailwind CSS, a utility-first CSS framework that I had no prior experience with.\nTask:\nI needed to quickly learn Tailwind CSS and become proficient enough to contribute to the project effectively.\nAction:\nI dedicated time outside of work hours to go through the official Tailwind CSS documentation and tutorials. I also reached out to more experienced team members for guidance and best practices. Additionally, I built small practice projects to solidify my understanding of the framework.\nResult:\nWithin a few weeks, I gained a strong grasp of Tailwind CSS and its utility-based approach to styling. I was able to contribute to the project codebase efficiently and help the team meet the deadline successfully.\nDescribe a situation where you had to collaborate closely with team members or stakeholders to resolve a complex issue.\nSituation:\nDuring the development of a large-scale web application, our team encountered a challenging issue related to styling consistency across different components and pages.\nTask:\nWe needed to find a solution that would ensure a cohesive and maintainable styling approach throughout the application.\nAction:\nI organized a meeting with the front-end developers and the UI/UX team to discuss the issue and gather input from all stakeholders. We explored various options, including implementing a design system or adopting a CSS-in-JS approach. After careful consideration, we decided to leverage Tailwind CSS's utility classes and create a set of reusable components with consistent styles.\nResult:\nThrough close collaboration and open communication, we successfully implemented a Tailwind CSS-based solution that streamlined our styling process and improved the overall consistency and maintainability of the application's UI.\nHow do you handle working with developers who have different coding styles or preferences?\nSituation:\nIn a previous project, our team consisted of developers with varying coding styles and preferences, which initially led to some inconsistencies in our codebase.\nTask:\nWe needed to find a way to align our coding practices and establish a consistent approach to ensure code maintainability and collaboration efficiency.\nAction:\nI took the initiative to organize a team meeting where we discussed the importance of following a consistent coding style. We agreed on adopting a set of best practices and guidelines, including using Tailwind CSS's utility classes for styling and following a specific naming convention for components and variables. Additionally, we set up code linting and formatting tools to enforce these standards automatically.\nResult:\nBy establishing clear coding guidelines and leveraging tools like Tailwind CSS and code linters, we were able to maintain a consistent and readable codebase. This improved our team's collaboration and made it easier to onboard new developers or review each other's code.\nDescribe a time when you had to prioritize multiple tasks or projects. How did you manage your workload effectively?\nSituation:\nDuring a particularly busy period, I was juggling multiple projects with overlapping deadlines, including a major website redesign using Tailwind CSS.\nTask:\nI needed to effectively prioritize and manage my workload to ensure that all projects were completed on time and to a high standard.\nAction:\nI started by creating a detailed task list and breaking down each project into smaller, manageable tasks. I then prioritized these tasks based on their urgency and importance, focusing on critical deliverables first. I also communicated regularly with project managers and stakeholders to manage expectations and adjust priorities as needed. To stay organized, I utilized project management tools and set reminders for important deadlines.\nResult:\nBy prioritizing effectively and employing time management strategies, I was able to successfully deliver all projects on schedule, including the Tailwind CSS-based website redesign, which received positive feedback from the client for its modern and responsive design.\nTell me about a time when you had to work with a legacy or poorly documented codebase. How did you approach understanding and maintaining it?\nSituation:\nI joined a project where the existing codebase was poorly documented and utilized a mix of outdated technologies and ad-hoc styling approaches.\nTask:\nMy task was to understand the codebase, identify areas for improvement, and refactor it to improve maintainability and performance.\nAction:\nI started by thoroughly reviewing the codebase and documenting my findings. I identified areas where the styling was inconsistent or difficult to maintain, and proposed adopting Tailwind CSS to improve the styling workflow. I then worked closely with the team to plan and execute the refactoring process, gradually migrating components to use Tailwind CSS utility classes. I also updated the documentation and conducted knowledge-sharing sessions to ensure the team was aligned with the new approach.\nResult:\nBy refactoring the codebase to use Tailwind CSS and improving documentation, we significantly enhanced the maintainability and consistency of the project's styling. The utility-based approach also made it easier for new team members to understand and contribute to the codebase.\nDescribe a situation where you had to deal with a challenging stakeholder or client. How did you handle the situation?\nSituation:\nDuring a web development project, we encountered a challenging client who had very specific design requirements and frequently changed their mind about the desired styling.\nTask:\nWe needed to find a way to efficiently implement the client's design changes while maintaining a consistent and maintainable codebase.\nAction:\nI suggested using Tailwind CSS for the project, as its utility-based approach would allow us to quickly iterate on the styling without having to write extensive custom CSS. I presented examples of how Tailwind CSS could streamline the process of implementing design changes. After gaining buy-in from the team and the client, we integrated Tailwind CSS into the project and provided training to ensure everyone was comfortable with the new approach.\nResult:\nBy leveraging Tailwind CSS, we were able to quickly and efficiently implement the client's design changes without compromising the codebase's maintainability. The client was impressed with our ability to adapt to their evolving requirements, and the project was delivered on time and to their satisfaction.\nHow do you approach learning and staying up-to-date with new technologies or industry trends?\nSituation:\nAs a front-end developer, it's crucial to continuously learn and adapt to new technologies and industry trends to stay relevant and provide the best solutions for projects.\nTask:\nMy goal is to actively seek out opportunities to expand my knowledge and skills, particularly in areas like CSS frameworks and modern web development practices.\nAction:\nI regularly follow industry blogs, attend online workshops and conferences, and participate in developer communities. When a new technology like Tailwind CSS gains traction, I make an effort to learn about it by going through official documentation, tutorials, and example projects. I also enjoy experimenting with new tools and techniques by building personal projects or contributing to open-source initiatives.\nResult:\nBy actively learning and staying up-to-date, I've been able to introduce and advocate for the adoption of modern tools and best practices, such as Tailwind CSS, on various projects. This has led to improved development workflows, increased productivity, and more maintainable codebases.\nTell me about a time when you had to mentor or train other developers on a new technology or tool.\nSituation:\nOur team decided to adopt Tailwind CSS, a utility-first CSS framework, for a new project to improve styling consistency and development efficiency.\nTask:\nAs one of the more experienced front-end developers on the team, I was tasked with leading the training and mentoring efforts to ensure a smooth transition to using Tailwind CSS.\nAction:\nI prepared comprehensive training materials, including presentations, code examples, and hands-on exercises. I conducted multiple training sessions, covering topics such as Tailwind CSS's utility classes, responsive design, and best practices for component styling. Additionally, I created a dedicated Slack channel for ongoing support and encouraged team members to ask questions and share their experiences.\nResult:\nThrough my training efforts and continuous mentorship, the entire team successfully adopted Tailwind CSS and gained proficiency in using its utility-based approach. This led to increased productivity, improved code maintainability, and a more consistent user interface across the project.\nDescribe a time when you had to debug a complex or challenging issue related to CSS or styling.\nSituation:\nDuring the development of a complex web application, we encountered a challenging issue where certain components were not rendering correctly on specific browser and device combinations.\nTask:\nI needed to investigate the root cause of the issue and find a solution that would ensure consistent rendering across all targeted platforms.\nAction:\nI started by thoroughly reviewing the codebase, paying close attention to the styling implementation and any potential conflicts or specificity issues. I also set up a comprehensive testing environment to replicate the issue across different browsers and devices. After isolating the problematic components, I discovered that the issue was related to a combination of CSS specificity rules and browser-specific rendering quirks. To resolve the issue, I refactored the component styling using Tailwind CSS's utility classes, which provided a more predictable and consistent approach to styling.\nResult:\nBy leveraging Tailwind CSS's utility-based styling and conducting thorough testing, I was able to resolve the rendering issue and ensure a consistent user experience across all targeted platforms. The refactored components also became more maintainable and easier to style in the future.\nHow do you approach ensuring accessibility and inclusivity in your web development projects?\nSituation:\nDuring a recent project, we had a strong emphasis on ensuring our web application was accessible and inclusive for users with various disabilities and needs.\nTask:\nMy role was to ensure that the user interface and styling adhered to accessibility best practices and guidelines, such as proper color contrast, keyboard navigation, and screen reader compatibility.\nAction:\nI started by familiarizing myself with the Web Content Accessibility Guidelines (WCAG) and conducting accessibility audits on our existing codebase. I then worked closely with the design team to ensure that our color palette and typography choices met the required contrast ratios. Additionally, I leveraged Tailwind CSS's built-in utilities for accessibility, such as focus styles and screen reader utilities, to enhance the overall user experience.\nResult:\nBy prioritizing accessibility from the start and utilizing tools like Tailwind CSS, we were able to deliver a highly accessible and inclusive web application that catered to a diverse range of users. Our efforts were recognized by accessibility advocacy groups, and we received positive feedback from users with disabilities.\n\n\n\n\n\nCSS Interview Questions\n\n\nWhat is CSS?\nCSS stands for Cascading Style Sheet. It’s a style sheet language that determines how the elements/contents in the page are looked/shown. CSS is used to develop a consistent look and feel for all the pages.\n\nCSS was developed and is maintained by the World Wide Web Consortium (W3C). It was first released on December 17, 1996. The CSS Working group currently working with different browser vendors to add/enforce the new feature/ specifications in all the browsers.\n\nCSS enables the separation of the content from the presentation. This separation provides a lot of flexibility and control over how the website has to look like. This is the main advantage of using CSS.\n\nCSS3 or Cascading Style Sheets Level 3 is the third version of the CSS standard that is used to style and format web pages. CSS3 incorporates CSS2 standard with some improvements over it. The main change in CSS3 is the inclusion of divisions of standards into different modules that makes CSS3 easier to learn and understand. Learn More.\n\nThis article covers the most frequently asked CSS and CSS3 interview questions for freshers and experienced candidates.\n\nCSS Interview Questions For Freshers"
  },
  {
    "id": "555",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the advantages of using CSS?",
    "answer": "The main advantages of CSS are given below:\n\nSeparation of content from presentation - CSS provides a way to present the same content in multiple presentation formats in mobile or desktop or laptop.\nEasy to maintain - CSS, built effectively can be used to change the look and feel complete by making small changes. To make a global change, simply change the style, and all elements in all the web pages will be updated automatically.\nBandwidth - Used effectively, the style sheets will be stored in the browser cache and they can be used on multiple pages, without having to download again.\n\nCreate a free personalised study plan\nGet into your dream companies with expert guidance\nReal-Life Problems\nPrep for Target Roles\nCustom Plan Duration\nCreate My Plan"
  },
  {
    "id": "556",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you specify units in the CSS?. What are the different ways to do it?",
    "answer": "There are different ways to specify units in CSS like px, em, pt, percentage (%). px(Pixel) gives fine-grained control and maintains alignment because 1 px or multiple of 1 px is guaranteed to look sharp. px is not cascade. em maintains relative size. you can have responsive fonts. Em, will cascade 1em is equal to the current font-size of the element or the browser default. If u sent font-size to 16px then 1em = 16px. The common practice is to set default body font-size to 62.5% (equal to 10px).\n\npt(point) are traditionally used in print. 1pt = 1/72 inch and it is a fixed-size unit.\n\n%(percentage) sets font-size relative to the font size of the body. Hence, you have to set the font-size of the body to a reasonable size."
  },
  {
    "id": "557",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the Box model in CSS? Which CSS properties are a part of it?",
    "answer": "A rectangle box is wrapped around every HTML element. The box model is used to determine the height and width of the rectangular box. The CSS Box consists of Width and height (or in the absence of that, default values and the content inside), padding, borders, margin.\n\n\n \nContent:  Actual Content of the box where the text or image is placed.\nPadding: Area surrounding the content (Space between the border and content).\nBorder: Area surrounding the padding.\nMargin: Area surrounding the border.\nYou can download a PDF version of Css Interview Questions.\n\nDownload PDF"
  },
  {
    "id": "558",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the limitations of CSS?",
    "answer": "Disadvantages of CSS are given below:\n\nBrowser Compatibility: Some style selectors are supported and some are not. We have to determine which style is supported or not using the @support selector).\nCross Browser issue: Some selectors behave differently in a different browser).\nThere is no parent selector: Currently, Using CSS, you can’t select a parent tag."
  },
  {
    "id": "559",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to include CSS in the webpage?",
    "answer": "There are different ways to include a CSS in a webpage, \n\n1 - External Style Sheet: An external file linked to your HTML document: Using link tag, we can link the style sheet to the HTML page.\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\" />\n2 - Embed CSS with a style tag: A set of CSS styles included within your HTML page.\n\n<style type=\"text/css\">\n\n/*Add style rules here*/\n\n</style>\nAdd your CSS rules between the opening and closing style tags and write your CSS exactly the same way as you do in stand-alone stylesheet files.\n\n3 - Add inline styles to HTML elements(CSS rules applied directly within an HTML tag.): Style can be added directly to the HTML element using a style tag.\n\n<h2 style=\"color:red;background:black\">Inline Style</h2>\n4 - Import a stylesheet file (An external file imported into another CSS file): Another way to add CSS is by using the @import rule. This is to add a new CSS file within CSS itself.\n\n@import \"path/to/style.css\";\nLearn via our Video Courses\ncourseSrikanth Varma\nComputer Networking Course: Master Computer Networking\nstar5\nenrollemntsEnrolled: 29335\nrupeeFree\ncourseSumeet malik\nNSET Course: Mathematics\nstar4.7\nenrollemntsEnrolled: 9255\nrupeeFree\ncourseSumeet malik\nNSET Course: Logical reasoning\nstar4.7\nenrollemntsEnrolled: 9295\nrupeeFree\ncourseSrikanth Varma\nOperating System Course: Learn Fundamentals of Operating System\nstar5\nenrollemntsEnrolled: 27740\nrupeeFree\ncourseSrikanth Varma\nMicrosoft Malware Detection using Machine Learning\nstar5\nenrollemntsEnrolled: 1212\nrupeeFree\ncourseSrikanth Varma\nNetflix Movie Recommendation System using Machine Learning\nstar5\nenrollemntsEnrolled: 2304\nrupeeFree\ncourseSrikanth Varma\nAmazon Fashion Discovery Engine using Machine Learning\nstar5\nenrollemntsEnrolled: 728\nrupeeFree\ncourseSrikanth Varma\nPersonalized Cancer Diagnosis using Machine Learning\nstar5\nenrollemntsEnrolled: 725\nrupeeFree\ncourseSrikanth Varma\nFacebook Friend Recommendation using Graph Mining\nstar5\nenrollemntsEnrolled: 540\nrupeeFree\ncourseSrikanth Varma\nPredicting tags for Stackoverflow using Machine Learning\nstar5\nenrollemntsEnrolled: 426\nrupeeFree\ncourseSrikanth Varma\nQuora Question Pair Similarity Problem using Machine Learning\nstar5\nenrollemntsEnrolled: 482\nrupeeFree\ncourseSrikanth Varma\nTaxi demand prediction in New York City using Machine Learning\nstar5\nenrollemntsEnrolled: 525\nrupeeFree\ncourseMrinal Bhattacharya\nReact JS Free Course\nstar4.8\nenrollemntsEnrolled: 20276\nrupeeFree\ncourseYash Raj\nAWS Free Course\nstar4.7\nenrollemntsEnrolled: 12599\nrupeeFree\ncourseSubhesh Kumar\nObject Oriented Programming in Java Course Online\nstar4.95\nenrollemntsEnrolled: 12010\nrupeeFree\ncourseSrikanth Varma\nDeep Learning Course: Deep Dive into Deep Learning\nstar5\nenrollemntsEnrolled: 7862\nrupeeFree\ncourseSrikanth Varma\nFree Maths for Machine Learning Course\nstar5\nenrollemntsEnrolled: 9014\nrupeeFree\ncourseSrikanth Varma\nSupervised Machine Learning Course\nstar5\nenrollemntsEnrolled: 12762\nrupeeFree\ncourseJamshaid Sohail\nPyTorch for Deep Learning Course\nstar4.8\nenrollemntsEnrolled: 3536\nrupeeFree\ncourseSrikanth Varma\nUnsupervised Machine Learning Course\nstar5\nenrollemntsEnrolled: 3906\nrupeeFree\ncourseYash Sinha\nData Science Course - Mastering the Fundamentals\nstar4.7\nenrollemntsEnrolled: 33514\nrupeeFree\ncoursePrateek Narang\nMaths for Programmers\nstar5\nenrollemntsEnrolled: 7235\nrupeeFree\ncourseArnav Gupta\nSpring Boot Course: Certified Course for Essential Skills\nstar5\nenrollemntsEnrolled: 19764\nrupeeFree\ncourseGaurav Sisodia\nKeras & TensorFlow for Deep Learning\nstar4.8\nenrollemntsEnrolled: 3457\nrupeeFree\ncoursePrateek Narang\nCoding Essentials: Learn Logic Building for Beginners Free Course\nstar5\nenrollemntsEnrolled: 14414\nrupeeFree\ncourseArnav Gupta\nMachine Coding Tic Tac Toe - LLD Case Study\nstar5\nenrollemntsEnrolled: 2932\nrupeeFree\ncourseMrinal Bhattacharya\nNode JS Certification Course - Master the Fundamentals\nstar4.8\nenrollemntsEnrolled: 23639\nrupeeFree\ncoursePrateek Narang\nSQL for Beginners: Learn SQL using MySQL and Database Design Course\nstar5\nenrollemntsEnrolled: 47467\nrupeeFree\ncourseAditya Jain\nData Structures in C++ Course\nstar4.5\nenrollemntsEnrolled: 36494\nrupeeFree\ncourseSubhesh Kumar\nJava DSA Course - Master the Fundamentals and Beyond\nstar4.95\nenrollemntsEnrolled: 46447\nrupeeFree"
  },
  {
    "id": "560",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different types of Selectors in CSS?",
    "answer": "A CSS selector is the part of a CSS ruleset that actually selects the content you want to style. Different types of selectors are listed below.\n\nUniversal Selector: The universal selector works like a wildcard character, selecting all elements on a page. In the given example, the provided styles will get applied to all the elements on the page.\n\n* {\n  color: \"green\";\n  font-size: 20px;\n  line-height: 25px;\n}\nElement Type Selector: This selector matches one or more HTML elements of the same name. In the given example, the provided styles will get applied to all the ul elements on the page.\n\nul {\n  line-style: none;\n  border: solid 1px #ccc;\n}\nID Selector: This selector matches any HTML element that has an ID attribute with the same value as that of the selector. In the given example, the provided styles will get applied to all the elements having ID as a container on the page.\n\n#container {\n  width: 960px;\n  margin: 0 auto;\n}\n\n<div id=\"container\"></div>\nClass Selector: The class selector also matches all elements on the page that have their class attribute set to the same value as the class.  In the given example, the provided styles will get applied to all the elements having ID as the box on the page.\n\n.box {\n  padding: 10px;\n  margin: 10px;\n  width: 240px;\n}\n\n<div class=\"box\"></div>\nDescendant Combinator: The descendant selector or, more accurately, the descendant combinator lets you combine two or more selectors so you can be more specific in your selection method.\n\n#container .box {\n\tfloat: left;\n\tpadding-bottom: 15px;\n} \n\n<div id=\"container\">\n\t<div class=\"box\"></div>\n\t\n\t<div class=\"box-2\"></div>\n</div>\n\n<div class=”box”></div>\nThis declaration block will apply to all elements that have a class of box that is inside an element with an ID of the container. It’s worth noting that the .box element doesn’t have to be an immediate child: there could be another element wrapping .box, and the styles would still apply.\n\nChild Combinator: A selector that uses the child combinator is similar to a selector that uses a descendant combinator, except it only targets immediate child elements.\n\n#container> .box {\n\tfloat: left;\n\tpadding-bottom: 15px;\n}\n\n<div id=\"container\">\n\t<div class=\"box\"></div>\n\t\n\t<div>\n\t\t<div class=\"box\"></div>\n\t</div>\n</div>\nThe selector will match all elements that have a class of box and that are immediate children of the #container element. That means, unlike the descendant combinator, there can’t be another element wrapping .box it has to be a direct child element.\n\nGeneral Sibling Combinator: A selector that uses a general sibling combinator to match elements based on sibling relationships. The selected elements are beside each other in the HTML.\n\nh2 ~ p {\n\tmargin-bottom: 20px;\n}\n\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<div class=”box”>\n\t<p>Paragraph example.</p>\n</div>\nIn this example, all paragraph elements (<p>) will be styled with the specified rules, but only if they are siblings of <h2> elements. There could be other elements in between the <h2> and <p>, and the styles would still apply.\n\nAdjacent Sibling Combinator: A selector that uses the adjacent sibling combinator uses the plus symbol (+), and is almost the same as the general sibling selector. The difference is that the targeted element must be an immediate sibling, not just a general sibling.\n\np + p {\n\ttext-indent: 1.Sem;\n\tmargin-bottom: 0;\n}\n\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n\n<div class=”box”>\n\t<p>Paragraph example.</p>\n\t<p>Paragraph example.</p>\n</div>\nThe above example will apply the specified styles only to paragraph elements that immediately follow other paragraph elements. This means the first paragraph element on a page would not receive these styles. Also, if another element appeared between two paragraphs, the second paragraph of the two wouldn’t have the styles applied.\n\nAttribute Selector: The attribute selector targets elements based on the presence and/or value of HTML attributes, and is declared using square brackets.\n\ninput [type=”text”] {\n\tbackground-color: #444;\n\twidth: 200px;\n}\n\n<input type=\"text\">"
  },
  {
    "id": "561",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a CSS Preprocessor? What are Sass, Less, and Stylus? Why do people use them?",
    "answer": "A CSS Preprocessor is a tool used to extend the basic functionality of default vanilla CSS through its own scripting language. It helps us to use complex logical syntax like – variables, functions, mixins, code nesting, and inheritance to name a few, supercharging your vanilla CSS.\n\nSASS: Sass is the acronym for “Syntactically Awesome Style Sheets”. SASS can be written in two different syntaxes using SASS or SCSS\n\nSASS vs SCSS\n\nSASS is based on indentation and SCSS(Sassy CSS) is not.\nSASS uses .sass extension while SCSS uses .scss extension.\nSASS doesn’t use curly brackets or semicolons. SCSS uses it, just like the CSS.\nSASS Syntax\n\n$font-color: #fff \n$bg-color: #00f\n\n#box\n\tcolor: $font-color\n\tbackground: $bg-color\nSCSS Syntax\n\n$font-color: #fff;\n$bg-color: #00f;\n\n#box{\n\tcolor: $font-color;\n\tbackground: $bg-color;\n}\nLESS: LESS is an acronym for “Leaner Stylesheets”. LESS is easy to add to any javascript projects by using NPM or less.js file. It uses the extension .less.\n\nLESS syntax is the same as the SCSS with some exceptions. LESS uses @ to define the variables.\n\n@font-color: #fff;\n@bg-color: #00f\n\n#box{\n\tcolor: @font-color;\n\tbackground: @bg-color;\n}\nStylus: Stylus offers a great deal of flexibility in writing syntax, supports native CSS as well as allows omission of brackets, colons, and semicolons. It doesn’t use @ or $ for defining variables.\n\n/* STYLUS SYNTAX WRITTEN LIKE NATIVE CSS */\nfont-color= #fff;\nbg-color = #00f;\n\n#box {\n\tcolor: font-color;\n\tbackground: bg-color;\n}\n\n/* OR */\n\n/* STYLUS SYNTAX WITHOUT CURLY BRACES */\nfont-color= #fff;\nbg-color = #00f;\n\n#box\n\tcolor: font-color;\n\tbackground: bg-color;\n\nAdvance your career with  \nMock Assessments\nReal-world coding challenges for top company interviews\nReal-Life Problems\nDetailed reports\nAttempt Now"
  },
  {
    "id": "562",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is VH/VW (viewport height/ viewport width) in CSS?",
    "answer": "It’s a CSS unit used to measure the height and width in percentage with respect to the viewport. It is used mainly in responsive design techniques. The measure VH is equal to 1/100 of the height of the viewport. If the height of the browser is 1000px, 1vh is equal to 10px. Similarly, if the width is 1000px, then 1 vw is equal to 10px."
  },
  {
    "id": "563",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between reset vs normalize CSS?. How do they differ?",
    "answer": "Reset CSS: CSS resets aim to remove all built-in browser styling. For example margins, paddings, font-sizes of all elements are reset to be the same. \n\nNormalize CSS: Normalize CSS aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies."
  },
  {
    "id": "564",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between inline, inline-block, and block?",
    "answer": "Block Element: The block elements always start on a new line. They will also take space for an entire row or width. List of block elements are <div>, <p>.\n\nInline Elements: Inline elements don't start on a new line, they appear on the same line as the content and tags beside them. Some examples of inline elements are <a>, <span> , <strong>, and <img> tags. \n\nInline Block Elements: Inline-block elements are similar to inline elements, except they can have padding and margins and set height and width values."
  },
  {
    "id": "565",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is it important to test the webpage in different browsers?",
    "answer": "It’s most important to test a website in different browsers when you’re first designing it, or when making major changes. However, it’s also important to repeat these tests periodically, since browsers go through a lot of updates and changes."
  },
  {
    "id": "566",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Pseudo elements and Pseudo classes?",
    "answer": "Pseudo-elements allows us to create items that do not normally exist in the document tree, for example ::after.\n\n::before\n::after\n::first-letter\n::first-line\n::selection\nIn the below example, the color will appear only on the first line of the paragraph.\n\np: :first-line {\n\tcolor: #ffOOOO;\n\tfont-variant: small-caps;\n}\nPseudo-classes select regular elements but under certain conditions like when the user is hovering over the link.\n\n:link\n:visited\n:hover\n:active\n:focus\nExample of the pseudo-class, In the below example, the color applies to the anchor tag when it’s hovered.\n\n/* mouse over link */\na:hover {\n\tcolor: #FFOOFF;\n}\nlogo\nGet Access to 250+ Guides with Scaler Mobile App!\nExperience free learning content on the Scaler Mobile App\nlogo"
  },
  {
    "id": "567",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Does margin-top or margin-bottom have an effect on inline elements?",
    "answer": "No, it doesn’t affect the inline elements. Inline elements flow with the contents of the page."
  },
  {
    "id": "568",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is cascading in CSS?",
    "answer": "“Cascading” refers to the process of going through the style declarations and defining weight or importance to the styling rules that help the browser to select what rules have to be applied in times of conflict. The conflict here refers to multiple rules that are applicable to a particular HTML element. In such cases, we need to let the browser know what style needs to be applied to the element. This is done by cascading down the list of style declarations elements.\n\nFor example, if we have the below style:\n\np{\n    color:white;\n}\nand we also have the following declaration below it or in another stylesheet that has been linked to the page:\n\np{\n    color: black;\n}\nWe have a conflict in color property here for the paragraph elements. Here, the browser just cascades down to identify what is the most recent and most specific style and applies that. Since we have the color:black; as the most specific declaration, the color black is applied to the paragraph elements. Now if you want to ensure color white is applied to the paragraph, we can define weight to that style by adding !important as shown below:\n\np{\n    color:white !important;\n}\n!important ensures that the property has the maximum weight in presence of other conflicting properties."
  },
  {
    "id": "569",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What property is used for changing the font face?",
    "answer": "We can use the font-family property for achieving this. The font-family property is used for specifying what font needs to be applied on the targetted DOM element. It can hold several font names as part of “fallback” mechanism in case the browser does not support the fonts. For example, we can use:\n\n p {\n  font-family: \"Times New Roman\", Times, serif;\n}\nIn the above piece of code, we are applying font-family property to the paragraph element.\n\nIt tells the browser to look for “Times New Roman” font and apply it.\nIf the “Times New Roman” font is not installed or supported, then it asks the browser to use Times font.\nIf both “Times New Roman” and Times are not supported, then it asks the browser to use any supported generic font belonging to serif.\nIf you do not want the font-face of the paragraph element to be Times New Roman/Times/serif font, and you want to use the Arial/Helvetica/sans-serif font, then we can just update the CSS property of paragraph element as:\n\n p {\n  font-family: Arial, Helvetica, sans-serif;\n}"
  },
  {
    "id": "570",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the differences between adaptive design and responsive design?",
    "answer": "Adaptive Design\tResponsive Design\nAdaptive design focuses on developing websites based on multiple fixed layout sizes.\tResponsive design focuses on showing content on the basis of available browser space.\nWhen a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design.\tWhen a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of the website is dynamically and optimally rearranged to accomodate the window.\nUsually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. These sizes are detected and appropriate layouts are loaded.\tThis design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens.\nIt takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them.\tGenerally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size.\nGives a lot of control over the design to develop sites for specific screens.\tNo much control over the design is offered here."
  },
  {
    "id": "571",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How are the CSS selectors matched against the elements by the browser?",
    "answer": "The order of matching selectors goes from right to left of the selector expression. The elements in the DOM are filtered by browsers based on the key selectors and are then traversed up to the parent elements for determining the matches. The speed of determining the elements depends on the length of the chain of selectors. Consider an example:\n\n p span{ \n    color: black;\n}\n\nHere, the browser first finds all span elements in the DOM and then it traverses to each of its parent elements to check if they are the paragraph p elements.\n\nOnce the browser finds all matching span tags having paragraph elements as parent and applies the color of black to the content, the matching process is stopped."
  },
  {
    "id": "572",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is border-box different from content-box?",
    "answer": "content-box is the default value box-sizing property. The height and the width properties consist only of the content by excluding the border and padding. Consider an example as shown:\n\ndiv{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:content-box;\n    -webkit-box-sizing:content-box;\n    box-sizing:content-box;\n}\nHere, the box-sizing for the div element is given as content-box. That means, the height and width considered for the div content exclude the padding and border. We will get full height and width parameters specified for the content as shown in the below image.\n\n\nThe border-box property includes the content, padding and border in the height and width properties. Consider an example as shown:\n\ndiv{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:border-box;\n    -webkit-box-sizing:border-box;\n    box-sizing:border-box;\n}\nHere, the box-sizing for the div element is given as border-box. That means the height and width considered for the div content will also include the padding and border. This means that the actual height of the div content will be:\n\nactual height = height - \n                padding on top and bottom - \n                border on top and bottom\n              = 200 - (15*2) - (5*2) \n              = 160 px\nand the actual width of the div content would be:\n\nactual width  = width - \n                padding on right and left - \n                border on right and left\n              = 300 - (15*2) - (5*2) \n              = 260 px\nThis is represented in the image below:"
  },
  {
    "id": "573",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is opacity specified in CSS3?",
    "answer": "Opacity refers to the degree to which the content is transparent or opaque. We can use the property named opacity which takes the values ranging from 0 to 1. 0 specifies that the element is completely transparent where 1 means that the element is completely opaque. We can use the opacity property as follows:\n\n div { \n    opacity: 0.6;\n}\nIn the above example, an opacity of 60% is applied to the div section. The opacity property is not supported by the internet explorer browser. To make it work there, we need to use filter property as polyfill as shown in the example below.\n\n div { \n    opacity: 0.6;\n    filter: alpha(opacity=60);\n}"
  },
  {
    "id": "574",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why should we use float property in CSS?",
    "answer": "The float property is used for positioning the HTML elements horizontally either towards the left or right of the container. For instance,\n\n float-demo {\n     float: right; \n}\nHere, the element to which the class is applied ensures that the element is positioned on the right of the container. If you specify the value of float as left, then the element will be placed on the left side of the container."
  },
  {
    "id": "575",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a z-index, how does it function?",
    "answer": "z-index is used for specifying the vertical stacking of the overlapping elements that occur at the time of its positioning. It specifies the vertical stack order of the elements positioned that helps to define how the display of elements should happen in cases of overlapping.\n\nThe default value of this property is 0 and can be either positive or negative. Apart from 0, the values of the z-index can be:\n\nAuto: The stack order will be set equal to the parent.\nNumber: The number can be positive or negative. It defines the stack order.\nInitial: The default value of 0 is set to the property.\nInherit: The properties are inherited from the parent.\nThe elements having a lesser value of z-index is stacked lower than the ones with a higher z-index.\n\n\nFrom the above figure, we can see that as the value of the z-index increases along the z-axis, the order of stacking would be towards the top of other elements along the vertical axis."
  },
  {
    "id": "576",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do the following CSS selectors mean?",
    "answer": "div, p\ndiv p\ndiv ~ p\ndiv + p\ndiv > p\nThe meaning of the given list of selectors goes as follows:\n\ndiv, p: This selector implies selecting all div elements and all p elements.\nConsider an example below:\n\n <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p> <!-- Will be selected -->\n   </div>\n   <p> paragraph 2</p> \n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span>\nHere, all the div elements and the p elements would be selected by the browser irrespective of their parents or where they are placed. The remaining tags like h1 and span are ignored.\n\ndiv p : This selector tells to select all p elements that are inside div elements. Consider an example below:\n  <h1>Heading 1</h1>\n<div>\n    Division 1\n    <p> paragraph 1</p> <!-- Will be selected -->\n    <div>\n        <p> Inner Div Paragraph </p> <!-- Will be selected -->\n    </div>\n</div>\n<p> paragraph 2</p>\n<p> paragraph 3</p>\n<div>\n    Division 2\n</div>\n<span> Span 1 </span>\nHere, <p> paragraph 1</p> and <p> Inner Div Paragraph </p> would be selected by the browser and the properties are applied. The rest of the paragraph tags are not selected.\n\ndiv ~ p : This selector tells to select all p elements that have div elements preceeded anywhere. Consider an example,\n<h1>Heading 1</h1>\n<div>\n   Division 1\n   <p> paragraph 1</p>\n</div>\n<p> paragraph 2</p> <!-- Will be selected -->\n<p> paragraph 3</p> <!-- Will be selected -->\n<div>\n   Division 2\n</div>\n<span> Span 1 </span>\nHere, paragraph 2 and paragraph 3 elements would be selected as marked in the code above.\n\ndiv + p : This selector says to select all p elements placed immediately after the div element. Consider an example in this case:\n    <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p>\n   </div>\n   <p> paragraph 2</p> <!-- Will be selected -->\n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span>\nIn this case, we have paragraph 2 element immediately after the div tag. Hence, only that element will be selected.\n\ndiv > p : This selector says to select all p elements which has div as an immediate parent. In the same example below:\n    <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p> <!-- Will be selected -->\n   </div>\n   <p> paragraph 2</p> \n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span>\nOnly <p> paragraph 1</p> will be selected in this case because it has immediate div as the parent."
  },
  {
    "id": "577",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the properties of flexbox?",
    "answer": "Flexbox stands for flexible box and it was introduced around 2017 in CSS with the purpose of providing an efficient way to handle layouts, align elements within them and distribute spaces amongst the items in dynamic/responsive conditions. It provides an enhanced ability to alter the dimensions of the items and make use of the available space in the container efficiently. In order to achieve this, CSS3 provides some properties.\n\nThe properties of flexbox are as follows:\n\nflex-direction: This property helps in defining the direction the container should stack the items targetted for flex. The values of this property can be\nrow: Stacks items horizontally from left to right in the flex container.\ncolumn: Stacks items vertically from top to bottom in the flex container.\nrow-reverse: Stacks items horizontally from right to left in the flex container.\ncolumn-reverse: Stacks items vertically from bottom to top in the flex container.\nflex-wrap: This property specifies of the flex items should be wrapped or not. Possible values are:\nwrap: The flex items would be wrapped if needed.\nnowrap: This is the default value that says the items won’t be wrapped.\nwrap-reverse: This specifies that the items will be wrapped if needed but in reverse order.\nflex-flow: This property is used for setting both flex-direction and flex-wrap properties in one statement.\njustify-content: Used for aligning the flex items. Possible values are:\ncenter: It means that all the flex items are present at the center of the container.\nflex-start: This value states that the items are aligned at the start of the container. This is the default value.\nflex-end: This value ensures the items are aligned at the end of the container.\nspace-around: This value displays the items having space between, before, around the items.\nspace-between: This value displays items with spaces between the lines.\nalign-items: This is used for aligning flex items.\nalign-content: This is used for aligning the flex lines.\nCSS Interview Questions for Experienced"
  },
  {
    "id": "578",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between CSS grid vs flexbox?",
    "answer": "CSS Grid Layout is a two-dimensional system, meaning it can handle both columns and rows. Grid layout is intended for larger-scale layouts which aren’t linear in design.\nFlexbox is largely a one-dimensional system (either in a column or a row). Flexbox layout is most appropriate to the components of an application."
  },
  {
    "id": "579",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain CSS position property?",
    "answer": "Absolute: To place an element exactly where you want to place it. absolute position is actually set relative to the element's parent. if no parent is available then the relative place to the page itself (it will default all the way back up to the element).\nRelative: \"Relative to itself\". Setting position: relative; on an element and no other positioning attributes, it will no effect on its positioning. It allows the use of z-index on the element and it limits the scope of absolutely positioned child elements. Any child element will be absolutely positioned within that block. \nFixed: The element is positioned relative to the viewport or the browser window itself. viewport doesn't change if you scroll and hence the fixed element will stay right in the same position. \nStatic: Static default for every single page element. The only reason you would ever set an element to position: static is to forcefully remove some positioning that got applied to an element outside of your control.\nSticky: Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned."
  },
  {
    "id": "580",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "When does DOM reflow occur?",
    "answer": "Reflow is the name of the web browser process for re-calculating the positions and geometries of elements in the document, for the purpose of re-rendering part or all of the document. \n\nReflow occurs when:\n\nInsert, remove or update an element in the DOM.\nModify content on the page, e.g. the text in an input box.\nMove a DOM element.\nAnimate a DOM element.\nTake measurements of an element such as offsetHeight or getComputedStyle.\nChange a CSS style."
  },
  {
    "id": "581",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Different Box Sizing Property?",
    "answer": "The box-sizing CSS property sets how the total width and height of an element are calculated.\n\nContent-box: The default width and height values apply to the element's content only. The padding and border are added to the outside of the box.\nPadding-box: Width and height values apply to the element's content and its padding. The border is added to the outside of the box. Currently, only Firefox supports the padding-box value.\nBorder-box: Width and height values apply to the content, padding, and border."
  },
  {
    "id": "582",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to center align a div inside another div?",
    "answer": "Centering with Table:\nHTML:\n\n<div class=”cn”><div class=”inner”>your content</div></div>\nCSS:\n\n.cn {\n\tdisplay: table-cell;\n\twidth: 500px;\n\theight: 500px;\n\tvertical-align: middle;\n\ttext-align: center;\n}\n\n.inner {\n\tdisplay: inline-block;\n\twidth: 200px; height: 200px;\n}\nCentering with Transform\nHTML:\n\n<div class=\"cn\"><div class=\"inner\">your content</div></div>\nCSS:\n\n.cn {\n\tposition: relative;\n\twidth: 500px;\n\theight: 500px;\n}\n\n.inner {\n\tposition: absolute;\n\ttop: 50%; left: 50%;\n\ttransform: translate(-50%,-50%);\n\twidth: 200px;\n\theight: 200px;\n}\nCentering with Flexbox\nHTML:\n\n<div class=\"cn\"><div class=\"inner\">your content</div></div>\nCSS:\n\n.cn {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\nCentering with Grid\nHTML:\n\n<div class=”wrap_grid”>\n\t<div id=”container”>vertical aligned text<br />some more text here\n\t</div>\n</div>\nCSS:\n\n.wrap-grid {\n\tdisplay: grid;\n\tplace-content: center;\n}"
  },
  {
    "id": "583",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you name the four types of @media properties?",
    "answer": "The four types of @media properties are:\n\nAll → It’s the default property. Used for all media-type devices.\nScreen → Used for computer screen, mobile screen.\nPrint → Used for printers.\nSpeech → Used for screen readers."
  },
  {
    "id": "584",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the grid system?",
    "answer": "CSS Grid Layout is the most powerful layout system available in CSS. It is said to be a 2-dimensional system, meaning it can handle both columns and rows, unlike flexbox which is largely a 1-dimensional system."
  },
  {
    "id": "585",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different ways to hide the element using CSS?",
    "answer": "Using display property(display: none). It’s not available for screen readers. The element will not exist in the DOM if display: none is used.\nUsing visibility property(visibility: hidden), will take up the space of the element. It will be available to screen reader users. The element will actually be present in the DOM, but not shown on the screen.\nUsing position property (position: absolute). Make it available outside the screen."
  },
  {
    "id": "586",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does the :root pseudo-class refer to?",
    "answer": "The :root selector allows you to target the highest-level “parent” element in the DOM, or document tree. It is defined in the CSS Selectors Level 3 specification."
  },
  {
    "id": "587",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does Accessibility (a11y) mean?",
    "answer": "Accessibility refers to how software or hardware combinations are designed to make a system accessible to persons with disabilities, such as visual impairment, hearing loss, or limited dexterity.\n\nFor example, a website developed with accessibility in mind might have text-to-speech capabilities. In the USA public websites have to have accessible compliance. It’s defined in 508 compliance. It gives the guidelines and best practices for all website users that should be met with key areas of accessibility."
  },
  {
    "id": "588",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do I restore the default value of a property?",
    "answer": "The keyword initial can be used to reset it to its default value."
  },
  {
    "id": "589",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does Calc work?",
    "answer": "The CSS3 calc() function allows us to perform mathematical operations on property values. Instead of declaring, for example, static pixel values for an element's width, we can use calc() to specify that the width is the result of the addition of two or more numeric values.\n\n.foo {\n\tWidth: calc(100px + 50px)\n}"
  },
  {
    "id": "590",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do CSS Custom properties variables mean?",
    "answer": "Custom properties (sometimes referred to as CSS variables or cascading variables) are defined by users that contain specific values to be reused throughout a document. The value is set using -- notion. And the values are accessed using the var() function.\n\n:root {\n\t--main-bg-color: brown\n}\n\n.one {\n\tcolor: white;\n\tbackground-color· var (--main-bg-color);\n\tmargin: l0px,\n\twidth: 50px,\n\theight: 5Opx;\n\tdisplay: inline-block;\n}"
  },
  {
    "id": "591",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between CSS variables and preprocessor(SASS, LESS, Stylus) variables?",
    "answer": "CSS variables can be used without the need for a preprocessor. Currently, all the major browsers support the CSS variables. \nCSS variable cascade. But the preprocessor variables don’t cascade. \nCSS variable can be accessed and manipulated in javascript."
  },
  {
    "id": "592",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does * { box-sizing: border-box; } do? What are its advantages?",
    "answer": "It makes every element in the document include the padding and border in the element’s inner dimension for the height and width computation.  \nIn box-sizing: border-box, The height of an element is now calculated by the content's height + vertical padding + vertical border width.\nThe width of an element is now calculated by the content's width + horizontal padding + horizontal border width."
  },
  {
    "id": "593",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does !important mean in CSS?",
    "answer": "The style is having the important will have the highest precedence and it overrides the cascaded property.\n\n p {\n \tcolor: red !important;\n }\n #thing {\n \tcolor: green;\n } \n <p id=\"thing\">Will be RED.</p>"
  },
  {
    "id": "594",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is specificity? How to calculate specificity?",
    "answer": "A process of determining which CSS rule will be applied to an element. It actually determines which rules will take precedence. Inline style usually wins then ID then the class value (or pseudo-class or attribute selector), the universal selector (*) has no specificity. ID selectors have a higher specificity than attribute selectors."
  },
  {
    "id": "595",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?",
    "answer": "Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.\n\nWe can implement the progressive rendering of the page by loading the lazy loading of the images.  We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element enters the viewport and take an action when it does. Once the image enters the viewport, we will start loading the images.\n\nA sample snippet is given below.\n\n<img class=\"lazy\"\nsrc=\"placeholder-image.jpg\"\ndata-src=\"image-to-lazy-load-1x.jpg\"\ndata-srcset=\"image-to-lazy-load-2x.jpg 2x, image-to-lazy-load-1x.jpg 1x\"\nalt=\"I'm an image!\">\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n\n  if (\"IntersectionObserver\" in window) {\n    let lazyImageObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          let lazyImage = entry.target;\n          lazyImage.src = lazyImage.dataset.src;\n          lazyImage.srcset = lazyImage.dataset.srcset;\n          lazyImage.classList.remove(\"lazy\");\n          lazyImageObserver.unobserve(lazyImage);\n        }\n      });\n    });\n\n    lazyImages.forEach(function(lazyImage) {\n      lazyImageObserver.observe(lazyImage);\n    });\n  } else {\n    // Possibly fall back to event handlers here\n  }\n});"
  },
  {
    "id": "596",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the advantages of using translate() instead of absolute position?",
    "answer": "Translate() does not cause the browser to trigger repaint and layout and instead only acts on the compositor. The absolute position triggers the repaint or DOM reflow. So, translate() gives better performance."
  },
  {
    "id": "597",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Does style1.css have to be downloaded and parsed before style2.css can be fetched?",
    "answer": "<head>\n\t<link h ref=\" stylel. css\" rel=\" stylesheet\">\n\t<link href=\"style2.css\" rel=\"stylesheet\">\n</head>\nNo, the browsers will download the CSS in the order of its appearance on the HTML page."
  },
  {
    "id": "598",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to determine if the browser supports a certain feature?",
    "answer": "The @support in CSS can be very useful to scan if the current browser has support for a certain feature.\n\n@supports (display: grid) {\n\tdiv {\n\t\tdisplay: grid;\n\t}\n}"
  },
  {
    "id": "599",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How will you fix browser-specific styling issues?",
    "answer": "Different ways to fix browser-specific issues.\n\nWe can write browser-specific styles separately in different sheets and load that only when the specific browser is used. This makes use of the server-side rendering technique.\nWe can use auto-prefix for automatically adding vendor prefixes in the code.\nWe can also use normalize.css or reset CSS techniques.\nThere are some ways for avoiding browser compatibility issues too. They are as follows:\n\nValidate HTML and CSS: We know that the code will be read, interpreted and handled differently by different browsers. We need to validate our HTML and CSS files for the missing closing tags, or missing semicolons in the syntaxes because there are chances that the old browsers will throw errors while rendering the code. We can avoid those errors by:\nMaintaining well-aligned code that helps in easy readability.\nInserting comments at necessary places.\nMake use of validation tools like Jigsaw CSS validator, W3C HTML Validators to identify syntax issues in the code.\nMaintain Cross-Browser Compatibility in the Layouts: Cross-Browser compatibility is a must while developing web applications. We expect our application to be responsive across all devices, browsers and platforms. Some of the effects of layout incompatibilities are unresponsiveness of the layouts in mobile devices, the difference in layout rendering between modern and old browsers, etc. These incompatibilities can be avoided by using:\nCSS Multi-Column layouts - For maintaining proper layouts w.r.t columns and containers.\nHTML viewport metatag – For ensuring content is properly spanned across mobile devices.\nCSS Flexbox and Grids - To layout child elements depending on the content and available space.\nCSS resets stylesheets - For reducing browser inconsistencies in default line heights, font sizes, margins etc.\nCheck JavaScript Library issues: Ensure the libraries are used judiciously and the ones used are supported by the browsers.\nCheck DOCTYPE tag keyword: The DOCTYPE keyword is meant for defining rules of what needs to be used in the code. Older browser versions check for DOCTYPE tag at the beginning and if not found, the application rendering won't be proper.\nTest on real devices: Although applications can be tested on virtual environments, it would be more beneficial if the testing is carried out on real devices and platforms. We can use tools like Testsigma for this purpose that enables us to test in real devices parallelly.\nConclusion\nCSS plays the most important role in the field of web development. This is because CSS helps in achieving beautiful, responsive or adaptive websites depending on the business requirements. CSS helps in building lighter and flexible layouts that help in loading pages faster and making the content visually appealing. CSS is continuously evolving and is becoming more powerful thereby making it the most sought-after technology by various companies to develop websites. In this article, we have seen the most commonly asked interview questions in CSS, more particularly CSS3.\n\nUseful Resources\n\nCSS Guides\nHTML\nCoding Practice\nJavaScript\nSASS Vs SCSS\nHTML/CSS Books\nCSS Vs HTML"
  },
  {
    "id": "600",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does this property work overflow: hidden?",
    "answer": "The overflow property in CSS is used for specifying whether the content has to be clipped or the scrollbars have to be added to the content area when the content size exceeds the specified container size where the content is enclosed. If the value of overflow is hidden, the content gets clipped post the size of the container thereby making the content invisible. For example,\n\ndiv {\n    width: 150px;\n    height: 50px;\n    overflow: hidden;\n}\nIf the content of the div is very large and exceeds the height of 50px, the content gets clipped post 50px and the rest of the content is not made visible."
  },
  {
    "id": "601",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How will you align content inside the p tag at the exact center inside the div?",
    "answer": "We can add the text-align: center property inside the parent div for aligning the contents horizontally. But it will not align the contents vertically. We can align the content vertically by making the parent element have relative positioning and the child element have absolute positioning. The child element should have the values of top, bottom, right, left as 0 to center it in the middle vertically. Then we need to set the margin as auto. It is assumed that both the child and mother elements will have height and width values.\n\nConsider we have a div element of height and width taking 20% of the screen size, and we have a paragraph element taking the height of 1.2em and width of 20%. If we want to align the paragraph element at the center (vertically and horizontally), we write the following styles:\n\ndiv {\n    position : relative;  // Make position relative\n    height : 20%;\n    width : 20%;\n    text-align : center; //Align to center horizontally\n}\np {\n    position : absolute; // Make position absolute\n    top:0;                // Give values of top, bottom,left, right to 0\n    bottom:0;\n    left:0;\n    right:0;\n    margin : auto;        // Set margin as auto\n    height : 1.2 em;\n    width : 20%;\n}"
  },
  {
    "id": "602",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is margin different from padding in CSS?",
    "answer": "Margin property using which we can create space around the elements. We can also create space for borders defined at the exteriors. We have the following properties for defining the margin:\n\nmargin-top\nmargin-right\nmargin-bottom\nmargin-left\nmargin property by itself has the values as:\nauto – The browser auto-calculates the margin while we use this.\nlength – The value of this property can be in px, pt, cm, em etc. The values can be positive or negative.\n% – We can also give percentage value as margin to the element.\ninherit – Using this property, the margin properties can be inherited from the parent elements.\nThe padding property is used for generating the space around the element’s content and inside any known border. The padding also has sub-properties like:\n\npadding-top\npadding-right\npadding-bottom\npadding-left\nIt is to be noted that the padding does not allow negative values.\n\nFrom the below image, we can see that the Margin is the outermost entity of the CSS Box Model that lies outside of the borders whereas the padding lies within the borders."
  },
  {
    "id": "603",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you have to do to automatically number the heading values of sections and categories?",
    "answer": "We can use the concept of CSS counters. This lets us adjust the appearance of the content based on the location in a document. While using this, we need to first initialize the value of the counter-reset property which is 0 by default. The same property is also used for changing the value to any number that we need. Post initialization, the counter’s value can be incremented or decremented by using the counter-increment property. The name of the counter cannot be CSS keywords like “none”, “initial”, “inherit” etc. If the CSS keywords are used, then the declaration would be ignored.\n\nConsider an example as shown below:\n\nbody {\n  counter-reset: header;   /* define counter named 'header' whose initial value is 0 by default */\n}\n\nh2::before {\n  counter-increment: header;   /* The value of header counter by 1.*/\n  content: \"Header \" counter(header) \": \";  /* To display word Header and the value of the counter with colon before it.*/\n}\nHere, we are trying to achieve auto count increment and display feature for the h2 tag. Wherever we use h2 tag, the content will be prefixed by \"Header 1 : \" , \"Header 2 : \", \"Header 3 : \" etc."
  },
  {
    "id": "604",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is the nth-child() different from nth of type selectors?",
    "answer": "Both are pseudo-classes (Pseudo-classes are those keywords that specifies the special state of the selected element). The nth-child() pseudo-class is used for matching elements based on the number that represents the position of an element based on the siblings. The number is used to match an element on the basis of the element’s position amongst its siblings.\n\nFor example, in the below piece of code, if we give nth-child(4) for the example class, then the 4th child of the example class is selected irrespective of the element type. Here, the fourth child of the example class is the div element. The element is selected and a background of black is added to it.\n\n.example:nth-child(4) {   \n    background: black; \n}\n<div class=\"example\">\n\t<p>This is a paragraph.</p>\n\t<p>This is a paragraph.</p>\n\t<p>This is a paragraph.</p>\n\t<div>This is a div.</div> <!-- 4th Element to select and apply style-->\n\t<div>This is a div.</div> \n\t<p>This is a paragraph.</p>\n\t<p>This is a paragraph.</p>\n\t<div>This is a div.</div>\n</div>\nThe nth-of-type() pseudo-class is similar to the nth-child but it helps in matching the selector based on a number that represents the position of the element within the elements that are the siblings of its same type. The number can also be given as a function or give keywords like odd or even.\n\nFor example, in the below piece of code, if we give p:nth-of-type(even) for the example class, then all the even paragraph tags are selected within the example class and the style of background black is applied to them. The selected elements are marked in comments in the below code:\n\n.example p:nth-of-type(even) { \n    background: black; \n}\n<div class=\"example\">\n\t<p>This is a paragraph.</p> \n\t<p>This is a paragraph.</p> <!-- Select this and apply style-->\n\t<p>This is a paragraph.</p> \n\t<div>This is a div.</div>\n\t<div>This is a div.</div> \n\t<p>This is a paragraph.</p> <!-- Select this and apply style-->\n\t<p>This is a paragraph.</p> \n\t<div>This is a div.</div>\n\t<p>This is a paragraph.</p> <!-- Select this and apply style-->\n\t<div>This is a div.</div>\n</div>"
  },
  {
    "id": "605",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the importance of CSS Sprites?",
    "answer": "CSS sprites are used for combining multiple images in a single larger image. They are commonly used for representing icons that are used in the user interfaces. The main advantages of using sprites are:\n\nIt reduces the number of HTTP requests to get data of multiple images as they are acquired only by sending a single request.\nIt helps in downloading assets in advance that help display icons or images upon hover or other pseudo-states.\nWhen there are multiple images, the browser makes separate calls to get the image for each of them. Using sprites, the images are combined in one and we can just call for that image using one call.\nConsider an example where our application requires 3 images as shown below (Without Sprites Section). If we are trying to load the images independently, we require 3 different HTTP Requests to get the data. But if we have CSS Sprites where all 3 images are combines into 1 separated by some spaces, then we require only 1 HTTP Request.\n\n\nWe can access each image from the sprite by accessing the positioning properties as shown in the below code:\n\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n#home-icon {\n  left: 0px;\n  width: 46px;\n  background: url('spriteFile.gif') 0 0;\n}\n\n#prev-icon {\n  left: 63px;\n  width: 43px;\n  background: url('spriteFile.gif') -47px 0;\n}\n\n#next-icon {\n  left: 129px;\n  width: 43px;\n  background: url('spriteFile.gif') -91px 0;\n}\n</style>\n</head>\n<body>\n\n<img id=\"home-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display home icon here -->\n<img id=\"next-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display next icon icon here -->\n<img id=\"prev-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display previous icon icon here -->\n\n</body>\n</html>\nIn the above code, we are trying to access each element - house, previous and next icon - from the sprite file by using the left, width properties. The image is displayed in the img section by means of the background property. Do note that the source of the image (src attribute of the img tag) is just one file which is the spriteFile.gif and depending on the rules specified in the id selectors, the images are loaded accordingly."
  },
  {
    "id": "606",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you understand by tweening in CSS?",
    "answer": "Tweening is the process of filling the gaps between the key sequences, i.e between the keyframes that are already created. Keyframes are those frames that represent start and end point of animation action. Tweening involves generating intermediate keyframes between two images that give the impression that the first one has evolved smoothly to the second image. For this purpose, we use properties like transforms - matrix, translate, scale, rotate etc.\n\nIn the below example, we are generating intermediate frames of paragraph elements to slide through from the start to the right edge of the browser.\n\np {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\nHere, the paragraph element specifies that the animation process should take 2 seconds for execution from start to the finish. This is done by using the animation-duration property. The animation-name of the @keyframes is defined by using the property animation-name. The intermediate keyframes are defined by using @keyframes rule. In the example, we have just 2 keyframes. The first keyframe starts at 0% and runs till the left margin of 100% which is the rightmost edge of the containing element. The second keyframe starts at 100% where the left margin is set as 0% and the width to be set as 100% which results in finishing the animation flush against the left edge of the container area."
  },
  {
    "id": "607",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we need to use clear property along with floats in CSS?",
    "answer": "The clear property along with floats is used for specifying which side of floating elements is not supposed to float. An element having clear property ensures that the element does not move up adjacent to the float. But the element will be moved down past the float.\n\nLet us understand this with the help of an example. We know that the floated objects do not add to the height of the objects where they reside. Consider we have a div element with class “floated_div” within another div element with id “main_div”.\n\n<html>\n    <head>\n    <style>\n        #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        }\n    </style>\n    </head>\n    <body>\n        <div id=\"main_div\">\n             <p>Clear Float Demo</p>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n        </div>\n    </body>\n</html>\nThe result of this code would be as shown below. We see that the squares that are expected to be within dev are not within the main parent div. How do we fix this?\n\n\nWe can do it just by adding <div style=\"clear:both\"></div> line at the end of the last floated element so that the floated elements are fit in properly within the main div container.\n\n<html>\n    <head>\n    <style>\n        #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        }\n    </style>\n    </head>\n    <body>\n        <div id=\"main_div\">\n             <p>Clear Float Demo</p>\n            \n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div style=\"clear:both\"></div>    <!-- Adding this fixed the issue -->\n        </div>\n    </body>\n</html>\nThe result of this will be:\n\n\n\n\n\n\nCSS (Cascading Style Sheets) is the language that styles and organizes web pages. It makes websites visually appealing and user-friendly. Mastering CSS is crucial whether you're a beginner or a seasoned developer.\n\nThis guide presents 60+ CSS interview questions and answers, categorized to help you prepare effectively, from fundamental concepts to advanced techniques.\n\nNote: Before proceeding to learn CSS interview questions and answers, if you are completely new to the language, we recommend building a solid foundation first by exploring our CSS Tutorial.\n\nCSS Interview Questions For Freshers"
  },
  {
    "id": "608",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is CSS?",
    "answer": "Cascading Style Sheets, fondly referred to as CSS, is a simply designed language intended to simplify the process of making web pages presentable. CSS allows you to apply styles to web pages."
  },
  {
    "id": "609",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we use CSS?",
    "answer": "We use CSS because of the following reasons:\n\nCSS Saves Time: You can write CSS once and reuse the same sheet on multiple HTML pages.\nEasy Maintenance: To make a global change simply change the style, and all elements in all the webpages will be updated automatically.\nSearch Engines: CSS is considered a clean coding technique, which means search engines won’t have to struggle to “read” its content."
  },
  {
    "id": "610",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the advantages of CSS?",
    "answer": "CSS plays an important role, by using CSS you simply got to specify a repeated style for an element once & use it multiple times because CSS will automatically apply the required styles.\nThe main advantage of CSS is that style is applied consistently across a variety of sites. One instruction can control several areas which are advantageous.\nWeb designers need to use a few lines of programming for every page improving site speed.\nCascading sheet not only simplifies website development but also simplifies maintenance as a change of one line of code affects the whole website and maintenance time."
  },
  {
    "id": "611",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the disadvantages of CSS?",
    "answer": "CSS, CSS 1 up to CSS3, result in creating confusion among web browsers.\nWith CSS, what works with one browser might not always work with another. The web developers need to test for compatibility, running the program across multiple browsers.\nThere exists a scarcity of security.\nAfter making the changes we need to confirm the compatibility if they appear. A similar change affects all the browsers."
  },
  {
    "id": "612",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the current version of CSS?",
    "answer": "CSS3 is the latest version of CSS."
  },
  {
    "id": "613",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is CSS different from CSS 3?",
    "answer": "CSS\n\nCSS3\n\nCSS is capable of positioning texts and objects. CSS is somehow backward compatible with CSS3.\tOn the other hand, CSS3 is capable of making the web page more attractive and takes less time to create. If you write CSS3 code in CSS, it will be invalid.\nResponsive designing is not supported in CSS\tCSS3 is the latest version, hence it supports responsive design.\nCSS cannot be split into modules.\tWhereas, whereas CSS3 can be breakdown into modules.\nUsing CSS, we cannot build 3D animation and transformation.\tBut in CSS3 we can perform all kinds of animation and transformations as it supports animation and 3D transformations.\nCSS is very slow as compared to CSS3\tWhereas, CSS3 is faster than CSS.\nTo know more about the topic refer to difference between CSS 3 and CSS."
  },
  {
    "id": "614",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Suggest Some Best CSS Frameworks?",
    "answer": "The best CSS frameworks are:\n\nBootstrap\nFoundation\nBulma\nUIKit\nSemantic UI\nMaterialize\nPure\nTailwind CSS"
  },
  {
    "id": "615",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the syntax for CSS?",
    "answer": "A CSS style rule consists of a selector, property, and its value. The selector points to the HTML element where CSS style is to be applied. The CSS property is separated by semicolons.\n\nSyntax:\n\nselector { \n    Property: value; \n}"
  },
  {
    "id": "616",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different ways to apply CSS to a webpage?",
    "answer": "There are three ways we can add add CSS to a webpage:\n\nInline CSS:Inline CSS contains the CSS property in the body section attached with the element known as inline CSS. This kind of style is specified within an HTML tag using the style attribute.\nInternal CSS:Internal CSS can be used when a single HTML document must be styled uniquely. The CSS ruleset should be within the HTML file in the head section i.e the CSS is embedded within the HTML file.\nExternal CSS:External CSS contains a separate CSS file which contains only style property with the help of tag attributes (For example class, id, heading, … etc). CSS property is written in a separate file with .css extension and should be linked to the HTML document using the link tag."
  },
  {
    "id": "617",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Which type of CSS holds the highest priority?",
    "answer": "Inline CSS has the highest priority, then comes Internal/Embedded followed by External CSS which has the least priority. Multiple style sheets can be defined on one page. If for an HTML tag, styles are defined in multiple style sheets then the below order will be followed.\n\nAs Inline has the highest priority, any styles that are defined in the internal and external style sheets are overridden by Inline styles.\nInternal or Embedded stands second in the priority list and overrides the styles in the external style sheet.\nExternal style sheets have the least priority. If there are no styles defined either in the inline or internal style sheet then external style sheet rules are applied for the HTML tags."
  },
  {
    "id": "618",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS Selectors?",
    "answer": "CSS Selectors: CSS Selectors are used to selecting HTML elements based on their element name, id, attributes, etc. It can select one or more elements simultaneously.\n\nElement Selectors: The element selector in CSS is used to select HTML elements which are required to be styled. In a selector declaration, there is the name of the HTML element, and the CSS properties which are to be applied to that element is written inside the brackets {}.\n\nSyntax:\n\nelement_name {\n    // CSS Property\n}\nid selector: The #id selector is used to set the style of the given id. The id attribute is the unique identifier in an HTML document. The id selector is used with a # character.\n\nSyntax:\n\n#id_name { \n    // CSS Property\n}\nclass selector: The .class selector is used to select all elements which belong to a particular class attribute. To select the elements with a particular class, use the (.) character with specifying the class name. The class name is mostly used to set the CSS property to the given class.\n\nSyntax:\n\n.class_name {\n    // CSS Property\n}"
  },
  {
    "id": "619",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we add comments in CSS?",
    "answer": "Comments are the statements in your code that are ignored by the compiler and are not executed. Comments are used to explain the code. They make the program more readable and understandable.\n\nSyntax:\n\n/* content */\nComments can be single-line or multi-line."
  },
  {
    "id": "620",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does the 'a' in rgba mean?",
    "answer": "RGBA contains A (Alpha) which specifies the transparency of elements. The value of alpha lies between 0.0 to 1.0 where 0.0. represents fully transparent and 1.0 represents not transparent.\nSyntax:\n\nh1 {\n    color:rgba(R, G, B, A);\n}"
  },
  {
    "id": "621",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS HSL Colors?",
    "answer": "HSL: HSL stands for Hue, Saturation, and Lightness respectively. This format uses the cylindrical coordinate system.\n\nHue: Hue is the degree of the color wheel. Its value lies between 0 to 360 where 0 represents red, 120 represents green and 240 represents a blue color.\nSaturation: It takes a percentage value, where 100% represents completely saturated, while 0% represents completely unsaturated (gray).\nLightness: It takes a percentage value, where 100% represents white, while 0% represents black.\nSyntax:\n\nh1 {\n    color:hsl(H, S, L);\n}\nExample:\n\n\n\n\n<html> \n    <head> \n        <title>CSS hsl color property</title> \n        <style> \n            h1{ \n                color:hsl(120, 100%, 30%); \n                text-align:center; \n            } \n        </style> \n    </head> \n    <body> \n        <h1> \n            GeeksforGeeks \n        </h1> \n    </body> \n</html>\nOutput:"
  },
  {
    "id": "622",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS backgrounds, list the properties?",
    "answer": "The CSS background properties are used to define the background effects for elements.\n\nCSS background properties are as follows:\n\nbackground-color: This property specifies the background color of an element.\nbackground-image: This property specifies an image to use as the background of an element. By default, the image is repeated so it covers the entire element.\nbackground-repeat: By default, the background image property repeats the image both horizontally and vertically.\nbackground-attachment: This property is used to fix the background ground image. The image will not scroll with the page.\nbackground-position: This property is used to set the image to a particular position."
  },
  {
    "id": "623",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different CSS border properties?",
    "answer": "CSS border properties allow us to set the style, color, and width of the border.\n\nBorder Style: The border-style property specifies the type of border. None of the other border properties will work without setting the border style.\nBorder Width: Border width sets the width of the border. The width of the border can be in px, pt, cm or thin, medium and thick.\nBorder Color: This property is used to set the color of the border. Color can be set using the color name, hex value, or RGB value. If the color is not specified border inherits the color of the element itself."
  },
  {
    "id": "624",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does margin: 40px 100px 120px 80px signify?",
    "answer": "CSS margins are used to create space around the element. We can set the different sizes of margins for individual sides (top, right, bottom, left).\n\nMargin properties can have the following values:\n\nLength in cm, px, pt, etc.\nWidth % of the element.\nMargin calculated by the browser: auto.\nTherefore, margin: 40px 100px 120px 80px signifies:\n\ntop = 40px\nright = 100px\nbottom = 120px\nleft = 80px"
  },
  {
    "id": "625",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between margin and padding?",
    "answer": "Margin is used to create space around elements and padding is used to create space around elements inside the border.\nWe can set the margin property to auto but we cannot set the padding property to auto.\nIn Margin property we can allow negative or float number but in padding we cannot allow negative values.\nMargin and padding target all the 4 sides of the element. Margin and padding will work without the border property also. The difference will be more clear with the following example.MarginAndPaddingAndBorder\nExample:\n\n\n\n\n<!DOCTYPE html> \n<html> \n<head> \n    <style> \n        h2 { \n            margin:50px; \n            border:70px solid green; \n            padding:80px; \n        } \n    </style> \n</head> \n​\n<body> \n    <h1>GEEKSFORGEEKS</h1> \n    <h2> \n        Padding properties \n    </h2> \n</body> \n</html>\nOutput:"
  },
  {
    "id": "626",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is CSS Box Model?",
    "answer": "The CSS box model is a container that contains multiple properties including borders, margin, padding, and the content itself. It is used to create the design and layout of web pages. It can be used as a toolkit for customizing the layout of different elements. The web browser renders every element as a rectangular box according to the CSS box model.\nBox-Model has multiple properties in CSS. Some of them are given below:\n\nborders\nmargins\npadding\nContent\nThe following figure illustrates the box model.\n \n\nbox model property\n\nBorder Area: It is the area between the box’s padding and margin. Its dimensions are given by the width and height of the border.\nMargin Area: This area consists of space between border and margin. The dimensions of the Margin area are the margin-box width and the margin-box height. It is useful to separate the element from its neighbors.\nPadding Area: It includes the element’s padding. This area is actually the space around the content area and within the border box. Its dimensions are given by the width of the padding-box and the height of the padding-box.\nContent Area: This area consists of content like text, images, or other media content. It is bounded by the content edge and its dimensions are given by content box width and height."
  },
  {
    "id": "627",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between CSS border and outline?",
    "answer": "CSS border properties allow us to set the style, color, and width of the border.\nCSS outline property allows us to draw a line around the element, outside the border.\nExample:\n\n\n\n\n<!DOCTYPE html>\n<html lang=\"en\">\n​\n<head>\n    <style>      \n        p {\n            outline: 5px solid #ddd;\n            border: 1px solid #000;\n        }\n    </style>\n</head>\n​\n<body>\n    <p>This is a paragraph.</p>\n</body>\n​\n</html>\nOutput:\n\n\n\nDifferences:\n\nUnlike borders, outlines don't allow us to set each edge to a different width, or set different colors and styles for each edge. An outline is the same on all sides.\nOutlines cannot be circular.\nOutlines do not take up space, because they are always placed on top of the box of the element."
  },
  {
    "id": "628",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we format text in CSS?",
    "answer": "CSS text formatting properties are used to format text and style text.\nCSS text formatting includes the following properties:\n\nText-color\nText-alignment\nText-decoration\nText-transformation\nText-indentation\nLetter spacing\nLine height\nText-direction\nText-shadow\nWord spacing"
  },
  {
    "id": "629",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different CSS link states?",
    "answer": "A link is a connection from one web page to another web page. CSS property can be used to style the links in various different ways.\n\nStates of Link: Before discussing CSS properties, it is important to know the states of a link. Links can exist in different states and they can be styled using pseudo-classes.\nThere are four states of links given below:\n\na:link: This is a normal, unvisited link.\na:visited: This is a link visited by a user at least once\na:hover: This is a link when the mouse hovers over it\na:active: This is a link that is just clicked."
  },
  {
    "id": "630",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can we add an image as a list item marker?",
    "answer": "To add an image as the list-item marker in a list, we use the list-style-image property in CSS. \n\nSyntax:\n\nlist-style-image: none | url | initial | inherit;"
  },
  {
    "id": "631",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we hide an element in CSS?",
    "answer": "The style display property is used to hide and show the content of HTML DOM by accessing the DOM element using JavaScript/jQuery.\n\nTo hide an element, set the style display property to “none”.\n\ndisplay: \"none\";\nTo show an element, set the style display property to “block”.\n\ndisplay:\"block\";\nExample:\n\n\n\n\n<!DOCTYPE html>\n<html>\n​\n<head>\n    <style>\n        .visible {\n            display: block;\n        }\n        \n        .hidden {\n            display: none;\n        }\n    </style>\n</head>\n​\n<body>\n    <h1 class=\"visible\">visible heading</h1>\n    <h1 class=\"hidden\">hidden heading</h1>\n    <p>\n        Note: The h1 element with display: none; \n        does not take up any space.\n    </p>\n</body>\n​\n</html>\nOutput:\n\nhide element \n\nThe visibility property is used to hide or show the content of HTML elements. The visibility property specifies that the element is currently visible on the page. The ‘hidden’ value can be used to hide the element. This hides the element but does not remove the space taken by the element, unlike the display property.\n\nSyntax:\n\nvisibility : 'hidden';\nvisibility :'visible';\nExample:\n\n\n\n\n<!DOCTYPE html>\n<html>\n​\n<head>\n    <style>\n        .visible {\n            visibility: visible;\n        }\n​\n        .hidden {\n            visibility: hidden;\n        }\n    </style>\n</head>\n​\n<body>\n    <h2 class=\"visible\">This heading is visible</h2>\n    <h2 class=\"hidden\">This heading is hidden</h2>\n    <p>Note: The hidden element still takes up space.</p>\n</body>\n​\n</html>\nOutput:\n\nOutput"
  },
  {
    "id": "632",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between display: none and visibility: hidden?",
    "answer": "Both of the property is quite useful in CSS. The visibility: “hidden”; property is used to specify whether an element is visible or not in a web document but the hidden elements take up space in the web document. The visibility is a property in CSS that specifies the visibility behavior of an element and display: “none” property is used to specify whether an element is exist or not on the website.\n\nSyntax:\n\nVisibility property:\nvisibility: visible| hidden | collapse | initial | inherit;\nDisplay property:\ndisplay: none |  inline | block | inline-block;\nSo, the difference between display: “none”; and visibility: “hidden”;, right from the name itself we can tell the difference as display: “none”, completely gets rids of the tag, as it had never existed in the HTML page whereas visibility: “hidden”;, just makes the tag invisible it will still be on the HTML page occupying space it’s just invisible.\n\nCSS Intermediate Interview Questions"
  },
  {
    "id": "633",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can we overlap elements in CSS?",
    "answer": "Creating an overlay effect simply means putting two div together at the same place but both the div appear when needed i.e while hovering or while clicking on one of the div to make the second one appear. Overlays are very clean and give the webpage a tidy look. It looks sophisticated and is simple to design. Overlays can create using two simple CSS properties:\n\nThe z-index propertyis used to displace elements on the z-axis i.e in or out of the screen. It is used to define the order of elements if they overlap with each other.\n\nSyntax:\n\nz-index: auto | number | initial | inherit;\nThe positionproperty in CSS tells about the method of positioning for an element or an HTML entity."
  },
  {
    "id": "634",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the various positioning properties in CSS?",
    "answer": "The position property in CSS tells about the method of positioning for an element or an HTML entity. There are five different types of position properties available in CSS:\n\nFixed\nStatic\nRelative\nAbsolute\nSticky\nFixed: Any HTML element with position: fixed property will be positioned relative to the viewport. An element with fixed positioning allows it to remain at the same position even as we scroll the page. We can set the position of the element using the top, right, bottom, and left.\nStatic: This method of positioning is set by default. If we don’t mention the method of positioning for any element, the element has the position: static method by default. By defining Static, the top, right, bottom and left will not have any control over the element. The element will be positioned with the normal flow of the page.\nRelative: An element with position: relative is positioned relatively with the other elements which are sitting at top of it. If we set its top, right, bottom, or left, other elements will not fill up the gap left by this element.\nAbsolute: An element with position: absolute will be positioned with respect to its parent. The positioning of this element does not depend upon its siblings or the elements which are at the same level.\nSticky: Element with position: sticky and top: 0 played a role between fixed & relative based on the position where it is placed. If the element is placed in the middle of the document then when the user scrolls the document, the sticky element starts scrolling until it touches the top. When it touches the top, it will be fixed at that place in spite of further scrolling. We can stick the element at the bottom, with the bottom property."
  },
  {
    "id": "635",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is CSS overflow?",
    "answer": "The CSS overflow controls the big content. It tells whether to clip content or to add scroll bars. The overflow contains the following property:\nVisible: The content is not clipped and is visible outside the element box.\nHidden: The overflow is clipped and the rest of the content is invisible.\nScroll: The overflow is clipped but a scrollbar is added to see the rest of the content. The scrollbar can be horizontal or vertical.\nAuto: It automatically adds a scrollbar whenever it is required.\nOverflow-x and Overflow-y: This property specifies how to change the overflow of elements. x deals with horizontal edges and y deals with vertical edges."
  },
  {
    "id": "636",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does the CSS float property do?",
    "answer": "Float is a CSS property written in a CSS file or directly in the style of an element. The float property defines the flow of content. Below are the types of floating properties:\n\nFloat type\tUsage\nfloat: left\tElement floats on the left side of the container\nfloat: right\tElement floats on the right side of the container\nfloat: inherit\tThe element inherits the floating property of its parent (div, table, etc…)\nfloat: none\tElement is displayed as it is (Default)."
  },
  {
    "id": "637",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does display:inline-block do?",
    "answer": "Inline-block: This feature uses both properties: block and inline. So, this property aligns the div inline but the difference is it can edit the height and the width of the block. Basically, this will align the div both in the block and inline fashion.\n\nExample:\n\n\n\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>CSS | Display property</title>\n        <style>\n        #main{\n                height: 100px;\n                width: 200px;\n                background: teal;\n                display: inline-block;\n            \n            }\n            #main1{\n                height: 100px;\n                width: 200px;\n                background: cyan;\n                display: inline-block;\n            \n            }\n            #main2{\n                height: 100px;\n                width: 200px;\n                background: green;\n                display: inline-block;\n            }\n            .gfg {\n                margin-left:200px;\n                font-size:42px;\n                font-weight:bold;\n                color:#009900;\n            }\n            .geeks {\n                font-size:25px;\n                margin-left:210px;\n            }\n            .main {\n                margin:50px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class = \"gfg\">GeeksforGeeks</div>\n        <div class = \"geeks\">display: Inline-block; property</div>\n        <div class = \"main\">\n            <div id=\"main\"> BLOCK 1 </div>\n            <div id=\"main1\"> BLOCK 2</div>\n            <div id=\"main2\">BLOCK 3 </div>\n        </div>\n    </body>\n</html>\nOutput:"
  },
  {
    "id": "638",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we vertically center a text in CSS?",
    "answer": "This solution will work for a single line and multiple lines of text, but it still requires a fixed height container:\n\ndiv {\n    height: 200px;\n    line-height: 200px;\n    text-align: center;\n    border: 2px dashed #f69c55;\n}\nspan {\n    display: inline-block;\n    vertical-align: middle;\n    line-height: normal;\n}\ndiv{\n    GeeksforGeeks \n}"
  },
  {
    "id": "639",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we center an image in CSS?",
    "answer": "Given an image and the task is to set the image to align to center (vertically and horizontally) inside a bigger div. It can be done by using the position property of the element.\n\nExample: This example uses the position property to make the image align to the center.\n\n\n\n\n<!DOCTYPE html> \n<html> \n​\n<head>     \n    <title> \n        Horizontal and Vertical alignment \n    </title> \n    \n    <!-- Style to set horizontal and \n        vertical alignment -->\n    <style> \n        #Outer { \n            border: 2px solid black; \n            height: 300px; \n            position: relative; \n        } \n        img { \n            position: absolute; \n            margin: auto; \n            top: 0; \n            left: 0; \n            right: 0; \n            bottom: 0; \n        } \n    </style> \n</head> \n​\n<body> \n    <div id = \"Outer\"> \n        <img src= \n\"https://media.geeksforgeeks.org/wp-content/uploads/gfgbg.png\"/> \n    </div> \n</body> \n​\n</html>\nOutput:"
  },
  {
    "id": "640",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS Combinators?",
    "answer": "CSS combinators are explaining the relationship between two selectors. CSS selectors are the patterns used to select the elements for style purposes. A CSS selector can be a simple selector or a complex selector consisting of more than one selector connected using combinators.\nThere are four types of combinators available in CSS which are discussed below:\n\nGeneral Sibling selector: The general sibling selector is used to select the element that follows the first selector element and also shares the same parent as the first selector element. This can be used to select a group of elements that share the same parent element.\nAdjacent Sibling selector: The Adjacent sibling selector is used to select the element that is adjacent or the element that is next to the specified selector tag. This combinator selects only one tag that is just next to the specified tag.\nChild Selector: This selector is used to select the element that is the immediate child of the specified tag. This combinator is stricter than the descendant selector because it selects only the second selector if it has the first selector element as its parent.\nDescendant selector: This selector is used to select all the child elements of the specified tag. The tags can be the direct child of the specified tag or can be very deep in the specified tag. This combinator combines the two selectors such that selected elements have an ancestor same as the first selector element."
  },
  {
    "id": "641",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are pseudo-classes in CSS?",
    "answer": "A Pseudo class in CSS is used to define the special state of an element. It can be combined with a CSS selector to add an effect to existing elements based on their states. For Example, changing the style of an element when the user hovers over it, or when a link is visited. All of these can be done using Pseudo Classes in CSS.\n\nNote that pseudo-class names are not case-sensitive.\n\nSyntax:\n\nselector: pseudo-class{\n     property: value;\n}\nThere are many Pseudo-classes in CSS but the ones which are most commonly used are as follows:\n\n:hover Pseudo-class: This pseudo-class is used to add a special effect to an element when our mouse pointer is over it. The below example demonstrates that when your mouse enters the box area, its background color changes from yellow to orange.\n:active Pseudo-class: This pseudo-class is used to select an element that is activated when the user clicks on it. The following example demonstrates that when you click on the box, its background color changes for a moment.\n:focus Pseudo-class: This pseudo-class is used to select an element that is currently focussed by the user. It works on user input elements used in forms and is triggered as soon as the user clicks on it. In the following example, the background color of the input field which is currently focused changes.\n:visited Pseudo-class: This pseudo-class is used to select the links which have been already visited by the user. In the following example, the color of the link changes once it is visited."
  },
  {
    "id": "642",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are pseudo-elements in CSS?",
    "answer": "Pseudo Elements: Pseudo-element in CSS is used to add style to specified parts of an element. Example: Using style before or after an element.\n\nSyntax:\n\nselector::pseudo-element { \n    property:value; \n} \nUse of Pseudo-Element: Below is some examples to describe the use of pseudo-element.\n\n::before Pseudo-element: It is used to add some CSS property before an element when that element is called.\n::after Pseudo-element: It is used to add some CSS property after an element when that element is called.\n::first-letter Pseudo-element: It is used to make changes to the first letter of an element.\n::first-line Pseudo-element: It is used to make changes to the first line of an element."
  },
  {
    "id": "643",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we add gradients in CSS?",
    "answer": "There are two types of Gradients:"
  },
  {
    "id": "644",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Linear Gradients: It includes the smooth color transitions to going up, down, left, right, and diagonally. A minimum of two colors are required to create a linear gradient. More than two color elements can be possible in linear gradients. The starting point and the direction are needed for the gradient effect.",
    "answer": "Syntax:\n\nbackground-image: linear-gradient(direction, color-stop1, color-stop2, ...);"
  },
  {
    "id": "645",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "CSS Radial Gradients: A radial gradient differs from a linear gradient. It starts at a single point and emanates outward. By default, the first color starts at the center position of the element and then fades to the end color towards the edge of the element. Fade happens at an equal rate until specified.",
    "answer": "Syntax:\n\nbackground-image: radial-gradient(shape size at position, start-color, ..., l"
  },
  {
    "id": "646",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can we add 2D transformations to our project using CSS?",
    "answer": "Yes, we can, a transformation modifies an element by its shape, size, and position. It transforms the elements along the X-axis and Y-axis.\nThere are six main types of 2D transformations which are listed below:\n\ntranslate()\nrotate()\nscale()\nskewX()\nskewY()\nmatrix()"
  },
  {
    "id": "647",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can we add 3D transformations to our project using CSS?",
    "answer": "Yes, it allows changing elements using 3D transformations. In 3D transformation, the elements are rotated along the X-axis, Y-axis, and Z-axis.\n\nThere are three main types of transformation which are listed below:\n\nrotateX()\nrotateY()\nrotateZ()"
  },
  {
    "id": "648",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS transitions?",
    "answer": "Transitions in CSS allow us to control the way in which transition takes place between the two states of the element. \n\nThe transition allows us to determine how the change in color takes place. We can use the transitions to animate the changes and make the changes visually appealing to the user and hence, giving a better user experience and interactivity. In this article, we will show you how to animate the transition between the CSS properties.\n\nThere are four CSS properties that you should use, all or in part (at least two, transition-property and transition-duration, is a must), to animate the transition. All these properties must be placed along with other CSS properties of the initial state of the element:\n\ntransition-property: This property allows you to select the CSS properties which you want to animate during the transition(change).\nSyntax:\n\ntransition-property: none | all | property | property1,\nproperty2, ..., propertyN;\ntransition-duration: This property allows you to determine how long it will take to complete the transition from one CSS property to the other.\nSyntax:\n\ntransition-duration: time;\nHere, time can be in seconds(s) or milliseconds(ms), you should use ‘s’ or ‘ms’ after the number (without quotes).\n\ntransition-timing-function: This property allows you to determine the speed of change and the manner of change, during the transition. Like, the change should be fast at the beginning and slow at the end, etc.\nSyntax:\n\ntransition-timing-function: ease|ease-in|ease-out|ease-in-out|linear|\nstep-start|step-end;\ntransition-delay: This property allows you to determine the amount of time to wait before the transition actually starts to take place.\nSyntax:\n\ntransition-delay: time;\nHere, again, time can be in seconds(s) or milliseconds(ms), and you should use ‘s’ or ‘ms’ after the number (without quotes).\n\nThe Shorthand Property You can combine all the four transition properties mentioned above, into one single shorthand property, according to the syntax given below. This saves us from writing long codes and prevents us from getting messy. Note the ordering of property, it has significance.\nSyntax:\n\ntransition: (property name) | (duration) | (timing function) | (delay);"
  },
  {
    "id": "649",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we animate using CSS?",
    "answer": "CSS Animations is a technique to change the appearance and behavior of various elements in web pages. It is used to control the elements by changing their motions or display. It has two parts, one which contains the CSS properties which describe the animation of the elements and the other contains certain keyframes which indicate the animation properties of the element and the specific time intervals at which those have to occur.\n\nThe @keyframes rule: Keyframes are the foundations with the help of which CSS Animations works. They define the display of the animation at the respective stages of its whole duration. For example: In the following code, the paragraph changes its color with time. At 0% completion, it is red, at 50% completion it is of orange color and at full completion i.e. at 100%, it is brown.\n\nExample:\n\n\n\n\n<!DOCTYPE html> \n<html> \n    <head> \n        <style> \n            #gfg { \n                animation-name: color; \n                animation-duration: 25s; \n                padding-top:30px; \n                padding-bottom:30px; \n                font-family:Times New Roman; \n            } \n            #geeks { \n                font-size: 40px; \n                text-align:center; \n                font-weight:bold; \n                color:#090; \n                padding-bottom:5px; \n            } \n            #geeks1 { \n                font-size:17px; \n                font-weight:bold; \n                text-align:center; \n            } \n            @keyframes color { \n                0% { \n                    background-color: red; \n                } \n                50% { \n                    background-color: orange; \n                } \n                100% { \n                    background-color: brown; \n                } \n            } \n        </style> \n    </head> \n    <body> \n        <div id = \"gfg\"> \n            <div id = \"geeks\">GeeksforGeeks</div> \n            <div id = \"geeks1\">\n                A computer science portal for geeks\n            </div> \n        </div> \n    </body> \n</html>\nOutput:\n\nout1\nCSS Interview Questions for Advanced"
  },
  {
    "id": "650",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does the CSS box-sizing property do?",
    "answer": "The box-sizing CSS property defines how the user should calculate the total width and height of an element i.e. padding and borders, are to be included or not.\n\nSyntax:\n\nbox-sizing: content-box|border-box;\nProperty Values:\n\ncontent-box: This is the default value of the box-sizing property. In this mode, the width and height properties include only the content. Border and padding are not included in it i.e if we set an element’s width to 200 pixels, then the element’s content box will be 200 pixels wide, and the width of any border or padding will be added to the final rendered width.\nborder-box: In this mode, the width and height properties include content, padding, and borders i.e if we set an element’s width to 200 pixels, that 200 pixels will include any border or padding we added, and the content box will shrink to absorb that extra width. This typically makes it much easier to size elements."
  },
  {
    "id": "651",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we make our website responsive using CSS?",
    "answer": "Media query is used to create a responsive web design. It means that the view of a web page differs from system to system based on screen or media types.\n\nMedia queries can be used to check many things:\n\nwidth and height of the viewport\nwidth and height of the device\nOrientation\nResolution\nA media query consist of a media type that can contain one or more expression which can be either true or false. The result of the query is true if the specified media matches the type of device the document is displayed on. If the media query is true then a style sheet is applied.\n\nSyntax:\n\n@media not | only mediatype and (expression) {\n    // Code content\n}"
  },
  {
    "id": "652",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is CSS flexbox?",
    "answer": "It is also called a flexible box model. It is basically a layout model that provides an easy and clean way to arrange items within a container. Flexbox is different from the block model which is vertically biased and the inline which is horizontally biased.\n\nFlexbox was created for small-scale layouts and there’s another standard called grids which are geared more towards larger-scale layouts, It works similar to the way to Twitter bootstrap grid system works. Flexbox is responsive and mobile-friendly. To start with flexbox firstly create a flex container. To create a flex container set the display property to flex.\n\nSyntax:\n\n.main-container {\n    display: flex;\n}\nFlex Properties:\n\nflex-direction\nflex-wrap\nflex-flow\njustify-content\nalign-items\nalign-content"
  },
  {
    "id": "653",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is CSS Grid?",
    "answer": "It is a CSS property that offers a grid-based layout system, with rows and columns, making it easier to design web pages without floats and positioning.\n\nCSS grid \n\nSyntax:\n\ngrid: none|grid-template-rows / grid-template-columns|grid-template-areas|\ngrid-template-rows / [grid-auto-flow] grid-auto-columns|[grid-auto-flow] \ngrid-auto-rows / grid-template-columns|initial|inherit;"
  },
  {
    "id": "654",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between flexbox and grid?",
    "answer": "1. Dimensionality and Flexibility:\n\nFlexbox offers greater control over alignment and space distribution between items. Being one-dimensional, Flexbox only deals with either columns or rows.\nThe grid has two-dimension layout capabilities which allow flexible widths as a unit of length. This compensates for the limitations in Flex."
  },
  {
    "id": "655",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Alignment:",
    "answer": "Flex Direction allows developers to align elements vertically or horizontally, which is used when developers create and reverse rows or columns.\nCSS Grid deploys fractional measure units for grid fluidity and auto-keyword functionality to automatically adjust columns or rows."
  },
  {
    "id": "656",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Item Management",
    "answer": "Flex Container is the parent element while Flex Item represents the children. The Flex Container can ensure balanced representation by adjusting item dimensions. This allows developers to design for fluctuating screen sizes.\nGrid supports both implicit and explicit content placement. Its inbuilt automation allows it to automatically extend line items and copy values into the new creation from the preceding item.\nProperty\n\nGrid\n\nFlexbox\n\nDimension\n\nTwo – Dimensional\n\nOne – Dimensional\n\nFeatures\n\nCan flex combination of items through space-occupying Features\n\nCan push content element to extreme alignment\n\nSupport Type\n\nLayout First\n\nContent First"
  },
  {
    "id": "657",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the best way to include a CSS file? Why use @import?",
    "answer": "The External Style Sheet (using HTML <link> Tag) is the best method that is used to link the element. Maintaining and re-using the CSS file across different pages is easy and efficient. The <link> tag is placed in the HTML <head> element. To specify a media type=\"text/css” for a Cascading Style Sheet <type> attribute which is used to ignore style sheet types that are not supported in a browser.\n\n@import rule: The @import rule is used to import one style sheet into another style sheet. This rule also supports media queries so that the user can import the media-dependent style sheet. The @import rule must be declared at the top of the document after any @charset declaration.\n\nCharacteristics of @import:\n\nThe @import at-rule is used to import a style sheet into an HTML page or another style sheet.\nThe @import at-rule is also used to add media queries, therefore import is media-dependent.\nIt is always to be declared at the top of the document.\nSyntax:\n\n@import url|string list-of-mediaqueries;"
  },
  {
    "id": "658",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How case-sensitive is CSS?",
    "answer": "All CSS style sheets are case-insensitive, except for portions that are not under the control of CSS. For example, the case sensitivity due to values of the HTML attributes \"id\" and \"class\", font names, and URIs lies outside the scope of this specification."
  },
  {
    "id": "659",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does CSS Animations allow?",
    "answer": "CSS allows the animation of HTML elements without using JavaScript. An animation lets an element systematically and with proper timing, change from one style to another. You can change whatever CSS properties you want, and end a number of times, as you want it. To use CSS animation, you must first specify some @keyframes for the animation. @keyframes will describe which styles that element will have at specific times. We will be using a basic example such as the animation of a battery charging.\n\nThe @keyframes property has the option to divide the animation time into parts/percentage and perform an activity that is specified for that part of the whole duration of the animation. The @keyframes property is given to each animation according to the name of that animation. It allows you to run the animation infinitely as well."
  },
  {
    "id": "660",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is @keframes used for?",
    "answer": "Keyframes are the foundations with the help of which CSS Animations works. They define the display of the animation at the respective stages of its whole duration. For example: In the following code, the paragraph changes its color with time. At 0% completion, it is red, at 50% completion it is of orange color and at full completion i.e. at 100%, it is brown.\n\nExample:\n\n\n\n\n<!DOCTYPE html> \n<html> \n​\n<head> \n    <style> \n        div { \n            width: 200px; \n            height: 200px; \n            margin: 200px; \n            border-radius: 100px; \n            background-color: red; \n            animation: circle 8s infinite; \n        } \n​\n        @keyframes circle { \n            0% { \n                background-color: red; \n            } \n​\n            25% { \n                background-color: yellow; \n            } \n​\n            50% { \n                background-color: blue; \n            } \n​\n            100% { \n                background-color: green; \n            } \n        } \n    </style> \n</head> \n​\n<body> \n    <div></div> \n</body> \n​\n</html>\nOutput:\n\nkey Frames"
  },
  {
    "id": "661",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS counters?",
    "answer": "Counters in CSS are basically variables that can be used for numbering and values of CSS counters may be incremented by CSS rules. For example, CSS counters can be used to increment the numbering of the headings automatically. In HTML, the <ol> tag is used to give the ordered numbers to list items but CSS contains a counter to give order elements in some other fashion.\n\nCSS counters properties: CSS counters contains the following properties:\n\ncounter-reset: It is used to reset a counter.\ncounter-increment: It basically increments a counter value.\ncontent: It is used to generate content.\ncounter() or counters() function: The value of a counter can be displayed using either the counter() or counters() function in a content property. These two functions basically used to add the value of a counter to the element.\nInitialization of the CSS Counter: To use the CSS counter property firstly it must be created with the counter-reset property and the first step is resetting the counter. The counter by default initialized to a value 0(zero) with the counter-reset property.\n\nSyntax:\n\ncounter-reset: myCounter;\nIncrementation and Use of CSS Counter: To increment the counter use the CSS counter-increment property.\n\nSyntax:\n\ncounter-increment: myCounter;\nThe counter() or counters() function in content is used to display the content in a particular order.\n\nSyntax:\n\ncontent: counter(myCounter);"
  },
  {
    "id": "662",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is meant by universal selector?",
    "answer": "The * selector in CSS is used to select all the elements in an HTML document. It also selects all elements which are inside under another element. It is also called the universal selector.\n\nSyntax:\n\n* {\n    // CSS property\n} \nTo know more about the topic refer to Universal selector."
  },
  {
    "id": "663",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is RWD?",
    "answer": "Responsive Web Design comprises two words i.e., responsive and web design. Responsive means to respond and web design means to design a website. Therefore, responsive web design generally means the website that responds to or resizes or adjusts itself depending upon the screen size it is being seen through.\n\nIt automatically adjusts to fit the user’s screen whether it’s desktop, laptop, mobile, tablet, etc. It only uses one layout for a web page and it can be done either using CSS and HTML or CSS3 and HTML5.  \n\nTo know more about the topic refer to RWD ."
  },
  {
    "id": "664",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is thedifference between class and id selector?",
    "answer": "Id selector(“#”): The id selector selects the id attribute of an HTML element to select a specific element. An id is always unique within the page so it is chosen to select a single, unique element. It is written with the hash character (#), followed by the id of the element.\n\nSyntax:\n#element_id_name{\n    // CSS properties\n}\nClass Selector(“.”): The class selector selects HTML elements with a specific class attribute. It is used with a period character “.” (full stop symbol) followed by the class name.\n\nSyntax:\n.element_class_name{\n    // CSS properties\n}\nClass \".\"\n\nId \"#\"\n\nThe class selector “.” is used to represent class=”class_name” in HTML element.\tThe id selector “#” is used to represent id=”id_name” in HTML element.\nEach elements can contain more that one “.” selector means that elements is containing more than one class which is separated by space, they will be selected by multiple dots like .class1 .class2 …. and so on.\tEach element can contain only one “#” selector, not more than one unlike class selectors.\nThe “.” selectors are not unique, same selectors can applicable on multiple elements, if the HTML elements holds the same class property like a list of elements can contains the same class."
  },
  {
    "id": "665",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we use pagination in CSS?",
    "answer": "Pagination is the process of dividing the document into pages and providing them with numbers.\n\nTypes of Pagination: There are many types of pagination in CSS. Some of them are given below:\n\nSimple Pagination\nActive and Hoverable Pagination\nRounded Active and Hoverable Buttons\nHoverable Transition Effect\nBordered Pagination\nRounded Border Pagination\nCentered Pagination\nSpace between Pagination\nPagination Size\nSimple Pagination: This is the basic form of pagination.\n\nSyntax:\n\n.pagination {\n    display:type\n}\n.pagination body {\n    color:colorname\n    decoration:type\n}"
  },
  {
    "id": "666",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is CSS Image reflection?",
    "answer": "The box-reflect property is used to create an image reflection.\n\nAttributes:\n\nbelow: to create a reflection below the original image\nabove: to create a reflection above the original image\nleft: to create a reflection on the left side of the original image\nright: to create a reflection on the right side of the original image\nExample:\n\n\n\n\n<!DOCTYPE html>\n<html>\n​\n<head>\n    <style>\n        img {\n            -webkit-box-reflect: right;\n        }\n    </style>\n</head>\n​\n<body>\n    <h1>CSS Image Reflection</h1>\n    <p>Shows the reflection of the image on right side:</p>\n    <img src=\n\"https://media.geeksforgeeks.org/wp-content/uploads/20210322123023/gfg2.png\">\n</body>\n​\n</html>\nOutput:\n\nImage Reflection"
  },
  {
    "id": "667",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we create multiple columns of text-like newspapers using CSS?",
    "answer": "The multiple columns are used to create column layouts on the web pages. There are many column properties in CSS which are listed below: \n\ncolumn-count\ncolumn-gap\ncolumn-rule-style\ncolumn-rule-width\ncolumn-rule-color\ncolumn-rule\ncolumn-span\ncolumn-width\nExample:\n\n\n\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Column-count property</title>\n        <style>\n        .geeks_content {\n            -webkit-column-count: 3;\n            -moz-column-count: 3;\n            column-count: 3;\n            padding-top:35px;\n            text-align:justify;\n        }\n        .gfg {\n            text-align:center;\n            font-size:40px;\n            font-weight:bold;\n            color:green;\n        }\n        .geeks {\n            text-align:center;\n        }\n        </style>\n    </head>\n    <body>\n        <div class=\"gfg\">GeeksforGeeks</div>\n        <div class = \"geeks\">A computer science portal for geeks</div>\n        <div class=\"geeks_content\">\n            Sudo Placement: Prepare for the Recruitment\n            drive of product based companies like Microsoft,\n            Amazon, Adobe etc with a free online placement\n            preparation course. The course focuses on\n            various MCQ's & Coding question likely to be\n            asked in the interviews & make your upcoming \n            placement season efficient and successful. \n            Placement preparation solely depends on the\n            company for which you are preparing. There \n            are basically three different categories \n            into which we can divide the companies visiting \n            campuses for placements based on their recruitment \n            process. Mass Recruiters, Tech Giants, Others / Start-ups\n            Companies belonging to the above categories have \n            their own recruitment process. In this course, we\n            will try to cover every possible detail required\n            to know for cracking interview of the companies \n            falling in each of the above categories.\n        </div>\n    </body>\n</html>\nOutput:\n\nMultiple Items"
  },
  {
    "id": "668",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we give a shadow effect to our text in CSS?",
    "answer": "The approach of this article is to add a shadow using the text-shadow property in CSS. This property accepts a list of a comma-separated list of shadows to be applied to the text. The default value of the text-shadow property is “none”.\n\nSyntax:\n\ntext-shadow: h-shadow v-shadow blur-radius color|none|initial|"
  },
  {
    "id": "669",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is !important?",
    "answer": "The !important property in CSS is used to provide more weight (importance) than normal property. In CSS, the !important means that “this is important”, ignore all the subsequent rules, and apply !important rule and the !important keyword must be placed at the end of the line, immediately before the semicolon.\n\nIn other words, it adds importance to all the sub-properties that the shorthand property represents.\nIn normal use, a rule defined in an external style sheet which is overruled by a style defined in the head of the document, which in turn, is overruled by an inline style within the element itself (assuming equal specificity of the selectors).\nDefining a rule with the !important attribute that discards the normal concerns as regards the later rule overriding the earlier ones.\nSo, it is used for overriding the styles that are previously declared in other style sources, in order to achieve a certain design.\nSyntax:\n\nelement {\n    color: blue  !important;\n    font-size: 14px !important; \n    ...\n}"
  },
  {
    "id": "670",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is specificity in CSS?",
    "answer": "When more than one set of CSS rules applies to the same element, the browser will have to decide which specific set will be applied to the element. The rules the browser follows are collectively called Specificity\n\nSpecificity Rules include:\n\nCSS style applied by referencing external stylesheet has the lowest precedence and is overridden by Internal and inline CSS.\nInternal CSS is overridden by inline CSS.\nInline CSS has the highest priority and overrides all other selectors.\nSpecificity Hierarchy: Every element selector has a position in the Hierarchy.\n\nInline style: Inline style has the highest priority.\nIdentifiers(ID): ID has the second-highest priority.\nClasses, pseudo-classes, and attributes: Classes, pseudo-classes, and attributes have come next.\nElements and pseudo-elements: Elements and pseudo-elements have the lowest priority."
  },
  {
    "id": "671",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the attribute selectors?",
    "answer": "The CSS Attribute Selector is used to select an element with some specific attribute or attribute value. It is an excellent way to style the HTML elements by grouping them based on some specific attributes and the attribute selector will select those elements with similar attributes.\nThere are several types of attribute selectors which are discussed below:\n\n[attribute] Selector: This type of attribute selector is used to select all the elements that have the specified attribute and applies the CSS property to that attribute. For example, the selector [class] will select all the elements with the style attribute.\n[attribute = “value”] Selector: This selector is used to select all the elements whose attribute has the value exactly the same as the specified value.\n[attribute~=”value”] Selector: This selector is used to select all the elements whose attribute value is a list of space-separated values, one of which is exactly equal to the specified value.\n[attribute|=”value”] Selector: This selector is used to select all the elements whose attribute has a hyphen-separated list of values beginning with the specified value. The value has to be a whole word either alone or followed by a hyphen.\n[attribute^=”value”] Selector: This selector is used to select all the elements whose attribute value begins with the specified value. The value doesn’t need to be a whole word.\n[attribute$=”value”] Selector: This selector is used to select all the elements whose attribute value ends with the specified value. The value doesn’t need to be a whole word.\n[attribute*=”value”] Selector: This selector selects all the elements whose attribute value contains the specified value present anywhere. The value doesn’t need to be a whole word."
  },
  {
    "id": "672",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does CSS stand for and what is its primary use?",
    "answer": "Cascading Style Sheets (CSS) is primarily designed to separate web page content from its visual presentation. This allows for a consistent and adaptable design across multiple web pages.\n\nKey Concepts\nSelectors: Elements to which the style rules apply.\nProperties: Visual features, such as font-size, color, and background.\nValues: Specific settings for properties, like 'red' for the color property.\nVisual Example\nHere is the HTML code:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <header>\n        <h1>Welcome to Our Site</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n    <section>\n        <h2>Latest News</h2>\n        <article>\n            <h3>Breaking News: Big Event Tomorrow</h3>\n            <p>Join us for our biggest event of the year!</p>\n        </article>\n    </section>\n    <footer>\n        &copy; 2022 YourSite\n    </footer>\n</body>\n</html>\nAnd, here is the accompanying CSS in styles.css:\n\n/* Targeting all text on the page */\nbody {\n  font-family: Arial, sans-serif;\n  color: #333;\n  background-color: #f4f4f4;\n}\n\n/* Targeting the header elements */\nheader {\n  background-color: #1e90ff;\n  padding: 1em 0;\n  text-align: center;\n}\n\n/* Targeting the nav elements */\nnav ul {\n  list-style-type: none;\n  padding: 0;\n}\n\n/* Targeting the nav links */\nnav a {\n  text-decoration: none;\n  color: #fff;\n  margin: 0 10px;\n}\n\n/* Targeting the main section */\nsection {\n  padding: 20px;\n}\n\n/* Targeting the footer element */\nfooter {\n  text-align: center;\n  margin-top: 50px;\n  padding: 10px;\n  background-color: #1e90ff;\n  color: #fff;\n}"
  },
  {
    "id": "673",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you include CSS in your HTML document?",
    "answer": "There are four primary methods to incorporate CSS in an HTML document, each presenting unique advantages and use cases.\n\nMethods of CSS Integration\nInline Style: Directly insert CSS rules within HTML tags.\nEmbedded Style: Encompass CSS within the HTML document's <head> section.\nExternal Style Sheet: Create a standalone .css file to be referenced in the HTML.\nImported Style Sheet: Employ @import within a <style> tag or a CSS file to bring in other CSS files.\nKey Considerations\nSpecificity: The degree of influence a selector has over others.\nReuse: The potential to apply the same CSS rules across multiple elements.\nMaintainability: The ease with which one can update and manage the CSS.\nBest Practices\nIdeally, Choose a Single Method: Mixing techniques can complicate maintenance and understanding.\nInline Styles for Quick Changes: Useful when rapid style modifications are necessary.\nHTML Code Example: Methods Northwind.CSS\nHere is the HTML code:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"mystyle.css\">\n    <title>Document</title>\n</head>\n    <style>\n        h1, h2, p {\n            color: green;\n        }\n        \n        div {\n            border: 1px solid black;\n        }\n    </style>\n<body>\n    <h1>My Header</h1>\n    <p>Hello, World!</p>\n</body>\n</html>"
  },
  {
    "id": "674",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you explain the difference between class and ID selectors?",
    "answer": "Class and ID selectors in CSS serve distinct roles and have limitations in their applicability.\n\nSelectivity and Applicability\nClass Selector (`.classname{...}`): Matches multiple elements that share the same class attribute. These elements can belong to various HTML tags (e.g., <div>, <p>).\n\nID Selector (#idName{...}): Identifies a single unique element based on its unique ID attribute. While it's still possible to style multiple elements with the same ID, best practices mandate unique IDs for effective CSS usage.\n\nEfficiency and Performance\nClass Selector: Generally faster to compute than ID selectors in modern browsers, particularly when applied to a large number of elements.\n\nID Selector: Formerly superior in terms of speed, contemporary browsers mitigate this difference.\n\nCommon Use Cases\nClass Selector: Ideal for styling groups of elements based on shared attributes or type.\n\nID Selector: Typically reserved for unique elements that require highly specific styling or JavaScript manipulation. While it's valid to use an ID for styling, as stated in the HTML5 specification, it's generally more maintainable to reserve the use of IDs for uniquely identifiable elements and use classes for styling.\n\nCode Example: Class and ID Selectors\nHere is the HTML code:\n\n<html>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n  </head>\n  <body>\n    <div class=\"content\">Content 1</div>\n    <div class=\"content\">Content 2</div>\n    <div class=\"content\" id=\"uniqueContent\">Special Content</div>\n  </body>\n</html>\nHere is the CSS code:\n\n/* Styles applied using class selectors */\n.content { color: blue; }\n\n/* Styles applied using ID selector */\n#uniqueContent { color: red; }"
  },
  {
    "id": "675",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are pseudo-classes in CSS?",
    "answer": "Pseudo-classes are special keywords in CSS that allow you to apply styles to elements based not only on their state or position in the document tree but also on user interaction.\n\nCategories of Pseudo-Classes\nDynamic Pseudo-classes: These appear as the user interacts with an element. For instance, :hover is activated when the user hovers the cursor over an element.\n\nUser-action Pseudo-classes: These capture actions taken by the user, such as :checked for input elements that are selected.\n\nRelationship Pseudo-classes: These pertain to the document tree's hierarchical structure, like :first-child for an element that's the first child within its parent.\n\nLanguage Pseudo-Classes: These cater to elements displayed in specific languages, for example :dir().\n\nInput Control Pseudo-Classes: Designed specifically for interactive elements, these pseudo-classes style form controls like buttons, inputs, and text areas. Some examples are :default, :valid, :invalid, and :optional.\n\nEnabled and Disabled Pseudo-classes: These are self-explanatory; they alter the style of elements based on whether they're enabled or disabled. Examples include :enabled and :disabled."
  },
  {
    "id": "676",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Describe how to implement a CSS reset and why it is useful.",
    "answer": "A CSS reset is a set of styles intended to reduce browser inconsistencies in elements such as margins, paddings, and various typical style defaults.\n\nBenefits of CSS Reset\nConsistent Starting Point: Eliminates default styling differences across browsers, making the design process more predictable.\nConsistent Box Model: Ensures uniform calculations of element sizing (e.g., widths and heights) to prevent unexpected layout shifts.\nWant Only Custom Styles: It's especially useful if you intend to start from a blank slate and apply your own bespoke styles.\nThe Code\nFor HTML:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link href=\"styles.css\" rel=\"stylesheet\">\n  <title>Document</title>\n</head>\n<body>\n  <h1>Hello, CSS Reset!</h1>\n</body>\n</html>\nAnd for CSS, here is a simple normalize.css-based reset:\n\n/* reset.css */\n/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\nh1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}"
  },
  {
    "id": "677",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you select elements by attribute in CSS?",
    "answer": "While programming in CSS, you can leverage attribute selectors to define rules based on the presence or value of specific HTML attributes.\n\nBenefits\nUsing attribute selectors has multiple advantages, such as:\n\nVersatility: They cater to a wide range of scenarios.\nSimplicity: They are easy to use.\nConsistency: They're a part of a standard set of CSS selectors.\nVariations\nYou can utilize attribute selectors in three distinct ways:\n\nExact Match: [] selects an exact attribute value.\nValue Starts With: [^] targets attributes with specified starting values.\nCase Insensitive: Selectors are usually case-sensitive, but by using i, you can make them case-insensitive.\nHere is the CSS code snippet:\n\n/* Exact Match */\n[class=\"important\"] {\n  color: red;\n}\n\n/* Value Starts With */\n[href^=\"https\"] {\n  color: green;\n}\n\n/* Case Insensitive */\n[alt=\"home\" i] {\n  background: url('home-icon.png');\n}\nIn the example above,\n\n[class=\"important\"] selects all elements with the exact class attribute set to \"important\".\n[href^=\"https\"] will style all anchor links with an href attribute that starts with \"https\".\n[alt=\"home\" i] targets the alt attribute with a value of \"home\" in a case-insensitive manner."
  },
  {
    "id": "678",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a pseudo-element, and what are they used for?",
    "answer": "Pseudo-elements are virtual elements that give developers the power to style parts of an HTML document that don't correspond to actual HTML elements. Essentially, they let you apply styles to specific parts of an element without the need for extra HTML markup.\n\nCommonly used pseudo-elements include ::before and ::after which let developers insert content before or after an element, respectively.\n\nKey Features\nAutomatic Insertion: These pseudo-elements can add content continuously without requiring manual code changes.\nDynamic Content: With generated content and styles, pseudo-elements can adapt based on the specific conditions.\nCustom Styling: Pseudo-elements enable developers to style parts of an element differently than the rest.\nPractical Applications\nIndicating External Links\nLink: Indicating content that opens an external website.\nImplementation: Visual or textual cues like arrows or \"External Link\" next to anchor elements.\nSpecialized Numbers and Letters\nLink: Styling a single letter or number within a text block.\nImplementation: Especially useful in design, for instance, highlighting the first letter of a paragraph with a larger font size.\nResponsive Backgrounds\nLink: Apply background images or colors specific to certain parts of an element for various screen sizes.\nImplementation: Use media queries within the pseudo-element for specific screen sizes.\nCode Blocks and Blockquotes\nLink: Add decorative elements preceding and following code blocks and blockquote elements.\nImplementation: Help highlight code samples or visually delineate long blockquote sections.\nCustom Radio Buttons and Checkboxes\nLink: Rework default styling for radio buttons and checkboxes for a more customized look.\nImplementation: Use ::before or ::after with content property to replace default appearance.\nClear Floats\nLink: Overcome challenges in parent containers not respecting the height of floated child elements and collapsing.\nImplementation: Create an element with ::after pseudo-element where the content clears the floats.\nHacks for Older Browsers\nLink: Sometimes, especially with prior versions of Internet Explorer, using pseudo-elements proves crucial for achieving desired stylings.\nImplementation: Useful for applying specifically crafted styles that wouldn't work properly on older browsers without this technique."
  },
  {
    "id": "679",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the difference between the child combinator and the descendant combinator.",
    "answer": "The child combinator (>) and the descendant combinator (~) both serve to target HTML elements with CSS. However, they operate in different ways.\n\nDistinct Characteristics\nChild Combinator >: Selects an HTML element that is a direct child of another element.\nDescendant Combinator ~: Matches an HTML element that is a descendant (direct or indirect child) of another specified element.\nCode Example\nHere is the CSS:\n\n/* target direct children of the parent element */\nnav > ul > li {\n  color: red;\n}\n\n/* target any descendant list items under nav */\nnav li {\n  color: blue;\n}\nHere is the HTML:\n\n<nav>\n  <ul>\n    <li>Direct Child</li> <!-- This is red -->\n    <li>\n      Nested Child <!-- This is blue -->\n      <ul>\n        <li>Nested List Item</li> <!-- This is blue -->\n      </ul>\n    </li>\n  </ul>\n</nav>\nBest Practices for Combinator Use\nSpecificity of Selection: Implement the child combinator \n>\n when you want to target a specific, direct child of an element.\nMinimize Global Targeting: Utilize the descendant combinator cautiously as it has the potential for global targeting. It's often a good habit to opt for more specific selectors.\nBalance Styling and Performance: As a rule of thumb, more specific selectors could improve rendering speed. Use combinators with a balanced approach keeping in mind both specificity and performance needs."
  },
  {
    "id": "680",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How would you select all direct children elements of a particular type?",
    "answer": "To select all direct children of a specific type in CSS, you can use the > child selector combined with the desired element to build the selector.\n\nFor example, to select all the direct children that are <li> elements within an <ul> element, you would use the following CSS:\n\nul > li {\n  /* Styles here */\n}"
  },
  {
    "id": "681",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the universal selector and the sibling combinator, and when would you use them?",
    "answer": "The Universal Selector (the asterisk, *) is a powerful tool that enables you to target every element within a specified container. While it's a straightforward selector, its implications can be broad.\n\nWhen to Use: You might want to normalize or reset specific CSS properties (resetting padding, margin, etc.) across all elements within a container or the entire document. The Universal Selector effectively achieves this.\n\nBest Practices: Overuse of the Universal Selector can lead to performance issues and unexpected style side effects. Keep its use concise and well-defined.\n\nWhen To Use Sibling Combinator\nThe Sibling Combinator (+) in CSS targets elements that are immediately preceded by a specified element. Unlike child (>) or descendant (whitespace) selectors, the sibling combinator allows direct sibling targeting.\n\nWhen to Use: For DOM structures where direct sibling relationships are key, such as tabbed content or multi-step forms.\n\nBest Practices: While direct sibling targeting is useful, ensure it's the most efficient method for your objective. Overreliance can lead to inflexible CSS and HTML structures.\n\nCode Example: Universal Selector\nHere is the CSS:\n\n/* Remove margins, paddings on all elements within the container */\n.containers > * {\n    margin: 0;\n    padding: 0;\n}\nThe HTML:\n\n<div class=\"container\">\n    <p>Paragraph 1</p>\n    <ul>\n        <li>Item 1</li>\n        <li>Item 2</li>\n    </ul>\n</div>\nCode Example: Sibling Combinator\nHere is the CSS:\n\n/* Style the direct sibling anchor tag when a list item is hovered */\nul li:hover + a {\n    color: red;\n}\nThe HTML:\n\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li><a href=\"#\">Link</a></li>\n</ul>\nCase Study: Practical Applications\nLet us take a real-world example.\n\nResetting Margins and Paddings\nIn this scenario, you have a parent container and you want to remove the default margins and paddings from all its child elements.\n\nThe Universal Selector can accomplish this:\n\nHere is the CSS:\n\n.container > * {\n    margin: 0;\n    padding: 0;\n}\nThe HTML:\n\n<div class=\"container\">\n    <p>Paragraph 1</p>\n    <p>Paragraph 2</p>\n</div>"
  },
  {
    "id": "682",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the CSS Box Model?",
    "answer": "The Box Model is the foundational concept in CSS that describes the structure of an HTML element. It encompasses four key components: content, padding, border, and margin.\n\nBox Model Components\nContent: The actual element content, such as text, images, or other visual or interactive elements.\nPadding: Clears an area around the element's content, inside the border. The padding is transparent and doesn't have a background color or border.\nBorder: A solid line that defines the boundary of the padding area.\nMargin: Clears an area around the element's border, outside any defined background or border.\nVisual Representation\nCSS Box Model\n\nKey Attributes\nHeight & Width: Element dimensions are determined by the sum of content width/height, and any padding, border, or margin added to it.\nBorder: Specifies the size, style, and color of the border surrounding the content and padding.\nMargin: Defines the clearance between adjacent elements.\nCode Example: Box Model\nHere is the HTML code:\n\n<div id=\"boxModelExample\">This is an example of text within the Box Model.</div>\nHere is the CSS code:\n\n#boxModelExample {\n    border: 5px solid red;\n    padding: 20px;\n    margin: 20px;\n}\nMargins\nAuto Margins\nWhen the surrounding container has a defined width, horizontal margins set to \"auto\" equally distribute the remaining horizontal space on both sides of the element, centering it within the container.\n\n#autoMarginExample {\n    width: 50%;\n    margin-left: auto;\n    margin-right: auto;\n}\nParent and Child Element Interplay\nBox Sizing\nBy default, the width of an element does not include padding or border. CSS can alter this behavior using the box-sizing property:\n\nContent-Box (default): The element's specified width and height are calculated excluding padding and border. When you change the width or height of an element using CSS, this is the model being used.\nBorder-Box: The width and height comprise the content, padding, and border, avoiding the expansion of the box when adding padding or border to an element.\nThis distinction aids in layout control and ensures uniformity.\n\n#borderBoxExample {\n    box-sizing: border-box;\n}"
  },
  {
    "id": "683",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain margin collapsing.",
    "answer": "Margin collapsing can occur when there are adjacent vertical margins between elements. In such cases, the larger of the two margins becomes the \"collapsed margin.\"\n\nTypes of Margin Collapsing\nAdjacent Sibling Collapsing: When two blocks or inline-block elements are hierarchically adjacent, such as being direct children of a common container, their top and bottom margins might collapse. For instance, in the code:\n\n<div>\n    <p>This is paragraph 1</p>\n    <p>This is paragraph 2</p>\n</div>\nParent-Child Collapsing: If there are no intervening content or padding or border between the parent and the first/last child inside it, the parent's margins might collapse with the child's corresponding margin.\n\nVisual Representation of Margin Collapsing\nVertical margin collapse: Vertical Margin Collapse\nHorizontal margin collapse does not occur: Horizontal Margin Collapse\nPreventing Margin Collapsing\nPadding or Borders: Introduce padding or borders to disrupt the margin collapsing behavior when required.\nInline-Block or Floats: Transform adjacent elements into inline-block or use float property.\nClearfix: Employ a clearing technique for floated elements, which separates subsequent elements in the flow, ultimately preventing margin collapse.\nCSS Rules and Margin Collapsing\nMarginal vs. Calculated Total:\nIf margins are set, every other margin is respected.\nIf margins are calculated to be a non-zero value, margins can be collapsed.\nMargins from both the top and the bottom end of the elements are considered.\nNon-Root Elements: The root <html> element's margins don't collapse.\nNon-Adjacent Items: A margin doesn't collapse through wrapping or inline elements.\nWhile margin collapsing can simplify layout management under specific conditions, it's essential to understand its behavior to ensure predictable and consistent designs."
  },
  {
    "id": "684",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different values for the box-sizing property and what do they do?",
    "answer": "The box-sizing property has three possible values:\n\nContent-Box: Box dimensions are calculated by adding the width and height to the content only. This is the default behavior. Mathematically, this is represented as: $$ \\text{Content Width/Height} = \\text{Specified Width/Height} $$\n\nBorder-Box: The width and height of the box are calculated by including both the content and padding within the specified values. Essentially, the browser will adjust the content width and height measurements to include the padding and border thickness. Mathematically, this is represented as: $$ \\text{Content Width/Height} = \\text{Specified Width/Height} - \\text{Padding} - \\text{Border} $$\n\nInitial: This value sets the box-sizing property to its default value, which is typically content-box.\n\nVisual Representation\nBox-Sizing Properties in CSS"
  },
  {
    "id": "685",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you center a block element with CSS?",
    "answer": "To center a block-level element using CSS, there are several methods, which handle either horizontal or vertical alignment.\n\nHorizontal Centering\nThere are three common options to horizontally center a block:\n\nAuto margins: by setting both left and right margins to auto.\nFlexbox: placing the block in a flex container and setting justify-content: center.\nGrid: applying the place-items property on the container set to grid layout.\nCode Example: Auto Margins\n.container {\n  width: 50%;\n  margin: 0 auto; /* Center horizontally */\n}\nCode Example: Flexbox\n.container {\n  display: flex;\n  justify-content: center; /* Horizontally center child elements */\n}\nVertical Centering\nTo vertically center a block, modern techniques such as Flexbox and Grid layout can be used.\n\nCode Example: Flexbox\n.container {\n  display: flex;\n  align-items: center; /* Vertically center child elements */\n}\nCode Example: CSS Grid\n.container {\n  display: grid;\n  align-items: center; /* Vertically center child elements */\n}"
  },
  {
    "id": "686",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between block, inline, and inline-block elements?",
    "answer": "Block elements, by default, stack vertically, while inline elements sit next to each other on the same line.\n\nInline-block elements combine characteristics of both, stacking vertically and allowing for adjustments in height, margin, and padding.\n\nCode Example: Key Differences\nHere is the HTML:\n\n<div class=\"block\">Block</div>\n<span class=\"inline\">Inline</span>\n<span class=\"inline-block\">Inline-Block</span>\nHere is the CSS:\n\ndiv, span {\n  display: block;\n  margin-bottom: 10px;\n}\n\n.inline-block {\n  display: inline-block;\n  background: lightblue;\n  padding: 10px;\n}\nIn div and span due to default display type (block): text is separated by a gap.\n\nIn span.inline-block: with display: inline-block, text shares a line but is visually separated by its background."
  },
  {
    "id": "687",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the values of the display property and how do they work?",
    "answer": "The CSS property \"display\" determines how a specific HTML element should be displayed.\n\ndisplay: none - The simplest value. The element is not displayed at all.\ndisplay: block - Block elements are stacked vertically, one on top of the other. The block tries to expand to the full available width.\ndisplay: inline - Elements are placed on the same line, sequentially. The width and height of the element are determined by its content and cannot be manually changed.\ndisplay: inline-block - The element is inline, but its width and height can be changed.\ndisplay: flex - flexbox usage. Recommend to check out the links.\ndisplay: grid - grid usage. Recommend to check out the links as well.\nThere are other values, but they are rarely used.\n\nLearn more\nLearn more\nAnd even more"
  },
  {
    "id": "688",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is flexbox?",
    "answer": "Flexbox is a layout module that provides a flexible way to arrange and align elements within a container. It allows for easy manipulation of the size, position, and spacing of elements, making it ideal for creating responsive and dynamic layouts. With flexbox, you can easily create complex and multi-directional layouts without relying on floats or positioning hacks. It provides a powerful set of properties and values that enable you to control the flow and alignment of elements within a container.\n\nLearn more"
  },
  {
    "id": "689",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is grid?",
    "answer": "Grid is a layout system that allows you to create complex, grid-based designs for web pages. CSS Grid Layout provides a two-dimensional grid structure, where you can define rows and columns to position and align elements within the grid.\n\nWith Grid, you can divide your webpage into a grid of cells, specifying the size and alignment of each cell. This allows for precise control over the placement and arrangement of elements, making it easier to create responsive and flexible layouts.\n\nKey features of CSS Grid include:\n\nGrid Container: The parent element that holds the grid items and defines the overall grid.\nGrid Items: The child elements placed within the grid container.\nGrid Lines: The horizontal and vertical lines that divide the grid into rows and columns.\nGrid Tracks: The spaces between grid lines where grid items are placed.\nGrid Areas: Named areas within the grid used for placing multiple grid items.\nCSS Grid provides powerful features like grid-template-columns, grid-template-rows, grid-gap, and grid-template-areas, allowing you to control the size, positioning, and order of grid items. It offers great flexibility and control over the layout, making it a popular choice for modern web design.\n\nLearn more"
  },
  {
    "id": "690",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are keyframes?",
    "answer": "Keyframes are used to define specific animation steps or states during an animation. They allow you to specify the intermediate styles or property values that an element should have at various points in time during the animation.\n\nKeyframes are defined using the @keyframes rule in CSS. Inside the @keyframes rule, you define the animation steps by setting the CSS properties and values at specific percentages or using keywords such as from and to which represent 0% and 100%, respectively.\n\n@keyframes slideIn {\n    from {\n        margin-bottom: 100%;\n        width: 250%;\n    } \n    to {\n       margin-bottom: 0%\n       width: 100%;\n    }\nLearn more"
  },
  {
    "id": "691",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the position property? What values does it accept and how does each value behave?",
    "answer": "The position property allows you to move an element from its normal static position. By default, elements are considered to have static positioning. Here are some more most popular positioning.\n\nRelative positioning shifts the element relative to its normal position. To apply relative positioning, you need to specify the CSS property position: relative and the coordinates left/right/top/bottom.\n.container {\n    position: relative;\n    top: 5px;\n    right: 5px;\n}\nAbsolute positioning causes the element to disappear from its original position and be repositioned. Other elements are positioned as if this element never existed. The coordinates top/bottom/left/right for the new position are calculated relative to the nearest positioned parent, which is a parent with a positioning other than static. If there is no such parent, the coordinates are calculated relative to the document.\n.container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\nFixed positioning freezes the block in place, so when the page is scrolled, the fixed element remains in its position and does not scroll with the page.\n.container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n}\nSticky positioning is similar to fixed positioning, but it is attached within a specific block rather than the entire document.\nLearn more"
  },
  {
    "id": "692",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create a custom checkbox?",
    "answer": "Before the checkbox, a label is created and attached to the input. Then the input is hidden, and the label is styled as needed.\n\n<input id=\"first\" type=\"checkbox\" name=\"first\" checked hidden />\n<label for=\"first\">Checkbox checked</label>\nLearn more"
  },
  {
    "id": "693",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to center a div?",
    "answer": "There are several ways, but the simplest one is to make the parent element using display: flex.\n\n.parent {\n    display: flex;\n    align-items: center;\n    justify-content: center.\n}"
  },
  {
    "id": "694",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the transition property?",
    "answer": "Transition allows you to define a transitional state between two states of an element. Different states can be defined using pseudo-classes such as :hover or :active, or dynamically set using JavaScript.\n\nLearn more"
  },
  {
    "id": "695",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is box-sizing?",
    "answer": "The CSS property box-sizing determines how the total width and height of an element are calculated. When set to border-box, the width and height properties include the content, padding, and borders, but do not include the margin.\n\nLearn more"
  },
  {
    "id": "696",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are inline styles?",
    "answer": "This is inline styles that are written directly in HTML and they have the highest priority (excluding !important).\n\n<p style=\"color: yellow;\">This is p tag</p>"
  },
  {
    "id": "697",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between border and outline?",
    "answer": "Outline does not affect the position of the element and its dimensions.\nOutline does not allow to set a border on a specific side of the element (only on all sides at once).\nOutline does not apply corner rounding set by the border-radius property.\nLearn more\n\nLearn more"
  },
  {
    "id": "698",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you know about responsive web design?",
    "answer": "Responsive web design refers to the approach of designing and developing websites in a way that allows them to adapt and respond to various screen sizes and devices. It involves creating flexible layouts, using fluid grids, and employing media queries to ensure optimal viewing experiences across different devices and resolutions. This approach aims to provide users with a seamless and user-friendly browsing experience, regardless of the device they are using.\n\nLearn more"
  },
  {
    "id": "699",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How does a browser process a web page?",
    "answer": "When a browser processes a web page, it goes through several steps:\n\nParsing HTML. The received HTML document is used to form the DOM (Document Object Model)\nStyles are loaded and recognized, forming the CSSOM (CSS Object Model).\nBased on the DOM and CSSOM, a render tree is formed, which is a set of rendering objects (referred to as \"renderer\" or \"render object\" in Webkit and \"frame\" in Gecko). The render tree duplicates the structure of the DOM, but invisible elements (such as <head> or elements with display:none;) are not included. Each text line is also represented as a separate renderer in the render tree. Each rendering object contains its corresponding DOM object (or text block) and the calculated style for that object. In simple terms, the render tree describes the visual representation of the DOM.\nThe position on the page is calculated for each element in the render tree - this is called layout. Browsers use a flow method, where in most cases, only one pass is needed to position all elements (more passes are required for tables).\nFinally, all of this is rendered in the browser - this is called painting.\nLearn more"
  },
  {
    "id": "700",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is BEM (Block Element Modifier)?",
    "answer": "BEM (Block, Element, Modifier) is a component-based approach to web development. It is based on the principle of dividing the interface into independent blocks. It allows for easy and fast development of interfaces of any complexity and reusing existing code, avoiding \"Copy-Paste\".\nBEM_example\n\nLearn more"
  },
  {
    "id": "701",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between inline and block elements?",
    "answer": "Elements in HTML are also divided into block and inline elements. Block elements are elements that serve as building blocks for web pages. They are used to separate the content of a web page into logical blocks, such as menus, headers, content blocks, footer, etc. Block elements are written on a new line; a line break is automatically added before and after these elements in the browser.\n\nBlock elements include <address>, <article>, <aside>, <blockquote>, <canvas>, <dd>, <div>, <dl>, <dt>, <fieldset>, <figcaption>, <figure>, <footer>, <form>, <h1>-<h6>, <header>, <hr>, <li>, <main>, <nav>, <noscript>, <ol>, <output>, <p>, <pre>, <section>, <table>, <tfoot>, <ul>, and <video>. All block elements have opening and closing tags.\n\nInline elements mark parts of the content within elements. They only occupy a limited space defined by the tags, and the browser does not automatically add line breaks.\n\nInline elements include <a>, <abbr>, <acronym>, <b>, <bdo>, <big>, <br>, <button>, <cite>, <code>, <dfn>, <em>, <i>, <img>, <input>, <kbd>, <label>, <map>, <object>, <q>, <samp>, <script>, <select>, <small>, <span>, <strong>, <sub>, <sup>, <textarea>, <time>, <tt>, and <var>.\n\nLearn more"
  },
  {
    "id": "702",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between margin and padding?",
    "answer": "Margin - external margins.\nPadding - internal margins.\n\nMargin and Padding\n\nLearn more\nLearn more"
  },
  {
    "id": "703",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of the overflow property and when should it be used?",
    "answer": "The CSS property overflow determines whether the content of an overflowing block element should be clipped, provide scroll bars, or simply be displayed.\n\nLearn more"
  },
  {
    "id": "704",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are vh and vw units?",
    "answer": "vh and vw are relative units and represent:\nvh - 1% of the browser window's height.\nvw - 1% of the browser window's width."
  },
  {
    "id": "705",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to change the appearance of a cursor?",
    "answer": "The CSS property cursor is used to change the appearance of the cursor.\n\n.container {\n    cursor: pointer;\n}\nLearn more"
  },
  {
    "id": "706",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to change the flexbox container's axis direction?",
    "answer": "The CSS property flex-direction is used to change the direction of the flexbox container axis.\n\nLearn more"
  },
  {
    "id": "707",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What determines the size of an element?",
    "answer": "The size of an element is constructed from the width and height of its content, inner padding, border, and outer margin.\n\nElement size"
  },
  {
    "id": "708",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to position one element relative to another?",
    "answer": "To control the positioning of a child element, set the position property to relative and use top/right/bottom/left to adjust its placement.\n\n.element {\n    position: relative;\n    top: 20px;\n    left: 20px;\n}\nLearn more"
  },
  {
    "id": "709",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the main properties of flexbox?",
    "answer": "The main properties of flexbox are:\n\ndisplay: Specifies the element as a flex container.\nflex-direction: Specifies the direction of the flex items (row, row-reverse, column, column-reverse).\nflex-wrap: Specifies whether the flex items should wrap or not (nowrap, wrap, wrap-reverse).\njustify-content: Specifies how the flex items are aligned along the main axis (flex-start, flex-end, center, space-between, space-around).\nalign-items: Specifies how the flex items are aligned along the cross axis (flex-start, flex-end, center, baseline, stretch).\nalign-content: Specifies how multiple lines of flex items are aligned along the cross axis when there is extra space (flex-start, flex-end, center, space-between, space-around, stretch).\nflex-grow: Specifies how much a flex item can grow relative to other items.\nflex-shrink: Specifies how much a flex item can shrink relative to other items.\nflex-basis: Specifies the initial size of a flex item before any remaining space is distributed.\norder: Specifies the order in which the flex items appear within their container.\nThese properties allow for flexible and responsive layouts by dynamically adjusting the size and position of flex items within a container."
  },
  {
    "id": "710",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to remove the bullet point from a list?",
    "answer": "Set the list-style-type property to none for the corresponding list element. Here's an example:\n\nul {\n  list-style-type: none;\n}"
  },
  {
    "id": "711",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do you know about selector specificity?",
    "answer": "Selector specificity determines the priority of selectors in a style sheet. The more specific a selector is, the higher its priority. Each selector has a weight:\n\nElement selector - 1\nClass selector - 10\nID selector - 100\nInline style - 1000\n!important - has the highest weight.\n\nLearn more"
  },
  {
    "id": "712",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Which CSS styles are most performance-heavy for browsers?",
    "answer": "A large number of connected fonts, shadows, animations, and transparency."
  },
  {
    "id": "713",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are pseudo-classes and which ones do you know?",
    "answer": "Pseudo-classes describe characteristics of elements, such as dynamic states (e.g., a clicked link), language encoding (e.g., a paragraph in French), and more. They are not displayed in the source document and do not belong to the DOM tree. The most commonly used ones are :hover, :focus, :checked, :disabled, and others.\n\nLean more"
  },
  {
    "id": "714",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to rotate a block by 90 degrees?",
    "answer": "To rotate a block element by 90 degrees you can use the transform property along with the rotate function.\n\n.block {\n  transform: rotate(90deg);\n}\nThis will rotate the block element clockwise by 90 degrees. You can adjust the angle by changing the value inside the rotate function.\nLearn more"
  },
  {
    "id": "715",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What pseudo-elements do you know?",
    "answer": "A pseudo-element in CSS is a keyword added to a selector that allows styling a specific part of the selected element. For example, the pseudo-element ::first-line can be used to change the font of the first line of a paragraph.\nThe most commonly used pseudo-elements are: ::after, ::before, ::placeholder, ::first-letter.\n\np::first-line {\n    color: blue;\n    text-transform: uppercase;\n}\nLearn more"
  },
  {
    "id": "716",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is !important and how do you feel about it?",
    "answer": "!important declaration is used to give a style rule the highest priority, overriding any other rules that conflict with it. When applied to a CSS property, !important ensures that the specified value will be used, regardless of specificity or order of other rules.\n\n!important use is generally discouraged due to some potential drawbacks:\n\nSpecificity issues: Using !important can lead to specificity conflicts and make it difficult to maintain or override styles in the future.\n\nDifficulty in debugging: When multiple stylesheets or rules use !important, it becomes harder to diagnose and troubleshoot styling issues.\n\nInflexibility: It limits the flexibility and modularity of stylesheets, making it challenging to make changes or apply different styles to specific elements without modifying existing !important rules.\n\nCode readability and scalability: Overusing !important can make the codebase less organized and harder to read, especially in larger projects.\n\nIn general, it's best to avoid using !important unless absolutely necessary, and instead utilize proper specificity and cascading principles to achieve desired styling effects.\n\nLearn more"
  },
  {
    "id": "717",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between <script>, <script async>, and <script defer>?",
    "answer": "The browser loads and displays HTML gradually, especially noticeable with slow internet connections. The browser doesn't wait for the entire page to load before showing it; instead, it displays the portion that has been loaded.\n\nIf the browser encounters a <script> tag, it is typically required by the standard to execute it first before displaying the remaining page content. This means that the loading happens synchronously from top to bottom.\n\nIf the script is external, the browser won't display the content below it until the script has been executed.\n\nWhen using the async and defer attributes, the browser starts loading scripts asynchronously, without delaying the display of HTML.\n\nHowever, defer is used when the order of script execution is important. Scripts will be loaded synchronously but sequentially. Another difference is that defer will only execute after the entire HTML has been processed by the browser, whereas async starts loading immediately, even before the HTML finishes loading.\n\nLearn more"
  },
  {
    "id": "718",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to increase the size of an element on hover without shifting neighboring elements?",
    "answer": "To increase the size of an element on hover without shifting neighboring elements, you can use transform property along with the scale function.\n\n.element {\n  transition: transform 0.3s ease;\n}\n\n.element:hover {\n  transform: scale(1.2);\n}\nIn this example, the transition property adds a smooth transition effect to the transformation. When hovering over the element, the transform: scale(1.2) rule scales the element by 20%, making it larger without affecting the layout or shifting neighboring elements.\n\nBy using transform: scale(), the element's size increases while maintaining its original position in the layout.\n\nLearn more"
  },
  {
    "id": "719",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are media queries?",
    "answer": "Media queries are used in cases where different CSS styles need to be applied for different devices based on their display type (e.g., printer, monitor, or smartphone), as well as specific device characteristics (e.g., browser window width) or external environment conditions (e.g., ambient lighting). Given the vast number of internet-connected devices, media queries are a crucial tool for creating websites and applications that will function properly on all available devices used by your users.\n\n@media screen and (max-width: 768px) {\n  flex-direction: column;\n}\nLearn more"
  },
  {
    "id": "720",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "For what data attributes are recommended to use?",
    "answer": "Data attributes are recommended to use when you want to store custom data within HTML elements. They should be used when there is a need to attach additional information to an element that is not specifically represented by an existing HTML attribute.\n\nData attributes are prefixed with data- and can have any name following it. It is recommended to follow a naming convention that is descriptive, meaningful, and avoids potential conflicts with existing or future standard HTML attributes. For example, if you want to store information about a specific product on an e-commerce website, you can use a data attribute like data-product-id to store the unique identifier of the product.\n\nBy using data attributes, you can easily access and manipulate this custom data. It provides a way to enhance the functionality and behavior of your website or application without modifying the standard HTML attributes or structure.\n\n<article\n  id=\"some-article\"\n  data-columns=\"4\"\n  data-index-number=\"213124\"\n  data-parent=\"wrapper\">\n  …\n</article>\nLearn more"
  },
  {
    "id": "721",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to create an infinite animation?",
    "answer": "To create an infinite animation, you can use the animation property and set the value of animation-iteration-count to infinite.\n\n.element {\n  animation: myAnimation 2s infinite;\n}\n\n@keyframes myAnimation {\n  /* Define the animation keyframes */\n}\nLearn more"
  },
  {
    "id": "722",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is an attribute selector?",
    "answer": "Attribute selectors select elements based on the presence of an attribute or its value.\n\na[href=\"https://example.org\"] {\n    color: green;\n}\n\nspan[lang='en-US'] {\n    color: blue;\n}\nLearn more"
  },
  {
    "id": "723",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to change styles for a button with the disabled attribute?",
    "answer": "To select an element with the attribute \"disabled\" set, you need to use attribute selectors.\n\nbutton[disabled] {\n  color: blue;\n}\nLearn more"
  },
  {
    "id": "724",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to change styles for a <span> element that comes after an <input> element?",
    "answer": "The adjacent selector is designed for this purpose. Adjacent elements on a web page are called \"adjacent\" when they immediately follow each other in the document's code.\n\ninput + span {\n    color: blue;\n}\nLearn more"
  },
  {
    "id": "725",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Which selector can be used to apply a style to every element on a page?",
    "answer": "Sometimes, it is necessary to apply the same style to all elements on a web page, such as setting the font or text formatting. In such cases, a universal selector can be used, which matches any element on the web page.\n\nTo denote the universal selector, the asterisk (*) symbol is used, and the syntax is as follows.\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nLean more"
  },
  {
    "id": "726",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are CSS preprocessors, which ones do you know, and what are they used for?",
    "answer": "A preprocessor is a program that takes input code written in a preprocessor language and outputs CSS that can be given to our browser. Preprocessors simplify the process of styling if you know how to use them.\n\nThere are several representatives of preprocessors, such as Sass / SCSS (.sass, .scss), Less (.less), and Stylus (.stylus). More often, preprocessors add new capabilities to CSS:\n\nNesting\nMixins\nAdditional functions\nModularity\nVariables\nLearn more"
  },
  {
    "id": "727",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are mixins in preprocessors?",
    "answer": "A mixin is a function that takes arguments and applies rules dependent on these arguments to a given selector. Mixins allow you to create groups of CSS declarations that you will have to use multiple times on a website. You can even pass variables into mixins to make them more flexible.\n\n\n\n\n\n100 Essential HTML5 Interview Questions in 2025"
  },
  {
    "id": "728",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What does HTML stand for and what is its purpose?",
    "answer": "HTML or Hyper Text Markup Language is the standard language for creating web pages and applications. HTML5, the latest version as of 2022, introduces several new elements and attributes, elevating user experience and software application standards.\n\nHTML is responsible for structuring web content, ensuring accessibility, and guiding how web pages are visually presented. It remains the foundational structure for running nearly all web content.\n\nCore Functionalities\nStructuring Content: Tags like <header>, <footer>, and <section> divide content, streamlining its organization.\nEmbedding Media: HTML provides tags to incorporate multimedia such as images, audio, and video.\nForm Handling: Interactive sections such as user input forms are defined with input and label tags.\nHyperlinks: Essential for navigation, hypertext links like <a> anchor content within or outside the webpage.\nAccessibility Features: Semantic tags like <nav> and <article> not only structure data but also improve accessibility for users relying on screen readers.\nIntegration of Other Technologies: Can integrate with scripting languages like JavaScript and libraries and frameworks like Bootstrap for enhanced visual appeal.\nCompatibility and Development\nThe primary objective of HTML5 is to improve the language's support for the latest multimedia, while keeping it easily readable by humans. It was designed to be backward and forward compatible, so that content written in previous versions can be seamlessly integrated and interact with content authored in subsequent versions.\n\nVisual Presentation and User Interface Adaptations\nHTML5 is engineered to provide more flexibility, control, and aesthetic maturity for web pages and web-based software applications. Web developers can use it to craft modern web interfaces with rich visual and multimedia experiences. It also allows for more responsive and adaptive design, ensuring optimal viewing on a variety of devices and screen sizes. This reflects a broader shift in technology toward a more device-agnostic user experience.\n\nThe Role of CSS and JavaScript\nWhile HTML offers static content, CSS and JavaScript enable additional layers of styling, interactivity, and dynamic content updates. The integration of these three technologies (referred to as HTML-CSS-JS) stands as the trio that forms the backbone of almost all web-based content. They're often presented as HTML5-CSS3-JS to signify unified modern best practices. Online, there's even tools that combine these technologies into a single framework or language such as WebAssembly or Dart. The trio represents a more modular approach, allowing distinct teams to focus on individual layers, streamlining development in larger projects. Mastering their intersection helps in designing a robust and cohesive user experience. This concept is captured by the acronym \"PEA\", which stands for the Platform (HTML), the Engine (JavaScript), and the Appearance (CSS). Each category focuses on a distinct aspect of user experience.\n\nPractical Uses\nWebsite Development: All traditional web resources, from simple blogs to expansive e-commerce sites, remain based primarily on HTML.\nWeb Applications: Web technologies have evolved significantly, allowing for sophisticated applications like Google Docs, Trello, and Slack to run entirely in a web browser. HTML5 has played a pivotal role in this development.\nAdvertising & Media: HTML5's advanced media handling tools have made it the standard for online ads and multimedia content."
  },
  {
    "id": "729",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Describe the basic structure of an HTML document.",
    "answer": "HyperText Markup Language (HTML) serves as the backbone of web content, defining its structure and semantics. We will now walk you through the fundamental elements of an HTML document.\n\nBasic Structure of an HTML Document\nAn HTML document consists of two primary sections: the head and the body.\n\nDocument Type Declaration (DOCTYPE)\nThe Document Type Declaration (DOCTYPE) is not an HTML tag; it's an instruction to the web browser about what version of HTML the page is written in.\n\n<!DOCTYPE html>\nThis declaration shows that the document is an HTML5 document.\n\nHTML Element\nThe html element is the root element of an HTML page. It encompasses the entire content, both head and body.\n\n<html>\n    <!-- Head and Body Sections Are Nested Inside -->\n</html>\nHead Section\nThe head section provides meta-information about the document. It isn't displayed in the web browser itself but serves various other purposes, from providing a title to linking external resources.\n\n<head>\n    <!-- Title and Meta-Tags, Styles, Scripts, etc. -->\n</head>\nTitle Element\nThe title element specifies the document's title, which is displayed in the browser's title bar or tab.\n\n<title>Your Page Title</title>\nBody Section\nThe body section encapsulates the document's visible content—what users see and interact with.\n\n<body>\n    <!-- Content Visible to Users: Headings, Paragraphs, Images, etc. -->\n</body>"
  },
  {
    "id": "730",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What do DOCTYPE and html lang attributes do?",
    "answer": "Document Type (DOCTYPE) and the lang attribute play crucial roles in our webpages.\n\nDOCTYPE: Defining Document Type and Validation Mode\nPurpose\nSpecifies the HTML or XHTML version used in the document.\nIdentifies parsing method and algorithm for the web browser, affecting consistency.\nCode Example\nThe <!DOCTYPE> declaration is placed at the very top of the HTML file, even before the <html> tag begins.\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <!-- Content -->\n  </body>\n</html>\nLang Attribute: Language Specification\nThe lang attribute, present in the HTML tag, specifies the primary language used in the document. Its value is a primary language subtag as defined in RFC 5646 (BCP 47) and it can include a valid language code, a valid language code followed by a valid region code, or simply \"und\" for unspecified language.\n\nCode Example\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <title>Page Title</title>\n  </head>\n  <body>\n    <h1>Welcome</h1>\n    <p>This is a demo page.</p>\n  </body>\n</html>"
  },
  {
    "id": "731",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between head and body tags?",
    "answer": "While the <head> and <body> tags are fundamental to every HTML document, they serve distinct purposes and are located in separate areas of the web page.\n\nKey Distinctions"
  },
  {
    "id": "732",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Role and Content",
    "answer": "Head: Houses meta-information, such as document title, character encoding, and stylesheets, all of which are essential for page setup but not visible to the user.\nBody: Contains the bulk of visible content, including text, images, videos, links, and more."
  },
  {
    "id": "733",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Placement in the HTML File",
    "answer": "Head: Precedes the body and provides setup before actual content is rendered.\nBody: Follows the head section and encompasses all visible content."
  },
  {
    "id": "734",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Common Elements in Each Section",
    "answer": "Head: Typically links to CSS files or may have inline CSS, contains the document title, any JavaScript reference, character set declaration, and meta tags.\nBody: Holds structural components like headers, navbars, articles, sections, and the footer, along with visual content like images and visible text.\nVisual Representation in the HTML File\n<head> Section:\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n  </head>\n  <body>\n    <!-- Content Here -->\n  </body>\n</html>\n<body> Section:\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n  </head>\n  <body>\n    <header>\n      <h1>Welcome!</h1>\n      <nav>\n        <ul>\n          <li><a href=\"#\">Home</a></li>\n          <li><a href=\"#\">About</a></li>\n          <li><a href=\"#\">Contact</a></li>\n        </ul>\n      </nav>\n    </header>\n\n    <section>\n      <h2>Recent Posts</h2>\n      <article>\n        <h3>Post Title</h3>\n        <p>Post content goes here.</p>\n      </article>\n    </section>\n\n    <footer>\n      <p>&copy; 2023 MySite</p>\n    </footer>\n\n  </body>\n</html>"
  },
  {
    "id": "735",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can you explain the purpose of meta tags in HTML?",
    "answer": "Meta tags provide metadata about a web page through information invisible to visitors but essential for search engines, social media, and other web technology. This metadata includes details such as the page's title, keywords, and description.\n\nKey Meta Tags\nMeta Description: A concise summary of the page's content, often used in search engine results.\n\nMeta Keywords: Historically used to specify relevant keywords for the page, but they have been largely deprecated due to abuse by spammers.\n\nMeta Robots: Directs search engine bots on how to interact with the page, such as index it for search results, follow its links, or refrain from both.\n\nMeta Viewport: Crucial for responsive design, it guides the browser on how to scale and display the page, especially useful for mobile devices.\n\nMeta Charset: Defines the character encoding used on the webpage, ensuring text is displayed correctly.\n\nMeta Author: Identifies the page's creator or author.\n\nOpen Graph, Twitter Cards: Specialized meta tags used by social platforms like Facebook and Twitter to optimize page sharing.\n\nCanonical URL: Indicates the preferred URL when a page can be accessed through multiple paths.\n\nRefresh and Redirect: Older, less common meta tags that dictate page behavior.\n\nCode Example: Common Meta Tags\nHere is the HTML code:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"This is a sample web page with a concise description.\">\n    <meta name=\"keywords\" content=\"HTML, meta tags, web design, SEO\">\n    <meta name=\"author\" content=\"John Doe\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sample Web Page</title>\n</head>\n<body>\n    <!-- Page content goes here -->\n</body>\n</html>\nResponsible Use of Meta Tags\nWith search engines evolving, many tags have diminished in significance. Here's the current state:\n\nStill Relevant: Meta Description, Viewport, Charset, Author, and Canonical\nLimited Effect: Keywords, Refresh, and Robots\nSpecialized Fields: Open Graph, Twitter Cards are necessary for tailored content on social platforms\nTo maintain a robust online presence, focus on high-quality content, user experience, and technical soundness, and don't solely rely on meta tags."
  },
  {
    "id": "736",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you link a CSS file to an HTML document?",
    "answer": "Linking a CSS file to an HTML document is a fundamental step for styling. This is generally done by indicating the CSS file's path in the head section of the HTML file using <link> tags.\n\nHTML Link Tag: <link>\nHTML uses the <link> tag to integrate external resources such as CSS files.\n\nSyntax\n<link rel=\"stylesheet\" href=\"path/to/style.css\">\nrel: Specifies the type of relationship between the current document and the linked file. For CSS, it should be set to \"stylesheet\".\n\nhref: Points to the location of the external CSS file. This can be via an absolute URL (i.e., http://...) or a relative path to the HTML file.\n\ntype: Supplied for legacy purposes but is not required given the file is a CSS file.\n\nCode Example: Using the Link Tag\nHere is the HTML code:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"path/to/style.css\">\n</head>\n<body>\n    <!-- Body content -->\n</body>\n</html>"
  },
  {
    "id": "737",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you link a JavaScript file to an HTML document?",
    "answer": "To link a JavaScript file to an HTML document, you need to use the <script> HTML tag. There are two primary ways to do this:\n\nExternal Script File: Link a separate JavaScript file to your HTML document.\nInline Script: Embed JavaScript code directly within your HTML file.\nExternal Script File\nTo use an external JavaScript file, follow these steps:\n\nCreate the JavaScript File: Save your JavaScript code in a separate file with a .js extension. For example, script.js.\n\nLink the JavaScript File to your HTML Document: Add the following code within the <head> or at the end of the <body> section of your HTML file.\n\n<script src=\"path-to-your-js-file.js\"></script>\nReplace path-to-your-js-file.js with the actual path to your JavaScript file.\n\nBest Practices\nPlacement: It's good practice to place your <script> tags at the end of the <body> section, just before the closing </body> tag. This ensures that the HTML content loads first, which can improve the website's initial rendering speed.\n\nSyntax: The HTML5 specification does not require a closing tag for the <script> element.\n\nInline Script\nYou can also include JavaScript directly within your HTML file. This is called an \"inline script.\" To do this, encase your JavaScript code within <script> tags, like this:\n\n<script>\n    // Your JavaScript code goes here\n</script>\nBest Practices\nContent Separation: For better code organization, it's often better to keep your JavaScript in a separate file, especially for larger applications.\n\nCaching: When using an external JavaScript file, the browser caches the script, which can speed up your site on subsequent visits. However, if the script changes often, this caching can be a problem.\n\nMaintainability and Reusability: Utilizing an external JavaScript file allows for better code management, reusability, and ease of making updates or fixes across multiple HTML files.\n\nExample HTML File\nHere is the code:\n\nImplementation: HTML File\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <script src=\"path-to-your-js-file.js\"></script>\n</head>\n<body>\n    <!-- Your content here -->\n    <script>\n        // Inline JavaScript code here.\n    </script>\n</body>\n</html>"
  },
  {
    "id": "738",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add a comment in HTML and why would you use them?",
    "answer": "To add a comment in HTML, wrap it between <!-- and -->.\n\nFor example:\n\n<!-- This is a comment -->\n<p>Hello, World!</p>\nRole of Comments in Development\nComments ensure clear code comprehension and can be used for:\n\nInstructions: Guiding developers on next steps.\nDocumentation: Articulating intricate code segments.\nDebugging: Temporarily removing portions for bug testing.\nReminders: Highlighting sections for later revision.\nBest Practices for Using Comments\nPurposeful Clarity: Comments must explain what the code does, not how. Code and inline comments should clarify how the code works.\nRelevance: Avoid stating the obvious and focus on unique or complex components.\nConciseness: Keep comments brief to reduce visual clutter.\nRegular Maintenance: Update or remove outdated comments to maintain accuracy.\nWhen are Comments Unnecessary?\nTrivial Cases: Comments like \"\nwrapper\" or \"\ntag\" denote the obvious.\n\nSelf-Explanatory Code: Writing self-descriptive code eliminates the need for specific comments."
  },
  {
    "id": "739",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you serve your page in multiple languages?",
    "answer": "Let's discuss the best practices for serving web pages in multiple languages and the corresponding HTML5 tag, <html lang=\"en\">.\n\nLanguage Tag\nFor serving content in multiple languages and optimizing accessibility and search engine performance, you should use the lang attribute on the <html> tag. This is considered a best practice, even if the page is only in English.\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Website</title>\n  </head>\n  <body>\n    <!-- Page content here -->\n  </body>\n</html>\nCommon Language Codes\nMost languages follow the two-letter ISO 639-1 code, such as \"en\" for English or \"es\" for Spanish. Some languages also use an extended ISO 639-2 or 639-3 code, which might require three to four letters, like \"por\" for Portuguese.\n\nFor dialects or region-specific content, you can use a hyphen, followed by an ISO 3166-1 alpha-2 country code. For instance:\n\n\"en-GB\" for British English\n\"es-ES\" for Spanish as spoken in Spain\n\"pt-BR\" for Brazilian Portuguese\n\"pt-PT\" for European Portuguese\nUnderstand that while the lang attribute assists in accessibility, user agents may not always recognize or act upon these subtags.\n\nSEO Considerations\nServing content in multiple languages comes with SEO responsibilities. One common practice is to assign a language-specific URL for each version of your content. In addition to this, utilize human-readable URLs to effectively comminicate the language and the content topic/design.\n\nFor instance, use:\n\nexample.com/en-US/about for pages in American English.\nexample.com/es-MX/sobre for those in Mexican Spanish.\nAI-Clearance Required\nThis technique requires further validation and clearance upon implementation as a lot is dependent on SEO constraints and localized content."
  },
  {
    "id": "740",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are data-* attributes and when should they be used?",
    "answer": "Data attributes in HTML5, often referred to as data-* attributes, help embed custom data within HTML elements. This presents a powerful tool for web developers, facilitating streamlined JavaScript and CSS operations.\n\nCore Benefits\nAccessibility: Data attributes are easily accessible through the dataset API in JavaScript.\n\nIgnoring formatting tactics: In places where content served by backend, cannot assume the content to always be JSON encoded, shortened, or have odd formatting.\n\nData Isolation: For better maintenance of web documents. Data attributes have clear, defined roles within HTML.\n\nCode Example: Using Data Attributes\nHere is the HTML & JavaScript:\n\n<div id=\"user\" data-name=\"John Doe\" data-age=\"25\"></div>\n\n<script>\n  const userDiv = document.getElementById('user');\n  console.log(userDiv.dataset.name);  // Output: \"John Doe\"\n  console.log(userDiv.dataset.age);   // Output: \"25\"\n</script>\nAppropriate Use-Cases\nCustom Content for DOM Elements: For attaching extra information or configuration settings exclusively relevant to an HTML element.\n\nExample: A div may have a data-show-tooltip attribute set to true to indicate it should display a tooltip.\n\nInteractivity Configuration: When working with user-made widgets, data attributes can specify how they behave in a more structured, intended manner. Useful in contexts where individual DIV or section blocks have interactivity toggles, or categories.\n\nE-Commerce & Web Products: To store product-specific IDs or additional details as they pertain to the DOM representation of a product in a catalog.\n\nStyling Signifiers: You can leverage data attributes in CSS for different types of styling like category colors, hover effects, or even in JavaScript-based CSS declarations."
  },
  {
    "id": "741",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between b and strong tags?",
    "answer": "The <b> and <strong> tags are both used for text emphasis in HTML, but they have different semantic meanings.\n\nBold vs. Strong\nThe purpose of the <b> tag is to make the text bold, mainly for visual styling.\nThe <strong> tag, on the other hand, semantically emphasizes the text, indicating its importance.\nSemantic Importance\nThe use of semantic tags like <strong> is beneficial for components like screen readers, browsers, and search engines, which can provide better user experience or understanding of content with proper emphasis.\n\nCode Example: B vs. Strong\nIn the HTML, the content \"Caution\" is visually bold and the content \"Urgent Notice!\" is both visually bold and semantically strong.\n\n<p>\n  <b>Caution</b>: This action cannot be undone.\n  <br>\n  <strong>Urgent Notice!</strong> Please save your work before proceeding.\n</p>\nGeneral Best Practice\nVisual Styling is usually left to CSS. <b> should be used with caution, if at all, as it becomes redundant in many scenarios due to CSS's wide adoption.\nSemantic Tags like <strong> provide context, clarity, and accessibility to the content."
  },
  {
    "id": "742",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "When would you use em over i, and vice versa?",
    "answer": "Let's see the difference between 'em' and 'i' HTML tags.\n\nWhen to Use 'em'\nThe 'em' tag italicizes the text by default and should be reserved for occasions when emphasis is needed.\n\nOne potential usage could be for interactive instructions:\n\n<p><strong>Press</strong> <em>Enter</em> to submit.</p>\nWhen to Use 'i'\nThe 'i' tag, or italics tag, is often avoided for text styling. Instead, consider semantic HTML, CSS, or more explicit HTML options like <em> for emphasis, when possible.\n\nHere's an example of <em> combined with CSS for an additional bit of fluorescence.\n\n<p>His <em style=\"background-color: yellow; color: red;\">anger</em> was palpable.</p>"
  },
  {
    "id": "743",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the purpose of small, s, and mark tags?",
    "answer": "The small, s, and mark HTML5 tags are used to alter the structure and presentation of text content.\n\n<small>\nThe <small> tag indicates that the enclosed text is of lesser importance, typically used for fine print, legal disclaimers, copyright notices, etc.\n\nHere are examples:\n\nUse Case\n<footer>\n  <small>&copy; 2022 Company Name</small>\n</footer>\n<s>\nThe <s> tag, which stands for \"strike,\" is a non-semantic, obscure tag that is often replaced with a more meaningful tag, such as <del> for \"deleted\" content. However, it still visually strikes out its content.\n\nUse Case\n<p>Your discount code is: <s>EXPIRED123</s></p>\nVisual Representation\nYour discount code is: EXPIRED123\n\n<mark>\nThe <mark> tag is used to highlight or set apart text without specifying any additional semantic information.\n\nUse Case\n<p>Important: Please <mark>schedule your appointment</mark> at least 48 hours in advance.</p>"
  },
  {
    "id": "744",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are semantic HTML tags and why are they important?",
    "answer": "Semantic HTML tags provide both structure and meaning to web content. They allow crawlers, browsers, and even assistive technologies to understand content better and present it more effectively. This approach improves accessibility and search engine optimization, making pages easier to maintain and understand.\n\nBenefits of Semantic Tags\nSEO and Accessibility: Employing semantic tags improves your page's search engine ranking and ensures it's accessible to all users, including those with disabilities.\n\nConsistent Structure: Semantic tags establish a cohesive layout, vital for large websites or platforms.\n\nRelevance to Bots and Crawlers: Search engine algorithms dissect web pages more accurately when content is correctly labeled.\n\nContent Division: Segregating content by their meaning makes the document more understandable and maintainable.\n\nCommon Semantic Tags\n<p>: A paragraph.\n<h1> - <h6>: Headings, with 1 (highest) to 6 (lowest) levels.\n<ul> / <ol>: Unordered or ordered list.\n<li>: List item inside a list.\n<a>: Anchor, used for links.\n<img>: An image.\n<figure> / <figcaption>: For a figure such as an image, with accompanying caption.\nNecessary vs. Optional Tags\nWhile essential tags like <header> and <footer> indicate crucial sections, many are optional based on the website's nature or the page's segregation needs. For example, a blog may require the <article> tag, while a retail site might not.\n\nIn modern web development, the clear distinction offered by semantic tags is invaluable for quick comprehension and maintenance, yielding superior results for both users and developers.\n\nCode Example: Before vs. After Semantic HTML\nConsider the before and after examples to see the impact of semantic tags.\n\nBefore Semantic HTML\n<div class=\"nav\">\n    <div class=\"logo\">\n        <a href=\"#\">Logo</a>\n    </div>\n    <div class=\"nav-links\">\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Contact</a>\n    </div>\n</div>\n<div class=\"main-wrapper\">\n    <div class=\"image\">\n        <img src=\"image.jpg\" alt=\"A beautiful landscape\">\n    </div>\n    <div class=\"content\">\n        <h3>Welcome</h3>\n        <p>Some welcome text here.</p>\n    </div>\n</div>\n<div class=\"footer\">\n    <p>© 2022 Company Name</p>\n</div>\nAfter Implementing Semantic Tags\n<header>\n    <div class=\"logo\">\n        <a href=\"#\">Logo</a>\n    </div>\n    <nav>\n        <a href=\"#\">Home</a>\n        <a href=\"#\">About</a>\n        <a href=\"#\">Contact</a>\n    </nav>\n</header>\n\n<main>\n    <figure>\n        <img src=\"image.jpg\" alt=\"A beautiful landscape\">\n        <figcaption>A beautiful landscape</figcaption>\n    </figure>\n    <section>\n        <h1>Welcome</h1>\n        <p>Some welcome text here.</p>\n    </section>\n</main>\n\n<footer>\n    <p>© 2022 Company Name</p>\n</footer>"
  },
  {
    "id": "745",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create a paragraph or a line break in HTML?",
    "answer": "In HTML, to create a paragraph, use <p>...</p> tags, and to insert a line break, use <br> tag.\n\nParagraphs in HTML\nTraditional paragraph formatting in HTML is achieved using the <p> tag. The browser's default styling generally adds spacing to the top and bottom of each <p> element, creating distinct paragraphs.\n\nSyntax\n<p>\n    This is an example of a paragraph. The text enclosed within the &lt;p&gt; tags represents a single paragraph.\n</p>\nVisual Representation\nThis is an example of a paragraph. The text enclosed within the <p> tags represents a single paragraph.\n\nLine Breaks in HTML\nTo insert a simple line break in an HTML document, use the <br> tag. This tag doesn't require a closing equivalent.\n\nSyntax\nFirst Line<br>Second Line\nVisual Representation\nFirst Line\nSecond Line (This text doesn't render the line break; it's just to show the raw HTML.)\n\nMulti-line Text Elements\nIn HTML, the <textarea> tag allows the input of several lines of text. Nonetheless, it does not auto-format for paragraphs. It wraps text instead, and vertical scroll bars might be enabled, based on the template and content.\n\nSyntax\n<textarea rows=\"4\" cols=\"50\">\nThis is a multi-line text area.\nIt doesn't automatically create separate paragraphs.\nText wraps based on dimensions supplied.\n</textarea>\nVisual Representation\n<textarea rows=\"4\" cols=\"50\">\nThis is a multi-line text area.\nIt doesn't automatically create separate paragraphs.\nText wraps based on dimensions supplied.\n</textarea>\n\n\n\n\nTop 90 HTML Interview Questions for Freshers & Experts\nHTML interview questions delve into foundational concepts, including HTML structure, tags, elements, and attributes, while also exploring more advanced topics such as semantic HTML, CSS integration, and HTML5 features. Common questions may involve defining HTML, explaining the purpose of tags and attributes, distinguishing between HTML elements and tags, and understanding the differences between block-level and inline elements. Be prepared to discuss how to incorporate images, links, and forms in HTML, as well as how to structure a basic HTML document and the significance of semantic HTML for accessibility and SEO.\n\nThis article will discuss the top 90 HTML Interview Questions you should know to crack those technical interviews and land your dream job.\n\nAccelerate your career as a skilled MERN Stack Developer by enrolling in the latest Full Stack Developer - MERN Stack Master's program. 🎯\nHTML Interview Questions for Freshers"
  },
  {
    "id": "746",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is HTML?",
    "answer": "HTML stands for Hypertext Markup Language, the language of the Internet. It is the standard text formatting language used for creating and displaying pages on the Internet.\n\nHTML documents comprise the elements and the tags that format it for proper page display."
  },
  {
    "id": "747",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are HTML tags?",
    "answer": "We use HTML tags to place the elements in the proper and appropriate format. Tags use the symbols < and > to set them apart from the HTML content.\n\nThe HTML tags need not always be closed. For example, in the case of images, the closing tags are not required as <img> tags."
  },
  {
    "id": "748",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are HTML Attributes?",
    "answer": "Attributes are the properties that can be added to an HTML tag. These attributes change the way the tag behaves or is displayed. For example, a <img> tag has an src attribute, which you use to add the source from which the image should be displayed.\n\nWe add attributes right after the name of the HTML tag inside the brackets. We can only add the attributes to opening or self-closing tags but never to closing tags.\n\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs"
  },
  {
    "id": "749",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a marquee in HTML?",
    "answer": "Marquee is used for scrolling text on a web page. It automatically scrolls the image or text up, down, left, or right. You must use </marquee> tags to apply for a marquee."
  },
  {
    "id": "750",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you separate a section of text in HTML?",
    "answer": "We separate a section of text in HTML using the below tags:\n\n<br> tag – It separates the line of text. It breaks the current line and shifts the flow of the text to a new line.\n<p> tag–This tag is used to write a paragraph of text.\n<blockquote> tag–This tag defines large quoted sections."
  },
  {
    "id": "751",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Define the list types in HTML.",
    "answer": "The list types in HTML are as follows:\n\nOrdered list–The ordered list uses <ol> tag and displays elements in a numbered format.\nUnordered list–The unordered list uses <ul> tag and displays elements in a bulleted format.\nDefinition list–The definition list uses <dl>, <dt>, <dd> tags and displays elements in definition form like in a dictionary."
  },
  {
    "id": "752",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you align list elements in an HTML file?",
    "answer": "We can align the list elements in an HTML file using indents. If you indent each nested list further than the parent list, you can easily align and determine the various lists and their elements."
  },
  {
    "id": "753",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Differentiate between an Ordered list and an Unordered list.",
    "answer": "An unordered list uses <ul> </ul> tags, and each element of the list is written between <li> </li> tags. The list items are displayed as bullets rather than numbers.\n\nAn ordered list uses <ol> </ol> tags, and each element of the list is written between <li> </li> tags. The list items are displayed as numbers rather than bullet points.\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML List Example</h2>\n    <ul>\n      <li>Coffee</li>\n      <li>Tea</li>\n      <li>Milk</li>\n    </ul>\n    <ol>\n      <li>Coffee</li>\n      <li>Tea</li>\n      <li>Milk</li>\n    </ol>\n  </body>\n</html>\nhtml-list-example-23."
  },
  {
    "id": "754",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is an element in HTML?",
    "answer": "An element in HTML is a set of tags that define a specific part of a web page. It consists of a start tag, content, and an end tag."
  },
  {
    "id": "755",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between HTML and CSS?",
    "answer": "HTML creates a web page's structure and content, while CSS defines its appearance and layout.\n\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs\nIntermediate HTML Interview Questions and Answers"
  },
  {
    "id": "756",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Are the HTML tags and elements the same thing?",
    "answer": "No, HTML tags define the structure of a web page, while HTML elements are made up of a set of tags that define a specific part of a web page."
  },
  {
    "id": "757",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are void elements in HTML?",
    "answer": "Void elements in HTML are tags that do not require a closing tag. They are used to insert images, line breaks, and other content that does not require additional information."
  },
  {
    "id": "758",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the advantage of collapsing white space?",
    "answer": "Collapsing white space in HTML can help reduce web pages' size and make them load faster. It involves removing unnecessary white space between HTML elements."
  },
  {
    "id": "759",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are HTML Entities?",
    "answer": "HTML Entities are special characters used to represent characters that cannot be typed on a keyboard. They are often used to display special symbols and foreign characters."
  },
  {
    "id": "760",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you display a table in an HTML webpage?",
    "answer": "The HTML <table> tag displays data in a tabular format. It is also used to manage the layout of the page, for example, the header section, navigation bar, body content, and footer section. Given below is the list of HTML tags used for displaying a table on an HTML webpage:\n\nTag\n\nDescription\n\n<table>\n\nIt defines a table.\n\n<tr>\n\nIt defines a row in a table.\n\n<th>\n\nIt defines a header cell in a table.\n\n<td>\n\nIt defines a cell in a table.\n\n<caption>\n\nIt defines the table caption.\n\n<colgroup>\n\nIt specifies a group of one or more columns in a table for formatting.\n\n<col>\n\nIt is used with <colgroup> element to specify column properties for each column.\n\n<tbody>\n\nIt is used to group the body content in a table.\n\n<thead>\n\nIt is used to group the header content in a table.\n\n<tfooter>\n\nIt is used to group the footer content in a table.\n\nAlso Read: A Detailed Guide to HTML Tables 🎯"
  },
  {
    "id": "761",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How would you display the given table on an HTML webpage?",
    "answer": "5 pcs\n\n10\n\n5\n\n1 pcs\n\n50\n\n5\n\nThe HTML Code for the problem depicted above is:\n\n<table>\n  <tr>\n    <td>50 pcs</td>\n    <td>100</td>\n    <td>500</td>\n  </tr>\n  <tr>\n    <td>10 pcs</td>\n    <td>5</td>\n    <td>50</td>\n  </tr>\n</table>"
  },
  {
    "id": "762",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do we insert a comment in HTML?",
    "answer": "We can insert a comment in HTML by beginning with a lesser than sign and ending with a greater than sign. For example, “<!-“ and “->.”"
  },
  {
    "id": "763",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you insert a copyright symbol in HTML?",
    "answer": "To insert a copyright symbol in HTML, you can use the HTML entity &copy or the numeric code &#169;\n\nRelevant Read: What Is an HTML Entity? 💻"
  },
  {
    "id": "764",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is white space in HTML?",
    "answer": "An empty sequence of space characters is called white space in HTML. It is considered a single-space character.\n\nWhite space helps the browser merge multiple spaces into one space, making indentation easier. It also helps better organize the content and tags, making them readable and easily understood."
  },
  {
    "id": "765",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create links to different sections within the same HTML web page?",
    "answer": "We use the <a> tag and referencing through the # symbol to create several links to different sections within the same web page.\n\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs"
  },
  {
    "id": "766",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create a hyperlink in HTML?",
    "answer": "We use the anchor tag <a> to create a hyperlink in HTML that links one page to another. The hyperlink can be added to images, too."
  },
  {
    "id": "767",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Define an image map.",
    "answer": "An image map in HTML helps link different kinds of web pages using a single image. It can also be used to define shapes in the images used in the image mapping process."
  },
  {
    "id": "768",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we use a style sheet in HTML?",
    "answer": "A style sheet helps create a well-defined, consistent, and portable HTML webpage template. We can link a single style sheet template to various web pages, which makes it easier to maintain and change the website's look."
  },
  {
    "id": "769",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is semantic HTML?",
    "answer": "Semantic HTML is a coding style that uses HTML markup to reinforce the semantics or meaning of the content. \n\nFor example, in semantic HTML, the <b> </b> tag is not used for bold statements as well, and the <i> </i> tag is not used for italics. Instead of these, we use <strong></strong> and <em></em> tags."
  },
  {
    "id": "770",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is SVG in HTML?",
    "answer": "HTML SVG describes vector or raster graphics. SVG images and their behaviors are defined in XML text files. \n\nWe primarily use it for vector-type diagrams like pie charts and 2-dimensional graphs in an X-Y coordinate system.\n\n<svg width=\"100\" height=\"100\">\n  <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"yellow\" stroke-width=\"4\" fill=\"red\" />\n</svg>\nBecome job-ready by opting for the decade's hottest career option. Score your dream job in no time by enrolling in our Full Stack Java Developer Master's Program today! 🎯"
  },
  {
    "id": "771",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What would happen without text between the HTML tags?",
    "answer": "There would be nothing to format if there is no text present between the tags. Therefore, nothing will appear on the screen. \n\nSome tags, such as those without a closing tag like the <img> tag, do not require any text between them."
  },
  {
    "id": "772",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you create nested web pages in HTML?",
    "answer": "Nested web pages mean a webpage within a webpage. We can create nested web pages in HTML using the built-in iframe tag. The HTML <iframe> tag defines an inline frame. For example:\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML Iframes example</h2>\n    <p>\n      specify the size of the iframe using the height and width attributes:\n    </p>\n    <iframe src=\"https://simplilearn.com/\" height=\"600\" width=\"800\"></iframe>\n  </body>\n</html>"
  },
  {
    "id": "773",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add buttons in HTML?",
    "answer": "We can use the built-in Button tag in HTML to add buttons to an HTML web page.\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML Button Tag Example</h2>\n    <button name=\"button\" type=\"button\">CLICK ME</button>\n  </body>\n</html>"
  },
  {
    "id": "774",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different types of headings in HTML?",
    "answer": "There are six heading tags in HTML, defined with the <h1> to <h6> tags. Each type of heading tag displays a different text size from another. <h1> is the largest heading tag and <h6> is the smallest. For example:\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>This is Heading 1</h1>\n    <h2>This is Heading 2</h2>\n    <h3>This is Heading 3</h3>\n    <h4>This is Heading 4</h4>\n    <h5>This is Heading 5</h5>\n    <h6>This is Heading 6</h6>\n  </body>\n</html>\nheading-html"
  },
  {
    "id": "775",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you insert an image in the HTML webpage?",
    "answer": "You can insert an image in the HTML webpage by using the following code:\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML Image Example</h2>\n    <img src=\"tulip.jpeg\" />\n  </body>\n</html>"
  },
  {
    "id": "776",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the alt attribute in HTML?",
    "answer": "The alt attribute displays text in place of an image whenever the image cannot be loaded due to technical issues.\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML Alt Example</h2>\n    <img src=\"tulip.jpeg\" alt=\"Tulip Garden\" />\n  </body>\n</html>"
  },
  {
    "id": "777",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How are hyperlinks inserted in the HTML webpage?",
    "answer": "You can insert a hyperlink in the HTML webpage by using the following code:\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML Hyperlink Example</h2>\n    <a href=\"url\">link text</a>\n  </body>\n</html>\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs"
  },
  {
    "id": "778",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add color to the text in HTML?",
    "answer": "You can add color to the text in HTML by using the following code:\n\n<!DOCTYPE html>\n<html>\n  <body>\n    <h2>HTML Color Text Example</h2>\n    <h1 style=\"color: Red\">Hello HTML</h1>\n    <p style=\"color: Blue\">Line 1</p>\n    <p style=\"color: Green\">Line 2</p>\n  </body>\n</html>"
  },
  {
    "id": "779",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add CSS styling in HTML?",
    "answer": "There are three ways to include the CSS with HTML:\n\nInline CSS: It is used when less styling is needed or in cases where only a single element has to be styled. To use inline styles add the style attribute in the relevant tag.\nExternal Style Sheet: This is used when the style is applied to many elements or HTML pages. Each page must link to the style sheet using the <link> tag:\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\" />\n</head>\nInternal Style Sheet: It is used when a single HTML document has a unique style, and several elements must be styled to follow the format. Internal styles sheet is added in the head section of an HTML page by using the <style> tag:\n<head>\n  <style type=\"text/css\">\n    hr {\n      color: sienna;\n    }\n    p {\n      margin-left: 20px;\n    }\n    body {\n      background-image: url(\"images/back40.gif\");\n    }\n  </style>\n</head>"
  },
  {
    "id": "780",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What hierarchy do the style sheets follow?",
    "answer": "If a single selector includes three different style definitions, the definition closest to the actual tag takes precedence. Inline style takes priority over embedded style sheets, which take priority over external style sheets.\n\nDid You Know? 🔍\nThere will be more than 800000 jobs available in the full stack developer industry by next year."
  },
  {
    "id": "781",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you add JavaScript to an HTML webpage?",
    "answer": "JavaScript is used to make HTML web pages more interactive and user-friendly. It is a scripting language that allows you to interact with some aspects of the page based on user input. As with CSS, there are three significant ways of including JavaScript:\n\nInline:\nYou can add JavaScript to your HTML elements directly whenever a certain event occurs. We can add the JavaScript code using attributes of the HTML tags that support it. Here is an example that shows an alert with a message when the user clicks on it:\n\n<button onclick=\"alert('Click the Button!');\">\nClick!\n</button>\nScript block:\nYou can define a script block anywhere on the HTML code, which will get executed as soon as the browser reaches that part of the document. This is why script blocks are usually added at the bottom of HTML documents.\n\n<html>\n  <script>\n    var x = 1;\n    var y = 2;\n    var result = x + y;\n    alert(\"X + Y is equal to \" + result);\n  </script>\n</html>\nExternal JavaScript file:\nYou can also import the JavaScript code from a separate file and keep your HTML code clutter-free. This is especially useful if a large amount of scripting is added to an HTML webpage.\n\n<html>\n  <script src=\"my-script.js\"></script>\n</html>\nRelated Scripting Languages Interview Guides\nPHP \n\nCSS\n\nLaravel\n\nC#\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs\nAdvanced HTML Interview Questions and Answers"
  },
  {
    "id": "782",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different types of lists in HTML?",
    "answer": "In HTML, there are three lists: ordered, unordered, and definition. Ordered lists are numbered, unordered lists are bulleted, and definition lists are lists of terms and their definitions."
  },
  {
    "id": "783",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the ‘class' attribute in HTML?",
    "answer": "The ‘class' attribute in HTML defines a class for an HTML element. It can be used to apply a specific style to a group of elements on a web page."
  },
  {
    "id": "784",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between the ‘id' and ‘class' attributes of HTML elements?",
    "answer": "The ‘id' attribute defines a unique identifier for an HTML element, while the ‘class' attribute defines a class for a group of elements. An ‘id' can only be used once on a page, while a ‘class' can be used multiple times."
  },
  {
    "id": "785",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between HTML and XHTML?",
    "answer": "HTML and XHTML are both markup languages used to create web pages. However, XHTML is stricter than HTML and requires developers to write well-formed code that adheres to specific rules and guidelines. XHTML also requires all tags to be closed and all attributes to be quoted."
  },
  {
    "id": "786",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between HTML and HTML5?",
    "answer": "HTML5 is the latest version of HTML and includes new features and improvements over previous versions. Some key differences between HTML and HTML5 include support for multimedia elements (such as video and audio), improved semantics, and better support for mobile devices."
  },
  {
    "id": "787",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of the <head> tag in HTML?",
    "answer": "The <head> tag defines information about the web page that is not displayed on the page itself, such as its title, keywords, and other metadata. It is located between the <html> and <body> tags and is usually the first element in the document."
  },
  {
    "id": "788",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of the <meta> tag in HTML?",
    "answer": "The <meta> tag provides additional information about the web page, such as the author, description, and keywords. It is located within the <head> section of the HTML document."
  },
  {
    "id": "789",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between an absolute and relative URL?",
    "answer": "An absolute URL includes the full web address, the protocol (such as http or https) and the domain name (such as www.example.com). A relative URL, on the other hand, specifies the location of a resource relative to the current web page. For example, a relative URL might include the file path (such as /images/picture.jpg) or the relative path (such as ../images/picture.jpg)."
  },
  {
    "id": "790",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of the alt attribute in HTML?",
    "answer": "The alt attribute provides alternative text for an image in case the image cannot be displayed. This is important for accessibility, as screen readers can read the alt text to describe the image to visually impaired users.\n\nLearning HTML5 is just the start—combine it with MongoDB, Express.js, React, and Node.js to build dynamic web apps. Become a MERN Stack expert with our Masters Program! 💻"
  },
  {
    "id": "791",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of the title attribute in HTML?",
    "answer": "The title attribute provides additional information about an element, such as a link or an image. The title text is displayed as a tooltip when a user hovers over the element."
  },
  {
    "id": "792",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a form in HTML?",
    "answer": "A form is a set of input fields and other elements to collect user data. Forms can be used for various purposes, such as logging in, submitting feedback, or purchasing."
  },
  {
    "id": "793",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different types of form input fields in HTML?",
    "answer": "Several form input fields in HTML include text fields, checkboxes, radio buttons, select menus, and text areas. Each input field type is used to collect different types of data from users."
  },
  {
    "id": "794",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of the action attribute in HTML forms?",
    "answer": "The action attribute is used to specify the URL of the script or program that will process the data submitted by the form. When the user clicks the submit button, the form data is sent to the specified URL for processing."
  },
  {
    "id": "795",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the role of the method attribute in HTML forms?",
    "answer": "The method attribute specifies the HTTP method for submitting the form data. The two most common methods are GET and POST. GET retrieves data from the server, while POST sends data to the server."
  },
  {
    "id": "796",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In how many ways can you display HTML elements?",
    "answer": "HTML elements can be displayed in several ways, including block, inline, inline-block, and none. The display property can specify how an element should be displayed.\n\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs"
  },
  {
    "id": "797",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between “display: none” and “visibility: hidden” when used as attributes to the HTML element?",
    "answer": "The main difference between “display: none” and “visibility: hidden” is that the former removes the element from the document flow, while the latter simply hides it. Elements with “display: none” are not visible and do not take up any space on the page, while elements with “visibility: hidden” are not visible but still take up space."
  },
  {
    "id": "798",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to specify the link in HTML and explain the target attribute?",
    "answer": "Links can be specified using the <a> tag. The href attribute is used to specify the URL of the page that the link should go to. The target attribute can specify where the linked page should open, such as in a new or similar window."
  },
  {
    "id": "799",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In how many ways can we specify the CSS styles for the HTML element?",
    "answer": "CSS styles can be specified in several ways, including inline, internal, and external stylesheets. Inline styles are applied directly to the HTML element using the style attribute. Internal styles are defined within the <head> section of the HTML document using the <style> tag. External stylesheets are defined in a separate CSS file and linked to the HTML document using the <link> tag."
  },
  {
    "id": "800",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between link tag <link> and anchor tag <a>?",
    "answer": "The <link> tag links external resources, such as CSS stylesheets, to an HTML document. The <a> tag creates links to other pages or resources within the same document."
  },
  {
    "id": "801",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "When to use scripts in the head and when to use scripts in the body?",
    "answer": "Scripts can be placed in the <head> section of the HTML document or in the <body> section. Scripts that must be executed before the page is displayed, such as scripts that define variables or functions, should be placed in the <head> section. Scripts that must be executed after the page is displayed, such as scripts that manipulate the DOM, should be placed in the <body> section."
  },
  {
    "id": "802",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are forms, and how to create forms in HTML?",
    "answer": "Forms collect user data, such as login information or search queries. Forms can be created using the <form> tag, and input fields, such as text fields and checkboxes, can be added using various other tags.\n\nDid You Know? 🔍\nFull stack developers in the US earn an average annual salary of $86,000, making it one of the most lucrative roles in software development."
  },
  {
    "id": "803",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to handle events in HTML?",
    "answer": "Events can be handled using JavaScript, which can be included in the HTML document using the <script> tag. Event listeners can be added to HTML elements using the addEventListener() method, which allows custom code to be executed in response to user actions, such as clicks or keystrokes."
  },
  {
    "id": "804",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are some advantages of HTML5 over its previous versions?",
    "answer": "HTML5 includes several new features and improvements over previous versions, including better multimedia support, semantic elements, and mobile device support. It also includes new APIs for working with web applications, such as the Geolocation API and the Canvas API.\n\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs\nHTML5 Interview Questions"
  },
  {
    "id": "805",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is new about the relationship between the <header> and <h1> tags in HTML5?",
    "answer": "Details about the heading and title of the material on the webpage are contained in the <header> tag. This tag, which can appear as one or many tags on a single web page, contains the menu and logo for the website. It can contain other elements like <nav>, <hgroup>, <h1>, etc. While the <header> tag is often used to define the header of a page, it can also be used for other purposes, such as a footer or a sidebar.\n\nA header tag called <h1> displays the document's structure. Search engines use headings to index the content and structure of online pages. There are six headings in total, starting with <h1> and ending with <h6>. Any heading element, including h1, may be used multiple times within both the <header> and <body> sections, but it is generally recommended to use only one <h1> element per page."
  },
  {
    "id": "806",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are inline and block elements in HTML5?",
    "answer": "Inline elements style or format particular content sections within block-level elements. For example, <span>, <a>, <strong>, and <em> take up only the appropriate width and do not begin on a new line. HTML Block components are used to organize a webpage's major content. They usually begin on a new line and fill the entire container width, e.g., <div>, <p>, <h1> to <h6>, <ul>, etc."
  },
  {
    "id": "807",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between <figure> tag and <img> tag?",
    "answer": "HTML <img> tag is used to add a picture in the webpage/website. In HTML5, you can <figure> tag to primarily group related content, such as an image and its caption or a code block and description. Examples of this type of material include diagrams, pictures, codes, and illustrations. Thus, In an HTML document, a picture is embedded using the image tag, while its content is logically organized using the figure tag."
  },
  {
    "id": "808",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to specify the metadata in HTML5?",
    "answer": "Metadata is a <head> element component that helps online services, search engines, and browsers understand and display content. It aids in specifying the author, viewport settings, charset, title, and other page details. Although these tags are not visible on the website, they are significant for search engines and browsers as they organize and classify content."
  },
  {
    "id": "809",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Are the <datalist> tag and <select> tag the same?",
    "answer": "The <datalist> tag provides a list of suggested values for an <input> element, while the <select> tag creates a dropdown list where users can select one or more options from a predefined set.\n\nRelevant Read: How to Implement HTML Dropdown? 💻"
  },
  {
    "id": "810",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Define Image Map.",
    "answer": "An HTML image map allows you to make some portions of a picture clickable, serving as links to other locations. This method works well for developing interactive visuals for websites or intricate navigation systems.\n\nUsing HTML, image maps effectively produce interactive graphics by designating clickable areas inside an image. This engages users with various visual components, resulting in specific links or actions."
  },
  {
    "id": "811",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Semantic Elements?",
    "answer": "HTML5 Semantics describes how to give web content a more logical structure and meaning by using specific elements such as <header>, <footer>, <nav>, <article>, <section>, etc. The tags that provide an HTML page more than just a presentation are called HTML semantics.\n\nSemantic HTML increases search engine optimization (SEO), makes websites more accessible, and gives information a more logical structure and meaning. It improves HTML readability by providing explicit definitions for sections and page layouts."
  },
  {
    "id": "812",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between the <meter> tag and <progress> tag?",
    "answer": "The <progress> tag is most appropriate for displaying the progress of a single task. For tasks unrelated to task completion, including memory or disk space utilization, the <meter> works well. It displays a measurement of something, such as battery life, fuel level, or thermometer."
  },
  {
    "id": "813",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is drag and drop possible using HTML5, and how?",
    "answer": "With drag and drop in HTML, an element can be dropped to a different location by clicking and holding the mouse button over it and then letting go of it. \n\nYou can enable the drag-and-drop feature in HTML 5 by following these steps:\n\nUse the draggable attribute to make an element draggable: <img draggable=\"true\">.\nUse the ondragstart attribute to specify the drag behavior. \nUse the ondragover event to allow dropping by preventing the default behavior:\nUse the ondrop event to handle the drop and retrieve the data.\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs"
  },
  {
    "id": "814",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between SVG and Canvas HTML5 elements?",
    "answer": "Whereas Canvas can render raster and vector graphics, SVG is only used to create vector drawings. Compared to SVG, Canvas allows for faster rendering of images and animations with less flexibility. However, Canvas is less flexible because it does not allow for easy manipulation of drawn elements after rendering.\n\nBecause of their modest size, SVG files are perfect for websites with a lot of graphical content. Generally, canvas elements are much bigger than SVG files. They consequently take longer to load and may decrease the speed of online pages."
  },
  {
    "id": "815",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What type of audio files can be played using HTML5?",
    "answer": "HTML5 supports various audio files, including MP3, WAV, and OGG. The supported audio formats depend on the browser. While MP3, WAV, and OGG are commonly supported, not all browsers support every format."
  },
  {
    "id": "816",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the significant goals of the HTML5 specification?",
    "answer": "HTML5 was intended to replace HTML 4, XHTML, and HTML DOM Level 2. The main objectives of the HTML5 specification were to improve cross-platform compatibility for PC, tablet, and smartphone users and deliver rich content (graphics, movies, etc.) without the need for extra plugins like Flash. Moreover, HTML5 introduced a more forgiving parsing model to ensure uniform cross-browser behavior, ease error handling, and facilitate compatibility with documents created using previously outdated standards."
  },
  {
    "id": "817",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the concept of web storage in HTML5.",
    "answer": "HTML5 supports two different forms of data storage: session storage and local storage. SessionStorage stores data only for the current session. The data is deleted when the tab or window is closed; local storage stores data with no expiration date and persists until deleted. Thus, LocalStorage stores data with no expiration time, while SessionStorage only retains data for the duration of the page session."
  },
  {
    "id": "818",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Microdata in HTML5?",
    "answer": "Search engines use HTML microdata better to understand the composition and content of web pages, making it a crucial component of contemporary web development. Web developers can use Microdata to offer more details about particular items on a page, which helps search engines better comprehend the website's context and content.\n\nMicrodata uses a set of common attributes and values, such as itemprop and item type, to define particular elements on a web page. However, microdata improves a web page's representation in search results, not directly its ranking."
  },
  {
    "id": "819",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Which tag is used to represent the result of a calculation? Explain its attributes.",
    "answer": "The <output> element is used to describe the outcome of a computation. A website or application can insert the results of a calculation or a user's action into the <output> HTML element. When displaying results on forms dependent on computations or user input, the <output> tag is usually utilized. \n\nBy connecting it to particular <input> elements, The for attribute of the <output> element can be used to specify a space-separated list of element IDs that the result relates to (usually <input> elements). In HTML 5, a new tag called <output> has to have a starting and ending tag. Additionally, it supports HTML's Event and Global Attributes. JavaScript allows for dynamic content manipulation within the <output> tag.\n\nGet access and complete hands-on experience on a plethora of software development skills in our unique Job Guarantee bootcamp. Get job-ready by enrolling in our comprehensive Full Stack Java Developer Masters program today! 🎯"
  },
  {
    "id": "820",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we include audio or video in a webpage?",
    "answer": "Using the <audio> tag, audio can now be incorporated into web pages in HTML5. An inline element called the <audio> tag embeds audio content in web pages, and it can include multiple sources using the <source> tag to provide fallbacks for different file formats. This element is helpful if you want to include audio on your webpage—songs, interviews, etc..\n\nA video can be shown on a web page using the HTML <video> element. The <video> element can use width, height, and controls. Add the video's source by using the source tag with the src property. It’s important to note that other attributes like autoplay, loop, muted, and poster can also control behavior and presentation."
  },
  {
    "id": "821",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain HTML5 Graphics.",
    "answer": "Graphics are visualizations that enhance user interaction and experience and make websites and applications aesthetically pleasing. Examples of graphics include maps, flowcharts, bar graphs, engineering drawings, construction blueprints, and photos. Web graphics typically use the following technologies: PNG, Canvas API, WebCGM, JPG or JPEG, CSS, SVG, etc.\n\nSVG: A basic SVG document comprises multiple fundamental shape elements that work together to create a graphic and the <svg> root element. SVG has elements and properties for rectangles, polygons, circles, lines, and curves. In addition, SVG allows for gradients, rotations, animations, filter and blur effects, JavaScript interactivity, and much more. \n\nPNG: Portable Network Graphics, or PNG for short, is a raster format. This file type is especially popular among web designers because it can handle visuals with transparent or semi-transparent backgrounds.\n\nWebCGM: WebCGM is a CGM profile that enhances Web connectivity and is tailored for Web applications in disciplines such as technical illustration, electronic documentation, geophysical data visualization, and related areas.\n\nCanvas API: JavaScript creates dynamic graphics through the HTML <canvas> element. All that the <canvas> element does is hold visuals. The visuals are drawn using JavaScript. Multiple ways exist to add images, text, circles, boxes, and paths to a canvas.\n\nJPG or JPEG: JPG or JPEG, which stands for Joint Photographic Experts Group, is mostly used in digital photography and has a 10:1 compression ratio. These files have the .jpg or .jpeg extension. Because JPG files are small, programmers use them.\n\nCSS: Cascading Style Sheets (CSS) are used to style the layout of a webpage. CSS gives you control over various design components, including text color, font size, spacing between elements, element positioning, background image and color selection, device and screen size-specific displays, and much more."
  },
  {
    "id": "822",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain new input types provided by HTML5 for forms.",
    "answer": "When supported by the web browser, the new HTML5 input types provide features like inline help text, date and color picker options, data validation, and more. With the new input types, you can validate common data types like dates, email addresses, and URLs without depending as much on client-side and server-side scripting. The two fundamental HTML5 input formats are URL and email. Other than these two, there are many input types available:\n\ndate: Using a drop-down calendar, the user can choose a date.\ndatetime-local: It enables users to choose a local date and time.\ndatetime: This feature lets the user choose a date, time, and time zone. The user can enter time with it. Note: The datetime input type was deprecated in favor of datetime-local. The datetime input is no longer recommended.\nweek: A drop-down calendar lets the user choose a week and year.\nemail: The user can input their email address using it.\ntel: It enables the user to input the phone number in a predetermined format.\nmonth: It presents a drop-down calendar where the user may choose a month and year.\nsearch: It's a text area where you can type a query.\nURL: It lets the user type in the URL of a website.\ncolor: It enables the user to choose a color from the color picker.\nnumber: It lets the user enter a numerical value using the increase and decrease arrows.\nrange: It enables the user to vary the value using the slider.\nBecome a Software Development Professional\n35% Annual Growth\n80K+\nFull Stack Developer - MERN Stack Masters Program\nFull Stack Developer - MERN Stack Masters Program\n40+ micro skilling exercises & 6+ work-like professional projects\nDevelop expertise in 10+ full stack development tools and frameworks\n6 months\nView Program\nFull Stack Java Developer Masters Program\nFull Stack Java Developer Masters Program\nKickstart Full Stack Java Developer career with industry-aligned curriculum by experts\nHands-on practice through 20+ projects, assessments, and tests\n7 months\nView Program\nHere's what learners are saying regarding our programs:\nJonathan Mabiala\nJonathan Mabiala\nJava Software Developer, Desjardins\nI chose to upskill after moving from the United States to Canada in 2019. My journey in programming began during engineering, but I lost touch after college. Realizing I needed certification to advance, I enrolled in Simplilearn. The live classes boosted my confidence, allowing me to transition to a Java Software Developer role.\n\nAtharv Chavan\nAtharv Chavan\nSoftware Development Engineer, PTC\nUpskilling with Java Development course transformed my career. The hands-on coding sessions and expert mentorship bridged the gap between theory and real-world application. With enhanced skills, I secured a new job, delivered projects ahead of schedule, and even earned an innovation award—marking a significant milestone in my IT journey.\n\nNot sure what you’re looking for?View all Related Programs"
  },
  {
    "id": "823",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the New tags in Media Elements in HTML5?",
    "answer": "HTML5 now includes new components that make writing simple, quick code for intricate, dynamic, engaging, and successful websites possible. These new components add improved page layouts, functional features, and other enhancements.\n\n<audio>: Embeds audio content directly into a webpage. It supports multiple audio formats (e.g., MP3, WAV, OGG).  It includes pause, play, and more.\n<video>: Embeds video content into a webpage. It supports multiple video formats (e.g., MP4, WebM, Ogg).  It includes attributes like controls, autoplay, loop, and more.\n<source>: Defines multiple media resources for <audio> and <video>. It allows browsers to choose the best-supported format.\n<track>: Adds text tracks (e.g., captions, subtitles, descriptions) to <audio> or <video> elements. It supports attributes like kind, src, and label.\n<embed>: Embeds external content, including multimedia like video or audio, and applications such as PDF viewers. Unlike <audio> and <video>, it is a general-purpose element."
  },
  {
    "id": "824",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do you think adding drag-and-drop functionality in HTML5 is important? How will you make an image draggable in HTML5?",
    "answer": "You had to use other JavaScript frameworks, such as jQuery or more complicated JavaScript programming, to accomplish the drag-and-drop capability in regular HTML4. HTML5's drag-and-drop features are a fundamental UI concept that allows you to copy, reorganize, and remove items with your mouse. \n\nAn element can be moved by dragging it while holding the mouse button. Let go of the mouse button to drop the element there. Set draggable=true on an object's element to enable draggable functionality. You can drag and drop almost anything on your website, including files, photos, links, and other markup.\n\nOnce you've defined the draggable=\"true\" attributes, attach a drag start event handler to your content. This will initiate the drag sequence for each column. Use the drag enter, drag over, and drag leave event handlers to make it easier for the user to comprehend how to interact with your UI. \n\nRelevant Read: HTML vs HTML5: What's The Difference and Which is Better? 💻"
  },
  {
    "id": "825",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we need the MathML element in HTML5?",
    "answer": "MathML is useful for displaying formulas on technical and mathematical websites. HTML5 supports MathML, although it must be used inside the <math> and </math> tags. This guarantees sophisticated algorithms, scientific publications, and e-learning resources have clear math information. Its goal is to include mathematical formulas in texts and on World Wide Web sites. Only Mozilla Firefox and Google Chrome are compatible with MathML. MathML support can vary; other browsers might require polyfills or third-party libraries."
  },
  {
    "id": "826",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the server-sent events in HTML5?",
    "answer": "When a web page automatically receives updates from a server, it's known as a server-sent event (SSE). Servers can use HTTP connections to send clients real-time data through these events. \n\nWhen the server sends events, updates occur automatically. One-way, or unidirectional, messaging is how a server updates a webpage and communicates with a client. It was previously possible to do this, but the website would need to inquire whether any updates were available."
  },
  {
    "id": "827",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Web Workers?",
    "answer": "Web Workers provide a simple way for web content to run scripts on background threads. The worker thread can complete tasks without affecting the user interface. They can also use the XMLHttpRequest and fetch() APIs for network requests. \n\nAfter it is created, a worker can post messages to an event handler provided by the JavaScript code to convey messages to that code. Web Workers enable long-running tasks to be executed without interrupting user interactions, keeping the UI responsive."
  },
  {
    "id": "828",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the usage of a novalidate attribute for the form tag that is introduced in HTML5?",
    "answer": "The novalidate attribute prohibits forms from running validation logic when they are submitted. It always allows the form submission process to proceed, even if the validation logic yields a different result. The novalidate attribute is useful when allowing users to submit forms without requiring input validation, which can help save incomplete forms for later use. Therefore, you can turn off your form's validation laws and allow users to submit the form and continue later without having to compel them to verify."
  },
  {
    "id": "829",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are raster images and vector images?",
    "answer": "Raster images are composed of pixels, which are tiny dots that combine tone and color to create an image. When you zoom in or magnify an image, pixels appear as tiny squares on graph paper. The number of pixels determines the image's resolution and higher pixel counts lead to better quality but larger file sizes.\n\nVector images are ideal for designs that must be scaled without sacrificing quality, such as logos and images, because they employ mathematical routes. Because vector graphics comprise numerous mathematical curves, they are ideal for printing."
  },
  {
    "id": "830",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How do you support SVG in old browsers?",
    "answer": "There are a few ways to embed SVG in an unsupported browser besides just pasting it into an HTML document. The <object> element can be used if the graphic is stored in an .svg file. Additionally, you can use the utility ReadySetRaphael.js to convert a .svg file into a Raphael-compatible format and save the result in a different.js file. You can also use modern libraries or polyfills like SVG-Inject. Further, if not, you can use Modernizr to determine the browser's capacity to render SVG and serve the script.\n\nDid You Know? 🔍\nThe demand for full stack developers is growing 35% faster than other tech roles, as companies seek versatile professionals skilled in both frontend and backend development."
  },
  {
    "id": "831",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different approaches to making an image responsive?",
    "answer": "Responsive pictures provide low-resolution images to tiny screens and high-resolution images to larger panels. They are handled during the resource selection process after CSS is parsed. Techniques like srcset and media queries allow the browser to choose the appropriate image size based on device characteristics.\n\nMedia Queries: Modify the style according to the device's specs, including screen resolution, orientation, width, height, and type.\n\nHTML srcset attribute: The image's URL for use in various contexts is specified by the srcset property. The use of <source> in <image> necessitates this property.\n\nCSS: Set the CSS width attribute to 100% and the height to auto if you want the picture to respond by scaling up and down."
  },
  {
    "id": "832",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a manifest file in HTML5?",
    "answer": "The manifest file is a basic text file that specifies which resources the browser should cache for offline access. Manifest files are always prefaced with the phrase CACHE MANIFEST and are saved under the .appcache extension. They are divided into three sections: FALLBACK, NETWORK, and CACHE. The manifest attribute in the <html> tag specifies the HTML5 cache web pages. Every time a user views a webpage that has manifest properties or is specified in the manifest file, that webpage will be cached.\n\nIt is worth mentioning that the CACHE MANIFEST syntax is now deprecated in HTML5. For offline caching, the AppCache specification has been superseded by Service Workers."
  },
  {
    "id": "833",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the Geolocation API in HTML5?",
    "answer": "Geolocation is one of the greatest HTML5 APIs for determining the user's geographic location in a web application. This new HTML5 feature lets you retrieve the current user's latitude and longitude coordinates. You can see your current location on the page by having JavaScript collect these coordinates and submit them to the server. The user's position can be obtained using the getCurrentPosition() method.\n\n\n\n\nThis article covers the most frequently asked HTML and HTML5 questions asked in interviews.\n\nBefore starting with the interview questions on HTML Language, let’s first go through HTML, what is HTML, the career opportunities it provides, etc.\n\nWhat is HTML?\nHTML stands for HyperText Markup Language. It is a standard text formatting language used for developing web pages released in 1993. HTML is a language that is interpreted by the browser and it tells the browser what to display and how to display.\n\nHTML is an important language to learn if anyone wants to work in the web development domain [Web designers, Web Developers]. HTML alone is not sufficient for a web developer because HTML only defines the structure of the data that will be rendered on the browser in a webpage, to make it visually appealing and to make it functional, we will need to use CSS and Javascript respectively. \n\nPlay\nThe latest version of HTML is HTML5. There are two main components in HTML language, Tags and Attributes. The below image shows some basic HTML tags and attributes.\n\n\nHTML Interview Questions and Answers"
  },
  {
    "id": "834",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Can we display a web page inside a web page or Is nesting of webpages possible?",
    "answer": "Yes, we can display a web page inside another HTML web page. HTML provides a tag <iframe> using which we can achieve this functionality.\n\n<iframe src=”url of the web page to embed” />\n\nCreate a free personalised study plan\nGet into your dream companies with expert guidance\nReal-Life Problems\nPrep for Target Roles\nCustom Plan Duration\nCreate My Plan"
  },
  {
    "id": "835",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are tags and attributes in HTML?",
    "answer": "Tags are the primary component of the HTML that defines how the content will be structured/ formatted, whereas Attributes are used along with the HTML tags to define the characteristics of the element. For example, <p align=” center”>Interview questions</p>, in this the ‘align’ is the attribute using which we will align the paragraph to show in the center of the view."
  },
  {
    "id": "836",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are void elements in HTML?",
    "answer": "HTML elements which do not have closing tags or do not need to be closed are Void elements. For Example <br />, <img />, <hr />, etc.\n\nYou can download a PDF version of Html Interview Questions.\n\nDownload PDF"
  },
  {
    "id": "837",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the advantage of collapsing white space?",
    "answer": "In HTML, a blank sequence of whitespace characters is treated as a single space character, Because the browser collapses multiple spaces into a single space character and this helps a developer to indent lines of text without worrying about multiple spaces and maintain readability and understandability of HTML codes."
  },
  {
    "id": "838",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are HTML Entities?",
    "answer": "In HTML some characters are reserved like ‘<’, ‘>’, ‘/’, etc. To use these characters in our webpage we need to use the character entities called HTML Entities. Below are a few mapping between the reserved character and its respective entity character to be used.\n\nCharacter\tEntity Name\tEntity Number\n<\t&lt;\t&#60;\n>\t&gt;\t&#62;\n&\t&amp;\t&#38;\n(non-breaking space) Eg. 10  PM\t&nbsp; Eg. <p>10&nbsp&nbspPM</p>\t&#160;\nExplore InterviewBit’s Exclusive Live Events\nBy\n\nNo More Events to show!"
  },
  {
    "id": "839",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are different types of lists in HTML?",
    "answer": "7. What is the ‘class’ attribute in HTML?\nThe class attribute is used to specify the class name for an HTML element. Multiple elements in HTML can have the same class value. Also, it is mainly used to associate the styles written in the stylesheet with the HTML elements.\n\n\nStart Your Coding Journey With Tracks\nMaster Data Structures and Algorithms with our Learning Tracks\nTopic Buckets\nMock Assessments\nReading Material\nView Tracks"
  },
  {
    "id": "840",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between the ‘id’ attribute and the ‘class’ attribute of HTML elements?",
    "answer": "Multiple elements in HTML can have the same class value, whereas a value of id attribute of one element cannot be associated with another HTML element."
  },
  {
    "id": "841",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Define multipart form data?",
    "answer": "Multipart form data is one of the values of the enctype attribute. It is used to send the file data to the server-side for processing. The other valid values of the enctype attribute are text/plain and application/x-www-form-urlencoded."
  },
  {
    "id": "842",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Describe HTML layout structure.",
    "answer": "Every web page has different components to display the intended content and a specific UI. But still, there are few things which are templated and are globally accepted way to structure the web page, such as:\n\n<header>: Stores the starting information about the web page.\n<footer>: Represents the last section of the page.\n<nav>: The navigation menu of the HTML page.\n<article>: It is a set of information.\n<section>: It is used inside the article block to define the basic structure of a page.\n<aside>: Sidebar content of the page."
  },
  {
    "id": "843",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to optimize website assets loading?",
    "answer": "To optimize website load time we need to optimize its asset loading and for that:\n\nCDN hosting - A CDN or content delivery network is geographically distributed servers to help reduce latency.\nFile compression - This is a method that helps to reduce the size of an asset to reduce the data transfer\nFile concatenation - This reduces the number of HTTP calls\nMinify scripts - This reduces the overall file size of js and CSS files\nParallel downloads - Hosting assets in multiple subdomains can help to bypass the download limit of 6 assets per domain of all modern browsers. This can be configured but most general users never modify these settings.\nLazy Loading - Instead of loading all the assets at once, the non-critical assets can be loaded on a need basis."
  },
  {
    "id": "844",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the various formatting tags in HTML?",
    "answer": "HTML has various formatting tags:\n\n<b> - makes text bold\n<i> - makes text italic\n<em> - makes text italic but with added semantics importance\n<big> - increases the font size of the text by one unit\n<small> - decreases the font size of the text by one unit\n<sub> - makes the text a subscript\n<sup> - makes the text a superscript\n<del> - displays as strike out text\n<strong> - marks the text as important\n<mark> - highlights the text\n<ins> - displays as added text\n\nDiscover your path to a  \nSuccessful Tech Career for FREE!\nAnswer 4 simple questions & get a career plan tailored for you\nInterview Process\nCTC & Designation\nProjects on the Job\nTry It Out\n2 Lakh+ Roadmaps Created"
  },
  {
    "id": "845",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the different kinds of Doctypes available?",
    "answer": "The three kinds of Doctypes which are available:\n\nStrict Doctype \nTransitional Doctype\nFrameset Doctype"
  },
  {
    "id": "846",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Please explain how to indicate the character set being used by a document in HTML?",
    "answer": "The character set is defined in <meta> tag inside <head> element.\n\n<!DOCTYPE html>\n<html>\n <head>\n   <meta charset=\"UTF-8\">\n   ...\n   ...\n </head>\n ...\n</html>"
  },
  {
    "id": "847",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between <strong>, <b> tags and <em>, <i> tags?",
    "answer": "The effect on a normal webpage of the tags <strong>, <b>  and <em>, <i> is the same. <b> and <i> tags stands for bold and italic. These two tags only apply font styling and bold tag <b>, just adds more ink to the text, these tags don't say anything about the text.\n\nWhereas, <strong> and <em> tags represent that the span of text is of strong importance or more importance and emphatic stress respectively than the rest of the text. These tags have semantic meaning."
  },
  {
    "id": "848",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the significance of <head> and <body> tag in HTML?",
    "answer": "<head> tag provides the information about the document. It should always be enclosed in the <html> tag. This tag contains the metadata about the webpage and the tags which are enclosed by head tag like <link>, <meta>, <style>, <script>, etc. are not displayed on the web page. Also, there can be only 1 <head> tag in the entire Html document and will always be before the <body> tag.\n\n<body> tag defines the body of the HTML document. It should always be enclosed in the <html> tag. All the contents which needs to be displayed on the web page like images, text, audio, video, contents, using elements like <p>, <img>, <audio>, <heading>, <video>, <div>, etc. will always be enclosed by the <body> tag. Also, there can be only 1 body element in an HTML document and will always be after the <head> tag."
  },
  {
    "id": "849",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Are the HTML tags and elements the same thing?",
    "answer": "No. HTML elements are defined by a starting tag, may contain some content and a closing tag.For example, <h1>Heading 1</h1> is a HTML element but just <h1> is a starting tag and </h1> is a closing tag."
  },
  {
    "id": "850",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How is Cell Padding different from Cell Spacing?",
    "answer": "Cell Spacing is the space or gap between two consecutive cells. Whereas, Cell Padding is the space or gap between the text/ content of the cell and the edge/ border of the cell. Please refer to the above figure example to find the difference."
  },
  {
    "id": "851",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we club two or more rows or columns into a single row or column in an HTML table?",
    "answer": "HTML provides two table attributes “rowspan” and “colspan” to make a cell span to multiple rows and columns respectively."
  },
  {
    "id": "852",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is it possible to change an inline element into a block level element?",
    "answer": "Yes, it is possible using the “display” property with its value as “block”, to change the inline element into a block-level element."
  },
  {
    "id": "853",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In how many ways can we position an HTML element? Or what are the permissible values of the position attribute?",
    "answer": "There are mainly 7 values of position attribute that can be used to position an HTML element:\n\nstatic: Default value. Here the element is positioned according to the normal flow of the document.\nabsolute: Here the element is positioned relative to its parent element. The final position is determined by the values of left, right, top, bottom.\nfixed: This is similar to absolute except here the elements are positioned relative to the <html> element.\nrelative: Here the element is positioned according to the normal flow of the document and positioned relative to its original/ normal position.\ninitial: This resets the property to its default value.\ninherit: Here the element inherits or takes the property of its parent."
  },
  {
    "id": "854",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In how many ways you can display HTML elements?",
    "answer": "inline: Using this we can display any block-level element as an inline element. The height and width attribute values of the element will not affect.\nblock: using this, we can display any inline element as a block-level element. \ninline-block: This property is similar to inline, except by using the display as inline-block, we can actually format the element using height and width values.\nflex: It displays the container and element as a flexible structure. It follows flexbox property.\ninline-flex: It displays the flex container as an inline element while its content follows the flexbox properties.\ngrid: It displays the HTML elements as a grid container.\nnone: Using this property we can hide the HTML element.\nBelow are some of the display types which are rarely used:\n\ntable\ninline-table\ntable-cell\ntable-column\ntable-row\ninline-grid\nlist-item\ninherit\ninitial\ntable-caption"
  },
  {
    "id": "855",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between “display: none” and “visibility: hidden”, when used as attributes to the HTML element.",
    "answer": "When we use the attribute “visibility: hidden” for an HTML element then that element will be hidden from the webpage but still takes up space. Whereas, if we use the “display: none” attribute for an HTML element then the element will be hidden, and also it won’t take up any space on the webpage."
  },
  {
    "id": "856",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to specify the link in HTML and explain the target attribute?",
    "answer": "HTML provides a hyperlink - <a> tag to specify the links in a webpage. The ‘href’ attribute is used to specify the link and the ‘target’ attribute is used to specify, where do we want to open the linked document. The ‘target’ attribute can have the following values:\n\n_self: This is a default value. It opens the document in the same window or tab as it was clicked.\n_blank: It opens the document in a new window or tab.\n_parent: It opens the document in a parent frame.\n_top: It opens the document in a full-body window."
  },
  {
    "id": "857",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "In how many ways can we specify the CSS styles for the HTML element?",
    "answer": "There are three ways in which we can specify the styles for HTML elements:\n\nInline: Here we use the ‘style’ attribute inside the HTML element.\nInternal: Here we use the <style> tag inside the <head> tag. To apply the style we bind the elements using ‘id’ or ‘class’ attributes.\nExternal: Here we use the <link> tag inside <head> tag to reference the CSS file into our HTML code. Again the binding between elements and styles is done using ‘id’ or ‘class’ attributes."
  },
  {
    "id": "858",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between link tag <link> and anchor tag <a>?",
    "answer": "The anchor tag <a> is used to create a hyperlink to another webpage or to a certain part of the webpage and these links are clickable, whereas, link tag <link> defines a link between a document and an external resource and these are not clickable."
  },
  {
    "id": "859",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to include javascript code in HTML?",
    "answer": "HTML provides a <script> tag using which we can run the javascript code and make our HTML page more dynamic.\n\n<!DOCTYPE html>\n<html>\n   <body>\n    <h1>\n          <span>This is a demo for </span>\n          <u><span id=\"demo\"></span></u>\n   </h1>\n   <script>\n       document.getElementById(\"demo\").innerHTML = \"script Tag\"\n   </script>\n   </body>\n</html>"
  },
  {
    "id": "860",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "When to use scripts in the head and when to use scripts in the body?",
    "answer": "If the scripts contain some event-triggered functions or jquery library then we should use them in the head section. If the script writes the content on the page or is not inside a function then it should be placed inside the body section at the bottom. In short, follow below three points:\n\nPlace library scripts or event scripts in the head section.\nPlace normal scripts that do not write anything on the page, in the head section until there is any performance issue.\nPlace scripts that render something on the web page at the bottom of the body section."
  },
  {
    "id": "861",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are forms and how to create forms in HTML?",
    "answer": "The HTML form is used to collect the user inputs. HTML provides a <form> tag to create forms. To take input from the user we use the <input> tag inside the form so that all collected user data can be sent to the server for processing. There are different input types like ‘button’, ‘checkbox’, ‘number’, ‘text’, ‘password’, ‘submit’ etc.\n\n<form action=\"/submit_data.php\">\n   <label>Enter your name: </label>\n   <input type=\"text\" name=\"name\" /> \n   <label>Enter Mobile number </label>\n   <input type=\"number\" name=\"mobile_no\"/>\n   <input type=\"submit\" value=\"Submit\">\n</form>"
  },
  {
    "id": "862",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to handle events in HTML?",
    "answer": "HTML allows event trigger actions in browsers using javascript or JQuery. There are a lot of events like ‘onclick’, ‘ondrag’, ‘onchange’, etc.\n\n<!DOCTYPE html>\n<html>\n   <body style=\"padding-top:50px\">\n       <h3 id=\"event_demo\">0</h3>\n       <input type=\"button\" onclick=\"myFunction()\" value=\"Click Me\" />\n       <input type=\"reset\" onclick=\"reset()\" value=\"Reset\" />\n   </body>\n   \n   <script>\n       function myFunction() {\n           var value = document.getElementById(\"event_demo\").innerHTML\n           value = parseInt(value) + 1;\n           document.getElementById(\"event_demo\").innerHTML = value;\n       }\n       function reset() {\n           document.getElementById(\"event_demo\").innerHTML = 0;\n       }\n   </script>\n</html>\nHTML5 Interview Questions"
  },
  {
    "id": "863",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is new about the relationship between the <header> and <h1> tags in HTML5?",
    "answer": "As HTML5 was all about better semantics and arrangements of the tags and elements, the <header> tag specifies the header section of the webpage. Unlike in previous version there was one <h1> element for the entire webpage, now this is the header for one section such as <article> or <section>. According to the HTML5 specification, each <header> element must at least have one <h1> tag."
  },
  {
    "id": "864",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Inline and block elements in HTML5?",
    "answer": "Inline\tBlock\nInline elements just take up the space that is absolutely necessary for the content and does not start from a new line.\nExample:- <span>, <a>, <strong>, <img>, <button>, <em>, <select>, <abbr>, <label>, <sub>, <cite>, <abbr>, <script>, <label>, <i>, <input>, <output>, <q>, etc.\tBlock elements start on a new line and consume the full width of the page available.\nExample:- <div>, <p>, <header>, <footer>, <h1>...<h6>, <form>, <table>, <canvas>, <video>, <blockquote>, <pre>, <ul>, <ol>, <figcaption>, <figure>, <hr>, <article>, <section>, etc."
  },
  {
    "id": "865",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between <figure> tag and <img> tag?",
    "answer": "The <figure> tag specifies the self-contained content, like diagrams, images, code snippets, etc. <figure> tag is used to semantically organize the contents of an image like image, image caption, etc., whereas the <img> tag is used to embed the picture in the HTML5 document."
  },
  {
    "id": "866",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to specify the metadata in HTML5?",
    "answer": "To specify we can use <meta> tag which is a void tag,i.e., it does not have a closing tag. Some of the attributes used with meta tags are name, content, http-equiv, etc. The below image tells how to specify the metadata."
  },
  {
    "id": "867",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is the <datalist> tag and <select> tag same?",
    "answer": "No. The <datalist> tag and <select> tag are different. In the case of <select> tag a user will have to choose from a list of options, whereas <datalist> when used along with the <input> tag provides a suggestion that the user selects one of the options given or can enter some entirely different value."
  },
  {
    "id": "868",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Define Image Map?",
    "answer": "Image Map lets a developer map/link different parts of images with the different web pages. It can be achieved by the <map> tag in HTML5, using which we can link images with clickable areas.\n\n<img  src=”image_url” ,  usemap=”#workspace” />\n<map  name=”workspace”>\n     <area shape=”rect”  coords=”34, 44, 270, 350” ,  href=”xyz.html” />\n     <area shape=”rect”  coords=”10, 120, 250, 360” ,  href=”xyz.html” />\n</map>"
  },
  {
    "id": "869",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Semantic Elements?",
    "answer": "Semantic elements are those which describe the particular meaning to the browser and the developer. Elements like <form>, <table>, <article>, <figure>, etc., are semantic elements."
  },
  {
    "id": "870",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Convert the below data into Tabular format in HTML5?",
    "answer": "S.no., Language, Mostly used for\n\n1, HTML, FrontEnd\n\n2, CSS, FrontEnd\n\n3, Python, BackEnd"
  },
  {
    "id": "871",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the difference between <meter> tag and <progress> tag?",
    "answer": "<progress> tag should be used when we want to show the completion progress of a task, whereas if we just want a scalar measurement within a known range or fraction value. Also, we can specify multiple extra attributes for <meter> tags like ‘form’, ‘low’, ‘high’, ‘min’, etc."
  },
  {
    "id": "872",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Is drag and drop possible using HTML5 and how?",
    "answer": "Yes, in HTML5 we can drag and drop an element. This can be achieved using the drag and drop-related events to be used with the element which we want to drag and drop."
  },
  {
    "id": "873",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Difference between SVG and Canvas HTML5 element?",
    "answer": "SVG\tCanvas\nSVG is a vector based i.e., composed of shapes. \tIt is Raster based i.e., composed of pixels.\nSVG works better with a larger surface.\tCanvas works better with a smaller surface.\nSVG can be modified using CSS and scripts.\tCanvas can only be modified using scripts.\nSVG is highly scalable. So we can print at high quality with high resolution.\tIt is less scalable."
  },
  {
    "id": "874",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What type of audio files can be played using HTML5?",
    "answer": "HTML5 supports the following three types of audio file formats:\n\nMp3\nWAV\nOgg"
  },
  {
    "id": "875",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the significant goals of the HTML5 specification?",
    "answer": "These were the target area of the HTML5 specs:\n\nIntroduction of new element tags to better structure the web page such as <header> tag.\nForming a standard in cross-browser behavior and support for different devices and platforms\nBackward compatible with the older version HTML web pages\nIntroduction of basic interactive elements without the dependency of plugins such as <video> tag instead of the flash plugin."
  },
  {
    "id": "876",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain the concept of web storage in HTML5.",
    "answer": "This web storage helps in storing some of the static data in the local storage of the browser so that we do not need to fetch it from the server every time we need it. There is a size limit based on different browsers. This helps in decreasing the load time and a smooth user experience. There are two types of web storage that are used to store data locally in HTML5:\n\nLocal Storage - This helps in storing data that will be retained even though the user reopens the browser. It is stored for each webapp on different browsers.\nSession Storage - This is used for one session only. After the user closes the browser this gets deleted."
  },
  {
    "id": "877",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is Microdata in HTML5?",
    "answer": "It is used to help extract data for site crawlers and search engines. It is basically a group of name-value pairs. The groups are called items, and each name-value pair is a property. Most of the search engines like Google, Microsoft, Yandex, etc follow schema.org vocabulary to extract this microdata.\n\n<div itemscope itemtype=\"http://schema.org/SoftwareApplication\">\n <span itemprop=\"name\">Interviewbit Games</span> -\n REQUIRES <span itemprop=\"operatingSystem\">ANDROID</span><br>\n <link itemprop=\"applicationCategory\" href=\"http://schema.org/GameApplication\"/>\n <div itemprop=\"aggregateRating\" itemscope itemtype=\"http://schema.org/AggregateRating\">\nRATING:\n<span itemprop=\"ratingValue\">4.6</span> (\n<span itemprop=\"ratingCount\">8864</span> ratings )\n </div>\n <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\">\nPrice: Rs.<span itemprop=\"price\">1.00</span>\n<meta itemprop=\"priceCurrency\" content=\"INR\" />\n </div>\n</div>\nitemid – The unique, global identifier of an item.\nitemprop – Used to add properties to an item.\nitemref – Provides a list of element ids with additional properties.\nitemscope – It defines the scope of the itemtype associated with it.\nitemtype – Specifies the URL of the vocabulary that will be used to define itemprop.\nThe above example will be parsed by Google as"
  },
  {
    "id": "878",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Which tag is used for representing the result of a calculation? Explain its attributes.",
    "answer": "The <output> tag is used for representing the result of a calculation. It has the following attributes:\n\nfor - It defines the relationship between the elements used in calculation and result.\nform - This is used to define the form the output element belongs to.\nname - The name of the output element.\n<form oninput = \"result.value=parseInt(n1.value)+parseInt(n2.value)\">\n     <input type = \"number\" name = \"n1\" value = \"1\" /> +\n     <input type = \"number\" name = \"n2\" value = \"2\" /><br />\n     The output is: <output name = \"result\"></output>\n</form>\nThe above example looks like"
  },
  {
    "id": "879",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How can we include audio or video in a webpage?",
    "answer": "HTML5 provides two tags: <audio> and <video> tags using which we can add the audio or video directly in the webpage."
  },
  {
    "id": "880",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain HTML5 Graphics.",
    "answer": "HTML5 supports two kinds of graphics:\n\nCanvas - It is like drawing on a whitepaper or a blank webpage. We can add different graphic designs on web pages with available methods for drawing various geometrical shapes.\n<!DOCTYPE HTML>\n<html>\n <head>\n </head>\n <body>\n   <canvas width=\"300\" height=\"100\" style=\"border:2px solid;\"></canvas>  \n </body>\n</html>\nSVG - Scalable Vector Graphics are used mostly for diagrams or icons. It follows the XML format.\n<!DOCTYPE html>\n<html>\n <body>\n   <svg width=\"400\" height=\"110\">\n     <rect width=\"300\" height=\"100\" style=\"fill:#FFF;stroke-width:2;stroke:#000\" />\n   </svg>\n </body>\n</html>\nBoth of the above examples produce this output and represent two different approaches provided by HTML5 to implement graphical aspects in the webpage."
  },
  {
    "id": "881",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain new input types provided by HTML5 for forms?",
    "answer": "Following are the significant new data types offered by HTML5:\n\nDate - Only select date by using type = \"date\"\nWeek - Pick a week by using type = \"week\"\nMonth - Only select month by using type = \"month\"\nTime - Only select time by using type = \"time\".\nDatetime - Combination of date and time by using type = \"datetime\"\nDatetime-local - Combination of  date and time by using type = \"datetime-local.\" but ignoring the timezone\nColor - Accepts multiple colors using type = \"color\"\nEmail - Accepts one or more email addresses using type = \"email\"\nNumber - Accepts a numerical value with additional checks like min and max using type = \"number\"\nSearch - Allows searching queries by inputting text using type = \"search\"\nTel - Allows different phone numbers by using type = \"tel\"\nPlaceholder - To display a short hint in the input fields before entering a value using type = \"placeholder\"\nRange - Accepts a numerical value within a specific range using type = \"range\"\nUrl - Accepts a web address using type = \"url”\n<form>  \n        <div>\n            <label>Date:</label>\n            <input type=\"date\" id=\"date\" />\n            <br>\n            <label>Week:</label>\n            <input type=\"week\" id=\"week\" />\n            <br>\n            <label>Month:</label>\n            <input type=\"month\" id=\"month\" />\n            <br>\n            <label>Time:</label>\n            <input type=\"time\" id=\"time\" />\n            <br>\n            <label>Datetime:</label>\n            <input type=\"datetime\" id=\"datetime\" />\n            <br>\n            <label>Datetime Local:</label>\n            <input type=\"datetime-local\" id=\"datetime-local\" />\n            <br>\n            <label>Color:</label>\n            <input type=\"color\" id=\"color\"/>\n            <br>\n            <label>Email:</label>\n            <input type=\"email\" id=\"email\" placeholder=\"email address\" />\n            <br>\n            <label>Number:</label>\n            <input type=\"number\" id=\"number\" />\n            <br>\n            <label>Search:</label>\n            <input type=\"search\" id=\"search\" />\n            <br>\n            <label>Phone:</label>\n            <input type=\"tel\" id=\"phone\" placeholder=\"Phone Number\" pattern=\"\\d{10}$\" />\n            <br>\n            <label>Range:</label>\n            <input type=\"range\" id=\"range\" />\n            <br>\n            <label>URL:</label>\n            <input type=\"url\" id=\"url\"/>\n        </div>  \n    </form>"
  },
  {
    "id": "882",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the New tags in Media Elements in HTML5?",
    "answer": "<audio> - Used for sounds, audio streams, or music, embed audio content without any additional plug-in.\n<video> - Used for video streams, embed video content etc.\n<source> - Used for multiple media resources in media elements, such as audio, video, etc.\n<embed> - Used for an external application or embedded content.\n<track> - Used for subtitles in the media elements such as video or audio.\n<label>\n       Video:\n   </label>\n    <video width=\"320\" height=\"240\" controls>\n        <source src=\"video.mp4\" type=\"video/mp4\">\n        <track src=\"subtitles.vtt\" kind=\"subtitles\" srclang=\"en\" label=\"English\">\n    </video>\n    <br>\n    <label>\n        Embed:\n    </label>\n    <embed type=\"video/webm\" src=\"https://www.youtube.com/embed/MpoE6s2psCw\" width=\"400\" height=\"300\">\n    <br>\n    <label>\n        Audio:\n    </label>\n    <audio controls>\n        <source src=\"audio.mp3\" type=\"audio/mpeg\">\n    </audio>"
  },
  {
    "id": "883",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do you think the addition of drag-and-drop functionality in HTML5 is important? How will you make an image draggable in HTML5?",
    "answer": "The drag and drop functionality is a very intuitive way to select local files. This is similar to what most of the OS have copy functionality thus making it very easy for the user to comprehend. Before the native drag and drop API, this was achievable by writing complex Javascript programming or external frameworks like jQuery.\n\nTo enable this functionality there is a draggable attribute in the <img> tag and need to set ondrop and ondragover attribute to an eventhandler available in scripts.\n\n<!DOCTYPE HTML>\n<html>\n <head>\n   <script>\n     function allowDrop(ev) {\n       ev.preventDefault();\n     }\n     function drop(ev) {\n       ...\n     }\n   </script>\n </head>\n <body>\n   ...\n   <div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" style=\"border: 1px solid #aaaaaa; width:350px; height: 70px;\"></div>\n   <br>\n   <img id=\"drag1\" src=\"img_logo.gif\" draggable=\"true\" width=\"336\" height=\"69\">\n    ...\n </body>\n</html>"
  },
  {
    "id": "884",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Why do we need the MathML element in HTML5?",
    "answer": "MathML stands for Mathematical Markup Language. It is used for displaying mathematical expressions on web pages. For this <math> tag is used.\n\n<!DOCTYPE HTML>\n<html>\n <head>\n </head>\n <body>\n<math>\n  <mrow>\n    <mrow>\n      <msup>\n        <mi> a </mi>\n        <mn> 2 </mn>\n      </msup>\n      <mo> + </mo>\n      <msup>\n        <mi> b </mi>\n        <mn> 2 </mn>\n      </msup>\n      <mo> + </mo>\n      <mn> 2 </mn>\n      <mn> a </mn>\n      <mn> b </mn>\n    </mrow>\n    <mo> = </mo>\n    <mn> 0 </mn>\n  </mrow>\n</math>\n </body>\n</html>\nThis displays the equation a2 + b2 + 2ab = 0."
  },
  {
    "id": "885",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are the server-sent events in HTML5?",
    "answer": "The events pushed from the webserver to the browsers are called server-sent events. DOM elements can be continuously updated using these events. This has a major advantage over straight-up polling. In polling, there is a lot of overhead since every time it is establishing an HTTP connection and tearing it down whereas, in server-sent events, there is one long-lived HTTP connection. To use a server-sent event, <eventsource> element is used. The src attribute of this element specifies the URL from which sends a data stream having the events.\n\n<eventsource src = \"/cgi-bin/myfile.cgi\" />"
  },
  {
    "id": "886",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are Web Workers?",
    "answer": "These are added to bring parallelism and async capability. It runs in the background to do the computationally expensive tasks without yielding to make the page responsive. It is achieved by starting a separate thread for such tasks. These are not meant to perform UI operations. There are three types of web workers:\n\nDedicated Workers - These are workers that are utilized by a single script.\nShared Workers -These are workers that are utilized by multiple scripts running in different windows, IFrames, etc.\nService Workers - These act as proxy servers between web applications, the browser, and the network. Mostly used for push notifications and sync APIs.\n<p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nvar w;\nfunction startWorker() {\n if(typeof(Worker) !== \"undefined\") {\nif(typeof(w) == \"undefined\") {\n  w = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\n  document.getElementById(\"result\").innerHTML = event.data;\n};\n }\n}\nfunction stopWorker() {\n w.terminate();\n w = undefined;\n}\n</script>"
  },
  {
    "id": "887",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the usage of a novalidate attribute for the form tag that is introduced in HTML5?",
    "answer": "Its value is a boolean type that indicates whether or not the data being submitted by the form will be validated beforehand. By making this false, forms can be submitted without validation which helps users to resume later also.\n\n<form action = \"\" method = \"get\" novalidate>\n        Name:<br><input type=\"name\" name=\"sname\"><br>\n       Doubt:<br><input type=\"number\" name=\"doubt\"><br>\n        <input type=\"submit\" value=\"Submit\">\n</form>"
  },
  {
    "id": "888",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are raster images and vector images?",
    "answer": "Raster Images - The raster image is defined by the arrangement of pixels in a grid with exactly what color the pixel should be. Few raster file formats include PNG(.png), JPEG(.jpg), etc.\nVector Images - The vector image is defined using algorithms with shape and path definitions that can be used to render the image on-screen written in a similar markup fashion. The file extension is .svg"
  },
  {
    "id": "889",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "How to support SVG in old browsers?",
    "answer": "To support old browsers instead of defining the resource of svg in src attribute of <img> tag, it should be defined in srcset attribute and in src the fallback png file should be defined.\n\n<img src=\"circle.png\" alt=\"circle\" srcset=\"circle.svg\">"
  },
  {
    "id": "890",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are different approaches to make an image responsive?",
    "answer": "Art direction - Using <picture> element the landscape image fully shown in desktop layout can be zoomed in with the main subject in focus for a portrait layout.\n<picture>\n <source media=\"(min-width: 650px)\" srcset=\"img_cup.jpg\">\n <img src=\"img_marsh.jpg\" style=\"width:auto;\">\n</picture>\nBigger Screen (>650px)\n\n\nFor any other screen\n\n\nResolution switching - Instead of zoom and crop the images can be scaled accordingly using vector graphics. Also, this can be further optimized to serve different pixel density screens as well. \nFor example SVG\n\n<svg width=\"100\" height=\"100\">\n <circle cx=\"50\" cy=\"50\" r=\"40\"\n stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg>"
  },
  {
    "id": "891",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is a manifest file in HTML5?",
    "answer": "The manifest file is used to list down resources that can be cached. Browsers use this information to make the web page load faster than the first time. There are 3 sections in the manifest file\n\nCACHE Manifest - Files needs to be cached\nNetwork - File never to be cached, always need a network connection.\nFallback - Fallback files in case a page is inaccessible\nCACHE MANIFEST\n# 2012-06-16 v1.0.0\n/style.css\n/logo.gif\n/main.js\nNETWORK:\nlogin.php\nFALLBACK:\n/html/ /offline.html\n<!DOCTYPE HTML>\n<html manifest=\"tutorial.appcache\">\n...\n...\n</html>"
  },
  {
    "id": "892",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What is the Geolocation API in HTML5?",
    "answer": "Geolocation API is used to share the physical location of the client with websites. This helps in serving locale-based content and a unique experience to the user, based on their location. This works with a new property of the global navigator object and most of the modern browsers support this.\n\nvar geolocation = navigator.geolocation;"
  },
  {
    "id": "893",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Write HTML5 code to demonstrate the use of Geolocation API.",
    "answer": "<!DOCTYPE html>\n<html>\n  <body>\n     <p>Click \"try it\" button to get your coordinates.</p>\n     <button onclick=\"getLocation()\">Try It</button>\n     <p id=\"demo\"></p>\n     <script>\n        var x = document.getElementById(\"demo\");\n        \n        function getLocation() {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(showPosition);\n          } else { \n            x.innerHTML = \"Geolocation functionality is not supported by this browser.\";\n          }\n        }\n        \n        function showPosition(position) {\n          x.innerHTML = \"Latitude: \" + position.coords.latitude + \n          \"<br>Longitude: \" + position.coords.longitude;\n        }\n     </script>\n  </body>\n</html>\nThe above example asks for user permission for accessing the location data via geolocation API and after clicking the button the coordinates of the physical location of the client get displayed."
  },
  {
    "id": "894",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "Explain Web Components and it’s usage.",
    "answer": "These are used to create reusable custom elements which are very difficult in traditional HTML. It consists of three technologies:\n\nCustom elements - These are JavaScript APIs that help in defining custom elements and their behavior.\nShadow DOM - These are JavaScript APIs that attach an encapsulated shadow DOM tree to an element to keep the element’s features private and unaffected by other parts.\n<!DOCTYPE html>\n<html>\n <head>\n<meta charset=\"utf-8\">\n<title>composed and composedPath demo</title>\n<script src=\"main.js\" defer></script>\n </head>\n <body>\n<h1><code>composed</code> and <code>composedPath</code> demo</h1>\n<open-shadow text=\"I have an open shadow root\"></open-shadow>\n<closed-shadow text=\"I have a closed shadow root\"></closed-shadow>\n </body>\n</html>\ncustomElements.define('open-shadow',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const pElem = document.createElement('p');\n  pElem.textContent = this.getAttribute('text');\n  const shadowRoot = this.attachShadow({mode: 'open'});\n  shadowRoot.appendChild(pElem);\n}\n }\n);\ncustomElements.define('closed-shadow',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const pElem = document.createElement('p');\n  pElem.textContent = this.getAttribute('text');\n  const shadowRoot = this.attachShadow({mode: 'closed'});\n  shadowRoot.appendChild(pElem);\n}\n }\n);\ndocument.querySelector('html').addEventListener('click', e => {\n console.log(e.composed);\n console.log(e.composedPath());\n});\n\nHere 2 custom elements are defined <open-shadow> and <closed-shadow> which takes their text content and inserts them into a shadow DOM as content of a <p> element.\n\nHTML templates - The markup templates are written using <template> and <slot> elements which can be reused multiple times as the basis of a custom element's structure.\n<!DOCTYPE html>\n<html>\n<head>\n <meta charset=\"utf-8\">\n <title>Simple template</title>\n <script src=\"main.js\"></script>\n</head>\n<body>\n <h1>Simple template</h1>\n <template id=\"my-paragraph\">\n<style>\n  p {\n    color: white;\n    background-color: #666;\n    padding: 5px;\n  }\n</style>\n<p><slot name=\"my-text\">My default text</slot></p>\n </template>\n <my-paragraph>\n<span slot=\"my-text\">Let's have some different text!</span>\n </my-paragraph>\n <my-paragraph>\n<ul slot=\"my-text\">\n  <li>Let's have some different text!</li>\n  <li>In a list!</li>\n</ul>\n </my-paragraph>\n</body>\n</html>\ncustomElements.define('my-paragraph',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const template = document.getElementById('my-paragraph');\n  const templateContent = template.content;\n  this.attachShadow({mode: 'open'}).appendChild(\n    templateContent.cloneNode(true)\n  );\n}\n }\n);\nconst slottedSpan = document.querySelector('my-paragraph span');\nconsole.log(slottedSpan.assignedSlot);\nconsole.log(slottedSpan.slot);\n\nHere we are reusing the <my-paragraph> template.\n\nReferences:\nMozilla MDN\n\nW3C\n\nAdditional Resource\nPractice Coding\nFeatures of HTML\nHTML MCQ\nHTML Books\nHTML Projects\nHTML IDE\nHTML5 Features\nDifferent types of css\nTop Web Developer Interview Questions\nHow To Become Front End Developer\nDifference Between HTML and HTML5\nDifference Between Frontend and Backend\nDifference Between HTML and JavaScript\nDifference Between HTML and XML\nDifference Between HTML and XHTML\nDifference Between HTML and CSS\nView All Technical Interview Questions"
  },
  {
    "id": "895",
    "category": "nextjs",
    "difficulty": "medium",
    "question": "What are some of the advantages of HTML5 over its previous versions?",
    "answer": "Some advantages of HTML5 are:-\n\nIt has Multimedia Support.\nIt has the capabilities to store offline data using SQL databases and application cache.\nJavascript can be run in the background.\nHTML5 also allows users to draw various shapes like rectangles, circles, triangles, etc.\nIncluded new Semantic tags and form control tags.\nHTML MCQ"
  },
  {
    "id": "896",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the key differences between TypeScript and JavaScript?",
    "answer": "TypeScript is a statically typed superset of JavaScript. It adds types, interfaces, and compile-time type checking, which JavaScript lacks. TypeScript transpiles to plain JavaScript, making it compatible with any JavaScript environment."
  },
  {
    "id": "897",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why do we need TypeScript?",
    "answer": "TypeScript helps catch errors at compile time, offers better tooling (autocomplete, refactoring), and ensures more maintainable and scalable code by enforcing strict typing rules."
  },
  {
    "id": "898",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What types exist in TypeScript?",
    "answer": "TypeScript supports primitive types like string, number, boolean, undefined, null, symbol, and bigint. It also supports complex types like arrays, tuples, enums, any, unknown, void, never, objects, and union and intersection types."
  },
  {
    "id": "899",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between type and interface?",
    "answer": "type and interface both allow you to define custom types, but interface is better suited for defining shapes of objects, while type can handle more complex types such as unions and tuples.\n   type CustomType = string | number;\n   interface User {\n     id: number;\n     name: string;\n   }"
  },
  {
    "id": "900",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is your opinion on JSDoc as an alternative to TypeScript?",
    "answer": "JSDoc is a documentation tool that can annotate types in JavaScript, but it doesn’t offer the same compile-time safety as TypeScript. JSDoc lacks many features TypeScript has, such as static analysis, which ensures code correctness before execution."
  },
  {
    "id": "901",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are union types in TypeScript? Give an example.",
    "answer": "A union type allows a value to be one of several types. It uses the | operator to combine types.\n   function printId(id: number | string) {\n     console.log(id);\n   }"
  },
  {
    "id": "902",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle type assertions? Why should you use as?",
    "answer": "Type assertions (using as or the angle bracket syntax) tell the TypeScript compiler that you know the type better than it does. It's used when you're sure about the type but TypeScript cannot infer it correctly.\n   const value: any = \"Hello\";\n   const strLength: number = (value as string).length;"
  },
  {
    "id": "903",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between the unknown and any types?",
    "answer": "unknown is safer than any. While any disables all type-checking, unknown forces you to perform type checks before manipulating the value.\n   let data: unknown;\n   data = \"Hello\";\n   if (typeof data === \"string\") {\n     console.log(data.toUpperCase());\n   }"
  },
  {
    "id": "904",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the never type, and when would you use it?",
    "answer": "The never type represents values that never occur. It's often used for functions that throw errors or infinite loops.\n   function throwError(): never {\n     throw new Error(\"This is an error\");\n   }"
  },
  {
    "id": "905",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type narrowing, and how does TypeScript implement it?",
    "answer": "Type narrowing occurs when TypeScript reduces the type of a variable to a more specific type using type guards, such as typeof or instanceof.\n   function padLeft(value: string | number) {\n     if (typeof value === \"string\") {\n       return value.padStart(10);\n     }\n     return value.toString();\n   }\nAdvanced Type Features"
  },
  {
    "id": "906",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are generics in TypeScript, and how do they contribute to reusability?",
    "answer": "Generics allow you to create reusable components or functions that work with any type, providing flexibility and type safety.\n   function identity<T>(arg: T): T {\n     return arg;\n   }\nLearn More"
  },
  {
    "id": "907",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do generics constraints work? Why are they useful?",
    "answer": "You can constrain generics to ensure they meet certain conditions, such as having certain properties.\n   function logLength<T extends { length: number }>(arg: T): void {\n     console.log(arg.length);\n   }"
  },
  {
    "id": "908",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe conditional types and when they can be utilized.",
    "answer": "Conditional types allow you to create types that depend on a condition, enabling advanced type manipulation.\n   type IsString<T> = T extends string ? true : false;"
  },
  {
    "id": "909",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between the utility types Partial<T> and Pick<T, K>?",
    "answer": "Partial<T> makes all properties in T optional. Pick<T, K> extracts specific properties from T.\n   interface Person {\n     name: string;\n     age: number;\n   }\n   type PartialPerson = Partial<Person>;\n   type NameOnly = Pick<Person, 'name'>;"
  },
  {
    "id": "910",
    "category": "typescript",
    "difficulty": "medium",
    "question": "In TypeScript, what does keyof do?",
    "answer": "keyof creates a union of the keys of an object type.\n   interface Person {\n     name: string;\n     age: number;\n   }\n   type PersonKeys = keyof Person; // 'name' | 'age'"
  },
  {
    "id": "911",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you handle type-safe error handling with discriminated unions?",
    "answer": "Discriminated unions allow you to handle different types in a safe way using a common discriminant property.\n   type Success = { status: \"success\"; data: string };\n   type Failure = { status: \"failure\"; error: string };\n   type Response = Success | Failure;\n\n   function handleResponse(response: Response) {\n     if (response.status === \"success\") {\n       console.log(response.data);\n     } else {\n       console.log(response.error);\n     }\n   }"
  },
  {
    "id": "912",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are template literal types, and how useful are they?",
    "answer": "Template literal types allow you to create new string types by combining unions of string literals, increasing flexibility in working with string types.\n   type Greeting = `Hello, ${string}!`;\nTypeScript and OOP (Object-Oriented Programming)"
  },
  {
    "id": "913",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript use classes? How do these differ from ES6 classes?",
    "answer": "TypeScript classes extend ES6 classes with additional type annotations, access modifiers, and interfaces.\n   class Person {\n     private name: string;\n     constructor(name: string) {\n       this.name = name;\n     }\n     getName(): string {\n       return this.name;\n     }\n   }"
  },
  {
    "id": "914",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are access modifiers (public, private, protected) in TypeScript?",
    "answer": "Access modifiers control the visibility of properties and methods. public means accessible everywhere, private within the class, and protected within the class and subclasses."
  },
  {
    "id": "915",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do abstract classes work in TypeScript, and when should they be used?",
    "answer": "Abstract classes define base classes with incomplete functionality, forcing subclasses to implement specific methods.\n   abstract class Animal {\n     abstract sound(): void;\n     move() {\n       console.log(\"Moving...\");\n     }\n   }\n   class Dog extends Animal {\n     sound() {\n       console.log(\"Woof!\");\n     }\n   }"
  },
  {
    "id": "916",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between an Interface and an Abstract Class?",
    "answer": "An interface defines a contract (structure) without any implementation, whereas an abstract class can define both abstract methods and concrete methods."
  },
  {
    "id": "917",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you describe a class in TypeScript that we create inside a function and return outside?",
    "answer": "You can create and return a class from within a function to provide encapsulation.\n   function createUser() {\n     return class User {\n       constructor(public name: string) {}\n     };\n   }\n   const UserClass = createUser();\n   const user = new UserClass(\"John\");\nTypeScript in React"
  },
  {
    "id": "918",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you define types for props and state of a React component with TypeScript?",
    "answer": "You can define props and state using interfaces or types.\n   interface Props {\n     title: string;\n   }\n   interface State {\n     count: number;\n   }\n   class MyComponent extends React.Component<Props, State> {\n     state: State = { count: 0 };\n     render() {\n       return <div>{this.props.title}</div>;\n     }\n   }\nTo define types for props and state in a functional React component with TypeScript, you would use interface or type too. Since functional components don't have internal state like class components, you would type the props directly. However, for state managed by hooks like useState, you can also type those.\n// Define the props type\ninterface Props {\n  title: string;\n}\n\nconst MyFunctionalComponent: React.FC<Props> = ({ title }) => {\n  // Define the state with useState and give it a type\n  const [count, setCount] = React.useState<number>(0);\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n};"
  },
  {
    "id": "919",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between using interface vs type for props in React components?",
    "answer": "Both are commonly used, but interface is extendable, making it better for props composition, while type can handle more complex unions."
  },
  {
    "id": "920",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you type hooks with TypeScript?",
    "answer": "Use types directly to hooks.\n   const [count, setCount] = useState<number>(0);"
  },
  {
    "id": "921",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What's the difference between JSX.Element and React.ReactNode?",
    "answer": "JSX.Element refers to a React element returned by a component, while React.ReactNode includes anything renderable by React, like strings, numbers, or fragments."
  },
  {
    "id": "922",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you type custom hooks in TypeScript?",
    "answer": "Custom hooks are typed using generics, where necessary.\n   function useCustomHook<T>(initialValue: T): [T, (value: T) => void] {\n     const [state, setState] = useState(initialValue);\n     return [state, setState];\n   }\nTypeScript in Larger Projects"
  },
  {
    "id": "923",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you manage complex types across multiple files in large-scale TypeScript projects?",
    "answer": "Use TypeScript’s module system to split types across files and import them where needed. You can use index.ts for better type exports.\n   // types.ts\n   export interface User {\n     id: number;\n     name: string;\n   }\n\n   // index.ts\n   export * from './types';"
  },
  {
    "id": "924",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does functional programming in TypeScript differ from other approaches in other languages?",
    "answer": "TypeScript enables functional programming by supporting higher-order functions, immutability, and strong type inference, similar to languages like Haskell or Scala, but retains the flexibility of JavaScript."
  },
  {
    "id": "925",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you ensure type safety when working with external services or REST APIs in TypeScript?",
    "answer": "You can use TypeScript’s type system to define the expected API response shape and validate the types when consuming external data.\n   interface ApiResponse {\n     userId: number;\n     id: number;\n     title: string;\n   }\n\n   async function fetchPost(id: number): Promise<ApiResponse> {\n     const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);\n     return response.json();\n   }\nPreparing for these questions, studying the topics covered, and reviewing relevant resources can improve your chances of successfully passing the interview.\n\n\n\n\n\nTypeScript Interview Questions\nTypeScript is an open-source language developed by Anders Hejlsberg at Microsoft. It’s a statically typed superset of JavaScript that compiles to plain JavaScript. It runs on any browser, host, and operating system. That means all valid JavaScript code is also TypeScript code. It offers advanced features such as IntelliSense, code completion, safe refactorings, etc.\n\nWhy TypeScript?\nAs JavaScript projects grow in size, they become difficult to maintain. There are a few reasons for this. First, JavaScript was never designed to build large-scale applications. Its original purpose was to provide small scripting functionality for a web page. Until recently, it didn’t provide tools and constructs for structuring large projects, such as classes, modules, and interfaces. Also, JavaScript is dynamically typed. It doesn’t support features such as IntelliSense. \n\n\nTypeScript files use a .ts extension, in contrast to the .js extension used by the JavaScript files. Since TypeScript is a superset of JavaScript, all valid JavaScript code is a valid TypeScript code, and renaming a .js file to .ts won’t change anything. Here is an example of a standard TypeScript program that adds two numbers and returns the result. Notice how the arguments and the return types are annotated with their type.\n\nfunction add(a: number, b: number): number {\n  const sum = a + b;\n  return sum;\n}\nWhen you compile a TypeScript file using the tsc command, the Typescript compiler generates vanilla JavaScript that gets executed. For example, this is what the compiler will produce for the above snippet of code.\n\nfunction add(a, b) {\n  const sum = a + b;\n  return sum;\n}\n\nTypeScript adds optional static typing and language features such as classes and modules. It’s important to know that all these advanced features add zero cost to JavaScript. A typeScript is purely a compile-time tool. Once you compile, you are left with plain, idiomatic JavaScript. TypeScript is a language for application scale JavaScript development.\n\n\nTypescript Interview Questions for Freshers"
  },
  {
    "id": "926",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the primitive types in TypeScript?",
    "answer": "TypeScript has three primitive types that are frequently used: string, number, and boolean. These correspond to the similarly named types in JavaScript. \n\nstring: represents text values such as “javascript”, “typescript”, etc.\nnumber: represents numeric values like 1, 2, 32, 43, etc.\nboolean: represents a variable that can have either a ‘true’ or ‘false’ value.\n\n\nCreate a free personalised study plan\nGet into your dream companies with expert guidance\nReal-Life Problems\nPrep for Target Roles\nCustom Plan Duration\nCreate My Plan"
  },
  {
    "id": "927",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how the arrays work in TypeScript.",
    "answer": "We use arrays to store values of the same type. Arrays are ordered and indexed collections of values. The indexing starts at 0, i.e., the first element has index 0, the second has index 1, and so on.\n\nHere is the syntax to declare and initialize an array in TypeScript.\n\nlet values: number[] = [];\nvalues[0] = 10;\nvalues[1] = 20;\nvalues[2] = 30;\nYou can also create an array using the short-hand syntax as follows:\n\nlet values: number[] = [15, 20, 25, 30];\nTypeScript provides an alternate syntax to specify the Array type.\n\nlet values: Array<number> = [15, 20, 25, 30];"
  },
  {
    "id": "928",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is any type, and when to use it?",
    "answer": "There are times when you want to store a value in a variable but don’t know the type of that variable in advance. For example, the value is coming from an API call or the user input. The ‘any’ type allows you to assign a value of any type to the variable of type any.\n\nlet person: any = \"Foo\";\nHere is an example that demonstrates the usage of any type.\n\n// json may come from a third-party API\nconst employeeData: string = `{\"name\": \"John Doe\", \"salary\": 60000}`;\n\n// parse JSON to build employee object\nconst employee: any = JSON.parse(employeeData);\n\nconsole.log(employee.name);\nconsole.log(employee.salary);\nTypeScript assumes a variable is of type any when you don’t explicitly provide the type, and the compiler cannot infer the type from the surrounding context. \n\nYou can download a PDF version of Typescript Interview Questions.\n\nDownload PDF"
  },
  {
    "id": "929",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is void, and when to use the void type?",
    "answer": "The void indicates the absence of type on a variable. It acts as the opposite type to any. It is especially useful in functions that don’t return a value.\n\nfunction notify(): void {\n  alert(\"The user has been notified.\");\n}\nIf a variable is of type void, you can only assign the null or undefined values to that variable."
  },
  {
    "id": "930",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an unknown type, and when to use it in TypeScript?",
    "answer": "The unknown type is the type-safe counterpart of any type. You can assign anything to the unknown, but the unknown isn’t assignable to anything but itself and any, without performing a type assertion of a control-flow-based narrowing. You cannot perform any operations on a variable of an unknown type without first asserting or narrowing it to a more specific type.\n\nConsider the following example. We create the foo variable of unknown type and assign a string value to it. If we try to assign that unknown variable to a string variable bar, the compiler gives an error.\n\nlet foo: unknown = \"Akshay\";\nlet bar: string = foo; // Type 'unknown' is not assignable to type 'string'.(2322)\nYou can narrow down a variable of an unknown type to something specific by doing typeof checks or comparison checks or using type guards. For example, we can get rid of the above error by\n\nlet foo: unknown = \"Akshay\";\nlet bar: string = foo as string;\nExplore InterviewBit’s Exclusive Live Events\nBy\n\nNo More Events to show!"
  },
  {
    "id": "931",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the different keywords to declare variables in TypeScript?",
    "answer": "var: Declares a function-scoped or global variable. You can optionally set its value during the declaration. Its behavior and scoping rules are similar to the var keyword in JavaScript. For example,\n\nvar foo = \"bar\";\nlet: Declares a block-scoped local variable. Similar to var, you can optionally set the value of a variable during the declaration. For example,\n\nlet a = 5;\n\nif (true) {\n  let a = 10;\n  console.log(a);  // 10\n}\nconsole.log(a);  // 5\nconst: Declares a block-scoped constant value that cannot be changed after it’s initialized.  For example,\n\nconst a = 5;\n\nif (true) {\n  a = 10; // Error: Cannot assign to 'a' because it is a constant.(2588)\n}"
  },
  {
    "id": "932",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the arrow function syntax in TypeScript.",
    "answer": "Arrow functions provide a short and convenient syntax to declare functions. They are also called lambdas in other programming languages.\n\nConsider a regular function that adds two numbers and returns a number.\n\nfunction add(x: number, y: number): number {\nlet sum = x + y;\nreturn sum;\n}\nUsing arrow functions syntax, the same function can be defined as:\n\nlet add = (x: number, y: number): number => {\nlet sum = x + y;\nreturn sum;\n}\nYou can further simplify the syntax by getting rid of the brackets and the return statement. This is allowed when the function body consists of only one statement. For example, if we remove the temporary sum variable, we can rewrite the above function as:\n\nlet add = (x: number, y: number): number => x + y; \nArrow functions are often used to create anonymous callback functions in TypeScript. Consider the example below that loops over and filters an array of numbers and returns an array containing multiples of five. The filter function takes an arrow function.\n\nlet numbers = [3, 5, 9, 15, 34, 35];\n\nlet fiveMultiples = numbers.filter(num => (num % 5) == 0);\n\nconsole.log(fiveMultiples);  // [5, 15, 35] \n\nStart Your Coding Journey With Tracks\nMaster Data Structures and Algorithms with our Learning Tracks\nTopic Buckets\nMock Assessments\nReading Material\nView Tracks"
  },
  {
    "id": "933",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Provide the syntax of a function with the type annotations.",
    "answer": "Functions are blocks of code to perform a specific code. Functions can optionally take one or more arguments, process them, and optionally return a value.\n\nHere’s the TypeScript syntax to create and call a function.\n\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}\n\nlet greeting = greet(\"Anders\");\nconsole.log(greeting);  // \"Hello, Anders\""
  },
  {
    "id": "934",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to create objects in TypeScript?",
    "answer": "Objects are dictionary-like collections of keys and values. The keys have to be unique. They are similar to arrays and are also sometimes called associative arrays. However, an array uses numbers to index the values, whereas an object allows you to use any other type as the key.\n\nIn TypeScript, an Object type refers to any value with properties. It can be defined by simply listing the properties and their types. For example,\n\nlet pt: { x: number; y: number } = {\n  x: 10,\n  y: 20\n};"
  },
  {
    "id": "935",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to specify optional properties in TypeScript?",
    "answer": "An object type can have zero or more optional properties by adding a ‘?’ after the property name. \n\nlet pt: { x: number; y: number; z?: number } = {\n  x: 10,\n  y: 20\n};\nconsole.log(pt);\nIn the example above, because the property ‘z’ is marked as optional, the compiler won’t complain if we don’t provide it during the initialization."
  },
  {
    "id": "936",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of null and its use in TypeScript.",
    "answer": "In programming, a null value indicates an absence of value. A null variable doesn’t point to any object. Hence you cannot access any properties on the variable or call a method on it.\n\nIn TypeScript, the null value is indicated by the ‘null’ keyword. You can check if a value is null as follows:\n\nfunction greet(name: string | null) {\nif (name === null) {\n  console.log(\"Name is not provided\");\n} else {\n  console.log(\"Good morning, \" + name.toUpperCase());\n}\n}\n\nvar foo = null;\ngreet(foo); // \"Name is not provided\"\n\nfoo = \"Anders\";\ngreet(foo);  // \"Good morning, ANDERS\""
  },
  {
    "id": "937",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is undefined in TypeScript?",
    "answer": "When a variable is declared without initialization, it’s assigned the undefined value. It’s not very useful on its own. A variable is undefined if it’s declared, but no value has been assigned to it. In contrast, null is assigned to a variable, and it represents no value. \n\nconsole.log(null == null); // true\nconsole.log(undefined == undefined); // true\nconsole.log(null == undefined); // true, with type-conversion\nconsole.log(null === undefined); // false, without type-conversion\nconsole.log(0 == undefined); // false\nconsole.log('' == undefined); // false\nconsole.log(false == undefined); // false\n\nDiscover your path to a  \nSuccessful Tech Career for FREE!\nAnswer 4 simple questions & get a career plan tailored for you\nInterview Process\nCTC & Designation\nProjects on the Job\nTry It Out\n2 Lakh+ Roadmaps Created"
  },
  {
    "id": "938",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the purpose of the never type in TypeScript.",
    "answer": "As the name suggests, the never type represents the type of values that never occur. For example, a function that never returns a value or that always throws an exception can mark its return type as never.\n\nfunction error(message: string): never {\nthrow new Error(message);\n}\nYou might wonder why we need a ‘never’ type when we already have ‘void’. Though both types look similar, they represent two very different concepts.\n\nA function that doesn't return a value implicitly returns the value undefined in JavaScript. Hence, even though we are saying it’s not returning anything, it’s returning ‘undefined’. We usually ignore the return value in these cases. Such a function is inferred to have a void return type in TypeScript.\n\n// This function returns undefined\nfunction greet(name: string) {\nconsole.log(`Hello, ${name}`);\n}\n\nlet greeting = greet(\"David\");\nconsole.log(greeting);  // undefined\nIn contrast, a function that has a never return type never returns. It doesn't return undefined, either. There are 2 cases where functions should return never type:\n\nIn an unending loop e.g a while(true){} type loop.\nA function that throws an error e.g function foo(){throw new Exception('Error message')}"
  },
  {
    "id": "939",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how enums work in TypeScript?",
    "answer": "Enums allow us to create named constants. It is a simple way to give more friendly names to numeric constant values. An enum is defined by the keyword enum, followed by its name and the members.\n\nConsider the following example that defines an enum Team with four values in it.\n\nenum Team {\nAlpha,\nBeta,\nGamma,\nDelta\n}\nlet t: Team = Team.Delta;\nBy default, the enums start the numbering at 0. You can override the default numbering by explicitly assigning the values to its members.\n\nTypeScript also lets you create enums with string values as follows:\n\nenum Author {\n  Anders = \"Anders\",\n  Hejlsberg = \"Hejlsberg\"\n};"
  },
  {
    "id": "940",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the typeof operator? How is it used in TypeScript?",
    "answer": "Similar to JavaScript, the typeof operator in TypeScript returns the type of the operand as a string.\n\nconsole.log(typeof 10);  // \"number\"\n\nconsole.log(typeof 'foo');  // \"string\"\n\nconsole.log(typeof false);  // \"boolean\"\n\nconsole.log(typeof bar);  // \"undefined\"\nIn TypeScript, you can use the typeof operator in a type context to refer to the type of a property or a variable.\n\nlet greeting = \"hello\";\nlet typeOfGreeting: typeof greeting;  // similar to let typeOfGreeting: string"
  },
  {
    "id": "941",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the rest parameters and arguments in TypeScript?",
    "answer": "A rest parameter allows a function to accept an indefinite number of arguments as an array. It is denoted by the ‘…’ syntax and indicates that the function can accept one or more arguments.\n\nfunction add(...values: number[]) {\nlet sum = 0;\nvalues.forEach(val => sum += val);\nreturn sum;\n}\nconst sum = add(5, 10, 15, 20);\nconsole.log(sum);  // 50\nIn contrast, the rest arguments allow a function caller to provide a variable number of arguments from an array. Consider the following example.\n\nconst first = [1, 2, 3];\nconst second = [4, 5, 6];\n\nfirst.push(...second);\nconsole.log(first);  // [1, 2, 3, 4, 5, 6]"
  },
  {
    "id": "942",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is parameter destructuring?",
    "answer": "Parameter destructing allows a function to unpack the object provided as an argument into one or more local variables.\n\nfunction multiply({ a, b, c }: { a: number; b: number; c: number }) {\nconsole.log(a * b * c);\n}\n\nmultiply({ a: 1, b: 2, c: 3 });\n\nYou can simplify the above code by using an interface or a named type, as follows:\ntype ABC = { a: number; b: number; c: number };\n\nfunction multiply({ a, b, c }: ABC) {\nconsole.log(a * b * c);\n}\n\nmultiply({ a: 1, b: 2, c: 3 });"
  },
  {
    "id": "943",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the TypeScript class syntax.",
    "answer": "TypeScript fully supports classes. The TypeScript syntax for class declaration is similar to that of JavaScript, with the added type support for the member declarations.\n\nHere is a simple class that defines an Employee type.\n\nclass Employee {\n  name: string;\n  salary: number;\n\n  constructor(name: string, salary: number) {\n          this.name = name;\n          this.salary = salary;\n  }\n  promote() : void {\n    this.salary += 10000;\n  }\n}\nYou can create an instance (or object) of a class by using the new keyword. \n\n// Create a new employee\nlet john = new Employee(\"John\", 60000);\n\nconsole.log(john.salary);  // 60000\njohn.promote();\nconsole.log(john.salary);  // 70000"
  },
  {
    "id": "944",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Provide the syntax for optional parameters in TypeScript.",
    "answer": "A function can mark one or more of its parameters as optional by suffixing its name with ‘?’. In the example below, the parameter greeting is marked optional.\n\nfunction greet(name: string, greeting?: string) {\nif (!greeting)\n  greeting = \"Hello\";\n\nconsole.log(`${greeting}, ${name}`);\n}\n\ngreet(\"John\", \"Hi\");  // Hi, John\ngreet(\"Mary\", \"Hola\");  // Hola, Mary\ngreet(\"Jane\");  // Hello, Jane"
  },
  {
    "id": "945",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the tsconfig.json file?",
    "answer": "A tsconfig.json file in a directory marks that directory as the root of a TypeScript project. It provides the compiler options to compile the project.\n\nHere is a sample tsconfig.json file:\n\n{\n \"compilerOptions\": {\n   \"module\": \"system\",\n   \"noImplicitAny\": true,\n   \"removeComments\": true,\n   \"outFile\": \"../../built/local/tsc.js\",\n   \"sourceMap\": true\n },\n \"include\": [\"src/**/*\"],\n \"exclude\": [\"node_modules\", \"**/*.spec.ts\"]\n}\nTypescript Interview Questions for Experienced"
  },
  {
    "id": "946",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to enforce strict null checks in TypeScript?",
    "answer": "Null pointers are one of the most common sources of unexpected runtime errors in programming. TypeScript helps you avoid them to a large degree by enforcing strict null checks.\n\nYou can enforce strict null checks in two ways:\n\nproviding the --strictNullChecks flag to the TypeScript (tsc) compiler\nsetting the strictNullChecks property to true in the tsconfig.json configuration file.\nWhen the flag is false, TypeScript ignores null and undefined values in the code. When it is true, null and undefined have their distinct types. The compiler throws a type error if you try to use them where a concrete value is expected."
  },
  {
    "id": "947",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Does TypeScript support static classes? If not, why?",
    "answer": "TypeScript doesn’t support static classes, unlike the popular object-oriented programming languages like C# and Java.\n\nThese languages need static classes because all code, i.e., data and functions, need to be inside a class and cannot exist independently. Static classes provide a way to allow these functions without associating them with any objects.\n\nIn TypeScript, you can create any data and functions as simple objects without creating a containing class. Hence TypeScript doesn’t need static classes. A singleton class is just a simple object in TypeScript."
  },
  {
    "id": "948",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type assertions in TypeScript?",
    "answer": "Sometimes, you as a programmer might know more about the type of a variable than TypeScript can infer. Usually, this happens when you know the type of an object is more specific than its current type. In such cases, you can tell the TypeScript compiler not to infer the type of the variable by using type assertions.\n\nTypeScript provides two forms to assert the types.\n\nas syntax:\nlet value: unknown = \"Foo\";\nlet len: number = (value as string).length;\n<> syntax:\nlet value: unknown = \"Foo\";\nlet len: number = (<string>value).length;\nType assertions are similar to typecasting in other programming languages such as C# or Java. However, unlike those languages, there’s no runtime penalty of boxing and unboxing variables to fit the types. Type assertions simply let the TypeScript compiler know the type of the variable."
  },
  {
    "id": "949",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how tuple destructuring works in TypeScript.",
    "answer": "You can destructure tuple elements by using the assignment operator (=). The destructuring variables get the types of the corresponding tuple elements.  \n\nlet employeeRecord: [string, number] = [\"John Doe\", 50000];\nlet [emp_name, emp_salary] = employeeRecord;\nconsole.log(`Name: ${emp_name}`);  // \"Name: John Doe\"\nconsole.log(`Salary: ${emp_salary}`);  // \"Salary: 50000\"\nAfter destructuring, you can’t assign a value of a different type to the destructured variable. For example,\n\nemp_name = true;  // Type 'boolean' is not assignable to type 'string'.(2322)"
  },
  {
    "id": "950",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the tuple types in TypeScript.",
    "answer": "Tuples are a special type in TypeScript. They are similar to arrays with a fixed number of elements with a known type. However, the types need not be the same.\n\n// Declare a tuple type and initialize it\nlet values: [string, number] = [\"Foo\", 15];\n\n// Type 'boolean' is not assignable to type 'string'.(2322)\n// Type 'string' is not assignable to type 'number'.(2322)\nlet wrongValues: [string, number] = [true, \"hello\"]; // Error\nSince TypeScript 3.0, a tuple can specify one or more optional types using the ? as shown below.\n\nlet values: [string, number, boolean?] = [\"Foo\", 15];"
  },
  {
    "id": "951",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type aliases? How do you create one?",
    "answer": "Type aliases give a new, meaningful name for a type. They don’t create new types but create new names that refer to that type.\n\nFor example, you can alias a union type to avoid typing all the types everywhere that value is being used.\n\ntype alphanumeric = string | number;\nlet value: alphanumeric = \"\";\nvalue = 10;"
  },
  {
    "id": "952",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are intersection types?",
    "answer": "Intersection types let you combine the members of two or more types by using the ‘&’ operator. This allows you to combine existing types to get a single type with all the features you need.\n\nThe following example creates a new type Supervisor that has the members of types Employee and Manager.\n\ninterface Employee {\nwork: () => string;\n}\n\ninterface Manager {\nmanage: () => string;\n}\n\ntype Supervisor = Employee & Manager;\n\n// john can both work and manage\nlet john: Supervisor;"
  },
  {
    "id": "953",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are union types in TypeScript?",
    "answer": "A union type is a special construct in TypeScript that indicates that a value can be one of several types. A vertical bar (|) separates these types.\n\nConsider the following example where the variable value belongs to a union type consisting of strings and numbers. The value is initialized to string “Foo”. Because it can only be a string or a number, we can change it to a number later, and the TypeScript compiler doesn’t complain. \n\nlet value: string | number = \"Foo\";\nvalue = 10;  // Okay\nHowever, if we try to set the value to a type not included in the union types, we get the following error. \n\nvalue = true;  // Type 'boolean' is not assignable to type 'string | number'.(2322)\nUnion types allow you to create new types out of existing types. This removes a lot of boilerplate code as you don’t have to create new classes and type hierarchies."
  },
  {
    "id": "954",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are anonymous functions? Provide their syntax in TypeScript.",
    "answer": "An anonymous function is a function without a name. Anonymous functions are typically used as callback functions, i.e., they are passed around to other functions, only to be invoked by the other function at a later point in time. For example,\n\nsetTimeout(function () {\n  console.log('Run after 2 seconds')\n}, 2000);\n\nYou can invoke an anonymous function as soon as it’s created. It’s called ‘immediately invoked function execution (IIFE)’, For example:\n(function() {\n  console.log('Invoked immediately after creation');\n})();"
  },
  {
    "id": "955",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are abstract classes? When should you use one?",
    "answer": "Abstract classes are similar to interfaces in that they specify a contract for the objects, and you cannot instantiate them directly. However, unlike interfaces, an abstract class may provide implementation details for one or more of its members.\n\nAn abstract class marks one or more of its members as abstract. Any classes that extend an abstract class have to provide an implementation for the abstract members of the superclass.\n\nHere is an example of an abstract class Writer with two member functions. The write() method is marked as abstract, whereas the greet() method has an implementation. Both the FictionWriter and RomanceWriter classes that extend from Writer have to provide their specific implementation for the write method.\n\nabstract class Writer {\nabstract write(): void;\n\ngreet(): void {\n  console.log(\"Hello, there. I am a writer.\");\n}\n}\n\nclass FictionWriter extends Writer {\nwrite(): void {\n  console.log(\"Writing a fiction.\");\n}\n}\n\nclass RomanceWriter extends Writer {\nwrite(): void {\n  console.log(\"Writing a romance novel.\");\n}\n}\n\nconst john = new FictionWriter();\njohn.greet();  // \"Hello, there. I am a writer.\"\njohn.write();  // \"Writing a fiction.\"\n\nconst mary = new RomanceWriter();\nmary.greet();  // \"Hello, there. I am a writer.\"\nmary.write();  // \"Writing a romance novel.\""
  },
  {
    "id": "956",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to make object properties immutable in TypeScript? (hint: readonly)",
    "answer": "You can mark object properties as immutable by using the readonly keyword before the property name. For example:\n\ninterface Coordinate {\nreadonly x: number;\nreadonly y: number;\n}\nWhen you mark a property as readonly, it can only be set when you initialize the object. Once the object is created, you cannot change it. \n\nlet c: Coordinate = { x: 5, y: 15 };\nc.x = 20; // Cannot assign to 'x' because it is a read-only property.(2540)"
  },
  {
    "id": "957",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a type declaration file?",
    "answer": "A typical TypeScript project references other third-party TypeScript libraries such as JQuery to perform routine tasks. Having type information for the library code helps you in coding by providing detailed information about the types, method signatures, etc., and provides IntelliSense.\n\nA type declaration file is a text file ending with a .d.ts extension providing a way to declare the existence of some types or values without actually providing implementations for those values. It contains the type declarations but doesn’t have any source code. It doesn’t produce a .js file after compilation."
  },
  {
    "id": "958",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are triple-slash directives?",
    "answer": "Triple-slash directives are single-line comments that contain a single XML tag. TypeScript uses this XML tag as a compiler directive.\n\nYou can only place a triple-slash directive at the top of the containing file. Only single or multi-line comments can come before a triple-slash directive. TypeScript treats them as regular comments if it occurs in the middle of a code block, after a statement.\n\nThe primary use of triple-slash directives is to include other files in the compilation process. For example, the following directive instructs the compiler to include a file specified by the path in the containing TypeScript file.\n\n/// <reference path=\"...\" />\n\nTriple-slash directives also order the output when using --out or --outFile. The output files are produced to the output file location in the same order as the input files."
  },
  {
    "id": "959",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the purpose of the ‘in’ operator.",
    "answer": "The in operator is used to find if a property is in the specified object. It returns true if the property belongs to the object. Otherwise, it returns false.\n\nconst car = { make: 'Hyundai', model: 'Elantra', year: 2017 };\nconsole.log('model' in car);  // true\nconsole.log('test' in car);  // false"
  },
  {
    "id": "960",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the ‘implements’ clauses in TypeScript?",
    "answer": "An implements clause is used to check that a class satisfies the contract specified by an interface. If a class implements an interface and doesn’t implement that interface, the TypeScript compiler issues an error.\n\ninterface Runnable {\nrun(): void;\n}\n\nclass Job implements Runnable {\nrun() {\n  console.log(\"running the scheduled job!\");\n}\n}\n\n// Class 'Task' incorrectly implements interface 'Runnable'.\n// Property 'run' is missing in type 'Task' but required in type 'Runnable'.(2420)\nclass Task implements Runnable {\nperform() {\n  console.log(\"pong!\");\n}\n}\nA class can implement more than one interface. In this case, the class has to specify all the contracts of those interfaces."
  },
  {
    "id": "961",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are string literal types?",
    "answer": "In TypeScript, you can refer to specific strings and numbers as types.\n\nlet foo: \"bar\" = \"bar\";\n\n// OK\nfoo = \"bar\";\n\n// Error: Type '\"baz\"' is not assignable to type '\"bar\"'.(2322)\nfoo = \"baz\";\nString literal types on their own are not that useful. However, you can combine them into unions. This allows you to specify all the string values that a variable can take, in turn acting like enums. This can be useful for function parameters.\n\nfunction greet(name: string, greeting: \"hi\" | \"hello\" | \"hola\") {\n// ...\n}\n\ngreet(\"John\", \"hello\");\n\n// Error: Argument of type '\"Howdy?\"' is not assignable to parameter of type '\"hi\" | \"hello\" | \"hola\"'.(2345)\ngreet(\"Mary\", \"Howdy?\");\nString literal types can help us spell-check the string values."
  },
  {
    "id": "962",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are template literal types?",
    "answer": "Template literal types are similar to the string literal types. You can combine them with concrete, literal types to produce a new string literal type. Template literal types allow us to use the string literal types as building blocks to create new string literal types.\n\ntype Point = \"GraphPoint\";\n\n// type Shape = \"Grid GraphPoint\"\ntype Shape = `Grid ${Point}`;\nTemplate literal types can also expand into multiple strings via unions. It helps us create the set of every possible string literal that each union member can represent.\n\ntype Color = \"green\" | \"yellow\";\ntype Quantity = \"five\" | \"six\";\n\n// type ItemTwo = \"five item\" | \"six item\" | \"green item\" | \"yellow item\"\ntype ItemOne = `${Quantity | Color} item`;"
  },
  {
    "id": "963",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of inheritance in TypeScript.",
    "answer": "Inheritance allows a class to extend another class and reuse and modify the behavior defined in the other class. The class which inherits another class is called the derived class, and the class getting inherited is called the base class.\n\nIn TypeScript, a class can only extend one class. TypeScript uses the keyword ‘extends’ to specify the relationship between the base class and the derived classes.\n\nclass Rectangle {\nlength: number;\nbreadth: number\n\nconstructor(length: number, breadth: number) {\n  this.length = length;\n  this.breadth = breadth\n}\n\narea(): number {\n  return this.length * this.breadth;\n}\n}\n\nclass Square extends Rectangle {\nconstructor(side: number) {\n  super(side, side);\n}\n\nvolume() {\n  return \"Square doesn't have a volume!\"\n}\n}\n\nconst sq = new Square(10);\n\nconsole.log(sq.area());  // 100\nconsole.log(sq.volume());  // \"Square doesn't have a volume!\"\nIn the above example, because the class Square extends functionality from Rectangle, we can create an instance of square and call both the area() and volume() methods."
  },
  {
    "id": "964",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are conditional types? How do you create them?",
    "answer": "A conditional type allows you to dynamically select one of two possible types based on a condition. The condition is expressed as a type relationship test.\n\nC extends B ? TypeX : TypeY\nHere, if type C extends B, the value of the above type is TypeX. Otherwise, it is TypeY."
  },
  {
    "id": "965",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the Function type in TypeScript?",
    "answer": "Function is a global type in TypeScript. It has properties like bind, call, and apply, along with the other properties present on all function values.\n\nfunction perform(fn: Function) {\nfn(10);\n}\nYou can always call a value of the Function type, and it returns a value of ‘any’ type."
  },
  {
    "id": "966",
    "category": "typescript",
    "difficulty": "medium",
    "question": "List some of the utility types provided by TypeScript and explain their usage.",
    "answer": "TypeScript provides various utility types that make common type transformations easy. These utility types are available globally. Here are some of the essential utility types included in TypeScript.\n\nUtility Type\tDescription\nPartial<Type>\tConstructs a type with all properties of Type set to optional.\nRequired<Type>\tConstructs a type consisting of all properties of Type set to required.\nReadonly<Type> \tConstructs a type with all properties of Type set to readonly.\nRecord<Keys, Type>\tConstructs an object type with property keys are of type Keys, and values are Type."
  },
  {
    "id": "967",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the various ways to control member visibility in TypeScript.",
    "answer": "TypeScript provides three keywords to control the visibility of class members, such as properties or methods.\n\npublic: You can access a public member anywhere outside the class. All class members are public by default. \nprotected: A protected member is visible only to the subclasses of the class containing that member. Outside code that doesn’t extend the container class can’t access a protected member. \nprivate: A private member is only visible inside the class. No outside code can access the private members of a class."
  },
  {
    "id": "968",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the different variants of the for loop in TypeScript.",
    "answer": "TypeScript provides the following three ways to loop over collections.\n\n‘for’ loop\nlet values = [10, \"foo\", true];\n\nfor(let i=0; i<values.length; i++) {\n  console.log(values[i]);  // 10, \"foo\", true\n}\n‘forEach’ function\nlet values = [10, \"foo\", true];\nvalues.forEach(val => {\n    console.log(val);  // 10, \"foo\", true\n})\n‘for..of’ statement\nlet values = [10, \"foo\", true];\nfor (let val of values) {\nconsole.log(val); // 10, \"foo\", true\n}"
  },
  {
    "id": "969",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the symbol type in TypeScript.",
    "answer": "Symbols were introduced in ES6 and are supported by TypeScript. Similar to numbers and strings, symbols are primitive types. You can use Symbols to create unique properties for objects.\n\nYou can create symbol values by calling the Symbol() constructor, optionally providing a string key.\n\nlet foo = Symbol();\nlet bar = Symbol(\"bar\"); // optional string key\nA key characteristic of symbols is that they are unique and immutable.\n\nlet foo = Symbol(\"foo\");\nlet newFoo = Symbol(\"foo\");\n\nlet areEqual = foo === newFoo;\nconsole.log(areEqual);  // false, symbols are unique"
  },
  {
    "id": "970",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how optional chaining works in TypeScript.",
    "answer": "Optional chaining allows you to access properties and call methods on them in a chain-like fashion. You can do this using the ‘?.’ operator.\n\nTypeScript immediately stops running some expression if it runs into a ‘null’ or ‘undefined’ value and returns ‘undefined’ for the entire expression chain.\n\nUsing optional chaining, the following expression\n\nlet x = foo === null || foo === undefined ? undefined : foo.bar.baz();\ncan be expressed as:\n\nlet x = foo?.bar.baz();"
  },
  {
    "id": "971",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Provide the TypeScript syntax to create function overloads.",
    "answer": "Function overloading allows us to define multiple functions with the same name, as long as their number of parameters or the types of parameters are different.\n\nThe following example defines two overloads for the function buildDate. The first overload takes a number as a parameter, whereas the second takes three numbers as parameters. These are called overload signatures.\n\nThe body of the function also called an implementation signature, follows the overload signatures. You can’t call this signature directly, as it’s not visible from the outside. It should be compatible with the overload signatures.\n\nfunction buildDate(timestamp: number): Date;\nfunction buildDate(m: number, d: number, y: number): Date;\nfunction buildDate(mOrTimestamp: number, d?: number, y?: number): Date {\nif (d !== undefined && y !== undefined) {\n  return new Date(y, mOrTimestamp, d);\n} else {\n  return new Date(mOrTimestamp);\n}\n}\n\nconst d1 = buildDate(87654321);\nconst d2 = buildDate(2, 2, 2);"
  },
  {
    "id": "972",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is meant by type inference?",
    "answer": "TypeScript can infer the type of a variable when you don’t provide an explicit type. This is known as type inference. This is usually done when the variables or parameters are initialized during the declaration.\n\nFor example, TypeScript knows that the variable foo is a string, even though we don’t mention string as a type.\n\nlet foo = \"this is a string\";\nconsole.log(typeof foo);  // \"string\""
  },
  {
    "id": "973",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is meant by contextual typing?",
    "answer": "When the TypeScript compiler uses the location (or context) of a variable to infer its type, it’s called contextual typing.\n\nIn the following example, TypeScript uses the Window.onmousedown function type information to infer the type of the function expression on the right-hand side of the assignment. This allows it to infer the type of the e parameter, which does have a button property but not a property named foo.\n\nwindow.onmousedown = function (e) {\nconsole.log(e.button); //<- OK\nconsole.log(e.foo); //<- Error!\n};"
  },
  {
    "id": "974",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of noImplicitAny?",
    "answer": "Usually, when we don’t provide any type on a variable, TypeScript assumes ‘any’ type. For example, TypeScript compiles the following code, assuming the parameter ‘s’ is of any type. It works as long as the caller passes a string.\n\nfunction parse(s) {\nconsole.log(s.split(' '));\n}\nparse(\"Hello world\");  // [\"Hello\", \"world\"]\nHowever, the code breaks down as soon as we pass a number or other type than a string that doesn’t have a split() method on it. For example,\n\nfunction parse(s) {\nconsole.log(s.split(' '));  // [ERR]: s.split is not a function\n}\nparse(10); \nnoImplicitAny is a compiler option that you set in the tsconfig.json file. It forces the TypeScript compiler to raise an error whenever it infers a variable is of any type. This prevents us from accidentally causing similar errors.\n\nParameter 's' implicitly has an 'any' type.(7006)\nfunction parse(s) {\nconsole.log(s.split(' '));  // [ERR]: s.split is not a function\n}"
  },
  {
    "id": "975",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an interface?",
    "answer": "An interface defines a contract by specifying the type of data an object can have and its operations. In TypeScript, you can specify an object’s shape by creating an interface and using it as its type. It’s also called “duck typing”.\n\nIn TypeScript, you can create and use an interface as follows:\n\ninterface Employee {\nname: string;\nsalary: number;\n}\n\nfunction process(employee: Employee) {\nconsole.log(`${employee.name}'s salary = ${employee.salary}`);\n}\n\nlet john: Employee = {\nname: \"John Doe\",\nsalary: 150000\n}\n\nprocess(john);  // \"John Doe's salary = 150000\"\nInterfaces are an effective way to specify contracts within your code as well as outside your code.  \n\nConclusion"
  },
  {
    "id": "976",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Conclusion",
    "answer": "TypeScript has been increasing in popularity for the last few years, and many large organizations and popular frameworks have adopted TypeScript to manage their large JavaScript codebases. It’s a valuable skill to have as a developer.\n\nIn this article, we explored the questions that a developer might get asked in an interview. We have provided simple code examples to cement the concepts further. Finally, you can use the multiple-choice questions at the end of the article to test your understanding of the various topics in TypeScript. \n\nReference:\nTypeScript Documentation\nAngular Interview Questions and Answers\nJavaScript Interview Questions\nDifference between Typescript and Javascript\nTypeScript MCQ Questions"
  },
  {
    "id": "977",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is TypeScript and how does it differ from JavaScript?",
    "answer": "TypeScript is a statically-typed superset of JavaScript, developed and maintained by Microsoft. It enables enhanced code maintainability and predictability. After compiling, TypeScript code is transpiled into standard, browser-compatible JavaScript.\n\nKey distinctions between TypeScript and JavaScript include the use of type annotations, the ability to work with existing JavaScript code, and more.\n\nTypeScript Features & Benefits\nType System: Offers static typing, allowing developers to define the type of variables, parameters, and return values. This helps catch errors during development, reducing runtime issues.\n\nAdvanced Language Features: Incorporates modern ECMAScript syntax and features, often before they are rolled out in JavaScript. Additionally, TypeScript brings functional programming patterns, classes, and access modifiers (such as public and private)\n\nCompatibility with JavaScript: TypeScript can interpret existing JavaScript code with minor or no modifications.\n\nTooling and Extra Safety: Provides enhanced autocompletion, refactoring, and documentation via TypeScript-aware tools. TypeScript helps catch and rectify common programming errors without needing to run the code.\n\nECMAScript Compatibility: TypeScript allows developers to target different ECMAScript versions, ensuring the generated JavaScript is compatible with the targeted browsers.\n\nCode Structure & Readability: Promotes maintainability by enforcing a defined coding structure and fostering code clarity.\n\nTypeScript's Role in Modern Development\nWorkplace Adaptability: TypeScript is used in an extensive range of projects, from small utilities to large-scale applications.\n\nCommunity Support: Supported by a vibrant developer community, TypeScript benefits from frequent updates, bug fixes, and useful extensions.\n\nOn-Going Development: A robust language server furnishes accurate tooling feedback, such as linting and error suggestions in real time.\n\nRapid Enhancement: The TypeScript team consistently introduces new features and reinforces existing ones."
  },
  {
    "id": "978",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you explain what is meant by \"TypeScript is a superset of JavaScript\"?",
    "answer": "TypeScript is often described as a \"superset of JavaScript\" because every valid JavaScript code is also a valid TypeScript code.\n\nTypeScript is designed in a way that it fully embraces existing JavaScript syntax and functionality. This ensures a smooth transition for developers wishing to adopt or migrate to TypeScript.\n\nKey TypeScript Features On Top of JavaScript\nType Definitions: TypeScript introduces static typing through type annotations. These are optional, enabling gradual adoption for existing codebases that might not need them.\n\nNewer JavaScript Features: TypeScript extends JavaScript syntax, providing support for the latest ECMAScript standards more effectively through its compiler, even when the underlying JavaScript engine might not support them yet.\n\nTooling and Error Detection: TypeScript offers robust type-checking, increased code readability, and stronger compile-time error detection.\n\nCode Demonstration\nHere is the TypeScript code:\n\nlet num: number = 5;\nnum = \"this will raise a type error\";"
  },
  {
    "id": "979",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the basic types available in TypeScript?",
    "answer": "TypeScript provides an assortment of basic types for different kinds of data, such as numbers, strings, boolean values, arrays, tuples and more.\n\nCommon Basic Types in TypeScript\nBoolean: Represents true/false values.\n\nNumber: Applies to both integer and floating-point numbers.\n\nString: Refers to textual data.\n\nArray: Offers a flexible way to work with structured data.\n\nTuple: Enables the definition of arrays with a fixed number of elements, each potentially of a different data type.\n\nEnum: Provides a set of named constants such as days or colors.\n\nAny: Offers a dynamic type, which can be used to bypass type-checking. It's typically best to be avoided, as it defeats the purpose of using TypeScript, which is primarily focused on static typing. However, there are certain use cases where it becomes necessary.\n\nVoid: Typically used as the return type for functions that don't return a value.\n\nNull and Undefined: Allow for the assignment of null and undefined values, respectively. However, this isn’t enabled by default, and these are probably better handled using the strict mode settings in TypeScript.\n\nNever: Represents the type of values that never occur. For instance, the return type of a function that doesn't reach its end or always throws an error.\n\nObject: Any JavaScript object.\n\nFunction: Denotes a function type.\n\nCode Example: Basic TypeScript Types\nHere is the TypeScript code:\n\n// Boolean\nlet isActive: boolean = true;\n\n// Number\nlet age: number = 30;\n\n// String\nlet title: string = \"Manager\";\n\n// Array\nlet scores: number[] = [85, 90, 78];\n// or use a compact form: let scores: Array<number> = [85, 90, 78];\n\n// Tuple\nlet employee: [string, number, boolean] = ['John', 35, true];\n\n// Enum\nenum WeekDays { Monday, Tuesday, Wednesday, Thursday, Friday }\nlet today: WeekDays = WeekDays.Wednesday;\n\n// Any\nlet dynamicData: any = 20;\n\n// Void\nfunction greet(): void {\n  console.log(\"Hello!\");\n}\n\n// Null and Undefined\nlet data: null = null;\nlet user: undefined = undefined;\n\n// Never\nfunction errorMessage(message: string): never {\n  throw new Error(message);\n}\n\n// Object\nlet person: object = {\n  name: 'John',\n  age: 30\n};\n\n// Function\nlet calculate: Function;\ncalculate = function (x: number, y: number): number {\n  return x + y;\n};"
  },
  {
    "id": "980",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare variables in TypeScript?",
    "answer": "In TypeScript, variable declarations support different methodologies for declaring variables and their associated types.\n\nVariable and Type Declaration Methods"
  },
  {
    "id": "981",
    "category": "typescript",
    "difficulty": "medium",
    "question": "var",
    "answer": "var score: number = 100;\nThis declaration can lead to variable hoisting and has global scope or function-level scope."
  },
  {
    "id": "982",
    "category": "typescript",
    "difficulty": "medium",
    "question": "let",
    "answer": "Use let when you want to define variables within a block scope. This is the recommended default choice:\n\nlet playerName: string = \"John\";"
  },
  {
    "id": "983",
    "category": "typescript",
    "difficulty": "medium",
    "question": "const",
    "answer": "const allows you to declare constants and is especially useful for maintaining data integrity:\n\nconst apiKey: string = \"your-api-key-here\";"
  },
  {
    "id": "984",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Function Scope",
    "answer": "All three methods (var, let, and const) are confined to their immediate function scope:\n\nfunction doSomething() {\n  let tempValue: number = 42;\n  var result: boolean = true;\n}\nRules for Variable Declaration and Initialization\nOrder Matters: In TypeScript, a variable must be declared before being used. This is not a requirement in JavaScript, but good JavaScript practice is to declare a variable before using it.\n\nIf you're dealing with complex or interconnected codes, it's a good practice to use the let and const declarations that ensure the block-level scoping, thus helping with potential hoisting issues.\n\nStatic Types: TypeScript requires that you declare the data type of a variable (or let the system infer it) and then initialize it with a value of exactly the same type:\n\nlet count: number;  // Declaration\ncount = 42;  // Allowed\ncount = \"42\";  // Error! Type 'string' is not assignable to type 'number'.\nType Inference: TypeScript can often infer the variable's type based on its initialization value. This reduces the need to specify a type explicitly.\n\nlet word = \"hello!\";  // TypeScript infers the type as 'string' because of the initialization.\nBest Practices for Variable Declarations\nUse const Where You Can: This approach isn't always possible, especially when dealing with object properties. However, favor const for better code readability and to prevent accidental data mutations.\n\nPrefer let over var: let adheres better to block-level scoping and offers more predictability in the code.\n\nInitialize at Declaration: Although TypeScript allows initializations after declarations, it's best to declare and initialize variables simultaneously to improve code clarity and type safety.\n\nPrefer Type Annotations: Explicitly specifying variable types can improve code readability. However, when the variable type is obvious from the initialization, type inference should suffice."
  },
  {
    "id": "985",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Interfaces in TypeScript and how do they work?",
    "answer": "In TypeScript, an interface defines the structure and types of its members. It acts as a contract for the required properties and methods, ensuring that implementing classes or objects match this structure.\n\nKey Features of Interfaces\nType Consistency: Objects that adhere to an interface's structure are considered compatible with it.\nOptional and Readonly Members: Interfaces allow for optional attributes and readonly members with the ? and readonly keywords respectively.\nCall Signatures: Interfaces can define method types, specifying function parameter and return types.\nIndex Signatures: Useful for specifying that an object can have any number of properties, all of a certain type.\nCore Use-Cases\nStandardizing Objects: Ensuring that disparate objects share a common structure for increased cohesiveness and ease of use.\nContract Enforcement: Enforcing property and method requirements on classes to reduce errors and improve maintainability.\nCode Example: Basic Interface\nHere is the TypeScript code:\n\ninterface Point {\n    x: number;\n    y: number;\n}\n  \nfunction printPoint(p: Point) {\n    console.log(`Point coordinates: (${p.x}, ${p.y})`);\n}\n\nlet pointA = { x: 3, y: 7 }; // This object matches Point's structure\nlet pointB = { x: 8 }; // This object is missing the 'y' property\n\nprintPoint(pointA); // Output: Point coordinates: (3, 7)\nprintPoint(pointB); // Compile-time error due to incorrect structure"
  },
  {
    "id": "986",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe the Enum type and when you might use it.",
    "answer": "The Enum is a data type that simplifies the representation and management of discrete, named values. It's a foundational tool to ensure type safety in TypeScript and a number of vital use-cases:\n\nReducing 'Magic Values': When ensuring readability and preventing repetitive literal values, such as 1, 2, or 'red'.\nConfiguring Behaviour: influencing functionalities sets of associated values, such as HTTP methods, ordering or customer types.\nEnsuring Type Safety and Efficiency: The predefined set of valid members and a clear data type ensures that value assignments and operations are unequivocal and consistent.\nCore Components\nKey: a unique identifier, typically a number or string.\nValue: Data associated with the key. If not provided, the key is used as the value.\nStandard, String, and Heterogeneous Enums\nStandard Enum: Every key and value are of the same data type, typically numbers.\nString Enum: All keys and values must be strings, ensuring consistent data representation.\nHeterogeneous Enum: Defines keys with both number or string values. However, due to the mixed-type nature of these enums, it's best to steer clear of them in most cases.\nCode Example: Standard Enum\nHere is the TypeScript code:\n\nenum HttpMethods {\n  GET,\n  POST,\n  PUT,\n  DELETE\n}\n\nconst requestType: HttpMethods = HttpMethods.GET;\n\n// ❌ This is not allowed due to type safety\n// const requestType2: HttpMethods = 'GET';\nIn the example, the key GET is implicitly assigned the value 0.\n\nCode Example: String Enum\nHere is the TypeScript code:\n\nenum MediaTypes {\n  Image = 'image',\n  Video = 'video',\n  Audio = 'audio'\n}\n\nconst selectedType: MediaTypes = MediaTypes.Image;\n\n// ✅ Accessing the value\nconst associatedText: string = MediaTypes.Image;\n\n// ❌ This is not allowed due to type safety\n// const invalidType: MediaTypes = 'image';\nthe Enum helps ensure the proper data type and its values.\n\nPragmatic Use of Enums\nWhile Enums are a powerful tool for maintaining type safety, simplify associating related sets of values.\n\nHowever, a consideration is that an Enum value can be inferred or forced to be of any key and underlying value type.\n\nPotential Downsides of Enums\nCompilation Impact: When used in a broader context, or in data structures like arrays or maps, TypeScript generates additional code to convert Enum keys to their associated values.\nMemory Usage: Every usage of an Enum requires memory allocation for its value.\nWhen a simple constant would suffice or if there's a need for a more dynamic relationship between keys and values, detailed types would be a better alternative."
  },
  {
    "id": "987",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define and use a function in TypeScript?",
    "answer": "When defining a function in TypeScript, you have the following fundamental components to consider:\n\nFunction Signature: Comprising the function's purpose, parameters, type, and return value.\nFunction Body: Containing the actual operation or series of steps the function will execute.\nKey Concepts\n1) Function Declaration\nTo declare a function, you specify its name, its parameter list, and its return type. If the function doesn't return a value, you set the return type to void.\n\nHere is a code example:\n\nfunction greet(name: string): void {\n    console.log(`Hello, ${name}!`);\n}\n2) Function Expression\nYou can also declare functions using expressions, which involve assigning functions to variables as values. This approach allows you to be more flexible, such as when you're using callbacks.\n\nHere is an example:\n\nlet greet: (name: string) => void;\ngreet = function(name: string): void {\n    console.log(`Hello, ${name}!`);\n};\n3) Optional and Default Parameters\nTypeScript supports both optional and default function parameters, enhancing the flexibility of your functions.\n\nOptional Parameters are denoted by a ? symbol after the parameter name.\n\nHere is the code example:\n\nfunction greet(name: string, title?: string) {\n    if (title) {\n        console.log(`Hello, ${title} ${name}!`);\n    } else {\n        console.log(`Hello, ${name}!`);\n    }\n}\nDefault Parameters are when you assign a default value to a parameter:\n\nHere is the code example:\n\nfunction greet(name = \"Stranger\") {\n    console.log(`Hello, ${name}!`);\n}\n4) Use Rest Parameters\nYou can define a parameter as a \"rest\" parameter, which means the function can accept any number of arguments for that parameter.\n\nHere is the code example:\n\nfunction introduce(greeting: string, ...names: string[]) {\n    console.log(`${greeting}, ${names.join(\", \")}!`);\n}\n\nintroduce(\"Hello\", \"Alice\", \"Bob\", \"Carol\");\n5) Function Overloads\nYou can declare multiple function overloads to define a set of parameters and their return types for a single function. This feature is especially beneficial when the function's behavior logically varies based on different input types.\n\nHere is the code example:\n\nfunction specialGreet(name: string): void;\nfunction specialGreet(title: string, name: string): void;\n\nfunction specialGreet(a: any, b?: any): void {\n    if (b) {\n        console.log(`Hello, ${a}, ${b}`);\n    } else {\n        console.log(`Hello, ${a}`);\n    }\n}\n6) Call Signature\nWhen using objects in TypeScript, you have the call signature to define the expected function structure for a specific method within the object.\n\nHere is a code example:\n\ntype Greeter = {\n    (name: string): void\n};\n\nlet welcome: Greeter;\nwelcome = function(name: string): void {\n    console.log(`Welcome, ${name}!`);\n};"
  },
  {
    "id": "988",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does \"type inference\" mean in the context of TypeScript?",
    "answer": "In TypeScript, type inference is a core feature that allows the type of a variable to be automatically determined from its value. This provides the benefits of static typing without the need for explicit type annotations.\n\nHow It Works\nTypeScript employs a best common type algorithm to infer a variable's type. When TypeScript encounters multiple types for a variable during assignment or an array literal, it computes the union of these types and selects the best common type for the variable.\n\nCode Example: Type Inference\nConsider the following code:\n\nlet value = 10; // Type 'number' inferred\nlet message = \"Hello, TypeScript!\"; // Type 'string' inferred\n\nfunction add(a: number, b: number) {\n    return a + b;\n}\n\nlet sum = add(5, 7); // Type 'number' inferred\nTypeScript can infer the most likely type from the context, such as:\n\nWhen a value is assigned immediately, TypeScript assigns the value's type to the variable.\nType information from adjacent types is used to determine the best common type. If all values are of a compatible type, that type is used.\nBenefits of Type Inference\nConciseness: Eliminates the need for explicit type declarations, leading to more compact and readable code.\nAdaptability: Codebase types align naturally with values, enhancing maintainability when values change.\nError Reduction: Reduces the risk of inconsistencies between the declared type and the actual value."
  },
  {
    "id": "989",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the use of 'let' and 'const' in TypeScript.",
    "answer": "TypeScript makes use of const and let for variable declaration. These two keywords offer explicitness, scoping, and immutability for efficient code maintenance.\n\nCore Distinctions\nconst: Designates constants that remain unchanged once declared. It's important to note that this makes the reference immutable but doesn't actively prevent alteration of the internal state for complex objects like arrays.\n\nlet: Initiates variables with standard mutable behavior.\n\nCode Example: const\nHere is the TypeScript code:\n\nconst productId: number = 5;\nlet productName: string = 'Tesla';\n\nconst getProductDetails = (id: number): string => {\n  return `Product ID: ${id}`;\n};\n\n// Attempting to modify will result in a compilation error\n// productId = 6;\n\n// Reference is still immutable\nconst anotherProductId: number = 10;\n// This will throw a compilation error since it's a constant\n// anotherProductId = 12;\n\n// Modifying internal state of an object is allowed for a const\nconst myArray: number[] = [1, 2, 3];\nmyArray.push(4);\nCode Example: let\nHere is the TypeScript code:\n\nlet vehicleType: string = 'Car';\n\nif (true) {\n  let vehicleType: string = 'Motorcycle';\n  console.log(vehicleType);  // Output: Motorcycle\n}\n\nconsole.log(vehicleType);  // Output: Car"
  },
  {
    "id": "990",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you compile TypeScript files into JavaScript?",
    "answer": "Compiling TypeScript (.ts) into JavaScript (.js) involves integrating a TypeScript compiler (tsc). You can customize the compilation process using tsconfig.json and even adopt more advanced methods to suit project needs:\n\nWorkflow Steps\nFile Creation: Write TypeScript files (.ts).\n\nCompiler Config: Set up a tsconfig.json file with compilation options.\n\nCompile: Execute the tsc command to initiate the compilation process.\n\nOutput Verification: Review the generated JavaScript files.\n\nTypeScript Configuration (tsconfig.json)\nHere is the tsconfig.json file. The full configuration guide is available here.\n\n{\n  \"compilerOptions\": {\n    \"target\": \"ES5\",\n    \"module\": \"commonjs\",\n    \"strict\": true,    \n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\"  \n  },\n  \"include\": [\n    \"src/**/*.ts\"    \n  ],\n  \"exclude\": [      \n    \"node_modules\",   \n    \"**/*.spec.ts\"    \n  ]\n}\nPractical Example: Vineyard Residential Task Management App\nHere is a practical and comprehensive tsconfig.json file.\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"dom\", \"es2015\", \"es5\", \"es6\", \"es7\", \"es2015.collection\"],\n    \"allowJs\": true,\n    \"checkJs\": false,\n    \"jsx\": \"react\",\n    \"declaration\": false,\n    \"sourceMap\": true,\n    \"outDir\": \"dist\",  \n    \"rootDir\": \"src\",\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitThis\": true,\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"removeComments\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"typeRoots\": [\"node_modules/@types\", \"custom-typings\"],\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"components/*\": [\"src/components/*\"],\n      \"utils/*\": [\"src/utils/*\"],\n    },\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"incremental\": true,\n    \"diagnostics\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"newLine\": \"LF\",\n    \"watchOptions\": {\n      \"watchFile\": \"useFsEvents\",  \n      \"fallbackPolling\": \"dynamicPriority\",   \n      \"polling\": true,\n      \"esModuleInterop\": true,\n            \"pollingInterval\": 2500,\n      \n      \"followSymlinks\": true\n    }\n  },\n  \"include\": [\n    \"src/**/*.ts\",\n    \"src/**/*.tsx\",\n    \"@types\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"dist\"\n  ]\n}\nAdvanced Configuration\nProject Reference: Useful for code splitting in large projects.\nCustom Transformers: Employ custom logic during the compilation process.\nProgrammatic API: Provides flexibility in managing compiler settings and execution."
  },
  {
    "id": "991",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain classes in TypeScript. How are they different from ES6 classes?",
    "answer": "While TypeScript and ES6 classes share many similarities, TypeScript's classes offer additional features and strong typing to make your code more robust.\n\nKey Shared Class Features\nInheritance: Subclasses (children) can extend parent classes, inheriting their methods and properties.\nPolymorphism: Derived classes can define methods with the same name as their parent.\nEncapsulation: Data hiding is supported through access modifiers, such as public, private, and protected.\nConstructor: Instantiation starts with a constructor method, if defined.\nUnique TypeScript Class Features\nField Declaration\nIn TypeScript, you can specify fields directly in the class without initializing them. Automatic initialization to undefined occurs during object creation. ES6 requires initializing fields in the constructor or within their declaration.\n\nclass Example {\n    // Field is automatically initialized to undefined upon object creation\n    someField: string;\n}\nAbstract Classes\nTypeScript supports abstract classes to serve as a blueprint for other classes. They cannot be instantiated on their own but can provide some implementation that derived classes can override.\n\nabstract class AbstractExample {\n    abstract someMethod(): void;  // Method has no implementation (abstract)\n}\nReadonly Properties\nYou can mark class properties as readonly, ensuring they are only set upon declaration or within the class constructor.\n\nclass Example {\n    readonly id: number;\n    constructor(id: number) {\n        this.id = id;  // Readonly can only be assigned in the constructor or declaration\n    }\n}\nStatic Members\nClasses in TypeScript support static members, such as properties and methods that belong to the class itself, rather than to instances of the class.\n\nclass Example {\n    static count = 0;  // Static property\n    static incrementCount() {\n        Example.count++;\n    }\n}\nAccessor Functions\nYou can define get and set functions in TypeScript, known as accessor functions, to control how class properties are accessed and modified.\n\nclass Example {\n    private _name: string;\n\n    get name(): string {\n        return this._name;\n    }\n\n    set name(newName: string) {\n        this._name = newName.trim();\n    }\n}\nParameter Properties\nTypeScript provides a shortcut to declare a property and initialize it from the constructor parameter. This method can make code more concise, especially when a constructor parameter corresponds directly to a class property.\n\nclass Example {\n    constructor(private _name: string, public age: number) {\n        // Private _name property created and initialized from constructor parameter\n        // Public age property created and initialized from constructor parameter\n    }\n}\nIntersection Types for Classes\nIn TypeScript, when you define a base class and then later extend it, you are creating an intersection type. This means the child class will inherit all the properties and methods from both its parent(s) and itself.\n\nES6 Additional Features not Present in TypeScript\nClass Expressions\nBoth ES6 and TypeScript support class expressions, which allows you to define a class without a class name.\n\nIn ES6:\n\nconst Animal = class {\n    // Class methods and properties defined here\n};\nIterator Protocol\nES6 classes support the Iterator protocol, making it easier to iterate over objects.\n\nclass IterableExample implements Iterable<string> {\n    // Implement iterator function for strings\n    [Symbol.iterator]() {\n        let index = 0;\n        const data = ['one', 'two', 'three'];\n        return {\n            next: () => {\n                if (index < data.length) {\n                    return { value: data[index++], done: false };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n}"
  },
  {
    "id": "992",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement Inheritance in TypeScript?",
    "answer": "Let's look at how you can use inheritance in TypeScript using both ES6 classes and prototypal inheritance."
  },
  {
    "id": "993",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Inheritance with ES6 Class Syntax",
    "answer": "With the advent of ES6, a more familiar class-based inheritance method was introduced. This method is usually easier to read and understand.\n\nCode Example: Inheritance using ES6 Classes\nHere is the TypeScript code:\n\nclass Animal {\n  private name: string;\n\n  constructor(theName: string) {\n    this.name = theName;\n  }\n\n  move(distanceInMeters: number = 0) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Snake extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n\n  move(distanceInMeters = 5) {\n    console.log(\"Slithering...\");\n    super.move(distanceInMeters);\n  }\n}\n\nconst mySnake = new Snake(\"Cobra\");\nmySnake.move();  // Output: Slithering... Cobra moved 5m."
  },
  {
    "id": "994",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Inheritance with Prototypal Methodology",
    "answer": "Prior to ES6, TypeScript, like JavaScript, used a prototypal inheritance approach.\n\nThe prototypal mechanism can be useful when developing complex object structures, but it is important to be aware of the nuances in order to avoid unexpected behavior.\n\nCode Example: Prototypal Inheritance in TypeScript\nHere is the TypeScript code:\n\n// Define the Parent Class\nfunction Animal(this: Animal, name: string) {\n  this.name = name;\n}\n\nAnimal.prototype.move = function(distanceInMeters: number = 0) {\n  console.log(`${this.name} moved ${distanceInMeters}m.`);\n};\n\n// Define the Child Class\nfunction Snake(name: string) {\n  Animal.call(this, name);\n}\n\n// Set up the Inheritance\nSnake.prototype = Object.create(Animal.prototype);\nSnake.prototype.constructor = Snake;\n\n// Override the Base Type's Method\nSnake.prototype.move = function(distanceInMeters = 5) {\n  console.log(\"Slithering...\");\n  Animal.prototype.move.call(this, distanceInMeters);\n};\n\nconst mySnake = new Snake(\"Cobra\");\nmySnake.move();  // Output: Slithering... Cobra moved 5m.\nSimplified Methods\nUsing the prototypal construct can be perplexing at first, but its strength lies in its flexibility.\n\nYou can avoid the complexities of direct prototype assignments using ES5 derived constructions, as seen next:\n\nfunction Animal(name: string) {\n  this.name = name;\n}\n\nAnimal.prototype.move = function(distanceInMeters: number = 0) {\n  console.log(`${this.name} moved ${distanceInMeters}m.`);\n};\n\nfunction Snake(name: string) {\n  Animal.call(this, name);\n}\n\n// Utilize `Object.create` for simplified prototype delegation\nSnake.prototype = Object.create(Animal.prototype);\nSnake.prototype.constructor = Snake;\n\nSnake.prototype.move = function(distanceInMeters = 5) {\n  console.log(\"Slithering...\");\n  Animal.prototype.move.call(this, distanceInMeters);\n};"
  },
  {
    "id": "995",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are access modifiers and how do they work in TypeScript?",
    "answer": "Access modifiers are TypeScript's way of controlling class member visibility and mutability. They enforce encapsulation and are especially useful for object-oriented design.\n\nKey Modifiers\nPublic: Default for class members. They are accessible from both inside and outside the class.\n\nProtected: Members can be accessed within the class and its subclasses. They help establish the \"is-a\" relationship.\n\nPrivate: Marks members as accessible only within the declaring class. This ensures they're not modified or accessed externally.\n\nCode Example: Access Modifiers in Action\nHere is the TypeScript code:\n\nclass Person {\n    public name: string;\n    private age: number;\n    protected contact: string;\n\n    constructor(name: string, age: number, contact: string) {\n        this.name = name;\n        this.age = age;\n        this.contact = contact;\n    }\n}\n\nclass Employee extends Person {\n    private employeeId: string;\n\n    constructor(name: string, age: number, contact: string, employeeId: string) {\n        super(name, age, contact);\n        this.employeeId = employeeId;\n    }\n\n    public displayDetails(): void {\n        console.log(`${this.name} - ${this.age} - ${this.contact} - ${this.employeeId}`);\n    }\n}\n\n// Somewhere in your code\nconst person = new Person(\"John Doe\", 30, \"1234567\");\nconsole.log(person.name);  // Accessible\nconsole.log(person.age);   // ERROR: 'age' is private\n\nconst employee = new Employee(\"Jane Doe\", 25, \"2345678\", \"E123\");\nconsole.log(employee.contact);  // ERROR: 'contact' is protected\nemployee.displayDetails();     // Correctly displays details\n\nemployee.age = 35;    // ERROR: 'age' is private\nemployee.contact = \"3456789\";  // ERROR: 'contact' is protected"
  },
  {
    "id": "996",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Discuss Abstract classes and their purposes in TypeScript.",
    "answer": "In TypeScript, abstract classes serve as blueprints that guide derived classes, essentially laying out the structure without necessarily providing complete implementations of methods.\n\nCore Features of Abstract Classes\nMethod Signatures\nAbstract classes define method signatures without specifying their functionality. This feature provides a comprehensive form for derived classes to work from.\n\nSpecific Method Definitions\nIn addition to method signatures, abstract classes can contain completely implemented methods. These methods either support the abstract methods or serve as independent functionalities.\n\nAbstract and Non-Abstract Members Separation\nAbstract classes clearly demarcate between methods that require implementation by derived classes and those that are either fully implemented or optional.\n\nCommon Use-Cases for Abstract Classes\nFacilitate Reusability: Abstract classes help in consolidating common or shared functionalities among several derived classes.\n\nContract Enforcement: They ensure that derived classes conform to a shared structure, guaranteeing a defined set of methods that must be implemented.\n\nPartial Implementations: Abstract classes allow for a mix of fully implemented methods alongside those requiring concrete implementations in derived classes.\n\nTypeScript Utility: Static Properties\nAbstract classes in TypeScript can have static members, which belong to the class itself and not to any specific instance. This feature provides a convenient way to define properties or methods that are accessible without the need for class instantiation.\n\nCode Example: Abstract Class\nHere is the TypeScript code:\n\nabstract class Shape {\n    abstract getArea(): number;\n    abstract getPerimeter(): number;\n    color: string;\n\n    constructor(color: string) {\n        this.color = color;\n    }\n\n    static defaultColor: string = 'red';\n\n    describe() {\n        return `This shape is ${this.color}.`;\n    }\n}\n\n// This will throw an error because the derived class does not provide concrete implementations for abstract methods.\nclass Circle extends Shape { \n    constructor(public radius: number, color: string) {\n        super(color);\n    }\n\n    // The 'Circle' class inherited the following properties from 'Shape', but neither implements nor specifies them in the derived class: 'getArea' and 'getPerimeter'.\n    getArea(): number {\n        return Math.PI * this.radius ** 2;\n    }\n\n    getPerimeter(): number {\n        return 2 * Math.PI * this.radius;\n    }\n}\n\nconst myCircle = new Circle(5, 'blue');\nconsole.log(myCircle.getArea()); // Outputs: 78.54\nconsole.log(myCircle.describe()); // Outputs: This shape is blue.\nconsole.log(Shape.defaultColor); // Outputs: red"
  },
  {
    "id": "997",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you describe the use of Constructors within TypeScript classes?",
    "answer": "TypeScript provides a convenient way to define constructors for classes using the constructor keyword. A constructor method allows you to initialize class members and can have access specifiers. They are useful for setting up an object's initial state.\n\nKey Features\nAutomatic Invocation: The constructor is automatically called when an object of the class is instantiated.\nSingle Unique Constructor: A class can only have one constructor, providing a centralized place for initialization.\nOverload Capabilities: You can overload a constructor to define multiple ways of object initialization.\nExample: Constructor in TypeScript\nWe use the this keyword to refer to the current instance, ensuring proper data assignment.\n\nclass Person {\n  // Member variables\n  name: string;\n  age: number;\n  \n  // Constructor\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\nConstructor Access Modifiers\nTypeScript supports access modifiers on constructor parameters, enabling concise and safe class initialization.\n\nPublic: Parameters without a modifier are public by default.\nPrivate: Adding the private keyword makes them accessible within the class only.\nRead-Only: Combining readonly with parameter and the private or public access modifier ensures the parameter is assigned a value just once, in the constructor.\n\n\n\nTop 50 TypeScript Interview Questions With Answers for 2025\n\nfunction color(value: string) {\n\n // this is the decorator factory, it sets up\n\n // the returned decorator function\n\n return function (target) {\n\n   // this is the decorator\n\n   // do something with 'target' and 'value'...\n\n };\n\n}"
  },
  {
    "id": "998",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Mixins?",
    "answer": "Combining simpler partial classes is a popular approach of constructing classes from reusable components. For languages like Scala, you may be familiar with the concept of mixins or characteristics.\n\nTo extend a base class, the design relies on generics and class inheritance. The finest mixin support in TypeScript is provided through the class expression pattern.\n\nWe have a class where mixins are applied on top of it.\n\nclass Sprite {\n\n name = \"\";\n\n x = 0;\n\n y = 0;\n\n constructor(name: string) {\n\n   this.name = name;\n\n }\n\n}\n\nUnleash a High-paying Automation Testing Job!\nAutomation Testing Masters ProgramExplore ProgramUnleash a High-paying Automation Testing Job!"
  },
  {
    "id": "999",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain Classes in TypeScript.",
    "answer": "In terms of OOPs, a class is a template for producing objects. Object-oriented programming elements like as classes, interfaces, polymorphism, and data binding are all supported by TypeScript. The term \"object\" refers to a physical entity. Classes were not supported in JavaScript ES5 or earlier. This is a feature that Typescript inherits from ES6.\n\nA class is a collection of items with similar characteristics. Fields, methods, constructors, Blocks, Nested classes, and interfaces are all included in the class.\n\nSyntax to declare a class:\n\nclass class_Name{    \n\n    field;    \n\n    method;    \n\n}"
  },
  {
    "id": "1000",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Namespace and how to declare it?",
    "answer": "The namespace is used to group functionalities logically. To enable a single or a group of linked functionalities, a namespace can include interfaces, classes, functions, and variables.\n\nThe namespace keyword, followed by the namespace name, can be used to construct a namespace. Curly brackets can be used to define all interfaces, classes, and other objects.\n\nSyntax: \n\nnamespace <name>\n\n{   \n\n}"
  },
  {
    "id": "1001",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Rest Parameters in Typescript?",
    "answer": "You can use rest parameters when the number of parameters that a function will get is unknown or varies.\nThe rest parameter can take zero or more parameters. The compiler will generate an array of arguments containing the name of the rest parameter.\nlet Greet = (greeting: string, ...names: string[]) => {\n\n  return greeting + \" \" + names.join(\", \") + \"!\";\n\n}\n\nGreet(\"Hi!\", \"John\", \"Sam\"); // returns \"Hi John, Sam\"\n\nGreet(\"Hi!\");// returns \"Hi !"
  },
  {
    "id": "1002",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Objects in TypeScript?",
    "answer": "An object is a type of instance that consists of a collection of key-value pairs. Scalar values, functions, and even arrays of other objects can be used as values.\n\nSyntax:\n\nvar object_name = { \n\n   key1: “value”, //scalar value \n\n   key2: “value”,  \n\n   key3: function() {\n\n      //functions \n\n   }, \n\n   key4:[“contentA”, “contentB”] //collection  \n\n};"
  },
  {
    "id": "1003",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain Type Aliases",
    "answer": "Type aliases give a type a new name. Type aliases are similar to interfaces in that they can be used to name primitives, unions, tuples, and any other kinds that you'd have to define by hand otherwise.\n\nAliasing doesn't truly create a new type; instead, it gives that type a new name. Aliasing a primitive isn't very useful, however it can be used for documentation purposes.\n\nType aliases, like interfaces, can be general; all you have to do is add type parameters and utilise them on the right side of the alias declaration.\n\ntype Container<T> = { value: T };"
  },
  {
    "id": "1004",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain Modules in TypeScript",
    "answer": "A module is created with the intention of organizing TypeScript code. Modules are classified as follows:\n\nInternal Modules: Internal Modules were previously used to logically group classes, interfaces, and functions into a single unit that could then be exported into a different module. In the most recent version of TypeScript, this logical grouping is referred to as namespace.\n\nExternal Modules: External modules allow you to describe and load dependencies between many external js files in TypeScript."
  },
  {
    "id": "1005",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Mapped Types ?",
    "answer": "Taking an existing type and making each of its properties optional is a typical undertaking.\n\nBecause this happens frequently enough in JavaScript, TypeScript has a feature called mapped types that allows you to define new types based on existing ones. The new type turns each property in the old type in the same way into a mapped type. You can, for example, make all properties optional or of the readonly type. \n\nIt's important to note that this syntax refers to a type rather than a member. You can use an intersection type to add more members:\n\nNow, take a look at the simple mapped type and its parts:\n\ntype Keys = \"option1\" | \"option2\";\n\ntype Flags = { [K in Keys]: boolean };\n\nThe syntax is similar to that of index signatures with a for.. in the middle. There are three sections in total:\n\nThe type variable K is assigned to each property one by one.\n\nThe literal union of strings The names of the properties to iterate over are stored in keys.\n\nThe property's type as a result.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1006",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Conditional Types in TypeScript ?",
    "answer": "Based on a condition given as a type relationship test, a conditional type chooses one of two alternative types:\n\nT extends U ? X : Y\n\nWhen T can be assigned to U, the type is X, and when it can't, the type is Y.\n\nBecause the condition depends on one or more type variables, a conditional type T extends U? X: Y and is either resolved to X or Y or delayed. Whether to resolve to X or Y, or to defer, when T or U contains type variables is determined by whether the type system has enough information to conclude that T is always assignable to U."
  },
  {
    "id": "1007",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Distributive Conditional Types?",
    "answer": "Distributive conditional types are conditional types in which the checked type is a bare type parameter. During instantiation, distributive conditional types are automatically distributed over union types.\n\nFor example, an instantiation of T extends U ? X : Y with the type argument A | B | C for T is resolved as (A extends U ? X : Y) | (B extends U ? X : Y) | (C extends U ? X : Y)."
  },
  {
    "id": "1008",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how TypeScript files can be supported from Node Modules",
    "answer": "TypeScript includes a series of declaration files to guarantee that TypeScript and JavaScript support works well right out of the box (.d.ts files). The various APIs in the JavaScript language, as well as the standard browser DOM APIs, are represented in these declaration files. While there are some fair defaults based on your target, you can configure the lib setting in the tsconfig.json to specify which declaration files your program uses.\n\nTypeScript has a feature similar to @types/ support that allows you to override a specific built-in lib. TypeScript will check for a scoped @typescript/lib-* package in node modules when selecting which lib files to include. After that, you can use your package manager to install a specific package to take over for a particular library."
  },
  {
    "id": "1009",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the Components of Typescript",
    "answer": "TS_Int_Qs_Components.\n\nInternally, the TypeScript language is separated into three layers. Each of these layers is further subdivided into components. These layers are as follows:\n\nLanguage\nThe TypeScript Compiler \nLanguage Services for TypeScript\nLanguage: It is written in TypeScript and includes TypeScript language components. It includes syntax, keywords, and type annotations.\n\nTypeScript Compiler (TSC): The TypeScript compiler (TSC) converts TypeScript programmes into JavaScript code. It also converts your TypeScript code to JavaScript code, parsing and type-checking it.\n\nThe TypeScript Language Services:  Provides information that allows editors and other tools to deliver greater assistance capabilities like automated refactoring and IntelliSense. It adds a layer of abstraction to the core-compiler pipeline. It allows you to do things like code formatting and outlining, colorization, statement completion, signature help, and so on."
  },
  {
    "id": "1010",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are Object-Oriented Principles supported by TypeScript?",
    "answer": "TS_Int_Qs_oops\n\nThe object-oriented principles supported by TypeScript are Encapsulation, Inheritance, Polymorphism and Abstraction \n\nEncapsulation is a major component of Object Oriented Programming, and it is a method of structuring code so that each block of code has its own set of access points for external code.\n\nTypeScript makes creating an object model and inheritance chain a breeze. To construct classes, simply use the standard class keyword. The extended keyword causes the stated base class to be inherited by the child class.\n\nPolymorphism occurs when many classes inherit from the same parent and override the same functionality. Each of those kid classes is now responsible for implementing a property or method, but they may do so in their own unique way.\n\nAbstraction is a method of modelling objects in a system that separates the responsibilities of the class or type from the code that inherits it."
  },
  {
    "id": "1011",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the Drawbacks of using Declaration Files with Typescript",
    "answer": "There are two drawbacks to using these declaration files with TypeScript:\n\nSince you upgrade TypeScript, you must also deal with changes to TypeScript's built-in declaration files, which can be difficult when the DOM APIs change so regularly.\n\nCustomizing these files to meet your needs and the demands of your project's dependencies is difficult (e.g. if your dependencies declare that they use the DOM APIs, you might also be forced into using the DOM APIs).\n\nAdvanced Level TypeScript Interview Questions\nSo those were all Intermediate level TypeScript Interview Questions, now look at the Advanced level TypeScript Interview Questions"
  },
  {
    "id": "1012",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to compile Typescript with Visual Studio Code?",
    "answer": "Visual Studio Code includes TypeScript language support but does not include the TypeScript compiler.\nYou need to install the TypeScript compiler either globally or in your workspace to transpile TypeScript source code to JavaScript\nThe easiest way to install TypeScript is through npm, the Node.js Package Manager.       If you have npm installed, you can install TypeScript globally (-g) on your computer by:\nnpm install -g typescript\n\nYou can test your install by checking the version or help.\ntsc --version"
  },
  {
    "id": "1013",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the Recent Advancements in TypeScript?",
    "answer": "TypeScript 4.2 has been released, and it includes more flexible type annotations, tougher checks, additional configuration choices, and a few breaking changes.\nRest arguments can now be placed anywhere in a triple type. In type error messages, type aliases are no longer enlarged, resulting in a better developer experience.\nTypeScript 4.2 brings the language one step closer to its aim of accurately typing JavaScript at any size, anywhere JavaScript is used."
  },
  {
    "id": "1014",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the Awaited Type and Promise Improvements",
    "answer": "The Awaited type is a new utility type introduced in TypeScript 4.5. This type is intended to represent activities such as await in async functions and the.then() method on Promises - notably, the way they recursively unwrap Promises.\n\n// A = string\n\ntype A = Awaited<Promise<string>>;\n\n// B = number\n\ntype B = Awaited<Promise<Promise<number>>>;\n\n// C = boolean | number\n\ntype C = Awaited<boolean | Promise<number>>;\n\nExisting APIs, such as JavaScript built-ins like Promise.all, Promise.race, and others, can benefit from the Awaited type. In fact, some of Promise.all's inference concerns provided a foundation for Awaited.\n\nPromise.all combines certain traits with Awaited to produce far superior inference results.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1015",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how TypeScript files can be supported from Node Modules",
    "answer": "TypeScript includes a series of declaration files to guarantee that TypeScript and JavaScript support works well right out of the box (.d.ts files). The various APIs in the JavaScript language, as well as the standard browser DOM APIs, are represented in these declaration files. While there are some fair defaults based on your target, you can configure the lib setting in the tsconfig.json to specify which declaration files your program uses.\n\nTypeScript has a feature similar to @types/ support that allows you to override a specific built-in lib. TypeScript will check for a scoped @typescript/lib-* package in node modules when selecting which lib files to include. After that, you can use your package manager to install a specific package to take over for a particular library."
  },
  {
    "id": "1016",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Type Assertion? Explain its types",
    "answer": "You can find yourself in a scenario where you know a type for an entity that is more specific than its present type.\n\nA type assertion is similar to a type cast in other languages, but it does not do any additional data verification or restructuring. It has no effect on runtime and is only used by the compiler. TypeScript expects that you, the programmer, have completed any necessary specific checks.\n\nThere are two types of type assertions.\n\nOne is the as-syntax:\n\nlet someValue: unknown = \"this is a string\";\n\nlet strLength: number = (someValue as string).length;\n\nThe other version is the “angle-bracket” syntax:\n\nlet someValue: unknown = \"this is a string\";\n\nlet strLength: number = (<string>someValue).length;\n\nBoth samples are identical. selecting one over the other is basically a matter of preference; however, only as-style assertions are allowed when combining TypeScript with JSX."
  },
  {
    "id": "1017",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Recursive Type Aliases?",
    "answer": "The ability to \"recursively\" reference type aliases has always been limited. The reason for this is because each type alias must be capable of substituting itself for whatever it aliases. Because this isn't always possible, the compiler rejects some recursive aliases.\n\nInterfaces can be recursive, but their expressiveness is limited, and type aliases cannot. That involves combining the two: creating a type alias and extracting the type's recursive portions into interfaces. It's effective.\n\ntype ValueOrArray<T> = T | ArrayOfValueOrArray<T>;\n\ninterface ArrayOfValueOrArray<T> extends Array<ValueOrArray<T>> {}\n\n\n\nTypescript Interview Questions\nBeginner Level Question\nWhat is TypeScript, and how does it differ from JavaScript?\nWhat are the benefits of using TypeScript over JavaScript?\nExplain the concept of \"type annotations\" in TypeScript.\nHow do you declare a variable in TypeScript with a specific type?\nWhat is the any type in TypeScript, and when should it be used?\nHow do you define a function in TypeScript with specific argument and return types?\nWhat is type inference in TypeScript?\nExplain the difference between let, const, and var in TypeScript.\nWhat are TypeScript's primitive types?\nWhat is the difference between undefined and null in TypeScript?\nHow do you define an array in TypeScript?\nWhat is a tuple in TypeScript?\nWhat is an enum in TypeScript, and how is it different from a regular object?\nHow do you define an object type in TypeScript?\nWhat are the differences between TypeScript interfaces and types?\nWhat is the void type in TypeScript?\nWhat does never mean in TypeScript, and when is it used?\nHow does TypeScript handle type compatibility?\nWhat is a type alias, and how does it work in TypeScript?\nHow do you define an optional property in TypeScript?\nWhat is the purpose of the readonly modifier in TypeScript?\nHow do you define a function with optional parameters in TypeScript?\nHow do you define default values for function parameters in TypeScript?\nWhat is the purpose of the as keyword in TypeScript?\nHow do you use the typeof operator in TypeScript?\nWhat is a namespace in TypeScript, and how is it used?\nHow do you perform type checking in TypeScript?\nWhat is the difference between interface and class in TypeScript?\nWhat are the different ways to import and export modules in TypeScript?\nExplain the concept of \"declaration merging\" in TypeScript.\nHow do you use the strict mode in TypeScript?\nWhat is the unknown type in TypeScript?\nWhat are type guards in TypeScript?\nWhat are union types, and how are they used in TypeScript?\nHow do you use the never type in a function that throws an error?\nWhat is a \"literal type\" in TypeScript, and how does it work?\nHow do you use the keyof keyword in TypeScript?\nHow do you handle third-party JavaScript libraries in TypeScript?\nWhat is the difference between declare and import in TypeScript?\nHow do you enable TypeScript in a JavaScript project?\nIntermediate Level Question\nWhat is the Partial<T> utility type in TypeScript, and how is it used?\nWhat is the Readonly<T> utility type in TypeScript, and how is it different from readonly properties?\nWhat is the Pick<T, K> utility type in TypeScript?\nHow do you use generics in TypeScript to create reusable components?\nWhat is the extends keyword used for in TypeScript?\nHow do you constrain a generic type in TypeScript?\nWhat are \"mapped types\" in TypeScript, and how are they useful?\nHow does TypeScript handle asynchronous code, and what are Promise<T> and async/await in TypeScript?\nHow do you use the Record<K, T> utility type in TypeScript?\nWhat is the purpose of the this keyword in TypeScript, and how does it differ from JavaScript?\nWhat is the difference between interface and abstract class in TypeScript?\nHow do you implement inheritance in TypeScript?\nWhat is the difference between an \"interface\" and a \"type alias\" in TypeScript?\nWhat is the significance of the super keyword in TypeScript classes?\nHow do you use constructor in TypeScript classes?\nWhat are \"mixins\" in TypeScript, and how do they work?\nHow do you declare a read-only property in a class in TypeScript?\nHow do you create and use custom decorators in TypeScript?\nWhat is the infer keyword in TypeScript, and how does it work?\nWhat is a conditional type in TypeScript?\nHow does TypeScript support JSX/TSX?\nHow do you perform type assertions in TypeScript?\nWhat are never and any types, and when should you use them in TypeScript?\nWhat is the difference between function and => function syntax in TypeScript?\nHow does TypeScript handle module resolution?\nHow do you use async/await with generics in TypeScript?\nWhat is the difference between type and interface when used with generics in TypeScript?\nWhat is the purpose of the declare keyword in TypeScript?\nHow do you use the asserts keyword in TypeScript?\nWhat is a \"destructuring\" assignment in TypeScript, and how does it work?\nHow do you define and use interfaces with optional properties in TypeScript?\nHow do you handle errors and exceptions in TypeScript?\nWhat are module and namespace in TypeScript, and how do they differ?\nHow do you perform runtime validation of types in TypeScript?\nHow do you use the Exclude<T, U> utility type in TypeScript?\nWhat is the NonNullable<T> utility type, and when should it be used?\nHow do you avoid common pitfalls in TypeScript type compatibility?\nWhat is the purpose of the void type in TypeScript, and when is it used?\nHow do you create a type-safe event system in TypeScript?\nWhat is the difference between typeof and keyof in TypeScript?\nExperienced Level Question\nHow do you implement type-safe dependency injection in TypeScript?\nWhat is the significance of never and unknown in TypeScript, and how do you use them effectively?\nWhat are advanced patterns of generics, such as \"generics with constraints\" or \"recursive generics\" in TypeScript?\nHow does TypeScript handle and generate declaration files (.d.ts), and why are they important?\nHow would you optimize a TypeScript application in terms of performance and type-checking?\nWhat is the role of \"type guards\" in TypeScript, and how do they enhance type safety?\nHow do you use conditional types for more complex type relationships in TypeScript?\nHow do you implement and enforce \"strict null checks\" in TypeScript, and why is it important?\nWhat is the as const assertion in TypeScript, and how does it help in defining literal types?\nHow do you handle external JavaScript libraries that don't have type definitions in TypeScript?\nExplain the concept and use of advanced TypeScript utility types such as ReturnType, Parameters, and InstanceType.\nHow do you create a type-safe event bus or observer pattern in TypeScript?\nHow does TypeScript work with the this context, and what are common pitfalls to avoid?\nWhat is the significance of \"type inference\" when using TypeScript generics?\nWhat is the purpose of the unknown type, and how is it different from any?\nHow do you design an abstract class in TypeScript that enforces specific contracts while allowing flexibility in implementation?\nHow do you handle multiple types in a single function signature (overloading) in TypeScript?\nHow would you implement a type-safe configuration management system in TypeScript?\nWhat are the best practices for organizing large TypeScript projects?\nWhat is the infer keyword, and how can it be used in conditional types to infer types?\nHow do you leverage TypeScript’s type system to create reusable, composable components in React or other frameworks?\nWhat is the role of \"module augmentation\" in TypeScript, and how would you extend a third-party module’s type definitions?\nHow does TypeScript's lib.d.ts file work, and how does it impact the development experience?\nWhat is the difference between the typeof operator and the keyof operator in TypeScript, and when would you use each?\nHow do you handle \"type erasure\" in TypeScript, and how does it affect generics?\nWhat is a \"recursive type\" in TypeScript, and when would you use it?\nWhat are \"mapped types,\" and how can they be used to transform types in TypeScript?\nHow does TypeScript work with decorators, and what are some best practices?\nHow do you handle type-safe API responses using TypeScript?\nWhat are the trade-offs between using \"any\" vs. \"unknown\" in TypeScript for complex applications?\nHow do you implement and enforce custom validation or transformation logic in TypeScript types?\nWhat is the importance of the ReadonlyArray<T> type in TypeScript, and how does it differ from a regular array?\nHow do you create a type-safe redux-like state management system in TypeScript?\nWhat are the challenges of working with dynamic types or dynamic imports in TypeScript?\nHow do you work with TypeScript's declaration merging to extend existing types or interfaces?\nHow would you design a type-safe API that can return different data types based on input parameters in TypeScript?\nHow do you use type inference with generics and conditional types to create dynamic, adaptable components in TypeScript?\nWhat is the purpose of as and const assertions in TypeScript, and how do they affect type narrowing?\nHow do you ensure the scalability and maintainability of a TypeScript codebase in large-scale applications?\nWhat are some advanced debugging and troubleshooting strategies for TypeScript in a production environment?\nTypescript Interview Questions and Answers\nBeginners (Q&A)"
  },
  {
    "id": "1018",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is TypeScript, and how does it differ from JavaScript?",
    "answer": "TypeScript is a strongly typed superset of JavaScript that adds optional static typing, interfaces, and other advanced features to the language. Developed and maintained by Microsoft, TypeScript compiles down to standard JavaScript, which can then run anywhere JavaScript is supported, such as in browsers or Node.js.\n\nKey Differences between TypeScript and JavaScript:\n\nStatic Typing: TypeScript introduces a static type system, which allows developers to define the types of variables, function parameters, and return values. This type checking is performed at compile time, which helps catch errors early in the development process. JavaScript, on the other hand, is a dynamically typed language where types are only determined at runtime, which increases the likelihood of runtime errors.\nType Inference: While TypeScript allows you to explicitly define types, it also has a powerful type inference mechanism. This means TypeScript can automatically determine types for variables and expressions based on the values assigned, reducing the need for explicit type annotations in many cases.\nInterfaces and Classes: TypeScript provides more robust support for object-oriented programming, introducing features like interfaces, abstract classes, and access modifiers (e.g., public, private, protected), which aren’t present in JavaScript in the same way. This makes TypeScript better suited for large-scale applications and teams working on complex codebases.\nCompilation: TypeScript is a compiled language, meaning the code you write in TypeScript must be compiled into JavaScript before it can run. This step provides an opportunity to catch errors and perform checks before the code is executed. JavaScript, on the other hand, is an interpreted language, running directly in browsers or Node.js environments.\nTooling: TypeScript offers richer tooling support compared to JavaScript, thanks to its static typing. Many IDEs (e.g., Visual Studio Code) offer features like autocompletion, real-time error checking, and refactoring assistance, improving the development experience.\nIn summary, while TypeScript is a superset of JavaScript that provides additional features, it allows developers to write more reliable and maintainable code, especially in large, complex projects, and ensures that errors related to types are caught early in the development lifecycle."
  },
  {
    "id": "1019",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the benefits of using TypeScript over JavaScript?",
    "answer": "Using TypeScript over JavaScript offers several substantial benefits, particularly in larger codebases or when working in teams. Here are some of the key advantages:\n\nType Safety and Early Error Detection: TypeScript's static typing system ensures that type errors are caught at compile time, preventing many runtime errors. By explicitly defining types for variables, function parameters, and return values, you reduce the likelihood of bugs related to type mismatches. For example, trying to add a string and a number in TypeScript will throw an error at compile time, whereas JavaScript will allow the operation but might yield unintended results.\nImproved Developer Productivity: TypeScript provides strong tooling support. IDEs like Visual Studio Code offer autocompletion, inline type checking, and automatic error detection. This improves productivity by catching errors early in the development process and reducing debugging time. It also helps developers work faster by offering context-aware suggestions and helping them understand the code more easily.\nEnhanced Maintainability: Static typing makes the code more maintainable by providing better documentation of what data types are expected. This is especially important in large codebases, where multiple developers work together. Having clear types also makes it easier to refactor code because you can rely on TypeScript’s compiler to catch any mismatches or incorrect changes.\nSupport for Modern JavaScript Features: TypeScript supports modern JavaScript features (like async/await, destructuring, and spread operators) and compiles them down to an older version of JavaScript (e.g., ES5) for compatibility with legacy browsers or runtimes. This means you can write modern JavaScript code while ensuring broad compatibility.\nObject-Oriented Programming Support: TypeScript enhances JavaScript’s object-oriented features by adding things like interfaces, classes, and inheritance with stronger type support. TypeScript also supports abstract classes, generics, and access modifiers, which JavaScript lacks in its native form.\nBetter Tooling for Large Teams: TypeScript is especially useful in large-scale projects or teams. Its ability to define contracts between modules via interfaces, along with tools like static code analysis and linters, helps keep the codebase consistent and easier to navigate. This can help prevent common issues in large teams, such as miscommunication or incorrect assumptions about the behavior of modules.\nType Definitions for External Libraries: TypeScript offers the ability to use Type Definitions (via the DefinitelyTyped project or @types package) for JavaScript libraries. This provides type safety when working with external libraries, which may not have been written with TypeScript in mind."
  },
  {
    "id": "1020",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of \"type annotations\" in TypeScript.",
    "answer": "Type annotations in TypeScript refer to the process of explicitly specifying the types of variables, function parameters, return values, and other data structures. By providing type annotations, you help TypeScript’s type checker understand the expected types in your code, which in turn allows TypeScript to catch potential errors during development before the code is executed.\n\nFor example:\n\nlet age: number = 25;\nlet name: string = \"Alice\";\nlet isActive: boolean = true;\n‍\n\nIn the above example:\n\nage: number indicates that age must always hold a value of type number.\nname: string indicates that name must always hold a string value.\nisActive: boolean indicates that isActive must always be a boolean.\nFunction Annotations: Type annotations are also used when defining functions. You can specify the types of parameters and the return type of the function:\n\nfunction greet(name: string): string {\n    return `Hello, ${name}`;\n}\n‍\n\nIn this case, name: string specifies that the greet function expects a string as an argument, and the : string after the parentheses specifies that the function returns a string.\n\nBenefits of Type Annotations:\n\nEarly Error Detection: Type annotations allow TypeScript to catch type-related errors at compile time, preventing runtime issues.\nBetter Code Readability: Annotations act as self-documenting code, making it easier for developers (especially those new to the codebase) to understand the expected types of variables and functions.\nRefactoring Assistance: With explicit types, tools like IDEs and linters can help safely refactor the code without introducing type mismatches."
  },
  {
    "id": "1021",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a variable in TypeScript with a specific type?",
    "answer": "In TypeScript, you declare a variable with a specific type by using the : syntax followed by the type. TypeScript uses type annotations to ensure that variables hold values of the correct type.\n\nHere’s the syntax for declaring a variable with a type:\n\nlet variableName: type = value;\n‍\n\nExample:\n\nlet num: number = 10;      // Declares a variable 'num' with type 'number'\nlet name: string = \"Alice\"; // Declares a variable 'name' with type 'string'\nlet isActive: boolean = true; // Declares a variable 'isActive' with type 'boolean'\n‍\n\nType annotations can also be used with complex data types:\n\nArrays:\n\nlet numbers: number[] = [1, 2, 3];\nlet names: Array<string> = [\"Alice\", \"Bob\"];\n‍\n\nObjects:\n\nlet user: { name: string, age: number } = { name: \"Alice\", age: 30 };\n‍\n\nTuples:\n\nlet tuple: [number, string] = [1, \"Alice\"];\n‍\n\nBy declaring the types explicitly, TypeScript can check that variables hold the expected types, helping catch errors at compile time."
  },
  {
    "id": "1022",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the any type in TypeScript, and when should it be used?",
    "answer": "The any type in TypeScript is a dynamic type that can represent any value, essentially opting out of TypeScript's strict type system for that variable. When you assign the any type to a variable, TypeScript allows that variable to hold any kind of data — be it a number, string, object, function, or even null.\n\nExample:\n\nlet value: any = 5;\nvalue = \"Hello, TypeScript\";  // No error, as 'value' can hold any type\nvalue = { name: \"Alice\" };    // Still valid\nWhen to Use any:\n\nPrototyping or Temporary Code: During rapid prototyping or experimentation, you may not want to commit to specific types until the logic is clearer. The any type can be useful in these situations, though it should be avoided once the prototype turns into production-level code.\nThird-Party Libraries Without Type Definitions: When working with third-party libraries that do not provide TypeScript type definitions, any can be used temporarily to avoid type errors. However, it’s better to use TypeScript’s declaration files or write custom typings for such libraries.\nDynamic Data: In cases where the type of a variable is truly dynamic and cannot be inferred or strictly defined, using any allows flexibility. For example, when parsing JSON data from an external source where the structure is unknown ahead of time.\nHowever, any should be used sparingly. Overusing it undermines the benefits of TypeScript’s type safety, making the code more prone to errors. It's generally recommended to use unknown when you need flexibility but still want to enforce type checking before using the value."
  },
  {
    "id": "1023",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a function in TypeScript with specific argument and return types?",
    "answer": "In TypeScript, you can define a function with specific argument types and a return type by annotating the types of the parameters and the return type after the function signature. Here’s the general syntax:\n\ntypescript\n\nfunction functionName(parameterName: type): returnType {\n  // Function body\n}\n‍\n\nExample:\n\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\nconsole.log(add(5, 10)); // Outputs: 15\n‍\n\n‍\n\nIn this example:\n\nThe function add takes two arguments, a and b, both of type number.\nThe return type of the function is also number, ensuring that the function will always return a value of type number.\nYou can also define functions with optional or default parameters:\n\nfunction greet(name: string, age?: number): string {\n  return `Hello ${name}, you are ${age ? age : 'unknown'} years old.`;\n}\n\nconsole.log(greet(\"Alice\")); // Outputs: Hello Alice, you are unknown years old.\n‍"
  },
  {
    "id": "1024",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is type inference in TypeScript?",
    "answer": "Type inference in TypeScript refers to the compiler's ability to automatically deduce the type of a variable or expression based on its assigned value, without needing explicit type annotations. TypeScript uses inference to determine the type of variables, function return types, and other expressions at compile time.\n\nExample:\n\nlet num = 10; // TypeScript infers that 'num' is of type 'number'\nlet greeting = \"Hello\"; // TypeScript infers that 'greeting' is of type 'string'\n\n‍\n\nIn the above example, TypeScript automatically infers that num is a number and greeting is a string, based on their assigned values.\n\nType inference helps reduce the verbosity of TypeScript code by eliminating the need for explicit type annotations in many cases. However, you can always override inferred types by using type annotations."
  },
  {
    "id": "1025",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the difference between let, const, and var in TypeScript.",
    "answer": "In TypeScript (and JavaScript), there are three ways to declare variables: let, const, and var. These keywords differ in how they handle scoping, mutability, and hoisting.\n\nlet:\nScope: Block-scoped (limited to the block, statement, or expression where it is used).\nMutability: Variables declared with let can be reassigned to new values.\nHoisting: Variables declared with let are hoisted to the top of their block, but are not initialized until their actual declaration, leading to a \"temporal dead zone\" where the variable cannot be accessed before its declaration.\nlet name = \"Alice\";\nname = \"Bob\"; // Reassignment is allowed\n\n\nconst:\n‍\n\nScope: Block-scoped (same as let).\nMutability: Variables declared with const cannot be reassigned after initialization.\nHoisting: Like let, const variables are hoisted, but are also not initialized until their declaration.\nconst pi = 3.14;\n// pi = 3.14159; // Error: Cannot reassign a constant variable\n\n\nvar:\n‍\n\nScope: Function-scoped (variables declared with var are scoped to the nearest function block, or globally if declared outside of any function).\nMutability: Variables declared with var can be reassigned.\nHoisting: var declarations are hoisted to the top of their scope and initialized with undefined.\nvar name = \"Alice\";\nvar name = \"Bob\"; // Redeclaration is allowed in the same scope\n‍\n\nRecommendation: Always prefer let and const over var in TypeScript, as they provide better scoping and prevent potential bugs related to variable redeclaration."
  },
  {
    "id": "1026",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are TypeScript's primitive types?",
    "answer": "TypeScript provides several built-in primitive types. These types represent the simplest form of data in the language and cannot be broken down further:\n\nnumber: Represents both integer and floating-point numbers.\n\nlet num: number = 42;\nstring: Represents text, enclosed in single, double, or backticks for template literals.\n\nlet name: string = \"Alice\";\n‍\n\nboolean: Represents a logical value, either true or false.\n\nlet isActive: boolean = true;\n‍\n\nnull: Represents the absence of a value.\n\nlet x: null = null;\n‍\n\nundefined: Represents a variable that has been declared but not initialized.\n\nlet y: undefined = undefined;\nsymbol: A unique and immutable primitive value used to create anonymous and unique object properties.\n\nlet sym: symbol = Symbol(\"description\");\nbigint: A large integer type that can represent values larger than the maximum value of the number type.\n\nlet bigNum: bigint = 12345678901234567890n;\n\n\n‍"
  },
  {
    "id": "1027",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between undefined and null in TypeScript?",
    "answer": "Both undefined and null represent \"empty\" or \"no value\" in TypeScript, but they are used in different contexts:\n\nundefined: This is the default value for uninitialized variables. It is assigned to a variable when it is declared but not given a value.\n\nlet x: number | undefined;\nconsole.log(x); // undefined, as no value is assigned yet\n‍\n\nnull: Represents the intentional absence of any object value. null is often used when you want to explicitly indicate that a variable should not reference any object.\n\nlet person: { name: string } | null = null; // Person is explicitly set to 'null'\nKey Differences:\n\nundefined usually means a variable has been declared but not assigned a value.\nnull represents an object that is intentionally empty or missing.\n\n‍"
  },
  {
    "id": "1028",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an array in TypeScript?",
    "answer": "In TypeScript, you can define arrays in a few different ways, each allowing you to specify the type of elements the array will hold."
  },
  {
    "id": "1029",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Using the Array<T> syntax:",
    "answer": "This is the generic form where you specify the type of elements the array will hold inside the angle brackets.\n\nExample:\n\nlet numbers: Array<number> = [1, 2, 3, 4];\nlet strings: Array<string> = [\"apple\", \"banana\", \"cherry\"];\n\n‍"
  },
  {
    "id": "1030",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Using the type[] syntax:",
    "answer": "This is a shorthand version where you specify the element type followed by square brackets.\n\nExample:\n\nlet numbers: number[] = [1, 2, 3, 4];\nlet strings: string[] = [\"apple\", \"banana\", \"cherry\"];\nMixed-Type Arrays:\n\nYou can also define arrays that hold mixed types, using tuples or union types, depending on your use case:\n\nlet mixedArray: (string | number)[] = [1, \"hello\", 2, \"world\"];\n‍\n\nReadonly Arrays:\n\nIf you want an array to be immutable (i.e., you don't want to modify it after it's created), you can define it as a readonly array:\n\nlet numbers: readonly number[] = [1, 2, 3, 4];\n‍"
  },
  {
    "id": "1031",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a tuple in TypeScript?",
    "answer": "A tuple in TypeScript is an ordered collection of elements where each element can have a different type. Tuples are similar to arrays, but unlike arrays where all elements must be of the same type, tuples allow for heterogenous types (i.e., different types in the same collection).\n\nExample:\n\nlet tuple: [number, string, boolean] = [1, \"hello\", true];\n‍\n\nIn this example:\n\nThe first element is a number.\nThe second element is a string.\nThe third element is a boolean.\nTuples also support optional elements, meaning you can define a tuple where some elements are optional:\n\nlet tuple: [number, string?, boolean?] = [1, \"hello\"];\n‍\n\nTuple with spread:\n\nTuples can also include a spread operator to allow for an arbitrary number of elements in the array:\n\nlet tuple: [string, ...number[]] = [\"apple\", 1, 2, 3];\n‍"
  },
  {
    "id": "1032",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an enum in TypeScript, and how is it different from a regular object?",
    "answer": "An enum in TypeScript is a special \"object\" that allows you to define a set of named constants. Enums can be used to represent a collection of related values, making your code more readable and less error-prone.\n\nTypes of Enums:\n\nNumeric Enums (default):\nThe values in a numeric enum are assigned numeric values, starting from 0 by default.\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right\n}\nconsole.log(Direction.Up); // Output: 0\n‍\n\nString Enums:\nIn string enums, each member must be initialized with a string value.\nenum Direction {\n  Up = \"UP\",\n  Down = \"DOWN\",\n  Left = \"LEFT\",\n  Right = \"RIGHT\"\n}\n‍\n\nDifferences Between Enums and Objects:\n\nEnums are more readable and can be used to represent a set of related constants. In the case of numeric enums, the values are automatically assigned, while string enums require explicit assignments.\nObjects can hold any type of key-value pairs, but enums are more structured and provide better tooling and type safety.\nExample:\n\nconst DirectionObject = {\n  Up: 0,\n  Down: 1,\n  Left: 2,\n  Right: 3,\n};\n‍\n\nWhile you can achieve similar functionality with objects, enums provide better support for reverse mapping, clarity, and integration with TypeScript’s type system."
  },
  {
    "id": "1033",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an object type in TypeScript?",
    "answer": "In TypeScript, you can define the type of an object using interface or type alias, but the simplest way is to define an inline object type directly in the code.\n\nUsing object type annotation:\n\nlet person: { name: string; age: number } = {\n  name: \"Alice\",\n  age: 30\n};\n‍\n\nHere, person is an object where:\n\nname must be a string.\nage must be a number.\nYou can also define objects with optional properties using ?:\n\nlet person: { name: string; age?: number } = { name: \"Alice\" };\n‍\n\nIn this case, age is optional.\n\nUsing interfaces for complex object types:\n\ninterface Person {\n  name: string;\n  age: number;\n  address?: string; // Optional property\n}\n\nlet person: Person = {\n  name: \"Bob\",\n  age: 25\n};\n‍"
  },
  {
    "id": "1034",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the differences between TypeScript interfaces and types?",
    "answer": "Both interfaces and type aliases in TypeScript can be used to define object shapes, function signatures, and other types. However, they have some differences in terms of usage, extensibility, and syntax.\n\nKey Differences:\n\nExtensibility:\nInterfaces can be extended using the extends keyword, making them more suitable for object-oriented designs and inheritance.\ninterface Shape {\n  area: number;\n}\n\ninterface Circle extends Shape {\n  radius: number;\n}\n‍\n\n\n\nType Aliases cannot use extends in the same way, but can be composed with intersection (&) and union (|) types.\ntype Shape = { area: number };\ntype Circle = Shape & { radius: number };\n‍\n\nDeclaration Merging:\nInterfaces support declaration merging, meaning if you declare an interface multiple times with the same name, TypeScript will merge them together.\ninterface Person {\n  name: string;\n}\n\ninterface Person {\n  age: number;\n}\n\nconst person: Person = { name: \"Alice\", age: 25 };\n‍\n\n\n\nType aliases do not support declaration merging.\nUse Cases:\nInterfaces are generally preferred for defining object shapes, especially when you want to leverage inheritance or declaration merging.\nType aliases are often used for more complex types, including unions, intersections, or when defining primitive types, tuples, etc."
  },
  {
    "id": "1035",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the void type in TypeScript?",
    "answer": "The void type in TypeScript represents the absence of any value, typically used for functions that do not return a value. In JavaScript, functions can implicitly return undefined, but in TypeScript, you can explicitly declare a function’s return type as void.\n\nExample:\n\nfunction logMessage(message: string): void {\n  console.log(message);\n}\n\n‍\n\nIn this example, the function logMessage takes a string as an argument and does not return anything, so its return type is void.\n\nThe void type is also used when you expect a function to return nothing, indicating that the function is purely for its side effects (e.g., logging, updating state)."
  },
  {
    "id": "1036",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does never mean in TypeScript, and when is it used?",
    "answer": "The never type represents values that never occur. It is used\n\nto define the return type of a function that will never successfully return a value, such as functions that always throw an error or enter an infinite loop.\n\nExamples of never:\n\nFunctions that throw errors:\n\nfunction throwError(message: string): never {\n  throw new Error(message);\n}\n‍\n\nInfinite loops:\n\nfunction infiniteLoop(): never {\n  while (true) {\n    console.log(\"Running...\");\n  }\n}\n‍\n\nThe never type is useful when you want to ensure that a certain function cannot complete normally, providing better type safety."
  },
  {
    "id": "1037",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle type compatibility?",
    "answer": "TypeScript uses structural typing to handle type compatibility, meaning that two types are compatible if they have the same structure (i.e., the same properties with matching types), rather than relying on their names or definitions.\n\nExample:\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\nlet employee: Person = { name: \"Alice\", age: 30 };\n\n// Employee object is compatible with Person type because they have the same structure\n‍\n\nTypeScript uses a duck typing approach, where the type compatibility is determined by the presence of properties and their types, not by the specific types' names. If two objects or types have the same shape, they are compatible regardless of whether they are explicitly declared as the same type."
  },
  {
    "id": "1038",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a type alias, and how does it work in TypeScript?",
    "answer": "A type alias in TypeScript allows you to create a custom name for any type. You can use type aliases to simplify complex types, provide clarity, or define reusable type definitions.\n\nExample:\n\ntype ID = string | number;\nlet userId: ID = \"abc123\"; // Can be either a string or a number\n‍\n\nType aliases can be used to represent primitive types, objects, function types, and even unions and intersections.\n\nComplex example:\n\ntype Point = { x: number, y: number };\ntype Point3D = Point & { z: number }; // Intersection type\n\nlet point: Point3D = { x: 1, y: 2, z: 3 };\n‍\n\nType aliases provide flexibility and are especially useful when working with complex types that are used repeatedly across your codebase."
  },
  {
    "id": "1039",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define an optional property in TypeScript?",
    "answer": "In TypeScript, you can define an optional property in an object or interface by appending a question mark (?) to the property name.\n\nExample:\n\ninterface Person {\n  name: string;\n  age?: number; // age is optional\n}\n\nlet person1: Person = { name: \"Alice\" }; // Valid\nlet person2: Person = { name: \"Bob\", age: 30 }; // Also valid\n‍\n\nThe ? indicates that the property is not required, and objects of that type may or may not include that property. When the property is not provided, it is treated as undefined."
  },
  {
    "id": "1040",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the readonly modifier in TypeScript?",
    "answer": "The readonly modifier in TypeScript is used to make properties or variables immutable, meaning their values cannot be changed once they are initialized. This can be applied to object properties, arrays, and class members."
  },
  {
    "id": "1041",
    "category": "typescript",
    "difficulty": "medium",
    "question": "readonly on object properties:",
    "answer": "When applied to an object property, it prevents the property from being reassigned after it is initially set.\n\nExample:\n\ninterface Person {\n  readonly name: string;\n  readonly age: number;\n}\n\nlet person: Person = { name: \"Alice\", age: 25 };\nperson.name = \"Bob\";  // Error: Cannot assign to 'name' because it is a read-only property\n‍"
  },
  {
    "id": "1042",
    "category": "typescript",
    "difficulty": "medium",
    "question": "readonly on arrays:",
    "answer": "The readonly modifier can also be applied to arrays to prevent modification of the array elements.\n\nExample:\n\nlet numbers: readonly number[] = [1, 2, 3];\nnumbers[0] = 4;  // Error: Index signature in type 'readonly number[]' only permits reading\nnumbers.push(5);  // Error: Property 'push' does not exist on type 'readonly number[]'\n‍\n\nThe readonly modifier is useful for enforcing immutability and creating more predictable, bug-resistant code, especially when dealing with data that should not change after it is created."
  },
  {
    "id": "1043",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define a function with optional parameters in TypeScript?",
    "answer": "In TypeScript, you can define a function with optional parameters by appending a question mark (?) to the parameter's name in the function signature. This means that the parameter is not required when the function is called.\n\nExample:\n\nfunction greet(name: string, age?: number): string {\n  return age ? `Hello ${name}, you are ${age} years old.` : `Hello ${name}, age is unknown.`;\n}\n\nconsole.log(greet(\"Alice\")); // Hello Alice, age is unknown.\nconsole.log(greet(\"Bob\", 30)); // Hello Bob, you are 30 years old.\n‍\n\nIn this example, age is an optional parameter, and TypeScript will allow the function to be called with or without it. If not provided, age will be undefined inside the function."
  },
  {
    "id": "1044",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define default values for function parameters in TypeScript?",
    "answer": "In TypeScript, you can define default values for function parameters by assigning the default value directly in the function signature. This allows you to provide a fallback value if no argument is passed for that parameter.\n\nExample:\n\nfunction greet(name: string, age: number = 30): string {\n  return `Hello ${name}, you are ${age} years old.`;\n}\n\nconsole.log(greet(\"Alice\")); // Hello Alice, you are 30 years old.\nconsole.log(greet(\"Bob\", 25)); // Hello Bob, you are 25 years old.\n‍\n\nIn this example, age has a default value of 30. If no value is passed for age when the function is called, TypeScript will use 30 as the default value.\n\n‍"
  },
  {
    "id": "1045",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the as keyword in TypeScript?",
    "answer": "The as keyword in TypeScript is used for type assertion, which tells the TypeScript compiler to treat a value as a specific type, overriding its inferred or existing type. It doesn’t perform any runtime type checking, it only affects TypeScript’s type system.\n\nExample:\n\nlet someValue: unknown = \"This is a string\";\n\n// Type assertion with 'as'\nlet stringLength: number = (someValue as string).length;\n\nconsole.log(stringLength); // Outputs: 16\n‍\n\nIn this example:\n\nsomeValue is of type unknown, meaning TypeScript cannot infer its type until you assert it.\nBy using as string, you assert that someValue should be treated as a string, allowing access to string-specific properties like length.\nDifference between as and <type> (angle bracket syntax):\n\nBoth as and <type> can be used for type assertions, but the as syntax is preferred in TypeScript (especially in JSX, where angle brackets are already used for JSX tags).\n\nlet stringLength: number = (<string>someValue).length; // Less common in modern TypeScript\n‍"
  },
  {
    "id": "1046",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the typeof operator in TypeScript?",
    "answer": "In TypeScript, the typeof operator is used to obtain the type of a variable or expression. It can be used in both expressions and type annotations."
  },
  {
    "id": "1047",
    "category": "typescript",
    "difficulty": "medium",
    "question": "typeof in expressions:",
    "answer": "It works similarly to JavaScript to retrieve the type of a value.\n\nlet message = \"Hello, TypeScript!\";\nconsole.log(typeof message); // Output: \"string\"\n\n‍"
  },
  {
    "id": "1048",
    "category": "typescript",
    "difficulty": "medium",
    "question": "typeof in type annotations:",
    "answer": "You can use typeof to create a type based on the type of an existing variable or expression.\n\nlet user = { name: \"Alice\", age: 25 };\n\n// Using 'typeof' to create a type from the 'user' object\nlet anotherUser: typeof user = { name: \"Bob\", age: 30 };\n\n‍\n\nIn this example, the type of anotherUser will automatically match the structure of user."
  },
  {
    "id": "1049",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a namespace in TypeScript, and how is it used?",
    "answer": "A namespace in TypeScript is a way to group related code, such as functions, classes, or variables, under a common name to avoid name collisions. Namespaces were previously used for module systems in TypeScript, but with the introduction of ES6 modules, their use has become less common. However, namespaces can still be useful in certain scenarios, especially when organizing code in large applications.\n\nExample:\n\nnamespace MathUtils {\n  export function add(a: number, b: number): number {\n    return a + b;\n  }\n\n  export function subtract(a: number, b: number): number {\n    return a - b;\n  }\n}\n\nconsole.log(MathUtils.add(5, 3)); // Outputs: 8\n‍\n\nIn this example:\n\nThe MathUtils namespace contains two functions: add and subtract.\nThe export keyword makes those functions accessible outside the namespace.\nNamespaces provide a simple way to organize code in a global scope, but when using ES6 modules, it’s often better to rely on import/export for code organization."
  },
  {
    "id": "1050",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you perform type checking in TypeScript?",
    "answer": "TypeScript is statically typed, meaning that type checking is done at compile time. However, there are times when you might need to perform type checks at runtime as well. You can perform type checks using the typeof operator (for primitive types) or instanceof (for class instances)."
  },
  {
    "id": "1051",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Using typeof for primitive types:",
    "answer": "let value: any = \"Hello, world!\";\n\nif (typeof value === \"string\") {\n  console.log(\"It's a string!\");\n} else {\n  console.log(\"It's not a string.\");\n}\n\n‍"
  },
  {
    "id": "1052",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Using instanceof for class instances:",
    "answer": "class Person {\n  constructor(public name: string, public age: number) {}\n}\n\nlet person = new Person(\"Alice\", 25);\n\nif (person instanceof Person) {\n  console.log(\"It's a Person object!\");\n}\n‍"
  },
  {
    "id": "1053",
    "category": "typescript",
    "difficulty": "medium",
    "question": "User-defined type guards:",
    "answer": "For more complex types, you can create custom type guards to check if an object matches a specific type:\n\nfunction isPerson(obj: any): obj is Person {\n  return obj && obj.name && obj.age;\n}\n\nlet someObject = { name: \"Bob\", age: 30 };\n\nif (isPerson(someObject)) {\n  console.log(`${someObject.name} is a person.`);\n}\n\n‍"
  },
  {
    "id": "1054",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between interface and class in TypeScript?",
    "answer": "In TypeScript, interfaces and classes serve different purposes:\n\nInterface:\nDescribes the shape of an object or class (i.e., the properties and methods it should have).\nCan be used for object structure, but cannot contain implementation.\nCan be implemented by a class to ensure that the class has the required properties or methods.\nExample:\n\ninterface Shape {\n  area: number;\n  calculateArea(): number;\n}\n\nclass Circle implements Shape {\n  constructor(public radius: number) {}\n  area: number = 0;\n\n  calculateArea(): number {\n    this.area = Math.PI * this.radius * this.radius;\n    return this.area;\n  }\n}\n‍\n\nClass:\nDefines a blueprint for creating objects and can include properties and methods with actual implementations.\nCan implement interfaces and extend other classes.\nExample:\n\nclass Circle {\n  constructor(public radius: number) {}\n\n  calculateArea(): number {\n    return Math.PI * this.radius * this.radius;\n  }\n}\n‍\n\nIn this case, the class can have its own implementations, and can optionally implement an interface."
  },
  {
    "id": "1055",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the different ways to import and export modules in TypeScript?",
    "answer": "TypeScript supports several ways to import and export modules, which align with ES6 module syntax."
  },
  {
    "id": "1056",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Named exports and imports:",
    "answer": "Export: You can export multiple named items from a module.\n\nexport const pi = 3.14;\nexport function calculateArea(radius: number): number {\n  return pi * radius * radius;\n}\n‍\n\nImport: You import specific members from a module using curly braces.\n\nimport { pi, calculateArea } from './math';\nconsole.log(calculateArea(5)); // Uses imported function\n‍"
  },
  {
    "id": "1057",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Default export and import:",
    "answer": "Export: You can export a single default value from a module.\n\nexport default class Circle {\n  constructor(public radius: number) {}\n}\n‍\n\nImport: You import the default value directly without curly braces.\n\nimport Circle from './Circle';\nlet circle = new Circle(5);\n‍"
  },
  {
    "id": "1058",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of \"declaration merging\" in TypeScript.",
    "answer": "Declaration merging is a feature in TypeScript that allows multiple declarations with the same name to be merged into a single definition. This is particularly useful for augmenting types and interfaces, allowing for flexible extension of existing code.\n\nExample with interfaces:\n\ninterface Person {\n  name: string;\n}\n\ninterface Person {\n  age: number;\n}\n\nlet person: Person = { name: \"Alice\", age: 30 };\n‍\n\nIn this case, TypeScript merges the two Person interfaces into a single interface, effectively adding age to the original Person type.\n\nExample with modules:\n\nYou can also augment modules using declaration merging:\n\n// In a separate module\ndeclare module 'myModule' {\n  export function foo(): void;\n}\n\n// Later in the same or another module\ndeclare module 'myModule' {\n  export function bar(): void;\n}\n\n// Now 'myModule' has both 'foo' and 'bar' functions\n‍\n\nThis allows you to extend the functionality of existing modules or libraries without modifying their original source code."
  },
  {
    "id": "1059",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use strict mode in TypeScript?",
    "answer": "In TypeScript, strict mode is a set of compiler options that enable a wide range of type-checking features to help catch potential errors and enforce better coding practices. It makes TypeScript's type system more rigorous by enabling a number of strict checks, such as disallowing null or undefined in certain places, requiring explicit types, and ensuring non-nullable types.\n\nTo enable strict mode, you need to add the following to your tsconfig.json file:\n\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n‍\n\nWhen strict is set to true, TypeScript enables the following strict checks:\n\nnoImplicitAny: Disallows variables or parameters with an implicit any type.\nstrictNullChecks: Makes null and undefined distinct types from other types, preventing errors related to them.\nnoImplicitThis: Ensures that the value of this in a function is not implicitly any.\nalwaysStrict: Ensures that every TypeScript file is in strict mode by adding \"use strict\" at the top of each file.\nStrict mode is highly recommended for better type safety and to catch potential issues early in development."
  },
  {
    "id": "1060",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the unknown type in TypeScript?",
    "answer": "The unknown type in TypeScript is a safer alternative to any. It represents any value, but unlike any, you cannot perform operations on an unknown value until you have narrowed its type through some form of checking.\n\nExample of using unknown:\n\nlet value: unknown = 42;\n\nif (typeof value === \"number\") {\n  console.log(value * 2); // Now it's safe to use 'value' as a number\n} else {\n  console.log(\"Not a number\");\n}\n‍\n\nnot know in advance, but you want to enforce type checking before using the value.\n\nKey difference between any and unknown:\nWith any, you can perform any operation on the value, bypassing type checking.\nWith unknown, you must first check or narrow down the type before using the value, ensuring safer handling of potentially unsafe values."
  },
  {
    "id": "1061",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are type guards in TypeScript?",
    "answer": "Type guards in TypeScript are functions or expressions that allow you to narrow the type of a variable at runtime. Type guards help the TypeScript compiler understand the type of a variable more precisely within a specific scope.\n\nExamples of common type guards:\n\nUsing typeof for primitive types:\n‍\n\nfunction isString(value: unknown): value is string {\n  return typeof value === \"string\";\n}\n\nlet myValue: unknown = \"Hello, TypeScript!\";\nif (isString(myValue)) {\n  console.log(myValue.toUpperCase()); // Safe to call string methods\n}\n‍\n\nUsing instanceof for class instances:\nclass Dog {\n  bark() {\n    console.log(\"Woof!\");\n  }\n}\n\nlet animal: unknown = new Dog();\nif (animal instanceof Dog) {\n  animal.bark(); // Safe to call Dog methods\n}\n‍\n\nCustom type guards: You can define custom type guards using the value is Type syntax:\ninterface Cat {\n  meow: boolean;\n}\n\nfunction isCat(value: unknown): value is Cat {\n  return (value as Cat).meow !== undefined;\n}\n\nlet animal: unknown = { meow: true };\nif (isCat(animal)) {\n  console.log(animal.meow); // Safe to use `meow` property\n}\n\n‍\n\nType guards improve type safety by enabling the narrowing of types based on runtime checks."
  },
  {
    "id": "1062",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are union types, and how are they used in TypeScript?",
    "answer": "A union type in TypeScript allows a variable to hold values of more than one type. It is denoted using the pipe (|) symbol between types.\n\nExample:\n\nlet value: string | number;\n\nvalue = \"Hello, TypeScript\";  // Valid\nvalue = 42;                   // Valid\nvalue = true;                 // Error: Type 'boolean' is not assignable to type 'string | number'\n\n‍\n\nUnion types are useful when a variable can have multiple possible types, such as in situations where a function might return different types depending on the input.\n\nExample with functions:\n\nfunction printId(id: string | number) {\n  console.log(id);\n}\n\nprintId(\"12345\");  // Valid\nprintId(12345);    // Valid\nprintId(true);     // Error: Argument of type 'boolean' is not assignable to parameter of type 'string | number'\n‍\n\nYou can also combine union types with other type features like null or undefined, which can create more complex type structures."
  },
  {
    "id": "1063",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the never type in a function that throws an error?",
    "answer": "The never type is used in TypeScript to represent values that never occur, such as the return type of a function that always throws an error, or enters an infinite loop. When a function has a return type of never, TypeScript knows that the function will never successfully complete and return a value.\n\nExample with a function that throws an error:\n\nfunction throwError(message: string): never {\n  throw new Error(message);\n}\n\nthrowError(\"Something went wrong!\");  // This function never returns.\n‍\n\nThe never type is useful for cases like:\n\nFunctions that always throw exceptions or errors.\nFunctions with infinite loops that never terminate."
  },
  {
    "id": "1064",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a \"literal type\" in TypeScript, and how does it work?",
    "answer": "A literal type in TypeScript refers to a specific, exact value of a given type. Literal types can be used to specify a variable or parameter that can only accept specific values, rather than a broader type.\n\nExample with string literal types:\n\nlet direction: \"up\" | \"down\"; // `direction` can only be \"up\" or \"down\"\ndirection = \"up\";  // Valid\ndirection = \"left\"; // Error: Type '\"left\"' is not assignable to type '\"up\" | \"down\"'\n‍\n\nLiteral types can also be used with numbers and booleans:\n\nlet age: 18 | 21 | 30;\nage = 18;  // Valid\nage = 25;  // Error: Type '25' is not assignable to type '18 | 21 | 30'\n‍\n\nLiteral types are especially useful when you need to constrain values to a specific set of values, like in function parameters or enum-like structures."
  },
  {
    "id": "1065",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the keyof keyword in TypeScript?",
    "answer": "The keyof keyword in TypeScript is used to create a union type of the keys of a given type. It can be applied to an object type, and it returns a union type that includes the keys of that object.\n\nExample:\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\ntype PersonKeys = keyof Person;  // \"name\" | \"age\"\n\nlet key: PersonKeys;\nkey = \"name\"; // Valid\nkey = \"age\";  // Valid\nkey = \"address\";  // Error: Type '\"address\"' is not assignable to type '\"name\" | \"age\"'\n\n‍\n\nkeyof is particularly useful when you want to reference or work with keys dynamically, and it allows for better type safety when accessing object properties."
  },
  {
    "id": "1066",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle third-party JavaScript libraries in TypeScript?",
    "answer": "In TypeScript, when using third-party JavaScript libraries, there are several ways to ensure type safety:\n\nInstall Type Definitions: Many JavaScript libraries come with TypeScript type definitions either built-in or through DefinitelyTyped. You can install these types via npm using @types scope.\n\nnpm install @types/jquery\n‍\n\nImporting a JavaScript library without type definitions: If the library doesn't have type definitions, you can declare it as any or unknown to bypass TypeScript's type checking.\n\ndeclare var myLibrary: any;\n\nmyLibrary.someFunction(); // No type checking, but code will compile\n‍\n\nCreating Custom Type Definitions: If no type definitions are available, you can create your own type declarations in a .d.ts file.\n\n// myLibrary.d.ts\ndeclare module 'myLibrary' {\n  export function someFunction(): void;\n}\n‍\n\nBy using type definitions, you can get IntelliSense, type checking, and better tooling when working with JavaScript libraries in TypeScript."
  },
  {
    "id": "1067",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between declare and import in TypeScript?",
    "answer": "declare is used to tell TypeScript about the existence of variables, functions, or modules that are defined outside the TypeScript code (such as in JavaScript libraries or external scripts). It is used in declaration files (.d.ts) and allows TypeScript to understand the types or interfaces without generating any code.Example:\n\ndeclare const myGlobalVar: string;\n‍\n\nimport is used to bring in modules or specific exports from external TypeScript or JavaScript files. It is used for actual imports, and the TypeScript compiler will include the necessary code in the output.Example:\n\nimport { myFunction } from './myModule';\n‍\n\nIn summary, declare is used for declarations where TypeScript doesn't generate any code, and import is used for actual module loading."
  },
  {
    "id": "1068",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you enable TypeScript in a JavaScript project?",
    "answer": "To enable TypeScript in a JavaScript project, follow these steps:\n\nInstall TypeScript:\n\nnpm install --save-dev typescript\nCreate a tsconfig.json file: This configuration file tells TypeScript how to transpile your code. You can generate it automatically with the tsc --init command.\n\nnpx tsc --init\n‍\n\nRename .js files to .ts or .tsx: TypeScript will only type-check .ts or .tsx files. You can gradually migrate by renaming files one by one.\nInstall type definitions: If you are using third-party libraries, you should install type definitions for them. For example:\n\nnpm install @types/react\nUpdate build tools: If you use build tools like Webpack, Babel, or others, make sure to configure them to handle TypeScript files.\nCompile the code: Run the TypeScript compiler to transpile .ts files into .js:\n\nnpx tsc\nBy following these steps, you can begin using TypeScript in a JavaScript project.\n\nIntermediate Questions and Answers"
  },
  {
    "id": "1069",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the Partial<T> utility type in TypeScript, and how is it used?",
    "answer": "The Partial<T> utility type in TypeScript is used to create a new type where all properties of the type T are optional. It is commonly used when you want to represent an object where some of the properties might not be provided, such as when updating an existing object.\n\nExample:\n\ninterface User {\n  name: string;\n  age: number;\n  email: string;\n}\n\nconst updateUser = (user: User, updates: Partial<User>) => {\n  return { ...user, ...updates };\n};\n\nconst user = { name: \"John\", age: 30, email: \"john@example.com\" };\n\nconst updatedUser = updateUser(user, { age: 31 });\nconsole.log(updatedUser); // { name: \"John\", age: 31, email: \"john@example.com\" }\n\n‍\n\nIn the above example, Partial<User> makes all properties of the User interface optional, allowing you to pass any subset of the properties to the updateUser function."
  },
  {
    "id": "1070",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the Readonly<T> utility type in TypeScript, and how is it different from readonly properties?",
    "answer": "The Readonly<T> utility type in TypeScript is used to make all properties of a type T immutable (i.e., readonly). This means that you cannot reassign values to properties once they are initialized.\n\nExample:\n\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst user: Readonly<User> = { name: \"Alice\", age: 25 };\nuser.age = 26; // Error: Cannot assign to 'age' because it is a read-only property\n\n‍\n\nThe key difference between Readonly<T> and readonly properties:\n\nReadonly<T> is a utility type that applies immutability to all properties of the given type T.\nreadonly is used to make specific properties immutable in an object, typically when defining the properties of an interface or class.\nExample of readonly in a class:\n\nclass User {\n  readonly name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nconst user = new User(\"Alice\");\nuser.name = \"Bob\"; // Error: Cannot assign to 'name' because it is a read-only property\n‍"
  },
  {
    "id": "1071",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the Pick<T, K> utility type in TypeScript?",
    "answer": "The Pick<T, K> utility type is used to create a new type by picking a subset of properties K from an existing type T. This is useful when you want to create a new type that only includes specific properties from an existing type.\n\nExample:\n\ninterface User {\n  name: string;\n  age: number;\n  email: string;\n}\n\ntype UserInfo = Pick<User, \"name\" | \"email\">;\n\nconst userInfo: UserInfo = { name: \"Alice\", email: \"alice@example.com\" };\n‍\n\nIn the above example, Pick<User, \"name\" | \"email\"> creates a new type that only includes the name and email properties from the User type."
  },
  {
    "id": "1072",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use generics in TypeScript to create reusable components?",
    "answer": "Generics in TypeScript allow you to create reusable components or functions that work with any data type while preserving type safety. A generic type is defined using the angle bracket syntax (<T>), where T is a placeholder for a specific type.\n\nExample:\n\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nconst num = identity(123);    // num has type number\nconst str = identity(\"hello\"); // str has type string\n‍\n\nIn this example, the identity function is a generic function. It can accept and return any type T, which is determined based on the argument passed when the function is called.\n\nUsing generics in interfaces:\n\ninterface Box<T> {\n  value: T;\n}\n\nconst numberBox: Box<number> = { value: 123 };\nconst stringBox: Box<string> = { value: \"Hello\" };\n‍\n\nGenerics enable you to write functions and components that are flexible and type-safe, allowing them to work with multiple types without sacrificing type checking."
  },
  {
    "id": "1073",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the extends keyword used for in TypeScript?",
    "answer": "The extends keyword in TypeScript is used for two main purposes:\n\nExtending a class: When creating a new class, you can use extends to inherit properties and methods from another class (just like in other object-oriented languages).Example:\n\nclass Animal {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a sound`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks`);\n  }\n}\n\nconst dog = new Dog(\"Rex\");\ndog.speak(); // Outputs: Rex barks\n‍\n\nConstrained Generics: The extends keyword is also used to constrain generic types, ensuring that a given type T must satisfy certain conditions (e.g., it must be a subclass of a specific class or have specific properties).Example:\n\nfunction printLength<T extends { length: number }>(value: T): number {\n  return value.length;\n}\n\nprintLength(\"Hello\");  // Works, because string has a length property\nprintLength([1, 2, 3]); // Works, because array has a length property\nprintLength(123);      // Error: number doesn't have a length property\n‍"
  },
  {
    "id": "1074",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you constrain a generic type in TypeScript?",
    "answer": "You can constrain a generic type in TypeScript by using the extends keyword. This ensures that the type argument passed to a generic function or class must adhere to a certain structure or type.\n\nExample:\n\nfunction getProperty<T extends { name: string }>(obj: T): string {\n  return obj.name;\n}\n\nconst person = { name: \"Alice\", age: 25 };\nconsole.log(getProperty(person));  // Works: \"Alice\"\n‍\n\nIn this example, the T type is constrained to objects that have a name property, so you can safely access obj.name.\n\nYou can also constrain a generic to a specific type, class, or interface:\n\nfunction printDate<T extends Date>(date: T): void {\n  console.log(date.toDateString());\n}\n\nprintDate(new Date());  // Works\nprintDate(\"2022-01-01\");  // Error: Type 'string' is not assignable to type 'Date'\n‍"
  },
  {
    "id": "1075",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are \"mapped types\" in TypeScript, and how are they useful?",
    "answer": "Mapped types in TypeScript are a way to create new types by transforming properties of an existing type. You can create new types by iterating over the properties of an existing type and modifying them (e.g., making them optional, readonly, etc.).\n\nExample: Making properties optional with a mapped type:\n\ninterface User {\n  name: string;\n  age: number;\n}\n\ntype PartialUser = {\n  [K in keyof User]?: User[K];\n};\n\nconst user: PartialUser = { name: \"Alice\" };  // `age` is optional\n‍\n\nIn this example, PartialUser is a new type where all properties of User are optional. This is equivalent to using the Partial<T> utility type.\n\nExample: Making properties readonly with a mapped type:\n\ntype ReadonlyUser = {\n  readonly [K in keyof User]: User[K];\n};\n\nconst user: ReadonlyUser = { name: \"Alice\", age: 25 };\nuser.age = 26;  // Error: Cannot assign to 'age' because it is a read-only property\n‍\n\nMapped types are useful for creating dynamic types, especially when you need to transform or derive new types based on existing ones."
  },
  {
    "id": "1076",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle asynchronous code, and what are Promise<T> and async/await in TypeScript?",
    "answer": "TypeScript handles asynchronous code similarly to JavaScript, using Promise<T> for asynchronous operations and async/await syntax for handling asynchronous code in a more readable and synchronous-looking way."
  },
  {
    "id": "1077",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Promise<T>:",
    "answer": "A Promise<T> is used to represent a value that will be available at some point in the future, where T is the type of the value the promise will resolve to.\n\nfunction fetchData(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Data fetched\");\n    }, 1000);\n  });\n}\n\nfetchData().then(data => console.log(data));  // Outputs: \"Data fetched\"\n‍"
  },
  {
    "id": "1078",
    "category": "typescript",
    "difficulty": "medium",
    "question": "async and await:",
    "answer": "The async keyword is used to declare an asynchronous function, and await is used to pause the execution of the function until the promise is resolved.\n\nasync function getData(): Promise<string> {\n  const data = await fetchData();\n  console.log(data);  // Outputs: \"Data fetched\"\n}\n\ngetData();\n\n‍\n\nasync/await provides a more concise and synchronous-like syntax for handling asynchronous code, making it easier to work with promises and avoid callback hell."
  },
  {
    "id": "1079",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the Record<K, T> utility type in TypeScript?",
    "answer": "The Record<K, T> utility type in TypeScript is used to create an object type with specific keys (K) and corresponding values of type T. It's especially useful when you want to create objects with specific keys that are mapped to values of a certain type.\n\nExample:\n\ntype UserRoles = \"admin\" | \"editor\" | \"viewer\";\n\nconst roles: Record<UserRoles, string> = {\n  admin: \"Administrator\",\n  editor: \"Editor\",\n  viewer: \"Viewer\",\n};\n‍\n\nIn this example, Record<UserRoles, string> creates an object type where the keys are \"admin\", \"editor\", and \"viewer\", and the values are strings."
  },
  {
    "id": "1080",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the this keyword in TypeScript, and how does it differ from JavaScript?",
    "answer": "In TypeScript, the this keyword behaves similarly to JavaScript, referring to the current context or object within which the function is being executed. However, TypeScript provides more explicit typing for this within classes and functions.\n\nIn a function:\n\nIn JavaScript, this depends on how the function is called, which can lead to bugs. In TypeScript, you can specify the type of this to avoid errors.\n\nfunction greet(this: { name: string }) {\n  console.log(`Hello, ${this.name}`);\n}\n\nconst person = { name: \"Alice\", greet };\nperson.greet();  // Works fine, this refers to the person object\n\n‍\n\nIn a class:\n\nclass User {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n}\n\nconst user = new User(\"Bob\");\nuser.greet();  // 'this' refers to the User instance\n‍\n\nIn TypeScript, you can also use this in interfaces and classes to ensure that the correct context is used when accessing properties or methods."
  },
  {
    "id": "1081",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between interface and abstract class in TypeScript?",
    "answer": "Both interface and abstract class are used to define the structure of objects, but they serve different purposes and have different behaviors.\n\nKey Differences:\n\nPurpose:\ninterface: Defines a contract for the structure of objects, classes, or function signatures. It does not provide any implementation, only the method and property signatures.\nabstract class: Can define both abstract methods (without implementation) and concrete methods (with implementation). It allows you to define common functionality that will be shared by derived classes.\nImplementation:\ninterface: A class or object that implements an interface must implement all its properties and methods. It cannot provide any implementation.\nabstract class: A class that extends an abstract class must implement all abstract methods, but it can inherit implementations of concrete methods.\nInheritance:\ninterface: Can be extended by multiple interfaces or classes.\nabstract class: Can be extended by only one class (since classes support single inheritance).\nInstance Creation:\ninterface: Cannot be instantiated directly. It is used to define the structure of an object.\nabstract class: Cannot be instantiated directly, but can provide common functionality that can be inherited by derived classes.\nExample:\n\ninterface Shape {\n  area: number;\n  calculateArea(): void;\n}\n\nabstract class ShapeBase {\n  abstract area: number;\n  abstract calculateArea(): void;\n\n  displayArea() {\n    console.log(`Area: ${this.area}`);\n  }\n}\n\nclass Circle extends ShapeBase {\n  area: number = 0;\n\n  calculateArea() {\n    this.area = Math.PI * 2 * 2; // Example for radius 2\n  }\n}\n\nconst circle = new Circle();\ncircle.calculateArea();\ncircle.displayArea(); // Output: Area: 12.566370614359172\n\n‍"
  },
  {
    "id": "1082",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement inheritance in TypeScript?",
    "answer": "Inheritance in TypeScript is implemented using the extends keyword. A derived class inherits properties and methods from a base class.\n\nExample:\n\nclass Animal {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a sound`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name: string) {\n    super(name); // Call the base class constructor\n  }\n\n  speak() {\n    console.log(`${this.name} barks`);\n  }\n}\n\nconst dog = new Dog(\"Rex\");\ndog.speak(); // Output: Rex barks\n‍\n\nHere, Dog extends Animal, and the speak method is overridden to provide a different implementation for dogs."
  },
  {
    "id": "1083",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between an \"interface\" and a \"type alias\" in TypeScript?",
    "answer": "Both interface and type alias can be used to define the structure of objects, but they differ in syntax, capabilities, and usage.\n\nKey Differences:\n\nExtending and Implementing:\ninterface: Can be extended using extends and implemented using implements. It is typically used for defining object shapes and contracts.\ntype alias: Can define object types, union types, and intersection types, but it cannot be used with implements. It can be used for more complex types like unions or intersections.\nDeclaration Merging:\ninterface: Supports declaration merging, which means you can declare the same interface multiple times, and TypeScript will automatically merge their definitions.\ntype alias: Does not support declaration merging. If you try to declare a type alias with the same name multiple times, you'll get an error.\nComplex Types:\ninterface: Generally used to describe objects or function signatures.\ntype alias: Can describe more complex types like union types, intersections, and even primitive types.\nExample:\n\n// Interface\ninterface Shape {\n  width: number;\n  height: number;\n}\n\n// Type Alias\ntype ShapeType = {\n  width: number;\n  height: number;\n  color: string;\n};\n\nconst shape1: Shape = { width: 10, height: 20 };\nconst shape2: ShapeType = { width: 10, height: 20, color: \"red\" };\n‍"
  },
  {
    "id": "1084",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the significance of the super keyword in TypeScript classes?",
    "answer": "The super keyword is used in TypeScript to refer to the base (parent) class and is particularly useful when calling methods or accessing properties from the parent class.\n\nUses of super:\n\nCalling a parent class constructor: In a derived class, super() is used to call the constructor of the parent class.\nAccessing methods: You can call methods of the parent class using super.methodName().\nExample:\n\nclass Animal {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a sound`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name: string) {\n    super(name); // Call the base class constructor\n  }\n\n  speak() {\n    super.speak(); // Call the base class speak method\n    console.log(`${this.name} barks`);\n  }\n}\n\nconst dog = new Dog(\"Buddy\");\ndog.speak();\n// Output: Buddy makes a sound\n//         Buddy barks\n\n‍"
  },
  {
    "id": "1085",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the constructor in TypeScript classes?",
    "answer": "In TypeScript, the constructor method is used to initialize a newly created instance of a class. It is called automatically when an object is instantiated.\n\nExample:\n\nclass Person {\n  name: string;\n  age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst person = new Person(\"Alice\", 25);\nperson.greet(); // Output: Hello, my name is Alice and I am 25 years old.\n‍\n\nThe constructor initializes the name and age properties when a new Person object is created."
  },
  {
    "id": "1086",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are \"mixins\" in TypeScript, and how do they work?",
    "answer": "Mixins in TypeScript are a pattern for combining multiple classes or objects into one, allowing you to share functionality across different classes. This allows you to apply multiple behaviors to a single class, especially when single inheritance is limiting.\n\nExample:\n\nclass CanSwim {\n  swim() {\n    console.log(\"Swimming!\");\n  }\n}\n\nclass CanFly {\n  fly() {\n    console.log(\"Flying!\");\n  }\n}\n\nclass Duck implements CanSwim, CanFly {\n  swim: () => void;\n  fly: () => void;\n}\n\nObject.assign(Duck.prototype, CanSwim.prototype, CanFly.prototype);\n\nconst duck = new Duck();\nduck.swim(); // Output: Swimming!\nduck.fly();  // Output: Flying!\n‍\n\nIn this example, the Duck class can both swim and fly because it mixes the behaviors of CanSwim and CanFly."
  },
  {
    "id": "1087",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you declare a read-only property in a class in TypeScript?",
    "answer": "You can declare a read-only property in a class using the readonly modifier. Once set, a readonly property cannot be modified outside of the constructor.\n\nExample:\n\nclass Person {\n  readonly name: string;\n  readonly age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\nconst person = new Person(\"Alice\", 30);\nperson.name = \"Bob\"; // Error: Cannot assign to 'name' because it is a read-only property\n‍\n\nIn this example, name and age are read-only properties, meaning they cannot be reassigned after the object is constructed."
  },
  {
    "id": "1088",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create and use custom decorators in TypeScript?",
    "answer": "Custom decorators in TypeScript allow you to add behavior to classes, methods, or properties. They are functions prefixed with @ and can be used for various purposes, such as logging, validation, or metadata handling.\n\nExample: Creating a Method Decorator\n\nfunction log(target: any, key: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  descriptor.value = function(...args: any[]) {\n    console.log(`Calling method ${key} with args: ${args}`);\n    return originalMethod.apply(this, args);\n  };\n}\n\nclass Person {\n  @log\n  sayHello(name: string) {\n    console.log(`Hello, ${name}!`);\n  }\n}\n\nconst person = new Person();\nperson.sayHello(\"Alice\"); // Logs: Calling method sayHello with args: [ 'Alice' ]\n‍\n\nIn this example, the log decorator intercepts the method call and logs the arguments before calling the original method."
  },
  {
    "id": "1089",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the infer keyword in TypeScript, and how does it work?",
    "answer": "The infer keyword in TypeScript is used within conditional types to infer a type within the true branch of the condition. It's often used in type manipulation to extract types from other types dynamically.\n\nExample:\n\ntype ReturnTypeOfFunction<T> = T extends (...args: any[]) => infer R ? R : never;\n\nfunction getName() {\n  return \"Alice\";\n}\n\ntype NameType = ReturnTypeOfFunction<typeof getName>; // Type is 'string'\n‍\n\nIn this example, ReturnTypeOfFunction uses infer R to extract the return type of a function and use it elsewhere in the code."
  },
  {
    "id": "1090",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a conditional type in TypeScript?",
    "answer": "A conditional type in TypeScript allows you to define types based on a condition. It has the syntax T extends U ? X : Y, where:\n\nT extends U: Checks if type T extends type U.\nX: The type if the condition is true.\nY: The type if the condition is false.\nExample:\n\ntype IsString<T> = T extends string ? \"Yes\" : \"No\";\n\ntype Test1 = IsString<string>;  // \"Yes\"\ntype Test2 = IsString<number>;  // \"No\"\n‍\n\nIn this example, IsString is a conditional type that returns \"Yes\" if T is a string, and \"No\" otherwise."
  },
  {
    "id": "1091",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript support JSX/TSX?",
    "answer": "TypeScript supports JSX/TSX (the syntax used in React) with full type-checking capabilities. When writing React code in TypeScript, you use .tsx files instead of .ts files to denote that the file contains JSX syntax.\n\nKey features:\n\nType Checking: TypeScript can check types in JSX/TSX components just like regular TypeScript code. This helps with ensuring props, state, and context are used correctly in React components.\nJSX Intrinsic Elements: TypeScript has built-in types for standard HTML elements and React components, allowing for autocompletion and type checking when rendering JSX elements.\nIntegration with React: TypeScript works seamlessly with React’s types and props. You can define types for props and state, as well as use advanced features like generics and type inference within React components.\nExample:\n\nimport React from \"react\";\n\ninterface ButtonProps {\n  label: string;\n}\n\nconst Button: React.FC<ButtonProps> = ({ label }) => {\n  return <button>{label}</button>;\n};\n\nexport default Button;\n\n‍\n\nIn this example, TypeScript ensures that the label prop is always a string when used within the Button component."
  },
  {
    "id": "1092",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you perform type assertions in TypeScript?",
    "answer": "Type assertions in TypeScript allow you to tell the compiler to treat a variable as a different type. Type assertions do not perform any runtime checks—they are purely a compile-time construct.\n\nThere are two ways to perform type assertions:\n\nAngle Bracket Syntax: (<Type>)value\nas Syntax: value as Type\nExample:\n\nlet someValue: unknown = \"Hello, TypeScript\";\n\n// Using angle bracket syntax\nlet strLength1: number = (<string>someValue).length;\n\n// Using 'as' syntax\nlet strLength2: number = (someValue as string).length;\n‍\n\nBoth assertions above tell TypeScript to treat someValue as a string, which allows you to safely access properties like .length."
  },
  {
    "id": "1093",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are never and any types, and when should you use them in TypeScript?",
    "answer": "never Type: The never type represents values that never occur. It's typically used for functions that throw errors or have infinite loops, where no value is returned.\nUse cases: Functions that throw exceptions or enter infinite loops.\nExample:\nfunction throwError(message: string): never {\n  throw new Error(message);\n}\n‍\n\nany Type: The any type represents any value and disables type checking for that variable. It should be used sparingly, as it effectively turns off type safety.\nUse cases: When you don't know the type ahead of time or need to handle a wide range of types.\nExample:\nlet x: any = 5;\nx = \"Hello\";  // No error\nx = true;     // No error\n‍\n\n\n\nWhen to use:\nnever: When you know that a value will never be returned (e.g., in a function that throws).\nany: When you don’t need type checking, but try to avoid using any in favor of more specific types whenever possible to maintain type safety."
  },
  {
    "id": "1094",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between function and => function syntax in TypeScript?",
    "answer": "The main difference between the traditional function declaration (function) and the arrow function (=>) lies in how they handle the this keyword.\n\nTraditional function:\nIn traditional functions, the value of this is dynamic. It depends on how the function is called.\nfunction traditionalFunction() {\n  console.log(this); // `this` is determined by how the function is called\n}\n‍\n\nArrow Function (=>):\nIn arrow functions, this is lexically bound—it takes the value of this from the surrounding context (the enclosing function or class).\nconst arrowFunction = () => {\n  console.log(this); // `this` is inherited from the surrounding context\n};\n‍\n\nArrow functions are generally used when you want to maintain the this context of the surrounding environment, for example, when using them as callbacks or event handlers in React."
  },
  {
    "id": "1095",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle module resolution?",
    "answer": "TypeScript handles module resolution using two strategies:\n\nClassic Resolution: The older, default method, used for backward compatibility. It looks for files with extensions like .ts, .js, .d.ts, or .json in the same directory or parent directories.\nNode Resolution: The most common strategy used when working with Node.js or modern JavaScript projects. It mimics how modules are resolved in Node.js.\nLooks for modules in node_modules directories.\nSupports relative and non-relative imports (e.g., import fs from \"fs\").\nExample:\n\n// tsconfig.json example for module resolution\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    \"baseUrl\": \"./src\", // Set base directory for imports\n    \"paths\": {\n      \"*\": [\"./*\"] // Allows you to define custom path mappings\n    }\n  }\n}\n‍\n\nWith module resolution, TypeScript ensures that the correct module is found based on how the module is imported and the configuration in tsconfig.json."
  },
  {
    "id": "1096",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use async/await with generics in TypeScript?",
    "answer": "You can use async/await with generics in TypeScript in the same way you use them with any other type. The key is that the return type of an async function is always a Promise, so you can use generics to specify the type of the resolved value.\n\nExample:\n\nasync function fetchData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data as T; // Returning data of type T\n}\n\ninterface User {\n  id: number;\n  name: string;\n}\n\nfetchData<User>(\"https://api.example.com/user\")\n  .then(user => console.log(user.name)); // Type is User\n‍\n\nIn this example, the generic type T ensures that fetchData returns a Promise<User> when called with a URL that fetches user data."
  },
  {
    "id": "1097",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between type and interface when used with generics in TypeScript?",
    "answer": "The main difference between type and interface when used with generics is their syntax and capabilities.\n\ntype can represent union types, intersection types, mapped types, and more, while interface is mostly used to define the shape of objects.\ntype can also alias more complex types such as function signatures or any union/intersection types.\ninterface is used to describe the structure of objects and can be merged with other interfaces (declaration merging).\nExample:\n\n// Interface with generics\ninterface Wrapper<T> {\n  value: T;\n}\n\n// Type Alias with generics\ntype WrapperType<T> = { value: T };\n\n// Both can be used to describe objects of type `T`\nconst wrapper1: Wrapper<number> = { value: 42 };\nconst wrapper2: WrapperType<number> = { value: 42 };\n‍\n\nThe key takeaway is that type is more versatile for complex types, while interface is better suited for object structures and can be extended or merged."
  },
  {
    "id": "1098",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the declare keyword in TypeScript?",
    "answer": "The declare keyword in TypeScript is used to declare variables, classes, functions, or modules that are defined elsewhere, often in external libraries or in globally available code. This is particularly useful for adding type definitions for code that doesn't have them.\n\nUse cases:\n\nDeclaring global variables (e.g., from a script tag in HTML).\nDeclaring modules or external types (e.g., from a third-party library).\nExample:\n\ndeclare var myGlobalVar: string;\ndeclare function myExternalFunction(a: number): void;\n\nmyGlobalVar = \"Hello\"; // TypeScript knows it's a string\nmyExternalFunction(5);\n‍\n\nIn this example, declare tells TypeScript that myGlobalVar and myExternalFunction exist, even though they are not explicitly defined in the TypeScript code."
  },
  {
    "id": "1099",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the asserts keyword in TypeScript?",
    "answer": "The asserts keyword is used in TypeScript to narrow down types within a function. It allows you to assert that a condition is true, and if the assertion is correct, the type of the variable is refined.\n\nExample:\n\nfunction isString(value: any): asserts value is string {\n  if (typeof value !== \"string\") {\n    throw new Error(\"Not a string\");\n  }\n}\n\nlet unknownValue: any = \"Hello, TypeScript!\";\nisString(unknownValue); // Narrowed to string\nconsole.log(unknownValue.toUpperCase()); // Safe to call methods on string\n\n‍\n\nHere, the asserts value is string tells TypeScript that after the isString function call, value will be of type string, enabling type-safe access to string properties."
  },
  {
    "id": "1100",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a \"destructuring\" assignment in TypeScript, and how does it work?",
    "answer": "Destructuring allows you to unpack values from arrays or properties from objects into distinct variables. It’s a shorthand syntax for extracting values and is fully supported in TypeScript.\n\nExample (Array Destructuring):\n\nconst numbers = [1, 2, 3];\nconst [a, b, c] = numbers;\n\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\n‍\n\nExample (Object Destructuring):\n\nconst person = { name: \"Alice\", age: 25 };\nconst { name, age } = person;\n\nconsole.log(name); // Alice\nconsole.log(age);  // 25\n‍\n\nDestructuring is useful for extracting specific values from arrays or objects in a concise and readable manner."
  },
  {
    "id": "1101",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define and use interfaces with optional properties in TypeScript?",
    "answer": "In TypeScript, you can define interfaces with optional properties using the ? operator. This marks a property as optional, meaning it may or may not be provided when an object is created.\n\nExample:\n\ninterface Person {\n  name: string;\n  age?: number; // 'age' is an optional property\n}\n\nconst person1: Person = { name: \"Alice\" }; // valid, age is optional\nconst person2: Person = { name: \"Bob\", age: 25 }; // valid, age is provided\n‍\n\nIn this example, the age property is optional, so person1 does not need to include it, while person2 includes both properties."
  },
  {
    "id": "1102",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle errors and exceptions in TypeScript?",
    "answer": "Error handling in TypeScript is done using the try, catch, and finally statements, just like in JavaScript. TypeScript enhances error handling by allowing you to type the errors in the catch block.\n\nExample:\n\nfunction throwError(message: string): never {\n  throw new Error(message);\n}\n\ntry {\n  throwError(\"Something went wrong!\");\n} catch (error) {\n  if (error instanceof Error) {\n    console.error(error.message); // Access the error message safely\n  }\n}\n\n‍\n\nIn this example:\n\nthrowError throws an error.\nIn the catch block, TypeScript ensures that the error is an instance of Error, which allows for safer handling (like accessing the message property)."
  },
  {
    "id": "1103",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are modules and namespaces in TypeScript, and how do they differ?",
    "answer": "Modules:\nDefinition: Modules are a way to organize and encapsulate code in TypeScript. A module is any file that contains a import or export statement.\nUsage: Use export to expose variables, functions, or classes, and import to bring them into other files.\nExample:\n\n// file1.ts\nexport const greet = (name: string) => `Hello, ${name}`;\n\n// file2.ts\nimport { greet } from './file1';\nconsole.log(greet(\"Alice\"));\n‍\n\nNamespaces:\nDefinition: A namespace is a way to group related code in the same scope. It's used to organize code within a single global namespace. Unlike modules, namespaces don’t use import/export and are global by default.\nUsage: Use namespace to group related logic and avoid polluting the global namespace.\nExample:\n\nnamespace MyNamespace {\n  export const greet = (name: string) => `Hello, ${name}`;\n}\n\nconsole.log(MyNamespace.greet(\"Alice\"));\n‍\n\nKey Difference:\nModules use import/export and are file-based.\nNamespaces are typically used for code that will be compiled into a single file and grouped under a common namespace."
  },
  {
    "id": "1104",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you perform runtime validation of types in TypeScript?",
    "answer": "TypeScript's type system is primarily used at compile time, and there is no built-in runtime type checking. However, you can implement runtime type validation using custom checks or libraries such as zod or io-ts.\n\nExample using custom validation:\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\nfunction isPerson(obj: any): obj is Person {\n  return typeof obj.name === 'string' && typeof obj.age === 'number';\n}\n\nconst obj = { name: \"Alice\", age: 30 };\n\nif (isPerson(obj)) {\n  console.log(`${obj.name} is ${obj.age} years old`);\n} else {\n  console.error(\"Invalid person object\");\n}\n‍\n\nIn this example, isPerson is a user-defined type guard that validates whether the object conforms to the Person interface."
  },
  {
    "id": "1105",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use the Exclude<T, U> utility type in TypeScript?",
    "answer": "Exclude<T, U> is a TypeScript utility type that constructs a type by excluding from T all types that are assignable to U.\n\nExample:\n\ntype A = string | number | boolean;\ntype B = string | boolean;\n\ntype C = Exclude<A, B>; // Excludes 'string' and 'boolean' from 'A', so C is 'number'\n‍\n\nIn this example, C will be of type number, because string and boolean are excluded from type A."
  },
  {
    "id": "1106",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the NonNullable<T> utility type, and when should it be used?",
    "answer": "NonNullable<T> is a TypeScript utility type that removes null and undefined from the type T. It ensures that a value cannot be null or undefined.\n\nExample:\n\ntype MaybeString = string | null | undefined;\ntype NonNullableString = NonNullable<MaybeString>; // string\n\nconst value: NonNullableString = \"Hello\"; // Valid\n// const invalid: NonNullableString = null; // Error: Type 'null' is not assignable to type 'string'.\n‍\n\nWhen to use:\n\nUse NonNullable<T> when you want to ensure that a variable is neither null nor undefined, which is common when working with nullable data (like API responses)."
  },
  {
    "id": "1107",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you avoid common pitfalls in TypeScript type compatibility?",
    "answer": "To avoid common pitfalls in TypeScript type compatibility, keep the following principles in mind:\n\nExplicit Types: Always define clear and explicit types, especially for function arguments and return values.\nAvoid any: Avoid using any, as it disables type checking. Instead, use unknown if you need a more strict version.\nUse Type Guards: Use type guards (typeof, instanceof, or custom guards) to safely narrow types.\nUnion Types: Be cautious when using union types; ensure that type checks are in place to handle each type within the union.\nStrict Mode: Enable strict mode in your tsconfig.json to enforce stricter type checking and catch potential issues early.\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n‍\n\nBy enabling strict mode, TypeScript will enforce stricter checks, helping to prevent subtle bugs."
  },
  {
    "id": "1108",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the void type in TypeScript, and when is it used?",
    "answer": "The void type in TypeScript is used to represent the absence of a value. It is commonly used as the return type for functions that do not return a value.\n\nExample:\n\nfunction logMessage(message: string): void {\n  console.log(message);\n}\n\nconst result = logMessage(\"Hello, TypeScript!\");\n// result is of type 'void', so you cannot use it further\n\n‍\n\nWhen to use:\n\nUse void when you have functions that don't return anything meaningful (e.g., logging, event handling, or setting state)."
  },
  {
    "id": "1109",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a type-safe event system in TypeScript?",
    "answer": "To create a type-safe event system in TypeScript, you can use interfaces and generics to define events and listeners with strongly typed parameters.\n\nExample:\n\ntype EventListener<T> = (event: T) => void;\n\ninterface MyEvent {\n  type: \"click\";\n  x: number;\n  y: number;\n}\n\nclass EventEmitter {\n  private listeners: Map<string, EventListener<any>[]> = new Map();\n\n  on<T>(eventType: string, listener: EventListener<T>) {\n    const listeners = this.listeners.get(eventType) || [];\n    listeners.push(listener);\n    this.listeners.set(eventType, listeners);\n  }\n\n  emit<T>(eventType: string, event: T) {\n    const listeners = this.listeners.get(eventType);\n    if (listeners) {\n      listeners.forEach(listener => listener(event));\n    }\n  }\n}\n\nconst emitter = new EventEmitter();\n\n// Register a listener for 'click' event\nemitter.on<MyEvent>(\"click\", (event) => {\n  console.log(`Clicked at (${event.x}, ${event.y})`);\n});\n\n// Emit a 'click' event\nemitter.emit(\"click\", { type: \"click\", x: 100, y: 200 });\n‍\n\nIn this example, TypeScript ensures that event listeners and emitted events are type-safe, reducing the likelihood of runtime errors."
  },
  {
    "id": "1110",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between typeof and keyof in TypeScript?",
    "answer": "typeof: The typeof operator is used to obtain the type of a variable or expression at compile time.Example:\n\nconst x = 42;\ntype XType = typeof x; // XType is 'number'\n‍\n\nkeyof: The keyof operator is used to obtain the union type of the keys (property names) of an object type.Example:\n\ninterface Person {\n  name: string;\n  age: number;\n}\ntype PersonKeys = keyof Person; // PersonKeys is 'name' | 'age'\n‍\n\nSummary:\n\ntypeof works at the value level to get the type of a variable.\nkeyof works at the type level to get the union of property names (keys) of an object type.\nExperienced Questions and Answers"
  },
  {
    "id": "1111",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement type-safe dependency injection in TypeScript?",
    "answer": "Type-safe dependency injection (DI) in TypeScript involves using classes, interfaces, and generics to ensure that dependencies are injected in a way that preserves type safety throughout your application.\n\nBasic Implementation:\n\nYou can use TypeScript’s classes and interfaces to define services that are injected via a constructor, along with generics to ensure types are consistent.\n\nExample:\n\n‍\n\ninterface Service {\n  doSomething(): void;\n}\n\nclass MyService implements Service {\n  doSomething() {\n    console.log('Service is doing something');\n  }\n}\n\nclass Consumer {\n  private service: Service;\n\n  constructor(service: Service) {\n    this.service = service;\n  }\n\n  useService() {\n    this.service.doSomething();\n  }\n}\n\nconst myService = new MyService();\nconst consumer = new Consumer(myService);\nconsumer.useService();  // Output: Service is doing something\n\n‍\n\nUsing Generics for More Flexibility:\n\nYou can extend this with generics to create a more flexible DI system, ensuring the correct dependencies are injected.\n\nclass Injector {\n  private services = new Map<string, any>();\n\n  register<T>(name: string, service: T) {\n    this.services.set(name, service);\n  }\n\n  resolve<T>(name: string): T {\n    const service = this.services.get(name);\n    if (!service) {\n      throw new Error(`Service not found: ${name}`);\n    }\n    return service;\n  }\n}\n\nconst injector = new Injector();\ninjector.register(\"myService\", new MyService());\nconst myServiceInstance = injector.resolve<MyService>(\"myService\");\nmyServiceInstance.doSomething(); // Type-safe dependency injection\n‍\n\nThis ensures that dependencies are injected correctly with their respective types, offering type safety while resolving dependencies."
  },
  {
    "id": "1112",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the significance of never and unknown in TypeScript, and how do you use them effectively?",
    "answer": "Both never and unknown are special types in TypeScript, but they have different purposes:\n\nnever Type:\nPurpose: Represents values that never occur. It's used for functions that throw errors or enter infinite loops.\nWhen to use: Use never to indicate that a function doesn't return a value, typically when throwing an error or running indefinitely.\nExample:\n\nfunction throwError(message: string): never {\n  throw new Error(message);\n}\n‍\n\nunknown Type:\nPurpose: Represents any value, but unlike any, it requires type-checking before being used. This makes it safer than any because you must perform some kind of validation (type guard) before performing operations on it.\nWhen to use: Use unknown when you're working with values whose type is not known, but you still want type-safety (compared to any).\nExample:\n\nlet value: unknown = 42;\n\nif (typeof value === 'number') {\n  console.log(value.toFixed(2));  // Now it's safe to treat `value` as a number\n}\n‍\n\n\n\nBest practice: Always use unknown instead of any when you need to work with values of uncertain type, as it forces you to perform runtime checks, ensuring type safety."
  },
  {
    "id": "1113",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are advanced patterns of generics, such as \"generics with constraints\" or \"recursive generics\" in TypeScript?",
    "answer": "Generics with Constraints:\nPurpose: You can constrain a generic type to ensure it extends a specific type, giving you more control over the kinds of values that can be passed into a generic function or class.\nExample:\n\nfunction merge<T extends object, U extends object>(obj1: T, obj2: U): T & U {\n  return { ...obj1, ...obj2 };\n}\n\nconst merged = merge({ name: \"Alice\" }, { age: 25 });\n‍\n\nIn this example, T and U are constrained to be object, so the function only accepts objects as arguments.\nRecursive Generics:\nPurpose: Recursive generics allow you to define types that refer to themselves, often used for complex data structures like trees or linked lists.\nExample:\n\ninterface Node<T> {\n  value: T;\n  children: Node<T>[];\n}\n\nconst tree: Node<number> = {\n  value: 1,\n  children: [\n    { value: 2, children: [] },\n    { value: 3, children: [{ value: 4, children: [] }] }\n  ]\n};\n‍\n\n‍\n\nRecursive generics are useful for representing hierarchical or nested data structures."
  },
  {
    "id": "1114",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does TypeScript handle and generate declaration files (.d.ts), and why are they important?",
    "answer": "Declaration files (.d.ts) provide TypeScript with type information about JavaScript code, allowing TypeScript to check types in code that doesn't have built-in type definitions (e.g., third-party libraries, external JavaScript code).\n\nPurpose: .d.ts files are used to declare the types of objects, functions, and variables available in an external library or script. They provide TypeScript with enough information to understand the types and perform type checking.\nWhen to use:\nExternal libraries: If you're working with JavaScript libraries that don’t have TypeScript definitions, you can create or find .d.ts files.\nGlobal variables: Declare global types that exist outside the TypeScript module system.\nExample:\n\n// person.d.ts\ndeclare module 'person' {\n  export interface Person {\n    name: string;\n    age: number;\n  }\n  export function getPerson(): Person;\n}\n\n‍\n\nWhy important:\n\n.d.ts files allow TypeScript to perform type-checking on code written in JavaScript.\nThey're essential for working with third-party libraries that don’t include their own type definitions."
  },
  {
    "id": "1115",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you optimize a TypeScript application in terms of performance and type-checking?",
    "answer": "Here are some key strategies to optimize a TypeScript application:\n\nUse strict mode: Enable strict type-checking options in the tsconfig.json to catch more errors at compile-time.\n\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n‍\n\nOptimize Type Inference: Minimize the use of any and unknown, and provide explicit type annotations when necessary to improve code readability and type inference accuracy.\nReduce unnecessary type checks: Use conditional types and type guards efficiently to ensure that TypeScript doesn't perform unnecessary checks.\nAvoid large types in performance-critical paths: Types that are too large (e.g., deep object types) can slow down type checking. Use more concise types where possible.\nOptimize build configurations:\nEnable incremental compilation to speed up successive builds.\nUse the skipLibCheck option to avoid type checking of declaration files in node modules, speeding up the compilation process.\nUse const assertions: This can help in narrowing types (e.g., making arrays and objects readonly) at compile time, reducing the number of type checks."
  },
  {
    "id": "1116",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the role of \"type guards\" in TypeScript, and how do they enhance type safety?",
    "answer": "Type guards in TypeScript are functions or expressions that narrow the type of a variable within a specific scope, ensuring that operations on the variable are type-safe.\n\nRole: Type guards help TypeScript understand the specific type of a variable at runtime. They allow you to write safer code by ensuring the correct type is used.\nExamples of Type Guards:\ntypeof for primitive types:\n\nfunction isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\ninstanceof for class instances:\n\nfunction isDate(value: unknown): value is Date {\n  return value instanceof Date;\n}\n‍\n\nUser-defined type guards for more complex checks:\n\nfunction isPerson(obj: any): obj is Person {\n  return obj && typeof obj.name === 'string' && typeof obj.age === 'number';\n}\n‍\n\nType guards enhance type safety by ensuring that you can safely perform operations on variables once their type has been narrowed."
  },
  {
    "id": "1117",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use conditional types for more complex type relationships in TypeScript?",
    "answer": "Conditional types in TypeScript are used to define types that depend on a condition. They follow the pattern:\n\nT extends U ? X : Y\n‍\n\nWhere if type T extends type U, the type will be X; otherwise, it will be Y.\n\nExample:\n\ntype IsString<T> = T extends string ? \"Yes\" : \"No\";\n\ntype Test1 = IsString<string>;  // \"Yes\"\ntype Test2 = IsString<number>;  // \"No\"\n‍\n\nAdvanced Example with Conditional Types:\n\ntype Flatten<T> = T extends (infer U)[] ? U : T;\n\ntype TestArray = Flatten<number[]>; // number\ntype TestString = Flatten<string>;  // string\n‍\n\nConditional types allow for more flexible and dynamic type definitions, useful for complex type transformations."
  },
  {
    "id": "1118",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement and enforce \"strict null checks\" in TypeScript, and why is it important?",
    "answer": "Strict null checks enforce that null and undefined are not assignable to any type except null and undefined, unless explicitly stated. This improves safety by preventing runtime errors where null or undefined values might be accessed incorrectly.\n\nTo enable strict null checks:\n\nSet strictNullChecks to true in the tsconfig.json:\n\n{\n  \"compilerOptions\": {\n    \"strictNullChecks\": true\n  }\n}\n‍\n\nAfter enabling this, null and undefined will be treated as distinct types. For example:\n\nlet name: string = null;  // Error: Type 'null' is not assignable to type 'string'.\n‍\n\nWhy is it important:\n\nIt helps to catch bugs where null or undefined values may cause runtime issues.\nIt makes your code more predictable by ensuring that values are either explicitly null/undefined or have actual values."
  },
  {
    "id": "1119",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the as const assertion in TypeScript, and how does it help in defining literal types?",
    "answer": "The as const assertion in TypeScript is used to convert values into their most specific literal type, preventing them from being widened to broader types.\n\nExample:\n\nconst colors = [\"red\", \"green\", \"blue\"] as const;\n// colors is now of type [\"red\", \"green\", \"blue\"], not string[]\n‍\n\nThis allows you to define literal types more effectively:\n\ntype Colors = typeof colors[number]; // 'red' | 'green' | 'blue'\n‍\n\nThe as const assertion is useful when you want to treat a value as a specific constant type, rather than a broader type like string or number.\n\n\n\n\n\n\n\n\n\n\nSASS Interview Questions\nHere are SASS and SCSS interview questions and answers for freshers as well as experienced candidates to get their dream job.\n\n1) Explain what is Sass? How it can be used?\nSass stands for Syntactically Awesome Stylesheets and was created by Hampton Catlin. It is an extension of CSS3, adding nested rules, mixins, variables, selector inheritance, etc.\n\nSass can be used in three ways\n\nAs a command line tool\nAs a standalone Ruby module\nAs a plugin for any Rack-enabled framework\n\nFree PDF Download: SASS Interview Questions and Answers\n\n2) List out the key features for Sass?\nKey features for Sass include\n\nFull CSS3-compatible\nLanguage extensions such as nesting, variables, and mixins\nMany useful functions for manipulating colors and other values\nAdvanced features like control directives for libraries\nWell-formatted, customizable output\n3) List out the Data Types that SassScript supports?\nSassScript supports seven main data types\n\nNumbers ( eg; 1,5 ,10px)\nStrings of texts ( g., “foo”, ‘bar’, etc.)\nColors (blue, #04a3f9)\nBooleans (true or false)\nNulls (e.g; null)\nList of values, separated by space or commas (g., 1.5em, Arial, Helvetica etc.)\nMaps from one value to another (g., ( key 1: value1, key 2: Value 2))\n\nDon't Miss:\nTop 50 CSS Interview Questions and Answers (2025)\nTop 50 JQuery Interview Questions and Answers (2025)\nTop 25 Bootstrap Interview Questions and Answers (2025)\nTop 17 Web Developer Interview Questions and Answers\n4) Explain how to define a variable in Sass?\nVariables in Sass begin with a ($) sign and variable assignment is done with a colon(:).\n\n5) Explain what is the difference between Sass and SCSS?\nThe difference between Sass and SCSS is that,\n\nSass is a CSS pre-processor with syntax advancements and an extension of CSS3\nSass has two syntax\nThe first syntax is “SCSS” and it uses the .scss extension\nThe other syntax is indented syntax or just “Sass” and it uses the .sass extension\nWhile Sass has loose syntax with white space and no semicolons, the SCSS resembles more to CSS\nAny CSS valid document can be converted to Sass by simply changing the extension from.CSS to.SCSS.\n\nSASS Interview Questions\nSASS Interview Questions\n6) What Selector Nesting in Sass is used for?\nIn Sass, selector nesting offers a way for stylesheet authors to compute long selectors by nesting shorter selectors within each other.\n\n7) Explain what is a @extend function used for in Sass?\nIn Sass, the @EXTEND directive provides a simple way to allow a selector to inherit the styles of another one. It aims at providing a way for a selector A to extend the styles from a selector B. When doing so, the selector A will be added to selector B so they both share the same declarations.  @EXTEND prevents code bloat by grouping selectors that share the same style into one rule.\n\n8) Explain what is the use of the @IMPORT function in Sass?\nThe @IMPORT function in Sass\n\nExtends the CSS import rule by enabling import of SCSS and Sass files\nAll imported files are merged into a single outputted CSS file\nCan virtually mix and match any file and be certain of all your styles\n@IMPORT takes a filename to import\n9) Why Sass is considered better than LESS?\nSaas allows you to write reusable methods and use logic statements, e., loops, and conditionals\nSaas user can access Compass library and use some awesome features like dynamic sprite map generation, legacy browser hacks and cross-browser support for CSS3 features\nCompass also allows you to add an external framework like Blueprint, Foundation or Bootstrap on top\nIn LESS, you can write a basic logic statement using a ‘guarded mixin’, which is equivalent to Sass if statements\nIn LESS, you can loop through numeric values using recursive functions while Sass allows you to iterate any kind of data\nIn Sass, you can write your own handy functions\n10) Explain what is the use of Mixin function in Sass? What is the meaning of DRY-ing out a mixin?\nMixin allows you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like .float-left.\n\nDRY-ing out of a mixing means splitting it into dynamic and static parts.  The dynamic mixin is the one that the user actually going to call, and the static mixin is the pieces of information that would otherwise get duplicated.\n\n11) Explain what Sass Maps is and what is the use of Sass Maps?\nSass map is a structured data in a hierarchical way and not just a bunch of variables. It can help in organizing the code. Some great use of Sass are\n\nIt is very useful when dealing with layers of elements in your project\nIt can be helpful in color management when there is long list of different color and shade\nUse icon map for various social media icons for example: facebook: ‘\\e607’ or twitter: ‘\\e602’\nUnlike other programming libraries, Sass map will consist only of code that is going to be used\n12) Explain how Sass comments are different from regular CSS?\nSyntax for comments in regular CSS starts with /* comments…*/, while in SASS there are two type of comment, the single line comments // and the multiline CSS comments with /* */.\n\nSASS / SCSS Interview Questions\nSASS / SCSS Interview Questions\n13) Does Sass support inline comments?\nSingle line comments // will be removed by the .scss pre-processor and won’t appear in your .css file\n\nWhile the comment */ are valid CSS, and will be preserved between the translation from .scss to your .css file\n\n14) How interpolation is used in Sass?\nIn Sass, you can define an element in a variable and interpolate it inside the Sass code.  It is useful when you keep your modules in separate files.\n\n15) Explain when can you use the %placeholders in Sass?\n%placeholders in Sass is useful when you want to write styles that were meant to be extended, but you don’t want the base styles to be seen in output CSS styles\n\n16) Is it possible to nest variables within variables in Sass?\nInterpolation of variables names is not possible currently in Sass. However, you may use interpolation of placeholders.\n\n17) What are Sass cons and pros?\nPros:\n\nSass is easy to learn especially for them who has a background of Python, Ruby or Coffescript and place using functions, writing mixins\nCSS can be easily converted to Sass\nThroughout the project, you don’t have to repeat similar CSS statements using @extend attribute\nIt allows to define variables that are usable throughout the entire project\nIt keeps your responsive project more organized\nCons:\n\nRequires time to learn new features of preprocessor before using\nYou may not be able to use the built-in element inspector feature of the browser\nTroubleshooting can be difficult\n18) Explain what is LESS?\nLESS is dynamic style sheet producing language. LESS is a CSS pre-processors and extends CSS with dynamic behaviour. It allows for variables, mixins, operations and functions. LESS runs on server side and client side both.\n\n\n19) Explain how to create LESS file and where to store it and compile it?\nCreating or storing LESS file is similar to creating/storing CSS file. A new LESS file can be created with a .less extension, or you can rename existing .css file to .less file. You can write LESS code with existing CSS code.\n\nThe best way of creating it inside ~/content/ or ~/Styles/ folder\n\n20) In what ways LESS can be used?\nVia npm LESS can be used on the command line\nDownload as a script file for the browser\nFor third party tools, it is used\n21) How variable is represented in LESS?\nlessinterviewquestions\n\nLESS allows variables to be defined. In LESS, the variable is represented as @sing. While, variable assignment is done with a: (colon) sing. The values of the variables are inserted into the CSS output file as well as minified file.\n\n \n\n22) Explain how Mixins is useful?\nMixins enable embedding all the properties of a class into another class by including the class name as one of its properties. It is just like variables but for whole classes.\n\n23) Explain how can set code in a watch mode when you run LESS.js in an HTML5 browser?\nIf you run LESS.js in an HTML5 browser, it will use local storage to cache the generated CSS. However, from the developer point of view they cannot see the changes they made instantly. In order to see your changes instantly, you can load program in development and watch mode by following JavaScript\n\n<script type= \"text/javascript\">\n\nless.env = \"development \" ;\n\nless.watch () ;\n\n</script>\n24) Explain what is the meaning of nesting in LESS programming?\nNesting in LESS is clustering of statements inside other statements, so it forms a group of related code. In other words when we add a code snippet and add another code inside it, then that code snippet is called nesting.\n\n25) Mention what are the color channel functions used in LESS?\nhue\nsaturation\nhsvhue\nsaturation\nhswalue\nred\ngreen\nblue\nalpha\nluma\nluminance\n26) Explain what is data-uri in LESS?\nIn CSS, Data URI’s is one of the best technique, it allows developers to avoid external image referencing and instead embed them directly into a stylesheet. Data URIs are the excellent way to reduce HTTP requests\n\n27) Explain what “Source Map Less Inline”?\nThe “ Source Map Less Inline” option indicates that we should include all of the CSS files into the sourcemap. Which means that you only need your map file to get to your original source.\n\n28) Explain what is the use of Extend “all” in LESS?\nWhen you specify all keyword last in an extend argument, it tells LESS to match that selector as part of another selector.\n\n29) Explain what is “StrictImports” in LESS?\nThe strictImports controls whether the compiler will allow a @import inside of either @media blocks or other selector blocks\n\n30) List out the differences between LESS and Sass?\nEach style-sheet language is good in their perspective and use; however there are few differences in their usage.\n\nLESS\tSass\n– LESS uses JavaScript and processed at client-side\t– Sass is coded in Ruby and thus processed to server-side\n– Variable names are prefaced with the @symbol\t– Variable name are prefaced with $ symbol\n– LESS does not inherit multiple selectors with one set of properties\t– Sass inherits multiple selectors with one set of properties\n– LESS does not work with “unknown” units neither it returns syntax error notification for incompatible units or maths related syntax error\t– Sass allows you to work with “unknown” units also returns a syntax error notification for incompatible units\n31) What are the similarities between LESS and Sass?\nBetween LESS and Sass the similarities are\n\nNamespaces\nColor functions\nMixins and parametric mixins\nNesting capabilities\nJavaScript evaluations\n32) Explain what is the use of &combinator ?\n&combinator concatenates nested selector with the parent selector. It is useful for Pseudo classes such as :hover and :focus\n\n33) Explain what is the use of operations in LESS?\nOperations can be used for performing functions like\n\nSimple Mathematical operators: +, – , *, /\nColor functions\nMath functions\nAny size or colour variable can be operated upon\n34) Explain what is the use of Escaping?\nThe use of escaping in LESS\n\nWhen you need to output CSS that is not valid CSS syntax\nProprietary syntax not recognized by LESS\nLESS compiler will throw an error if not used\nSimple prefix with ~ symbol and put in quotes\n35) What does LESS elements contains?\nLess elements contain commonly used mixins like\n\n.gradient\n.rounded\n.opacity\n.box-shadow\n.inner-shadow\n36) List out alternatives against LESS?\nSASS: Syntactically Awesome Stylesheets\nSCSS: Version.2 of SASS\nStylus\n37) Explain how you can invoke the compiler from the command line?\nYou can invoke the compiler from the command line in LESS as\n\n$ lessc styles.less\n\nThis will output the compiled CSS to stdout; you may then redirect it to a file of your choice\n\n$ lessc styles.less > styles.css\n\n38) What is the use of e () function?\nWith the help of e() function you can escape a value so that it passes straight through to the compiled CSS, without being noticed by the LESS compiler.\n\n39) Explain how you can pre-compile LESS into CSS?\nTo pre-compile LESS into CSS you can use\n\nRun less.js using Node.js : By using the Node.js JavaScript framework you can run the less.js script outside the browser\nUse lessphp: For the implementation of the LESS compiler written in PHP, lessphp is used\nUse online Compiler: Use online compiler for quick compilation of LESS code without installing a compiler\nLess. app (for Mac users): Less.app is a free tool for Mac users, this tool auto compiles them into CSS files\n40) Explain how merge function is used in LESS?\nFor aggregating values from multiple properties into a space or comma separated list under a single property LESS is used. It is useful for properties such as transform and background\n\n41) How can you create a loop structures in LESS?\nA mixin can call itself in LESS. Such recursive mixins, when combined with Pattern matching and Guard Expressions, can be used to create various iterative/loop structures.\n\n42) Why do we need parametric mixins in LESS?\nParametric mixins are same like standard mixins. The only difference is that parametric mixins take parameters like functions in JavaScript. After determining parameters to the mixins, you get more control over mixins.\n\nCons:\n\nWhite space sensitive\nNo inline rules\n\n\n\n\n\n\n1) What is SASS?\nSASS is an acronym which stands for Syntactically Awesome Stylesheets. It is a CSS preprocessor which is used to reduce repetition with CSS and save time.\n\n2) Who is the inventor of SASS?\nHampton Catlin is known as the father of SASS.\n\n3) What are the reasons behind using SASS?\nFollowing are some important reasons behind the popularity of SASS.\n\nYou can write codes easily and efficiently and they are easy to maintain.\nIt is a pre-processing language which provides its own syntax for CSS.\nIt is a superset of CSS which contains all the features of CSS and is an open source pre-processor, coded in Ruby.\nIt is more stable and powerful CSS extension and style documents more clearly and structurally.\n4) How many ways SASS can be used?\nSASS can be used in three ways:\n\nAs a command line tool\nAs a standalone Ruby module\nAs a plugin for any Rack-enabled framework\n5) What are the most attractive features of SASS?\nIt is more stable, powerful and fully compatible to CSS3.\nIt is time saving because it facilitates you to write CSS in less code.\nIt uses its own syntax.\nIt is based on the JavaScript.\nIt is an Open source pre-processor which is interpreted into CSS.\nIt has many useful functions for manipulating colors and other values.\nIt has advance features like control directives for libraries.\n6) What are the Data Types that is supported by SassScript?\nSassScript supports seven main data types:\n\nNumbers (1, 5, 10)\nStrings of texts (\"foo\", \"bar\")\nColors (blue, #04a3f9)\nBooleans (true or false)\nNulls (null)\nList of values, separated by space or commas (1.5em, Arial, Helvetica)\nMaps from one value to another ( (key 1: value1, key 2: Value 2) )\n7) How can you define a variable in Sass?\nA variable begins with a ($) sign and variable assignment is completed with a semicolon ; sign.\n\n$font-stack:    Helvetica, sans-serif;  \n$primary-color: #333;  \n8) What are the difference between Sass and SCSS?\nFollowing are the main differences between Sass and SCSS:\n\nSass is a CSS pre-processor and an extension of CSS3.\n\nSass has two syntax:\n\nThe first syntax is \"SCSS\" and it uses the .scss extension.\nThe other syntax is indented syntax or just \"Sass\" and it uses the .sass extension.\nSass has loose syntax with white space and no semicolons while SCSS is more similar to CSS.\n\nAny CSS valid document can be converted to Sass by simply changing the extension from .CSS to .SCSS.\n\n9) What is the use of the @import function in Sass?\nIt is used to extend the CSS import rule by enabling import of SCSS and Sass files.\nAll imported files are merged into a single outputted CSS file.\nCan virtually mix and match any file and be certain of all your styles.\n@IMPORT takes a filename to import.\n10) What are the advantages of Sass?\nTime saving.\nMore efficient and quicker.\nCompatible with all versions of CSS.\nYou can use nested syntax and useful functions such as color manipulation, mathematics and other values.\nWrite clean CSS in programming construct.\n11) What are nested rules in Sass?\nNesting is a method of combining multiple logic structures within one another. In Sass, multiple CSS rules are combined within one another.\n\nFor example, if you are using multiple selectors then you can use one selector inside another to create compound selectors.\n\n12) Which one is better, Sass or Less?\nSass is considered better than Less because of the following reasons:\n\nSass facilitates you to write reusable methods and use logic statements like loops, and conditions.\nSass user can access Compass library and use some awesome features like dynamic sprite map generation, legacy browser hacks and cross-browser support for CSS3 features.\nCompass also allows you to add an external framework like Blueprint, Foundation or Bootstrap on top\nSass facilitates you can write your own handy functions.\n13) What is the way to write placeholder selector in Sass?\nIn Sass, the placeholder selectors can be used with class or id selector. In normal CSS, these are specified with \"#\" or \".\", but in SASS they are replaced with \"%\".\n\n14) What are number operations in Sass?\nIn Sass, the number operations are used for mathematical operations like addition, subtraction, multiplication and division.\n\n15) What are color operations in Sass?\nIn Sass, color operation allows to use color components along with arithmetic operations.\n\n16) What are Boolean operations in Sass?\nThe Boolean operations can be performed on Sass script by using and, & and not operators.\n\n17) What are parentheses in Sass?\nParentheses are used to provide a symbolic logic that affects the order of the operation. It is a pair of signs which are usually marked off by round () brackets or square [] brackets.\n\n18) What is the use of Mixin function in Sass?\nMixin function facilitates you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like .float-left.\n\n19) What is the use of DRY-ing out a Mixin function in Sass?\nDRY-ing out of a mixing means splitting it into dynamic and static parts.\n\nThe dynamic mixin is the one that the user actually going to call, and the static mixin is the pieces of information that would otherwise get duplicated.\n\n20) What is the difference between Sass comment and regular CSS comment?\nThe regular CSS comments start with /* comments?*/ while Sass has two type of comment. The single line comment with // and the multiple CSS comments with /* */.\n\n\n\nIn this article, I will try to include some of the most common Sass interview questions with their answers."
  },
  {
    "id": "1120",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Sass?",
    "answer": "- Sass (short for “Syntactically Awesome Style Sheets”) is a preprocessor scripting language used to enhance the capabilities of CSS, such as using variables, functions, and mixins."
  },
  {
    "id": "1121",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between Sass and CSS?",
    "answer": "- Sass is a preprocessor scripting language used to generate CSS, while CSS is a styling language used to describe the presentation of HTML documents."
  },
  {
    "id": "1122",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a mixin in Sass?",
    "answer": "- A mixin in Sass is a block of code that can be reused throughout a stylesheet, allowing developers to apply the same styles to different elements without repeating code."
  },
  {
    "id": "1123",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a variable in Sass?",
    "answer": "- A variable in Sass is a container used to store a value, such as a color, font size, or spacing, that can be easily reused throughout a stylesheet."
  },
  {
    "id": "1124",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the @import directive in Sass?",
    "answer": "- The @import directive in Sass is used to include other Sass files in the current stylesheet, allowing developers to organize their code into smaller, more manageable files."
  },
  {
    "id": "1125",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between @extend and @include in Sass?",
    "answer": "- The @extend directive in Sass is used to inherit styles from another selector, while the @include directive is used to include a mixin’s code into the current selector."
  },
  {
    "id": "1126",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between a nested selector and a parent selector in Sass?",
    "answer": "- A nested selector in Sass is a selector that is defined inside another selector, allowing developers to write more concise and readable code.\n- A parent selector in Sass is a selector that is used to select the parent of the current selector, allowing the styles to be applied to both the parent and child elements."
  },
  {
    "id": "1127",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the !important keyword in Sass?",
    "answer": "- The !important keyword in Sass is used to give a particular CSS rule priority over other rules, allowing developers to override default styles or apply critical styles in certain situations."
  },
  {
    "id": "1128",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between a function and a mixin in Sass?",
    "answer": "- A function in Sass is a block of code that returns a value based on its input arguments, while a mixin is a block of code that does not return a value but can apply styles to multiple selectors."
  },
  {
    "id": "1129",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the @media directive in Sass?",
    "answer": "- The @media directive in Sass is used to define styles for specific devices or screen sizes, allowing developers to create responsive designs that adapt to different screen sizes and resolutions.\n\nThat’s all, now you have good knowledge about the most common Sass questions being asked in interviews.\n\n\n\n\n\n\n\nRegex Cheat Sheet\n\nIntroduction\nA regular expression (regex in short) is a pattern in input text that the regular expression engine tries to match. One or more character literals, operators, or structures make up a pattern. It's particularly good at searching for and manipulating text strings, as well as processing text files. A single regex line can easily replace dozens of lines of programming code. In this blog, you will come across the basic to advanced regex concepts that would help you in your development task.\n\nWhy Regex?\nSearching and replacement operations are made easy by regular expressions. Finding a substring that matches a pattern and replacing it with something else is a common use case. Regex is renowned for the IT expertise that dramatically boosts productivity in all computer tasks.\n\nBasic Regex Commands"
  },
  {
    "id": "1130",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Characters",
    "answer": "The character class is the most basic regex concept. It converts a small group of characters to match a larger number of characters.\n\nCharacter\tDescription\n\\\tEscape character\n.\tAny character\n\\s\twhitespace\n\\S\tNot white space\n\\d\tDigit\n\\D\tNot digit\n\\w\tWord character\n\\W\tNot word character\n\\b\tWord boundary\n\\B\tNot word boundary\n^\tBeginning of string\n$\tEnd of string\nFor example:\n\n[xyz]  matches x or y or z\n[^pqr] matches any character _except_ p, q, or r (negation)\n[a-zA-Z] matches a through z or A through Z, inclusive (range)\n\nCreate a free personalised study plan\nGet into your dream companies with expert guidance\nReal-Life Problems\nPrep for Target Roles\nCustom Plan Duration\nCreate My Plan"
  },
  {
    "id": "1131",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Groups",
    "answer": "To operate on all items in a group, use a group expression. You can use a group expression to apply an operator to a group or to find a specified text before or after each member of the group, for example. The grouping operator is the parentheses, while the \"|\" is used to divide the elements.\n\nFor example:\n\nMy (red|pink|blue) dress\nHere \"My red dress\", \"My blue kite\", and \"My pink dress\" match the expression. \"My yellow kite\" or \"My dress\" do not match.\nLet’s look into some of these operators.\n\nGroup\tDescription\n[ ]\tCharacters in brackets are matched.\n[^ ]\tCharacters not in brackets are matched.\n|\tEither, or\n( )\tCapturing the group\nMore examples:\n\nx(yz) parentheses create a capturing group with value yz\np(?:qr)* using ?: you disable the capturing group\na(?<ok>bc) using ?<ok> we put a name to the group"
  },
  {
    "id": "1132",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Quantifiers",
    "answer": "Quantifiers specify how many characters or expressions should be matched.\n\nQuantifiers\tDescription\n*\t0 or more (Kleene star)\n+\t1 or more (Kleene plus)\n?\t0 or 1\n{ }\tExact number of characters\n{min,max}\tRange of characters\nThe quantifiers ( * + {}) are also known as greedy operators. They expand the match as far as they can via the input text.\n\nFor example:\n\n<[^<>]+>  matches any of the characters except < or > included one or more times inside < and >\n\\w+?\\d\\d\\w+  matches abcdef42ghijklmnfhaeij\nMore examples for quantifiers\n\nx{3}\tExactly 3 of x\nx{3,}\t3 or more of x\nx{3,6}\tBetween 3 and 6 of x\nx*\tGreedy quantifier\nx*?\tLazy quantifier\nx*+\tPossessive quantifier\nYou can download a PDF version of Regex Cheat Sheet.\n\nDownload PDF"
  },
  {
    "id": "1133",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Anchors",
    "answer": "Based on the current position in the string, determines whether the match will succeed or fail.\n\nAnchors\tDescription\n^\tBeginning of the string\n$\tEnd of the string\n\\A\tThe match is at the beginning of the string.\n\\G\tBeginning of the match\n\\Z\tAt the end of the string or before \\n at the end of the string, the match occurs.\n\\z\tAbsolute end of the string\n\\B\tNo word boundary\n\\b\tWord boundary\nFor example:\n\n^\\d{3} matched 444 in 444-888-999-..\n-\\d{3}\\Z matches -220 in 110-220\n\\babc\\b performs a \"whole words only\" search\n\\Bend\\w*\\b matches \"ends\", \"ender\" in \"end sends endure lender\"\n^Hello me$ matches the string Hello me\nNow, that you have got some brief idea about the characters, quantifiers and groups. Let’s look into some combined examples.\n\n^(\\d*)[.,](\\d+)$ matches numbers like 12,3 or 12.3\n^[a-zA-Z0-9 ]*$ matches any alphanumeric with spaces.\n^[\\s]*(.*?)[\\s]*$ matches the text by avoiding the extra spaces\n^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$ could be used for matching email\n(https?)://(www)?.?(\\\\w+).(\\\\w+)/?(\\\\w+)? can be used matching URLs\nAdvanced Regex Commands"
  },
  {
    "id": "1134",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Lookarounds",
    "answer": "When the regex engine processes the lookaround expression, it first creates a substring from the present place to the beginning (lookbehind) or end (lookahead) of the original string, and then runs Regex. With the use of the lookaround pattern, IsMatch on that picked substring. A positive or negative assertion might be used to assess the outcome's success.\n\nLookaround\tDescription\n(?=check)\tPositive Lookahead\n(?!check)\tNegative Lookahead\n(?<=check)\tPositive Lookbehind\n(?<!check)\tNegative Lookbehind\nExamples:\n\n(?=\\d{10})\\d{4} matches 2348 in 2348856787\n(?<=\\d)rat matches mat in 2mat\n(?!theatre)the\\w+ matches theme\n\\w{3}(?<!mon)ster matches munster\nExplore InterviewBit’s Exclusive Live Events\nBy\n\nNo More Events to show!"
  },
  {
    "id": "1135",
    "category": "typescript",
    "difficulty": "medium",
    "question": "POSIX commands",
    "answer": "A character class is a combination of a small number of characters and a large number of characters. Only within bracket expressions can we use POSIX character classes. To generate regular expressions, the POSIX standard supports the following character classes.\n\nPOSIX\tDescription\n[:alpha:]\tPCRE (C, PHP, R…): ASCII letters A-Z and a-z\n[:alpha:]\tRuby 2: Unicode letter or ideogram\n[:alnum:]\tPCRE (C, PHP, R…): ASCII digits and letters A-Z and a-z\n[:alnum:]\tRuby 2: Unicode digit, letter or ideogram\n[:punct:]\tPCRE (C, PHP, R…): ASCII punctuation mark\n[:punct:]\tRuby: Unicode punctuation mark\nExamples:\n\n[8[:alpha:]]+ sample match could beWellDone88\n[[:alpha:]\\d]+ sample match could beкошка99\n[[:alnum:]]{10} sample match could beABC1275851\n[[:alnum:]]{10} sample match could be кошка67810\n[[:punct:]]+ sample match could be ?!.,:;\n[[:punct:]]+ sample match could be ‽,:〽⁆"
  },
  {
    "id": "1136",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Unicode property escapes",
    "answer": "The following are examples of Unicode property escapes:\n\n\\p{prop=value}: All characters with the prop property have the value value.\n\\P{prop=value}: All characters without a property prop with the value value are matched. Match \\p{bin_prop}: all characters with the bin prop binary property set to True.\n\\P{bin_prop}: All characters with the binary attribute bin prop set to False will be matched.\n\nStart Your Coding Journey With Tracks\nMaster Data Structures and Algorithms with our Learning Tracks\nTopic Buckets\nMock Assessments\nReading Material\nView Tracks"
  },
  {
    "id": "1137",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Flags",
    "answer": "A flag is a parameter that can be added to a regex to change how it searches. A flag modifies a regular expression's default searching behaviour. It does a regex search in a unique method. A single lowercase alphabetic character is used to represent a flag. There are six flags in the JavaScript regex, each providing a different purpose.\n\nFlag\tDescription\ni\tMakes the expression search case-insensitively.\ng\tMakes the expression search for all occurrences.\ns\tMakes a wild character. match newlines as well.\nm\tInstead of matching the beginning and conclusion of the entire string, the boundary characters ^ and $ match the beginning and ending of each individual line.\ny\tStarts the expression's search from the index specified by the lastIndex attribute.\nu\tAssumes that individual characters are code points rather than code units, and so matches 32-bit characters.\nWhen employing the forward slashes / to build an expression, flags come after the second slash. This can be expressed in general notation as follows: \\pattern\\flag\n\nFor example, if the flag i was added to the regex /a/, the result would be /a/i.\n\nTo provide a regex with many flags, we write them one by one (without any spaces or other delimiters).\n\nIf we gave the flags i and g to the regex /a/, for example, we'd write /a/ig (or equivalently /a/gi, as the order doesn't matter).\n\nNote: The sequence in which flags appear is irrelevant; flags simply change the behaviour of searching, thus placing one before the other makes no difference."
  },
  {
    "id": "1138",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Recurse",
    "answer": "The following engines enable recursion: PCRE (C, PHP, R...) Perl Ruby 2+ Python via the alternate regex package JGSoft (not available in a programming language)\n\nThe most common application of recursion is to match balanced constructions.\n\nCommand\tDescription\n(?R)\tRecurse entire pattern\n(?1)\tRecurse the first subpattern\n(?+1)\tRecurse first relative subpattern\n(?&name)\tRecurse subpattern name\n(?P=name)\tMatch subpattern name\n(?P>name)\tRecurse subpattern name\na(?R)?z, a(?0)?z, and a\\g<0>?z are all regexes that match one or more letters followed by the same number of letters z.\n\nExamples:\n\n(\\((?R)?\\)) match parentheses like ((()))\n(\\((?R)*\\)) match parentheses like (()()())\n\\w{3}\\d{4}(?R)? matches patterns like ccc8888ggg9999\nPossible Performance pitfalls"
  },
  {
    "id": "1139",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Regular Expression Performance Pitfalls",
    "answer": "Because two \"equivalent\" regexes might have substantial changes in processing performance, you should understand how your regex engine works.\n\nIt is feasible to construct regexes that match in exponential time, but you must essentially TRY to do so.\nRegexes that run in quadratic time are more commonly created by accident.\nProblems of many kinds\nRecompilation (from forgetting to compile regexes used multiple times)\nThe Middle Dot-star (which causes backtracking)\nThe first approach, use a character class that is negated.\nUse reluctant quantifiers as a second option.\nTips to increase the performance"
  },
  {
    "id": "1140",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Improving the performance of regular expressions",
    "answer": "When you require parentheses but not capture, use non-capturing groups.\nDo a quick check before attempting a match, if the regex is very complex, e.g.\nDoes an email address contain '@'?\nPresent the most likely option(s) first, e.g.\nlight green|dark green|brown|yellow|green|pink leaf\nMinimize the amount of looping\n\\d\\d\\d\\d\\d\\d is faster than \\d{6}\naaaaaa+ is faster than a{6,}\nAvoid obvious backtracking, e.g.\nMr|Ms|Mrs should be M(?:rs?|s)\nGood night|Good morning should be Good (?:night|morning)\nConclusion\nIn this blog, you came across some of the interesting regex command concepts that would be very helpful in the matching of different kinds of strings. You also learned about some of the pitfalls that could happen when using regex and that could affect the performance of your application too. Further to get over these pitfalls, the blog also discusses some of the common tips that could help you in overcoming these obstacles.\n\nUseful Resources\nTechnical Interview Questions\nCoding Interview Questions\nInterview Resources\nDSA- Programming\nMock Interview\nRegex MCQ Questions"
  },
  {
    "id": "1141",
    "category": "typescript",
    "difficulty": "medium",
    "question": "We are basically matching 01-31 or 1-31. /0?[0-9]/ will be used to match numbers less than 10 while making the 0 optionally, /[12][0-9]/ will match from 10-29 (remember [12] is a character set and it means either 1 or 2) and /3[01]/ since we can't have more than 31 days. All together /(0?[0-9]|[12][0-9]|3[01])/. Remember that | stands for or",
    "answer": "MM / M : 12 months in the calendar, matching 0-12 or 01-12. Basically since we cannot have more than 12 months, we can't match it all at once. So /0?[0-9]/ and /1[0-2]/. Altogether /(0?[0-9])|(1[0-2])/.\nYY / YYYY : Since this has no specific number it is pretty straightforward. Just remember 4 or 2 digits. That is /[0-9]{2}|[0-9]{4}/\nSeparator : Piece of cake right /[:\\/_-]/. All together we have this.\nfunction validateDate(str){\nlet regex = /^(0?[0-9]|[12][0-9]|3[01])[:\\/_-](0?[0-9])|(1[0-2])[:\\/_-][0-9]{2}?[0-9]{2}$/\nreturn regex.test(str)\n}\nVowel count:\nReturn the number of vowels in this string\n\nSolution\nTry it your self‼️‼️‼️\nThere is quite a number of ways you can do this, a for loop will work just fine but right now you have the power of regex so why not try that.\nThe closest thing you can use to actually get quantity in regex is the match method(returns an array) and then you can easily call a .length on the array returned.\n\nfunction vowel(str){\nreturn str.match(/[aeiou]/ig).length\n}\nDon't forget the i and g flag. Piece of cake right.\n\nPalindrome :\nCreate a function to test if a string is a palindrome. Note that special characters, spaces and so on should not be considered when testing the string for example, race_-+C ar and m-.um are both palindrome.\n\nSolution\nBefore we move forward we need to understand what a palindrome is. A palindrome is basically a string that when reversed spells out the same thing. For example racecar. If there was a special character or space in the string above it might not be a palindrome, for example ra_-ce car != rac ec-_ar. That is why the question says all non alphanumeric character should be removed before testing.\nEven though the question says we should test if a string is a palindrome, it is pretty obvious you cannot use any method from regex. I mean what would you be matching or testing against. So that is not an option.\nThe first thing we can do know is to remove all non alphanumeric character. Regex could come in pretty handy here with the replace method.\n\nlet str=\"ra c e-_.c;+-a.?).;#r\"\nstr.replace(/[\\W_]/g,\"\") //\\W matches All non alphanumeric character expect the underscore, which we also need to match, then replace them.\nWith this we should have the exact string we are suppose to test alone without the other characters.\nSince a palindrome is basically the reverse of the actual string, we can do just that. Convert the string to an array with the split method and call the reverse method on that array. Then simply join the array back with the join method and you have the reverse which you can easily test to see if they are the same.\n\nfunction palindrome(str){\nlet string = str.replace(/[\\W_]/g,\"\")\nlet array = string.split(\"\")\nlet str2 = array.reverse()\nlet string2 = str.join(\"\")\nreturn string === string2 ? true :false\n}\n//shorter version\nfunction palindrome(str){\nreturn str.replace(/[\\W_]/g,\"\")\n.split(\"\")\n.reverse()\n.join(\"\") ? true : false\n}\nHexadecimal colors :\nCreate a function to test if the given string is an hexadecimal color for example #333, #333333\n\nSolution\nSo we are back to testing and at this point you should know that we will be using regex. Can you give it a try.\nHere is what we know about hexadecimal colors. It can be three(3) or six(6) characters and it must be between 0-9 or A-F that is, sixteen different characters.\nAn hexadecimal must start with an # and can be followed by A-F or 0-9 three times so basically /^#([A-Fa-f0-9]){3}/. But it can also be six alphanumeric characters. That is /^#([A-Fa-f0-9]){6}/. Since it is three or six together we can do this\n\nfunction validateHexadecimal(str){\nlet regex = /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{6})$/\nreturn regex.test(str)\n}\nSpinal case :\nCreate a function to convert a string to a spinal case. For example This Is A JavaScript_String = this-is-a-javascript-string, thisIsJavascript = this-is-javascript\n\nSolution\nTry it out first.\nThis question is in a way tricky because the strings can come in very different formats. Basically the task is to add an hyphen between words. If this sentences are always separated with _ or - it will be pretty easy. But it can also be camelCase like the example above. In situations like this, you will have to split it at all occurrence of a capital letter and then add the hyphen. Note that the string returned should always be in lowercase.\nNow that we know what should and shouldn't be there, we can move forward.\n\nThe easiest thing to do is to remove all alphanumeric characters first. That is str.replace(/[\\W_]/g,\"\").\nNow that all the special characters are gone, we can easily split the words either with spaces or with capital letters. That is str.split(/(?=[A-Z])|\\s/). So basically, when going through the string, it is either it looks ahead to see if the next letter is in uppercase or it checks if there is a space and splits at that point.\nWith the array that was returned from the split method, a map method can be called to convert all to lowercase and then join with an hypen. Summing it altogether we have this\nfunction spinalCase(str){\nstr=str.replace(/\\W_/g,\"\")\nreturn str.split( /(?=[A-Z])|\\s/)\n.map(str=>str.toLowerCase())\n.join(\"-\")\n}\nCheck HTML :\nCreate a function to test if the given string is an HTML or not. Examples includes ,<> .\n\nSolution\nAn HTML string will always have an opening and closing parenthesis with zero or more string, but a backslash is optional\n\nfunction validateHTML(str){\nlet regex = /<([A-Za-z]*) *\\/?>/\nreturn regex.test(str)\n}\nBreaking this down, we are basically saying\n\nIt should start with <\nZero or more characters [A-Za-z]\nZero or more spaces \" *\"\nAn optional backslash and the final closing tag.\nPassword validator :\nCreate a function to check if a given password follows this given format. Above 8 characters, at least a lowercase character, an uppercase character, a digit and a special character.\n\nSolution\nA password validator can be tricky. But let's start from the easier part, which should be making sure the password is 8 characters or above.\n\n/[\\w\\W]{8,}/ //\\w to match alphanumeric and underscore and \\W to match special character \nNow we need to make sure that at least one of each character actually appears in the password. We have to do this for each of the different characters but it is basically the same thing, so I will explain just one of them.\n\n\n\n\n\nTop 25 Regular Expression Interview Questions and Answers\n\nRegular Expressions, also known as regex or regexp, are a potent tool used in computer science for pattern matching with strings of text. These sequences of characters form search patterns that can be used in string searching algorithms for “find” or “find and replace” operations on sets of strings. They’re incredibly versatile and widely utilized across various programming languages such as Python, Java, JavaScript, and many more.\n\nDespite their power, regular expressions can often seem daunting due to their seemingly cryptic syntax. However, once mastered, they become an invaluable tool in any developer’s toolkit, simplifying tasks that would otherwise require complex code and logic.\n\nIn this article, we’ve put together a list of commonly asked interview questions about Regular Expressions. The questions range from basic concepts to more advanced topics, providing a comprehensive understanding of how regular expressions work and how to use them effectively. Whether you’re a beginner trying to decipher the enigma of regex or a seasoned programmer looking to brush up your skills, this compilation is designed to help you navigate the intricacies of regular expressions with ease."
  },
  {
    "id": "1142",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you explain what a regular expression is and how it is used in programming?",
    "answer": "A regular expression, or regex, is a sequence of characters that forms a search pattern. It’s used in programming for text manipulation tasks like searching, replacing, and parsing data from strings. Regex patterns are implemented in various programming languages through libraries.\n\nRegex has two types of characters: literals and metacharacters. Literals match exact character sequences while metacharacters have special meanings, such as ‘.’ to match any single character except newline, ‘*’ for zero or more occurrences, and ‘^’ to start of a line.\n\nFor example, the regex ‘a.b’ matches any string containing ‘a’, any character, then ‘b’. So, it would match ‘acb’, ‘a2b’, but not ‘ab’.\n\nIn coding, regex can be used to validate user inputs. For instance, checking if an email address entered by a user follows the correct format. Here’s a Python code snippet:\n\nimport redef validate_email(email):pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'return re.match(pattern, email) is not None"
  },
  {
    "id": "1143",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you define and use character classes in Regular Expressions?",
    "answer": "Character classes in Regular Expressions are defined within square brackets []. They match any single character enclosed. For example, [abc] matches ‘a’, ‘b’, or ‘c’. Ranges can be specified with a hyphen: [a-z] matches any lowercase letter. Predefined classes exist like \\d for digits (0-9), equivalent to [0-9]. Negation is achieved using ^ as the first symbol inside the class, e.g., [^a-z] matches anything but a lowercase letter.\n\nTo use them, include the character class in your pattern where you want it to apply. For instance, the pattern \\d{2} matches exactly two digits. In JavaScript, this could be used as follows:\n\nlet str = \"12 and 34\";let regex = /\\d{2}/g;let result = str.match(regex); // returns [\"12\", \"34\"]"
  },
  {
    "id": "1144",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between greedy and non-greedy matching in Regular Expressions?",
    "answer": "Greedy and non-greedy matching in Regular Expressions refer to the quantity of text that a pattern matches. Greedy matching, by default, captures as much text as possible (maximal match). For instance, for the string “123abc456def789” and regex “.+c”, it will return “123abc”.\n\nNon-greedy or lazy matching, on the other hand, captures as little text as possible (minimal match). It’s achieved by appending a question mark (?) after the quantifier. Using the same example but with regex “.+?c”, it returns “123abc”. The difference lies in the amount of text captured; greedy consumes more while non-greedy less."
  },
  {
    "id": "1145",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you explain how you’d use lookaheads and lookbehinds in Regular Expressions?",
    "answer": "Lookaheads and lookbehinds in Regular Expressions are used for pattern matching without consuming characters. Lookahead asserts that a certain pattern is ahead, while lookbehind checks if a pattern is behind our current position.\n\nA lookahead syntax is (?=pattern), where it matches the search string at any point where a string matching ‘pattern’ begins. It doesn’t consume characters, allowing us to test multiple conditions. For example, \\d(?=\\D*"
  },
  {
    "id": "1146",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you write a Regular Expression to validate an email address pattern?",
    "answer": "A regular expression to validate an email address pattern can be written as follows:\n\n/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$/\n\nThis regex checks for a sequence of alphanumeric characters (including ._%-) followed by the @ symbol. After this, it looks for another sequence of alphanumeric characters (including . and -), then a period, and finally 2 to 6 alphabetic characters. The entire pattern is enclosed within start (^) and end ($) symbols to ensure that the whole string matches the pattern."
  },
  {
    "id": "1147",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe a scenario where you’d want to use a non-capturing group in a Regular Expression.",
    "answer": "A non-capturing group in a Regular Expression is useful when you need to apply quantifiers or alternation to a group of characters, but don’t require the matched content for later use. For instance, consider validating user input for a date format like MM/DD/YYYY where ‘/’ can be replaced by ‘-‘. A regex could be (0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\\d\\d. Here, we’re using capturing groups to match month, day and year. However, if we only care about the overall match and not individual components, we can convert these into non-capturing groups: (?:0[1-9]|1[012])[-/](?:0[1-9]|[12][0-9]|3[01])[-/](?:19|20)\\d\\d. This reduces unnecessary overhead of storing captured groups, improving performance especially with large data sets."
  },
  {
    "id": "1148",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you use Regular Expressions to match a pattern at the end of a line?",
    "answer": "To match a pattern at the end of a line using Regular Expressions, you would use the dollar sign ($) symbol. This special character is known as an anchor and it matches the position right after the last character in the string. For instance, if you want to find lines ending with ‘"
  },
  {
    "id": "1149",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you handle multi-line matches with Regular Expressions?",
    "answer": "Regular expressions handle multi-line matches using specific flags and metacharacters. The ‘m’ flag, or multiline mode, alters the behavior of ‘^’ and ‘$’. Normally, these match start/end of string but in multiline mode, they match start/end of each line within a string. For instance, /^A/m will match ‘A’ at the beginning of any line in a multi-line string.\n\nAnother approach is to use ‘\\n’, which represents a newline character. This can be used to find line breaks. For example, /"
  },
  {
    "id": "1150",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you use Regular Expressions to split a string into an array?",
    "answer": "Regular Expressions (regex) can be used to split a string into an array by using the split() method in JavaScript. This method splits a String object into an array of strings by separating the string into substrates. The separator is treated as a string or a regular expression. If separator appears at the beginning or end of the string, or both, the array begins, ends, or both begins and ends, respectively, with an empty string.\n\nHere’s an example:\n\nlet str = \"Hello World! How are you today?\";let regex = /\\s+/; // Matches one or more whitespace characterslet result = str.split(regex);console.log(result); // Output: [\"Hello\", \"World!\", \"How\", \"are\", \"you\", \"today?\"]\nIn this code, we’re splitting the string wherever there’s one or more spaces."
  },
  {
    "id": "1151",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you specify repetition in Regular Expressions?",
    "answer": "Repetition in Regular Expressions is specified using quantifiers. The most common are the asterisk (*), plus (+), and question mark (?). The asterisk specifies zero or more occurrences of the preceding element. For example, “a*” matches any number of ‘a’ characters including none. The plus sign indicates one or more occurrences of the preceding element. So, “a+” would match one or more ‘a’ characters but not an empty string. The question mark denotes zero or one occurrence of the preceding element, making it optional. Hence, “a?” will match either no ‘a’ or a single ‘a’.\n\nFor specific repetitions, curly braces {} are used. If you want to specify a range, use two numbers separated by a comma inside the braces like {2,5}. This means at least 2 and at most 5 times. A single number without a comma like {3} means exactly that many times."
  },
  {
    "id": "1152",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you write a Regular Expression to match all whitespace characters in a string?",
    "answer": "Yes, the regular expression to match all whitespace characters in a string is \\s. This matches spaces, tabs, newlines, and carriage returns. It can be used with global flag (g) to find all occurrences. For example, in JavaScript, you would use /\\\\s/g."
  },
  {
    "id": "1153",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you extract the extension from a file name using Regular Expressions?",
    "answer": "To extract the file extension using Regular Expressions, we can use a pattern that matches any character (.) followed by one or more word characters (\\w+), at the end of the string ($). In JavaScript, for example, this could be implemented as follows:\n\nlet fileName = \"example.txt\";let regex = /\\.(\\w+)$/;let match = fileName.match(regex);if(match) {  let extension = match[1];}\nIn this code snippet, match() is used to apply the regular expression to the filename. If there’s a match, it returns an array where the first element is the entire matched string and subsequent elements correspond to each capturing group in the regex. Here, match[1] gives us the file extension."
  },
  {
    "id": "1154",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you write a Regular Expression to validate a URL?",
    "answer": "Yes, a regular expression can be used to validate a URL. Here’s an example:\n\n^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$\nThis regex works as follows:\n\n– ^ asserts start of line.\n– (https?:\\/\\/)? matches the protocol (http or https), followed by ://. The question mark makes it optional.\n– ([\\da-z\\.-]+) matches one or more digit, lowercase letter, dot or hyphen.\n– \\. matches a literal dot.\n– ([a-z\\.]{2,6}) matches between 2 and 6 of a lowercase letter or a dot.\n– ([\\/\\w \\.-]*) matches zero or more of a forward slash, word character, whitespace, dot or hyphen.\n– \\/? optionally matches a trailing slash.\n– $ asserts end of line."
  },
  {
    "id": "1155",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle case sensitive and insensitive matches in Regular Expressions?",
    "answer": "Regular expressions handle case sensitivity through the use of flags. For case sensitive matches, no flag is needed as it’s the default behavior. For example, /abc/ will only match “abc”.\n\nFor case insensitive matches, the ‘i’ flag is used. This makes the regular expression ignore case. For instance, /abc/i will match “abc”, “ABC”, “AbC”, etc.\n\nIn JavaScript, these flags are added at the end of the regex pattern like so: let re = new RegExp(‘abc’, ‘i’); or directly in the pattern like /abc/i. In Python, they’re passed as a second argument to the compile function: re.compile(‘abc’, re.IGNORECASE)."
  },
  {
    "id": "1156",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you use Regular Expressions to remove duplicate words in a string?",
    "answer": "Regular expressions (regex) can be used to remove duplicate words in a string by using the pattern matching capabilities of regex. The first step is to define a regular expression that matches any word followed by a space and then the same word again. This can be done with the following regex: r’\\\\b(\\\\w+)(\\\\s+\\\\1)+\\\\b’.\n\nThe ‘\\\\b’ at the beginning and end are word boundaries, ensuring we match whole words only. ‘(\\\\w+)’ matches one or more word characters and stores them in group 1 for later reference. ‘(\\\\s+\\\\1)+’ matches one or more spaces followed by the same word we stored earlier.\n\nOnce this regex is defined, it can be used with Python’s re.sub() function to replace all instances of the matched pattern with just the first instance of the word. Here’s an example:\n\nimport redef remove_duplicates(s):return re.sub(r'\\\\b(\\\\w+)(\\\\s+\\\\1)+\\\\b', r'\\\\1', s)print(remove_duplicates(\"hello hello world\"))\nThis will output “hello world”, removing the duplicate “hello”."
  },
  {
    "id": "1157",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What’s the difference between .match() and .test() methods in JavaScript when dealing with Regular Expressions?",
    "answer": "The .match() and .test() methods in JavaScript are both used with regular expressions, but they function differently. The .match() method is applied to a string and takes a regex as its parameter. It returns an array of all matches found or null if no match is found. This method provides detailed information about each match including the matched string, index, input string, and capturing groups.\n\nOn the other hand, the .test() method is applied to a regex and takes a string as its parameter. It simply returns a boolean value: true if the string matches the regex pattern and false otherwise. Unlike .match(), it does not provide any additional information about the match."
  },
  {
    "id": "1158",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you escape special characters in Regular Expressions?",
    "answer": "In Regular Expressions, special characters are escaped using a backslash (\\) before the character. For instance, if you want to search for an actual period (.) instead of it acting as a wildcard, you would write \\\\. Similarly, other special characters like *, +, ?, ^, $, (, ), [, ], {, }, | and \\ are also escaped with a backslash. This is crucial because these characters have specific functions in regex patterns. Escaping them allows us to use their literal meanings in our searches."
  },
  {
    "id": "1159",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you use Regular Expressions to replace parts of a string?",
    "answer": "Regular expressions (regex) are used to replace parts of a string in many programming languages. The general process involves defining the pattern you want to search for and what you want to replace it with.\n\nIn JavaScript, we use the replace() method on a string object. This method takes two parameters: the regex pattern and the replacement string. For example:\n\nlet str = \"Hello World\";str = str.replace(/World/g, \"Universe\");\nHere, /World/g is the regex pattern where ‘World’ is the substring we’re looking for and ‘g’ denotes global search. ‘Universe’ is our replacement string. After execution, str will be “Hello Universe”.\n\nIn Python, we use the sub() function from the re module. It also takes two arguments: the regex pattern and the replacement string. Here’s an equivalent example:\n\nimport restr = \"Hello World\"str = re.sub('World', 'Universe', str)"
  },
  {
    "id": "1160",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the significance of the ‘^’ and ‘$’ symbols in Regular Expressions?",
    "answer": "In Regular Expressions (RegEx), the ‘^’ and ‘$’ symbols are known as anchors. The caret ‘^’ is a start-of-line anchor, meaning it matches any string that starts with the following pattern. For instance, ‘^A’ would match any string starting with ‘A’. Conversely, the dollar sign ‘$’ is an end-of-line anchor, matching any string ending with the preceding pattern. So, ‘A$’ matches strings ending in ‘A’. These anchors do not consume characters but assert the position at start or end of a line, respectively. They’re crucial for precise pattern matching, ensuring specific placement of matched strings within larger text bodies."
  },
  {
    "id": "1161",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you explain how you’d use the pipe ‘|’ symbol in a Regular Expression?",
    "answer": "The pipe ‘|’ symbol in a Regular Expression (regex) is used as a logical OR operator. It matches the pattern before or after it. For instance, ‘a|b’ will match either ‘a’ or ‘b’.\n\nIn more complex scenarios, you can use parentheses to group patterns together. For example, ‘(abc|def)’ will match either ‘abc’ or ‘def’. This becomes useful when matching multiple characters as a single unit.\n\nIt’s important to note that regex operates from left to right and stops at the first successful match. So, if ‘abc’ and ‘abcd’ are options, and the string contains ‘abcd’, only ‘abc’ will be matched because it comes first.\n\nWhen using the pipe symbol with quantifiers like ‘*’, ‘+’, ‘?’, they apply only to the preceding character or group. For example, ‘a*|b*’ would match zero or more ‘a’s or zero or more ‘b’s, not zero or more of ‘a’ or ‘b’."
  },
  {
    "id": "1162",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you write a Regular Expression to match any three-letter word in a string?",
    "answer": "Yes, a regular expression to match any three-letter word in a string can be written as follows: \\b[a-zA-Z]{3}\\b. Here, \\b denotes a word boundary, [a-zA-Z] matches any letter (both lower and upper case), and {3} specifies that the preceding character should occur exactly three times. This regex will find all instances of three-letter words within a given string."
  },
  {
    "id": "1163",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you use a Regular Expression to check if a string starts with a specific word?",
    "answer": "To check if a string starts with a specific word using Regular Expression, you would use the caret symbol (^) followed by the desired word. The caret symbol signifies the start of an input line. For instance, to check if a string begins with “Hello”, your regex pattern would be “^Hello”. In JavaScript, this could be implemented as follows:\n\nlet str = \"Hello world\";let regex = /^Hello/;let result = regex.test(str);console.log(result); // Outputs: true\nThis code creates a regular expression that looks for strings starting with “Hello”. It then tests the string “Hello world” against this regular expression and logs the result. If the string starts with “Hello”, it returns true; otherwise, false."
  },
  {
    "id": "1164",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you use backreferences in Regular Expressions?",
    "answer": "Backreferences in regular expressions are used to recall captured groups. They’re denoted by a backslash followed by the number of the group to be recalled, starting from 1 (\\1, \\2, etc.). For instance, if you want to find repeated words in a text, you could use the pattern (\\b\\w+\\b)\\s+\\1. Here, (\\b\\w+\\b) is the first capturing group that matches any word boundary, and \\1 refers back to this group. If the same word appears again after a space(s), it’s a match. In replacement operations, $ can be used instead of a backslash for backreferencing. Backreferences are powerful tools in regex, enabling complex pattern recognition and manipulation tasks."
  },
  {
    "id": "1165",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between ‘\\d’, ‘\\w’, and ‘\\s’ in Regular Expressions?",
    "answer": "‘\\d’, ‘\\w’, and ‘\\s’ are metacharacters in Regular Expressions, each with a unique function. ‘\\d’ matches any digit from 0-9. It’s equivalent to [0-9]. On the other hand, ‘\\w’ matches any alphanumeric character including underscore (_). It is synonymous with [a-zA-Z0-9_]. Lastly, ‘\\s’ matches any whitespace character: spaces, tabs, line breaks etc. These metacharacters simplify pattern matching by representing common groups of characters."
  },
  {
    "id": "1166",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you deal with performance issues when using complex Regular Expressions?",
    "answer": "To handle performance issues with complex Regular Expressions, consider these strategies. Firstly, avoid catastrophic backtracking by not using quantifiers in a greedy way and avoiding nested quantifiers where possible. Secondly, use non-capturing groups instead of capturing groups if you don’t need the matched content. Thirdly, make your regular expressions more specific to reduce the number of potential matches. Fourthly, precompile your regular expressions if they are used frequently. Fifthly, limit the input size for your regex operation. Lastly, consider alternatives like string methods or parsers for very complex patterns.\n\n\n\n\n 15 Basic Prisma Interview Questions Every Backend Developer Should Know (With Answers)\n\n📌 1. What is Prisma in Node.js?\nAnswer: Prisma is an open-source next-generation ORM for Node.js and TypeScript that helps developers write type-safe database queries using an auto-generated query builder.\n\n📌 2. Which databases does Prisma support?\nAnswer: Prisma supports PostgreSQL, MySQL, SQLite, SQL Server, CockroachDB, and MongoDB.\n\n📌 3. What is the schema.prisma file?\nAnswer: It's the central configuration file that defines your database models, datasource (DB connection), and generator (like Prisma Client).\n\n📌 4. How do you generate Prisma Client?\nAnswer: By running npx prisma generate. It reads schema.prisma and generates a fully-typed Prisma Client.\n\n📌 5. How to migrate your schema to the database?\nAnswer: Use npx prisma migrate dev --name init to create and apply a new migration based on your schema changes.\n\n📌 6. What is Prisma Client?\nAnswer: A type-safe query builder auto-generated from your Prisma schema to interact with your database using JavaScript/TypeScript.\n\n📌 7. How do you fetch all users using Prisma Client?\n Answer: const users = await prisma.user.findMany();\n\n📌 8. How do you filter records in Prisma?\nAnswer: Use the where clause.\nconst activeUsers = await prisma.user.findMany({\n where: { status: 'active' }\n});\n\n\n📌 9. How do you relate models in Prisma?\nAnswer: By defining relationships in the schema like this:\nmodel Post {\n id Int @id @default(autoincrement())\n title String\n author User @relation(fields: [authorId], references: [id])\n authorId Int\n}\n\n\n📌 10. How to create a user using Prisma?\nAnswer: await prisma.user.create({\n data: {\n name: 'Chetan Sharma',\n email: 'chetan@example.com',\n },\n});\n\n\n📌 11. How do you update a record in Prisma?\nAnswer: await prisma.user.update({\n where: { id: 1 },\n data: { name: 'Updated Name' },\n});\n\n\n📌 12. How to delete a record using Prisma?\nAnswer: await prisma.user.delete({\n where: { id: 1 },\n});\n\n\n📌 13. What is prisma studio?\nAnswer: Prisma Studio is a GUI for your database. You can run it using npx prisma studio.\n\n\n📌 14. How do you handle nested writes (create with relations)?\nawait prisma.user.create({\n data: {\n name: 'John',\n posts: {\n create: [{ title: 'First Post' }],\n },\n },\n});\n\n📌 15. What are @id, @default, and @relation in Prisma?\nAnswer:\n@id: Marks a field as primary key.\n@default: Sets a default value.\n@relation: Defines relations between models.\n\n\n\nWhy Prisma ORM?\nOn this page, you'll learn about the motivation for Prisma ORM and how it compares to other database tools like traditional ORMs and SQL query builders.\n\nWorking with relational databases is a major bottleneck in application development. Debugging SQL queries or complex ORM objects often consume hours of development time.\n\nPrisma ORM makes it easy for developers to reason about their database queries by providing a clean and type-safe API for submitting database queries which returns plain old JavaScript objects.\n\nTLDR\nPrisma ORM's main goal is to make application developers more productive when working with databases. Here are a few examples of how Prisma ORM achieves this:\n\nThinking in objects instead of mapping relational data\nQueries not classes to avoid complex model objects\nSingle source of truth for database and application models\nHealthy constraints that prevent common pitfalls and anti-patterns\nAn abstraction that makes the right thing easy (\"pit of success\")\nType-safe database queries that can be validated at compile time\nLess boilerplate so developers can focus on the important parts of their app\nAuto-completion in code editors instead of needing to look up documentation\nThe remaining parts of this page discuss how Prisma ORM compares to existing database tools.\n\nProblems with SQL, traditional ORMs and other database tools\nThe main problem with the database tools that currently exist in the Node.js and TypeScript ecosystem is that they require a major tradeoff between productivity and control.\n\nProductivity vs Control in ORMs, SQL query builders, and SQL\n\nRaw SQL: Full control, low productivity\nWith raw SQL (e.g. using the native \npg\n or \nmysql\n Node.js database drivers) you have full control over your database operations. However, productivity suffers as sending plain SQL strings to the database is cumbersome and comes with a lot of overhead (manual connection handling, repetitive boilerplate, ...).\n\nAnother major issue with this approach is that you don't get any type safety for your query results. Of course, you can type the results manually but this is a huge amount of work and requires major refactorings each time you change your database schema or queries to keep the typings in sync.\n\nFurthermore, submitting SQL queries as plain strings means you don't get any autocompletion in your editors.\n\nSQL query builders: High control, medium productivity\nA common solution that retains a high level of control and provides better productivity is to use a SQL query builder (e.g. knex.js). These sort of tools provide a programmatic abstraction to construct SQL queries.\n\nThe biggest drawback with SQL query builders is that application developers still need to think about their data in terms of SQL. This incurs a cognitive and practical cost of translating relational data into objects. Another issue is that it's too easy to shoot yourself in the foot if you don't know exactly what you're doing in your SQL queries.\n\nTraditional ORMs: Less control, better productivity\nTraditional ORMs abstract away from SQL by letting you define your application models as classes, these classes are mapped to tables in the database.\n\n\"Object relational mappers\" (ORMs) exist to bridge the gap between the programmers' friend (the object), and the database's primitive (the relation). The reasons for these differing models are as much cultural as functional: programmers like objects because they encapsulate the state of a single thing in a running program. Databases like relations because they better suit whole-dataset constraints and efficient access patterns for the entire dataset.\n\nThe Troublesome Active Record Pattern, Cal Paterson (2020)\n\nYou can then read and write data by calling methods on the instances of your model classes.\n\nThis is way more convenient and comes closer to the mental model developers have when thinking about their data. So, what's the catch?\n\nORM represents a quagmire which starts well, gets more complicated as time passes, and before long entraps its users in a commitment that has no clear demarcation point, no clear win conditions, and no clear exit strategy.\n\nThe Vietnam of Computer Science, Ted Neward (2006)\n\nAs an application developer, the mental model you have for your data is that of an object. The mental model for data in SQL on the other hand are tables.\n\nThe divide between these two different representations of data is often referred to as the object-relational impedance mismatch. The object-relational impedance mismatch also is a major reason why many developers don't like working with traditional ORMs.\n\nAs an example, consider how data is organized and relationships are handled with each approach:\n\nRelational databases: Data is typically normalized (flat) and uses foreign keys to link across entities. The entities then need to be JOINed to manifest the actual relationships.\nObject-oriented: Objects can be deeply nested structures where you can traverse relationships simply by using dot notation.\nThis alludes to one of the major pitfalls with traditional ORMs: While they make it seem that you can simply traverse relationships using familiar dot notation, under the hood the ORM generates SQL JOINs which are expensive and have the potential to drastically slow down your application (one symptom of this is the n+1 problem).\n\nTo conclude: The appeal of traditional ORMs is the premise of abstracting away the relational model and thinking about your data purely in terms of objects. While the premise is great, it's based on the wrong assumption that relational data can easily be mapped to objects which leads to lots of complications and pitfalls.\n\nApplication developers should care about data – not SQL\nDespite being developed in the 1970s(!), SQL has stood the test of time in an impressive manner. However, with the advancement and modernization of developers tools, it's worth asking if SQL really is the best abstraction for application developers to work with?\n\nAfter all, developers should only care about the data they need to implement a feature and not spend time figuring out complicated SQL queries or massaging query results to fit their needs.\n\nThere's another argument to be made against SQL in application development. The power of SQL can be a blessing if you know exactly what you're doing, but its complexity can be a curse. There are a lot of anti-patterns and pitfalls that even experienced SQL users struggle to anticipate, often at the cost of performance and hours of debugging time.\n\nDevelopers should be able to ask for the data they need instead of having to worry about \"doing the right thing\" in their SQL queries. They should be using an abstraction that makes the right decisions for them. This can mean that the abstraction imposes certain \"healthy\" constraints that prevent developers from making mistakes.\n\n\n\ndrizzle رو خودت پر کن\n\n\nnode.js vs express.js\n90+ Express.js Interview Questions\n\nhat are Express.js interview questions?\nExpress.js interview questions are designed to assess a candidate's understanding of the Express.js framework, which is a web application framework for Node.js. These questions typically cover topics such as middleware, routing, error handling, and performance optimization to gauge the candidate's proficiency and problem-solving skills in building web applications using Express.js.\n\nWhy do interviewers ask Express.js questions?\nThe main purpose of Express.js interview questions is to evaluate a candidate's expertise in using the Express.js framework to build efficient and scalable web applications. Interviewers ask these questions to determine the candidate's ability to handle real-world scenarios, optimize performance, and effectively manage middleware and routing within the framework.\n\n91 Express.js Interview Questions\nWhat is Express.js and how does it differ from Node.js?\nHow do you set up a basic Express.js server?\nExplain the concept of middleware in Express.js. Can you provide an example?\nHow do you handle routing in Express.js? Write a simple route that responds with \"Hello World\".\nWhat are the different types of HTTP methods supported by Express.js? Provide examples of how to use them.\nHow can you serve static files in an Express.js application?\nWrite a middleware function that logs the request method and URL.\nHow do you handle errors in Express.js? Write a custom error-handling middleware.\nExplain how to use Express.js with a template engine like EJS. Provide a simple example.\nHow do you parse JSON request bodies in Express.js?\nWrite a simple Express.js application that connects to a MongoDB database using Mongoose.\nHow can you implement user authentication in an Express.js application? Describe the process.\nWhat is CORS and how can you enable it in an Express.js application?\nWrite a route that accepts query parameters and returns a JSON response based on those parameters.\nHow do you implement file uploads in Express.js? Provide a code example using multer.\nExplain the purpose of the app.use() method in Express.js. Provide an example of its usage.\nHow can you set up environment variables in an Express.js application?\nWrite a simple API endpoint that performs CRUD operations on a resource (e.g., books).\nHow do you implement session management in an Express.js application?\nExplain the concept of routing parameters in Express.js. Provide an example of how to use them.\nWrite a middleware that restricts access to certain routes based on user roles.\nHow can you implement rate limiting in an Express.js application?\nDescribe how to use Promises or async/await in Express.js for handling asynchronous operations.\nWrite a test case for an Express.js route using a testing framework like Mocha or Jest.\nHow do you deploy an Express.js application to a cloud service like Heroku?\nHow do you implement request validation in Express.js using a library like Joi or express-validator?\nHow do you handle database transactions in Express.js applications?\nHow do you implement caching strategies in an Express.js application?\nHow do you implement WebSocket support in an Express.js application using Socket.io?\nHow do you implement API versioning in Express.js applications?\nHow do you implement data compression in Express.js applications?\nHow do you implement content negotiation in Express.js applications?\nHow do you implement request logging and monitoring in Express.js applications?\nHow do you handle graceful shutdowns in Express.js applications?\nHow do you implement health checks in Express.js applications?\nHow do you implement custom response headers and security headers in Express.js?\nHow do you implement request timeout handling in Express.js applications?\nHow do you implement request/response transformation middleware in Express.js?\nHow do you implement database connection pooling in Express.js applications?\nHow do you implement API documentation in Express.js applications using Swagger/OpenAPI?\nHow do you implement multi-tenant architecture in Express.js applications?\nHow do you implement custom middleware chains and conditional middleware in Express.js?\nHow do you implement file streaming and large file handling in Express.js?\nHow do you implement custom error classes and error handling strategies in Express.js?\nHow do you implement background job processing in Express.js applications?\nHow do you implement request deduplication and idempotency in Express.js APIs?\nHow do you implement webhook handling and verification in Express.js?\nHow do you implement custom authentication strategies beyond basic authentication in Express.js?\nHow do you implement response caching and ETags in Express.js applications?\nHow do you implement custom routing patterns and route matching in Express.js?\nHow do you implement distributed tracing and request correlation in Express.js?\nHow do you implement custom serialization and deserialization in Express.js APIs?\nHow do you implement real-time notifications and server-sent events in Express.js?\nHow do you implement custom protocol handlers and content parsers in Express.js?\nHow do you implement performance monitoring and profiling in Express.js applications?\nHow do you implement database migration and schema management in Express.js applications?\nHow do you implement custom validation rules and sanitization in Express.js?\nHow do you implement load balancing and clustering in Express.js applications?\nHow do you implement custom middleware for request/response transformation and data enrichment?\nHow do you implement custom security middleware and protection mechanisms in Express.js?\nHow do you implement graceful error recovery and circuit breaker patterns in Express.js?\nHow do you implement custom metrics collection and business intelligence in Express.js?\nHow do you implement content delivery optimization and edge caching in Express.js?\nHow do you implement custom deployment strategies and zero-downtime deployments for Express.js?\nHow do you implement advanced testing strategies including integration and E2E testing for Express.js?\nHow do you implement custom routing algorithms and dynamic route generation in Express.js?\nHow do you implement advanced security auditing and compliance tracking in Express.js?\nHow do you implement custom plugin architectures and extensibility in Express.js applications?\nHow do you implement advanced data synchronization and conflict resolution in Express.js?\nHow do you implement custom communication protocols and message queuing in Express.js?\nHow do you implement advanced performance optimization and resource management in Express.js?\nHow do you implement custom development tools and debugging utilities for Express.js?\nHow do you implement advanced internationalization and localization in Express.js?\nHow do you implement advanced API gateway patterns and service mesh integration in Express.js?\nHow do you implement advanced machine learning integration and AI services in Express.js?\nHow do you implement advanced blockchain integration and cryptocurrency features in Express.js?\nHow do you implement advanced DevOps automation and infrastructure as code for Express.js?\nHow do you implement advanced data analytics and business intelligence dashboards in Express.js?\nHow do you implement advanced content management and digital asset management in Express.js?\nHow do you implement advanced e-commerce features and payment processing in Express.js?\nHow do you implement advanced gaming features and real-time multiplayer in Express.js?\nHow do you implement advanced IoT device management and sensor data processing in Express.js?\nHow do you implement advanced social media integration and community features in Express.js?\nHow do you implement advanced healthcare and medical data management in Express.js?\nHow do you implement advanced education and learning management systems in Express.js?\nHow do you implement advanced financial services and trading platforms in Express.js?\nHow do you implement advanced supply chain and logistics management in Express.js?\nHow do you implement advanced energy management and smart grid systems in Express.js?\nHow do you implement advanced transportation and mobility solutions in Express.js?\nHow do you implement advanced environmental monitoring and sustainability tracking in Express.js?\nWhat is your vision for the future of Express.js development and how do you prepare for emerging trends?"
  },
  {
    "id": "1167",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Express.js and how does it differ from Node.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your foundational understanding of Express.js and its relationship with Node.js, which is crucial for roles involving backend development using JavaScript frameworks.\n\nHow to answer:\n\nDefine Express.js as a web application framework for Node.js.\nExplain that Node.js is a runtime environment for executing JavaScript on the server side.\nHighlight that Express.js simplifies the process of building web applications by providing a robust set of features for web and mobile applications.\nExample answer:\n\n\"Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications. While Node.js is a runtime environment that allows JavaScript to be executed on the server side, Express.js simplifies the process of building web applications by offering a higher level of abstraction.\""
  },
  {
    "id": "1168",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you set up a basic Express.js server?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your practical knowledge and hands-on experience with setting up a basic Express.js server, which is fundamental for backend development roles, such as a Full Stack Developer.\n\nHow to answer:\n\nExplain that you need to install Express.js using npm.\nMention creating a basic server file and importing Express.js.\nDescribe setting up a route and starting the server to listen on a specific port.\nExample answer:\n\n\"To set up a basic Express.js server, you first need to install Express.js using npm. Then, create a server file, import Express.js, set up a route, and start the server to listen on a specific port.\""
  },
  {
    "id": "1169",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of middleware in Express.js. Can you provide an example?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of middleware functions in Express.js, which are crucial for handling requests and responses in web applications, especially for roles like Backend Developer.\n\nHow to answer:\n\nDefine middleware as functions that have access to the request and response objects.\nExplain that middleware functions can modify the request and response objects or end the request-response cycle.\nProvide a simple example of a logging middleware that logs the request method and URL.\nExample answer:\n\n\"Middleware in Express.js are functions that have access to the request and response objects, and they can modify these objects or end the request-response cycle. For example, a simple logging middleware can be written as app.use((req, res, next) => { console.log(`${req.method} ${req.url}`); next(); });.\""
  },
  {
    "id": "1170",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle routing in Express.js? Write a simple route that responds with \"Hello World\".",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your practical skills in setting up routes in Express.js, which is essential for roles involving backend development, such as a Full Stack Developer.\n\nHow to answer:\n\nMention importing Express.js and creating an instance of the app.\nDescribe setting up a route using the app.get() method.\nExplain starting the server to listen on a specific port.\nExample answer:\n\n\"To handle routing in Express.js, you first need to import Express.js and create an instance of the app. Then, you can set up a route using the app.get('/hello', (req, res) => { res.send('Hello World'); }); method and start the server to listen on a specific port.\""
  },
  {
    "id": "1171",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the different types of HTTP methods supported by Express.js? Provide examples of how to use them.",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of HTTP methods and their implementation in Express.js, which is crucial for roles involving API development, such as a Backend Developer.\n\nHow to answer:\n\nList the common HTTP methods such as GET, POST, PUT, DELETE.\nProvide a brief description of each method's purpose.\nInclude a simple code example for each method using Express.js.\nExample answer:\n\n\"Express.js supports various HTTP methods such as GET, POST, PUT, and DELETE. For example, you can use app.get('/example', (req, res) => { res.send('GET request'); }); for handling GET requests.\""
  },
  {
    "id": "1172",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you serve static files in an Express.js application?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to efficiently serve static assets, which is crucial for roles involving web development, such as a Frontend Developer.\n\nHow to answer:\n\nMention using the built-in middleware function express.static.\nExplain that you need to specify the directory where the static files are located.\nProvide a simple code example using app.use(express.static('public')).\nExample answer:\n\n\"To serve static files in an Express.js application, you can use the built-in middleware function express.static. For example, you can specify the directory where the static files are located using app.use(express.static('public')).\""
  },
  {
    "id": "1173",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Write a middleware function that logs the request method and URL.",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your ability to create custom middleware functions for logging purposes, which is essential for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nDefine middleware as functions that have access to the request and response objects.\nExplain that middleware functions can perform operations on the request and response objects or end the request-response cycle.\nProvide a simple example of a logging middleware that logs the request method and URL.\nExample answer:\n\n\"To write a middleware function that logs the request method and URL, you can use the following code: app.use((req, res, next) => { console.log(`${req.method} ${req.url}`); next(); }); This middleware will log every incoming request's method and URL to the console.\""
  },
  {
    "id": "1174",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle errors in Express.js? Write a custom error-handling middleware.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to manage errors effectively in Express.js applications, which is crucial for ensuring robust and reliable backend systems, especially in roles like Backend Developer.\n\nHow to answer:\n\nExplain the importance of error handling in web applications.\nMention using a custom error-handling middleware function.\nProvide a simple code example demonstrating the middleware.\nExample answer:\n\n\"Handling errors in Express.js is crucial for building robust applications. You can create a custom error-handling middleware by defining a function with four parameters: err, req, res, next.\""
  },
  {
    "id": "1175",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain how to use Express.js with a template engine like EJS. Provide a simple example.",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your ability to integrate template engines with Express.js for dynamic content rendering, which is essential for roles involving full-stack development, such as a Full Stack Developer.\n\nHow to answer:\n\nMention installing EJS using npm.\nExplain setting the view engine to EJS in the Express.js app.\nProvide a simple example of rendering an EJS template with dynamic data.\nExample answer:\n\n\"To use Express.js with a template engine like EJS, you first need to install EJS using npm. Then, set the view engine to EJS in your Express.js app and render an EJS template with dynamic data using res.render('template', { data: 'value' }).\""
  },
  {
    "id": "1176",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you parse JSON request bodies in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to handle JSON data in Express.js applications, which is essential for roles involving API development, such as a Backend Developer.\n\nHow to answer:\n\nMention using the built-in middleware express.json().\nExplain that this middleware parses incoming JSON requests and makes the data available in req.body.\nProvide a simple code example using app.use(express.json()).\nExample answer:\n\n\"To parse JSON request bodies in Express.js, you can use the built-in middleware express.json(). This middleware parses incoming JSON requests and makes the data available in req.body.\""
  },
  {
    "id": "1177",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Write a simple Express.js application that connects to a MongoDB database using Mongoose.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to integrate Express.js with a MongoDB database using Mongoose, which is crucial for roles involving full-stack development, such as a Full Stack Developer.\n\nHow to answer:\n\nMention installing Mongoose using npm.\nExplain creating a Mongoose model for the database schema.\nDescribe connecting to the MongoDB database and performing basic CRUD operations.\nExample answer:\n\n\"To write a simple Express.js application that connects to a MongoDB database using Mongoose, you first need to install Mongoose using npm. Then, create a Mongoose model for the database schema, connect to the MongoDB database, and perform basic CRUD operations.\""
  },
  {
    "id": "1178",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you implement user authentication in an Express.js application? Describe the process.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to implement secure user authentication mechanisms in Express.js applications, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nMention using a library like Passport.js for authentication.\nExplain setting up user registration and login routes.\nDescribe protecting routes using authentication middleware.\nExample answer:\n\n\"To implement user authentication in an Express.js application, you can use a library like Passport.js. First, set up user registration and login routes, then protect routes using authentication middleware.\""
  },
  {
    "id": "1179",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is CORS and how can you enable it in an Express.js application?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of cross-origin resource sharing (CORS) and its implementation in Express.js, which is crucial for roles involving API development, such as a Backend Developer.\n\nHow to answer:\n\nDefine CORS as a security feature that allows or restricts resources on a web server to be requested from another domain.\nExplain that CORS is implemented using HTTP headers to specify which origins are permitted to access resources.\nMention using the cors middleware in Express.js to enable CORS by simply adding app.use(cors()) to the application.\nExample answer:\n\n\"CORS, or Cross-Origin Resource Sharing, is a security feature that allows or restricts resources on a web server to be requested from another domain. In Express.js, you can enable CORS by using the cors middleware and adding app.use(cors()) to your application.\""
  },
  {
    "id": "1180",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Write a route that accepts query parameters and returns a JSON response based on those parameters.",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your ability to handle dynamic data in Express.js applications, which is crucial for roles involving API development, such as a Backend Developer.\n\nHow to answer:\n\nMention using the req.query object to access query parameters.\nExplain creating a route that extracts these parameters and processes them.\nDescribe sending a JSON response using res.json() with the processed data.\nExample answer:\n\n\"To write a route that accepts query parameters and returns a JSON response based on those parameters, you can use the req.query object to access the query parameters. For example, you can create a route like app.get('/data', (req, res) => { const { name, age } = req.query; res.json({ name, age }); });.\""
  },
  {
    "id": "1181",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement file uploads in Express.js? Provide a code example using multer.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to handle file uploads in Express.js applications, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nMention installing the multer middleware using npm.\nExplain setting up multer to handle file uploads and specifying the destination folder.\nProvide a simple code example demonstrating a route that handles file uploads using multer.\nExample answer:\n\n\"To implement file uploads in Express.js, you can use the multer middleware. First, install multer using npm, then set it up to handle file uploads and specify the destination folder.\"\n\n\"For example, you can create a route like app.post('/upload', upload.single('file'), (req, res) => { res.send('File uploaded successfully'); });.\""
  },
  {
    "id": "1182",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the purpose of the `app.use()` method in Express.js. Provide an example of its usage.",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of middleware integration in Express.js, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nDefine app.use() as a method for mounting middleware functions.\nExplain that it can be used to set up middleware for all routes or specific routes.\nProvide a simple example using app.use(express.json()) to parse JSON request bodies.\nExample answer:\n\n\"The app.use() method in Express.js is used to mount middleware functions at a specified path. For example, you can use app.use(express.json()) to parse JSON request bodies for all incoming requests.\""
  },
  {
    "id": "1183",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you set up environment variables in an Express.js application?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to manage configuration settings securely and efficiently in an Express.js application, which is crucial for roles involving backend development, such as a DevOps Engineer.\n\nHow to answer:\n\nMention using a package like dotenv to load environment variables from a .env file.\nExplain creating a .env file and adding key-value pairs for configuration settings.\nDescribe requiring and configuring dotenv at the beginning of your application file using require('dotenv').config().\nExample answer:\n\n\"To set up environment variables in an Express.js application, you can use a package like dotenv to load environment variables from a .env file. First, create a .env file with key-value pairs for your configuration settings, then require and configure dotenv at the beginning of your application file using require('dotenv').config().\""
  },
  {
    "id": "1184",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Write a simple API endpoint that performs CRUD operations on a resource (e.g., books).",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to implement basic CRUD operations in an Express.js application, which is essential for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nMention setting up Express.js and connecting to a database like MongoDB.\nExplain creating routes for each CRUD operation: Create, Read, Update, and Delete.\nProvide a brief code example for each route using Mongoose models.\nExample answer:\n\n\"To write a simple API endpoint that performs CRUD operations on a resource like books, you can set up routes for Create, Read, Update, and Delete operations using Express.js and Mongoose. For example, you can create a route for adding a new book using app.post('/books', (req, res) => { const newBook = new Book(req.body); newBook.save().then(book => res.status(201).json(book)).catch(err => res.status(400).json(err)); });.\""
  },
  {
    "id": "1185",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement session management in an Express.js application?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to manage user sessions effectively in Express.js applications, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nMention using a session management library like express-session.\nExplain configuring the session middleware with options like secret, resave, and saveUninitialized.\nDescribe initializing the session middleware in your Express.js application using app.use(session({...})).\nExample answer:\n\n\"To implement session management in an Express.js application, you can use a session management library like express-session. First, configure the session middleware with options like secret, resave, and saveUninitialized, then initialize it in your Express.js application using app.use(session({ secret: 'yourSecret', resave: false, saveUninitialized: true })).\""
  },
  {
    "id": "1186",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of routing parameters in Express.js. Provide an example of how to use them.",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your ability to handle dynamic routing in Express.js, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nDefine routing parameters as placeholders in route paths that capture values from the URL.\nExplain that these parameters are accessed using req.params in the route handler.\nProvide a simple example using app.get('/user/:id', (req, res) => { res.send(`User ID: ${req.params.id}`); });.\nExample answer:\n\n\"Routing parameters in Express.js are placeholders in route paths that capture values from the URL. For example, you can use app.get('/user/:id', (req, res) => { res.send(`User ID: ${req.params.id}`); }); to capture the user ID from the URL.\""
  },
  {
    "id": "1187",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Write a middleware that restricts access to certain routes based on user roles.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to implement role-based access control in Express.js applications, which is crucial for ensuring security and proper authorization, especially in roles like a Backend Developer.\n\nHow to answer:\n\nMention creating a middleware function that checks the user's role.\nExplain using the req.user object to access the user's role.\nDescribe sending a 403 Forbidden response if the user does not have the required role.\nExample answer:\n\n\"To write a middleware that restricts access to certain routes based on user roles, you can create a function that checks the user's role from the req.user object. If the user does not have the required role, send a 403 Forbidden response using res.status(403).send('Forbidden').\""
  },
  {
    "id": "1188",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can you implement rate limiting in an Express.js application?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to prevent abuse and ensure fair usage of resources in an Express.js application, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nMention using a middleware like express-rate-limit.\nExplain configuring the rate limiter with options like windowMs and max.\nDescribe applying the rate limiter middleware to specific routes or globally.\nExample answer:\n\n\"To implement rate limiting in an Express.js application, you can use a middleware like express-rate-limit. First, configure the rate limiter with options like windowMs and max, then apply it to specific routes or globally using app.use(rateLimit({...})).\""
  },
  {
    "id": "1189",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe how to use Promises or async/await in Express.js for handling asynchronous operations.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to handle asynchronous operations in Express.js, which is crucial for ensuring efficient and non-blocking code execution, especially in roles like Backend Developer.\n\nHow to answer:\n\nMention using Promises to handle asynchronous operations by chaining .then() and .catch() methods.\nExplain that async/await provides a more readable and concise way to handle asynchronous code by using the async keyword before functions and await before promises.\nProvide a simple example demonstrating both approaches in an Express.js route handler.\nExample answer:\n\n\"To handle asynchronous operations in Express.js, you can use Promises by chaining .then() and .catch() methods, or use async/await for a more readable approach. For example, you can write an async route handler like app.get('/data', async (req, res) => { try { const data = await fetchData(); res.json(data); } catch (error) { res.status(500).send(error.message); } });.\""
  },
  {
    "id": "1190",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Write a test case for an Express.js route using a testing framework like Mocha or Jest.",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to write and execute test cases for Express.js routes, ensuring code quality and reliability, which is crucial for roles involving backend development, such as a Backend Developer.\n\nHow to answer:\n\nMention installing the testing framework like Mocha or Jest using npm.\nExplain writing a test case for an Express.js route using the framework's syntax.\nDescribe running the test and checking the output to ensure the route works as expected.\nExample answer:\n\n\"To write a test case for an Express.js route using Mocha, you first need to install Mocha and Chai using npm. Then, create a test file and use Mocha's describe and it functions along with Chai's expect to write and run the test.\""
  },
  {
    "id": "1191",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you deploy an Express.js application to a cloud service like Heroku?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your practical knowledge of deploying web applications to cloud services, which is crucial for ensuring scalability and availability, especially in roles like a DevOps Engineer.\n\nHow to answer:\n\nMention creating a Procfile to specify the command to run the application.\nExplain setting up environment variables in the Heroku dashboard.\nDescribe pushing the code to Heroku using Git for deployment.\nExample answer:\n\n\"To deploy an Express.js application to Heroku, you first need to create a Procfile that specifies the command to run your application, such as web: node app.js. Then, push your code to Heroku using Git, and set up any necessary environment variables in the Heroku dashboard.\""
  },
  {
    "id": "1192",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement request validation in Express.js using a library like Joi or express-validator?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to ensure data integrity and security through proper input validation, which is crucial for roles involving API development and backend security.\n\nHow to answer:\n\nMention installing a validation library like Joi or express-validator.\nExplain creating validation schemas for request data.\nDescribe implementing validation middleware that checks incoming requests.\nExample answer: \"To implement request validation in Express.js, you can use a library like Joi or express-validator. First, create validation schemas for your request data, then implement middleware that validates incoming requests against these schemas before processing them.\""
  },
  {
    "id": "1193",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle database transactions in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of data consistency and atomicity in database operations, which is crucial for roles involving complex data management and backend development.\n\nHow to answer:\n\nExplain the importance of transactions for maintaining data consistency.\nMention using database-specific transaction methods or ORM transaction support.\nDescribe implementing transaction rollback in case of errors.\nExample answer: \"To handle database transactions in Express.js, I use the transaction support provided by ORMs like Sequelize or Mongoose. I wrap related database operations in a transaction, ensuring that either all operations succeed or all are rolled back in case of an error, maintaining data consistency.\""
  },
  {
    "id": "1194",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement caching strategies in an Express.js application?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to optimize application performance through effective caching mechanisms, which is crucial for roles involving high-performance backend development.\n\nHow to answer:\n\nDiscuss different caching strategies like in-memory caching, Redis, and HTTP caching.\nExplain implementing cache middleware for routes.\nMention cache invalidation strategies and TTL settings.\nExample answer: \"I implement caching in Express.js applications using multiple strategies: Redis for distributed caching, in-memory caching for frequently accessed data, and HTTP caching headers for client-side caching. I also implement cache invalidation strategies based on data updates.\""
  },
  {
    "id": "1195",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement WebSocket support in an Express.js application using Socket.io?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your ability to implement real-time features in web applications, which is increasingly important for modern interactive applications and roles involving full-stack development.\n\nHow to answer:\n\nMention installing Socket.io and integrating it with Express.js server.\nExplain setting up WebSocket event handlers for real-time communication.\nDescribe implementing features like chat rooms or live updates.\nExample answer: \"To implement WebSocket support in Express.js, I install Socket.io and integrate it with the Express server. I set up event handlers for real-time communication, enabling features like live chat, real-time notifications, and collaborative editing.\""
  },
  {
    "id": "1196",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement API versioning in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of API evolution and backward compatibility, which is crucial for roles involving long-term API maintenance and enterprise development.\n\nHow to answer:\n\nDiscuss different versioning strategies like URL path versioning, header versioning, or query parameter versioning.\nExplain organizing code to support multiple API versions simultaneously.\nMention implementing version-specific middleware and route handlers.\nExample answer: \"I implement API versioning in Express.js using URL path versioning, organizing routes under /api/v1/, /api/v2/, etc. I maintain separate router modules for each version and implement middleware to route requests to the appropriate version handlers.\""
  },
  {
    "id": "1197",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement data compression in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your knowledge of performance optimization techniques, which is important for roles involving high-traffic applications and performance engineering.\n\nHow to answer:\n\nMention using the compression middleware to enable gzip compression.\nExplain configuring compression settings for different content types.\nDescribe the benefits of compression for reducing bandwidth and improving response times.\nExample answer: \"I implement data compression in Express.js using the compression middleware, which automatically compresses response bodies using gzip. This significantly reduces bandwidth usage and improves response times, especially for text-based content like JSON and HTML.\""
  },
  {
    "id": "1198",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement content negotiation in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of RESTful API principles and your ability to build flexible APIs that can serve different content formats, which is important for roles involving API design and development.\n\nHow to answer:\n\nExplain using the Accept header to determine the client's preferred content type.\nMention implementing format-specific response handlers.\nDescribe using Express.js format method for content negotiation.\nExample answer: \"I implement content negotiation in Express.js by examining the Accept header and using the res.format() method to serve different content types. This allows the API to respond with JSON, XML, or HTML based on the client's preferences.\""
  },
  {
    "id": "1199",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement request logging and monitoring in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of application observability and debugging practices, which is crucial for roles involving production system maintenance and DevOps.\n\nHow to answer:\n\nMention using logging libraries like Morgan for HTTP request logging.\nExplain implementing structured logging with libraries like Winston.\nDescribe integrating with monitoring services for application performance tracking.\nExample answer: \"I implement request logging using Morgan middleware for HTTP request logging and Winston for structured application logging. I also integrate with monitoring services like New Relic or DataDog to track application performance and errors in production.\""
  },
  {
    "id": "1200",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle graceful shutdowns in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of production deployment best practices and system reliability, which is important for roles involving DevOps and backend infrastructure management.\n\nHow to answer:\n\nExplain implementing signal handlers for SIGTERM and SIGINT.\nMention closing database connections and stopping background tasks.\nDescribe implementing a grace period for completing ongoing requests.\nExample answer: \"I implement graceful shutdowns in Express.js by listening for SIGTERM and SIGINT signals, then closing the server, database connections, and completing ongoing requests within a grace period before terminating the process.\""
  },
  {
    "id": "1201",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement health checks in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of application monitoring and deployment practices, which is crucial for roles involving production systems and DevOps.\n\nHow to answer:\n\nMention creating dedicated health check endpoints.\nExplain checking application dependencies like databases and external services.\nDescribe implementing different types of health checks (liveness, readiness).\nExample answer: \"I implement health checks by creating dedicated endpoints like /health and /ready that verify application and dependency status. These endpoints check database connectivity, external service availability, and application state for monitoring and orchestration systems.\""
  },
  {
    "id": "1202",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom response headers and security headers in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of web security practices and HTTP protocol customization, which is important for roles involving security-conscious application development.\n\nHow to answer:\n\nMention using helmet middleware for security headers.\nExplain setting custom headers using res.set() or res.header().\nDescribe implementing headers like Content-Security-Policy and HSTS.\nExample answer: \"I implement security headers using the helmet middleware, which automatically sets headers like X-Content-Type-Options and X-Frame-Options. I also set custom headers using res.set() and implement Content-Security-Policy for XSS protection.\""
  },
  {
    "id": "1203",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement request timeout handling in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of request lifecycle management and application reliability, which is important for roles involving high-availability systems and performance optimization.\n\nHow to answer:\n\nMention using timeout middleware or manual timeout implementation.\nExplain setting different timeout values for different routes.\nDescribe handling timeout errors and providing appropriate responses.\nExample answer: \"I implement request timeout handling using middleware that sets a timer for each request and cancels it if the request takes too long. I configure different timeout values for different routes based on their expected processing time.\""
  },
  {
    "id": "1204",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement request/response transformation middleware in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your ability to manipulate data flow in APIs and implement cross-cutting concerns, which is important for roles involving API gateway development and data transformation.\n\nHow to answer:\n\nExplain creating middleware that modifies request or response data.\nMention implementing data format conversions or field transformations.\nDescribe using middleware for consistent API response formatting.\nExample answer: \"I implement transformation middleware that modifies request/response data, such as converting field names, formatting dates, or standardizing API response structures. This ensures consistent data formats across the application.\""
  },
  {
    "id": "1205",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement database connection pooling in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of database performance optimization and connection management, which is crucial for roles involving high-load applications and database administration.\n\nHow to answer:\n\nExplain configuring connection pool settings in database drivers.\nMention monitoring connection pool metrics.\nDescribe optimizing pool size based on application load.\nExample answer: \"I implement database connection pooling by configuring pool settings in database drivers like mongoose or sequelize, setting appropriate pool sizes, timeouts, and monitoring connection usage to optimize performance and prevent connection exhaustion.\""
  },
  {
    "id": "1206",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement API documentation in Express.js applications using Swagger/OpenAPI?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of API documentation best practices and developer experience, which is important for roles involving API development and team collaboration.\n\nHow to answer:\n\nMention using swagger-jsdoc and swagger-ui-express packages.\nExplain documenting routes with JSDoc comments or YAML specifications.\nDescribe generating interactive API documentation.\nExample answer: \"I implement API documentation using swagger-jsdoc to generate OpenAPI specifications from JSDoc comments and swagger-ui-express to serve interactive documentation. This provides developers with comprehensive API documentation and testing capabilities.\""
  },
  {
    "id": "1207",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement multi-tenant architecture in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of scalable application architecture and data isolation strategies, which is important for roles involving SaaS development and enterprise applications.\n\nHow to answer:\n\nExplain implementing tenant identification through subdomains, headers, or URL paths.\nMention implementing data isolation strategies.\nDescribe tenant-specific configuration and middleware.\nExample answer: \"I implement multi-tenancy by identifying tenants through subdomains or headers, then using middleware to set tenant context and ensure data isolation through tenant-specific database connections or query filters.\""
  },
  {
    "id": "1208",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom middleware chains and conditional middleware in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your advanced understanding of middleware patterns and request processing flexibility, which is important for roles involving complex application architecture and custom framework development.\n\nHow to answer:\n\nExplain creating middleware that conditionally executes based on request properties.\nMention implementing middleware factories for reusable conditional logic.\nDescribe organizing complex middleware chains for different route groups.\nExample answer: \"I implement conditional middleware by creating functions that return middleware based on conditions, such as user roles or request properties. I also organize middleware chains using router-level middleware for different route groups.\""
  },
  {
    "id": "1209",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement file streaming and large file handling in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of memory-efficient file processing and handling large data transfers, which is important for roles involving media applications and data processing systems.\n\nHow to answer:\n\nMention using Node.js streams for memory-efficient file processing.\nExplain implementing range requests for partial content delivery.\nDescribe handling file upload/download progress and chunked transfers.\nExample answer: \"I implement file streaming using Node.js streams and the pipeline method for memory-efficient processing. I also implement range requests for large file downloads and use multer for handling chunked file uploads.\""
  },
  {
    "id": "1210",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom error classes and error handling strategies in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of robust error management and application reliability, which is crucial for roles involving production system development and maintenance.\n\nHow to answer:\n\nExplain creating custom error classes with specific error types and codes.\nMention implementing centralized error handling with detailed logging.\nDescribe error response formatting and user-friendly error messages.\nExample answer: \"I implement custom error classes that extend the Error class with specific error types and codes. I use centralized error handling middleware to log errors, format responses, and provide appropriate HTTP status codes based on error types.\""
  },
  {
    "id": "1211",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement background job processing in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of asynchronous processing and system scalability, which is important for roles involving high-performance applications and distributed systems.\n\nHow to answer:\n\nMention using job queue libraries like Bull or Agenda.\nExplain implementing job scheduling and retry mechanisms.\nDescribe monitoring job status and handling job failures.\nExample answer: \"I implement background job processing using libraries like Bull with Redis for job queuing. I set up job processors, implement retry logic for failed jobs, and monitor job status through dashboards for reliable asynchronous processing.\""
  },
  {
    "id": "1212",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement request deduplication and idempotency in Express.js APIs?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of API reliability and data consistency, which is important for roles involving financial systems and critical business applications.\n\nHow to answer:\n\nExplain using idempotency keys to identify duplicate requests.\nMention implementing request caching and response replication.\nDescribe handling concurrent requests and race conditions.\nExample answer: \"I implement idempotency by using client-provided idempotency keys to identify duplicate requests. I cache successful responses and return the same result for repeated requests, ensuring API operations are safe to retry.\""
  },
  {
    "id": "1213",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement webhook handling and verification in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of event-driven architectures and secure third-party integrations, which is important for roles involving payment processing and external service integrations.\n\nHow to answer:\n\nMention implementing webhook signature verification for security.\nExplain handling webhook payload parsing and validation.\nDescribe implementing retry logic and webhook event processing.\nExample answer: \"I implement webhook handling by verifying signatures using HMAC validation, parsing and validating payloads, and implementing asynchronous processing to handle webhook events reliably without blocking the response.\""
  },
  {
    "id": "1214",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom authentication strategies beyond basic authentication in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of advanced security implementations and modern authentication patterns, which is important for roles involving enterprise security and identity management.\n\nHow to answer:\n\nMention implementing OAuth 2.0 and OpenID Connect flows.\nExplain multi-factor authentication and biometric authentication.\nDescribe token-based authentication with refresh tokens.\nExample answer: \"I implement advanced authentication using Passport.js with custom strategies for OAuth 2.0, SAML, and multi-factor authentication. I also implement JWT-based authentication with refresh tokens and secure token storage.\""
  },
  {
    "id": "1215",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement response caching and ETags in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of HTTP caching mechanisms and performance optimization, which is important for roles involving high-traffic applications and web performance optimization.\n\nHow to answer:\n\nExplain implementing ETag generation for cache validation.\nMention using conditional requests with If-None-Match headers.\nDescribe implementing cache-control headers and cache policies.\nExample answer: \"I implement response caching using ETags for cache validation and conditional requests. I set appropriate cache-control headers and implement cache policies based on content types and update frequencies to optimize client-side caching.\""
  },
  {
    "id": "1216",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom routing patterns and route matching in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of advanced routing capabilities and URL pattern matching, which is important for roles involving complex web applications and custom framework development.\n\nHow to answer:\n\nExplain implementing custom route parameters and pattern matching.\nMention using regular expressions in route definitions.\nDescribe creating dynamic route handlers and route generators.\nExample answer: \"I implement custom routing patterns using regular expressions and custom parameter matching. I create route generators for dynamic routes and implement nested routing with custom middleware for complex URL structures.\""
  },
  {
    "id": "1217",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement distributed tracing and request correlation in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of microservices observability and debugging complex distributed systems, which is important for roles involving cloud-native applications and DevOps.\n\nHow to answer:\n\nMention implementing correlation IDs for request tracking.\nExplain integrating with tracing systems like Jaeger or Zipkin.\nDescribe propagating trace context across service boundaries.\nExample answer: \"I implement distributed tracing by generating correlation IDs for each request and propagating them through service calls. I integrate with tracing systems like Jaeger to visualize request flows and identify performance bottlenecks across microservices.\""
  },
  {
    "id": "1218",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom serialization and deserialization in Express.js APIs?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of data transformation and API design patterns, which is important for roles involving complex data structures and external system integrations.\n\nHow to answer:\n\nExplain implementing custom JSON serializers for complex objects.\nMention handling circular references and data transformation.\nDescribe implementing format-specific serialization (XML, CSV, etc.).\nExample answer: \"I implement custom serialization using transformer functions that handle complex object relationships and circular references. I create format-specific serializers for different content types and implement data filtering based on user permissions.\""
  },
  {
    "id": "1219",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement real-time notifications and server-sent events in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of real-time communication patterns and modern web technologies, which is important for roles involving interactive applications and live data streaming.\n\nHow to answer:\n\nMention implementing Server-Sent Events (SSE) for one-way communication.\nExplain setting up event streams and managing client connections.\nDescribe implementing notification queues and event broadcasting.\nExample answer: \"I implement real-time notifications using Server-Sent Events for one-way communication from server to client. I manage client connections, implement event queues, and broadcast notifications to specific users or groups based on subscription patterns.\""
  },
  {
    "id": "1220",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom protocol handlers and content parsers in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to evaluate your understanding of extending Express.js capabilities and handling non-standard protocols, which is important for roles involving specialized applications and legacy system integrations.\n\nHow to answer:\n\nExplain creating custom body parsers for specific content types.\nMention implementing protocol-specific request handlers.\nDescribe extending Express.js with custom middleware for specialized protocols.\nExample answer: \"I implement custom protocol handlers by creating middleware that parses specific content types and handles non-standard protocols. I extend Express.js capabilities with custom body parsers and protocol-specific request processing logic.\""
  },
  {
    "id": "1221",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement performance monitoring and profiling in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of application performance optimization and production monitoring, which is important for roles involving high-performance systems and DevOps.\n\nHow to answer:\n\nMention implementing custom metrics collection and performance counters.\nExplain integrating with APM tools and monitoring services.\nDescribe profiling middleware and performance bottleneck identification.\nExample answer: \"I implement performance monitoring using custom middleware to collect metrics like response times and throughput. I integrate with APM tools like New Relic and implement profiling to identify performance bottlenecks and optimize critical paths.\""
  },
  {
    "id": "1222",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement database migration and schema management in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of database evolution and deployment practices, which is important for roles involving database administration and application lifecycle management.\n\nHow to answer:\n\nExplain implementing migration scripts and version control for database schemas.\nMention using migration tools like Knex.js or Sequelize migrations.\nDescribe rollback strategies and migration testing procedures.\nExample answer: \"I implement database migrations using tools like Sequelize CLI or Knex.js to manage schema changes. I create versioned migration scripts, implement rollback procedures, and test migrations in staging environments before production deployment.\""
  },
  {
    "id": "1223",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom validation rules and sanitization in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of data security and input validation best practices, which is important for roles involving secure application development and data protection.\n\nHow to answer:\n\nMention creating custom validator functions for business logic validation.\nExplain implementing input sanitization to prevent injection attacks.\nDescribe validation middleware chains and error handling.\nExample answer: \"I implement custom validation using libraries like Joi with custom validator functions for business-specific rules. I also implement input sanitization using libraries like validator.js to prevent XSS and injection attacks.\""
  },
  {
    "id": "1224",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement load balancing and clustering in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of horizontal scaling and high-availability architectures, which is important for roles involving infrastructure design and performance engineering.\n\nHow to answer:\n\nExplain implementing Node.js clustering for multi-process applications.\nMention using load balancers like Nginx or HAProxy.\nDescribe session sharing strategies for clustered applications.\nExample answer: \"I implement clustering using Node.js cluster module to utilize multiple CPU cores and set up load balancers like Nginx for distributing requests. I use Redis for session sharing across clustered instances to maintain session consistency.\""
  },
  {
    "id": "1225",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom middleware for request/response transformation and data enrichment?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of advanced middleware patterns and data processing pipelines, which is important for roles involving API gateways and data transformation services.\n\nHow to answer:\n\nExplain creating middleware that enriches requests with additional data.\nMention implementing response transformation for consistent API formats.\nDescribe pipeline patterns for sequential data processing.\nExample answer: \"I implement data enrichment middleware that adds user context, geolocation, or other metadata to requests. I also create response transformation middleware that standardizes API response formats and implements consistent error structures.\""
  },
  {
    "id": "1226",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom security middleware and protection mechanisms in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of application security and threat mitigation, which is crucial for roles involving security-sensitive applications and compliance requirements.\n\nHow to answer:\n\nMention implementing custom security headers and CSRF protection.\nExplain input validation and SQL injection prevention.\nDescribe implementing rate limiting and DDoS protection.\nExample answer: \"I implement comprehensive security middleware including CSRF protection, XSS prevention, and SQL injection mitigation. I use helmet for security headers, implement rate limiting, and create custom middleware for input sanitization and threat detection.\""
  },
  {
    "id": "1227",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement graceful error recovery and circuit breaker patterns in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of resilient system design and fault tolerance, which is important for roles involving distributed systems and high-availability applications.\n\nHow to answer:\n\nExplain implementing circuit breaker patterns for external service calls.\nMention retry mechanisms with exponential backoff.\nDescribe fallback strategies and graceful degradation.\nExample answer: \"I implement circuit breaker patterns using libraries like opossum to handle external service failures. I implement retry logic with exponential backoff and fallback mechanisms to ensure graceful degradation when dependencies are unavailable.\""
  },
  {
    "id": "1228",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom metrics collection and business intelligence in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of application analytics and business metrics tracking, which is important for roles involving product development and data-driven decision making.\n\nHow to answer:\n\nMention implementing custom metrics for business KPIs and user behavior.\nExplain integrating with analytics platforms and data warehouses.\nDescribe real-time metrics collection and dashboard integration.\nExample answer: \"I implement custom metrics collection for business KPIs using middleware that tracks user actions, conversion rates, and system performance. I integrate with analytics platforms and implement real-time dashboards for business intelligence.\""
  },
  {
    "id": "1229",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement content delivery optimization and edge caching in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of global content delivery and performance optimization, which is important for roles involving international applications and web performance engineering.\n\nHow to answer:\n\nExplain implementing CDN integration and edge caching strategies.\nMention optimizing static asset delivery and cache headers.\nDescribe implementing geographic content distribution.\nExample answer: \"I implement CDN integration with services like CloudFront or Cloudflare for edge caching. I optimize static asset delivery with appropriate cache headers and implement geographic content distribution for improved global performance.\""
  },
  {
    "id": "1230",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom deployment strategies and zero-downtime deployments for Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of advanced deployment practices and production reliability, which is important for roles involving DevOps and continuous delivery.\n\nHow to answer:\n\nExplain implementing blue-green deployments and rolling updates.\nMention container orchestration with Kubernetes or Docker Swarm.\nDescribe health checks and automated rollback mechanisms.\nExample answer: \"I implement zero-downtime deployments using blue-green deployment strategies with container orchestration. I set up health checks, automated rollback mechanisms, and implement canary releases for gradual feature rollouts.\""
  },
  {
    "id": "1231",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced testing strategies including integration and E2E testing for Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of comprehensive testing practices and quality assurance, which is important for roles involving test automation and software quality engineering.\n\nHow to answer:\n\nMention implementing integration tests with test databases and mocking.\nExplain E2E testing using tools like Cypress or Puppeteer.\nDescribe test data management and automated testing pipelines.\nExample answer: \"I implement comprehensive testing strategies including unit tests with Jest, integration tests with supertest and test databases, and E2E tests using Cypress. I set up automated testing pipelines with proper test data management and parallel test execution.\""
  },
  {
    "id": "1232",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom routing algorithms and dynamic route generation in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of advanced routing patterns and dynamic application architecture, which is important for roles involving content management systems and configurable applications.\n\nHow to answer:\n\nExplain implementing dynamic route registration based on configuration.\nMention creating custom route matching algorithms.\nDescribe implementing route generation from database or CMS content.\nExample answer: \"I implement dynamic route generation by creating routes from database configuration or CMS content. I use custom route matching algorithms and implement route caching for performance optimization in content-driven applications.\""
  },
  {
    "id": "1233",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced security auditing and compliance tracking in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of regulatory compliance and security governance, which is important for roles involving financial services and healthcare applications.\n\nHow to answer:\n\nMention implementing audit trails for all user actions and data changes.\nExplain compliance tracking for regulations like GDPR or HIPAA.\nDescribe security event logging and intrusion detection.\nExample answer: \"I implement comprehensive audit trails that track all user actions and data changes with timestamps and user context. I ensure compliance with regulations like GDPR by implementing data retention policies and providing audit reports for compliance teams.\""
  },
  {
    "id": "1234",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom plugin architectures and extensibility in Express.js applications?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of modular architecture and extensible system design, which is important for roles involving platform development and customizable applications.\n\nHow to answer:\n\nExplain implementing plugin loading and dependency injection.\nMention creating plugin APIs and lifecycle management.\nDescribe implementing plugin sandboxing and security isolation.\nExample answer: \"I implement plugin architectures using dynamic module loading with proper dependency injection. I create plugin APIs with lifecycle hooks and implement security sandboxing to isolate plugin code from the core application.\""
  },
  {
    "id": "1235",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced data synchronization and conflict resolution in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of distributed data management and eventual consistency, which is important for roles involving collaborative applications and distributed systems.\n\nHow to answer:\n\nExplain implementing operational transformation for real-time collaboration.\nMention conflict resolution strategies for concurrent data modifications.\nDescribe implementing event sourcing and CQRS patterns.\nExample answer: \"I implement data synchronization using operational transformation for real-time collaboration and event sourcing for audit trails. I handle conflicts using last-writer-wins or vector clocks and implement CQRS patterns for read/write separation.\""
  },
  {
    "id": "1236",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom communication protocols and message queuing in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of distributed communication patterns and message-driven architectures, which is important for roles involving microservices and event-driven systems.\n\nHow to answer:\n\nMention implementing custom protocols over HTTP or WebSockets.\nExplain message queue integration with RabbitMQ or Apache Kafka.\nDescribe implementing publish-subscribe patterns and message routing.\nExample answer: \"I implement custom communication protocols using WebSockets for real-time messaging and integrate with message queues like RabbitMQ for asynchronous processing. I implement publish-subscribe patterns and message routing for decoupled system communication.\""
  },
  {
    "id": "1237",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced performance optimization and resource management in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of system optimization and resource efficiency, which is important for roles involving high-performance applications and resource-constrained environments.\n\nHow to answer:\n\nExplain implementing connection pooling and resource recycling.\nMention memory optimization and garbage collection tuning.\nDescribe implementing adaptive resource allocation and auto-scaling.\nExample answer: \"I implement advanced performance optimization through connection pooling, memory management optimization, and adaptive resource allocation. I monitor resource usage patterns and implement auto-scaling based on application metrics and load predictions.\""
  },
  {
    "id": "1238",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement custom development tools and debugging utilities for Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of developer productivity and debugging methodologies, which is important for roles involving development tooling and team productivity enhancement.\n\nHow to answer:\n\nMention creating custom debugging middleware and development dashboards.\nExplain implementing request/response inspection tools.\nDescribe creating performance profiling and memory leak detection tools.\nExample answer: \"I implement custom development tools including debugging middleware that provides request/response inspection, performance profiling dashboards, and memory leak detection utilities. I create development-specific endpoints for testing and debugging.\""
  },
  {
    "id": "1239",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced internationalization and localization in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of global application development and cultural adaptation, which is important for roles involving international products and multicultural user bases.\n\nHow to answer:\n\nExplain implementing dynamic locale detection and content adaptation.\nMention creating translation management and content delivery systems.\nDescribe implementing cultural formatting for dates, numbers, and currencies.\nExample answer: \"I implement comprehensive internationalization using i18next with dynamic locale detection, translation management systems, and cultural formatting for dates and currencies. I implement content adaptation based on user preferences and geographic location.\""
  },
  {
    "id": "1240",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced API gateway patterns and service mesh integration in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of modern microservices architecture and service communication patterns, which is important for roles involving cloud-native applications and distributed systems.\n\nHow to answer:\n\nExplain implementing API gateway functionality with routing and transformation.\nMention service discovery and load balancing integration.\nDescribe implementing circuit breakers and retry policies.\nExample answer: \"I implement API gateway patterns with request routing, transformation, and aggregation. I integrate with service mesh technologies for service discovery, implement circuit breakers for fault tolerance, and provide centralized authentication and rate limiting.\""
  },
  {
    "id": "1241",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced machine learning integration and AI services in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of modern AI integration and intelligent application development, which is important for roles involving AI-powered applications and data science integration.\n\nHow to answer:\n\nMention integrating with ML models and AI services for intelligent features.\nExplain implementing recommendation engines and predictive analytics.\nDescribe implementing natural language processing and computer vision features.\nExample answer: \"I integrate machine learning models using TensorFlow.js or cloud AI services for features like recommendation engines, natural language processing, and computer vision. I implement model serving, A/B testing for ML features, and monitoring for model performance.\""
  },
  {
    "id": "1242",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced blockchain integration and cryptocurrency features in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of emerging technologies and decentralized applications, which is important for roles involving fintech and Web3 development.\n\nHow to answer:\n\nExplain integrating with blockchain networks and smart contracts.\nMention implementing cryptocurrency payment processing.\nDescribe implementing decentralized identity and data storage.\nExample answer: \"I implement blockchain integration using Web3.js for Ethereum interactions, implementing smart contract integration, cryptocurrency payment processing, and decentralized identity management. I handle blockchain event monitoring and transaction verification.\""
  },
  {
    "id": "1243",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced DevOps automation and infrastructure as code for Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of modern deployment automation and infrastructure management, which is important for roles involving DevOps and cloud infrastructure.\n\nHow to answer:\n\nMention implementing infrastructure as code with Terraform or CloudFormation.\nExplain CI/CD pipeline automation and deployment strategies.\nDescribe implementing monitoring, alerting, and auto-recovery systems.\nExample answer: \"I implement infrastructure as code using Terraform for cloud resource management and automated CI/CD pipelines with GitHub Actions or Jenkins. I set up comprehensive monitoring, alerting, and implement auto-recovery mechanisms for production systems.\""
  },
  {
    "id": "1244",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced data analytics and business intelligence dashboards in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of data-driven applications and business intelligence systems, which is important for roles involving analytics platforms and business intelligence tools.\n\nHow to answer:\n\nExplain implementing real-time analytics processing and data aggregation.\nMention creating interactive dashboards and visualization APIs.\nDescribe implementing data warehouse integration and ETL processes.\nExample answer: \"I implement real-time analytics using stream processing, create RESTful APIs for dashboard data, and integrate with data warehouses for business intelligence. I implement data aggregation pipelines and provide interactive visualization endpoints.\""
  },
  {
    "id": "1245",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced content management and digital asset management in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of content-driven applications and media management systems, which is important for roles involving CMS development and digital media platforms.\n\nHow to answer:\n\nMention implementing headless CMS architectures and content APIs.\nExplain digital asset processing and media optimization.\nDescribe implementing content versioning and workflow management.\nExample answer: \"I implement headless CMS architectures with flexible content APIs, digital asset management with automated media processing, and content versioning systems. I create workflow management for content approval and implement content delivery optimization.\""
  },
  {
    "id": "1246",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced e-commerce features and payment processing in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of commercial applications and financial transaction processing, which is important for roles involving e-commerce platforms and payment systems.\n\nHow to answer:\n\nExplain implementing secure payment processing with multiple gateways.\nMention creating shopping cart and order management systems.\nDescribe implementing inventory management and pricing engines.\nExample answer: \"I implement secure payment processing using Stripe and PayPal APIs, create comprehensive shopping cart and order management systems, and implement inventory tracking with automated pricing and discount engines for e-commerce platforms.\""
  },
  {
    "id": "1247",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced gaming features and real-time multiplayer in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of real-time applications and interactive systems, which is important for roles involving gaming platforms and interactive entertainment.\n\nHow to answer:\n\nMention implementing real-time multiplayer using WebSockets and game state synchronization.\nExplain creating leaderboards and player matching systems.\nDescribe implementing game analytics and player behavior tracking.\nExample answer: \"I implement real-time multiplayer gaming using Socket.io for low-latency communication, game state synchronization, and player matching systems. I create leaderboards, implement anti-cheat mechanisms, and provide comprehensive game analytics.\""
  },
  {
    "id": "1248",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced IoT device management and sensor data processing in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of IoT applications and sensor data management, which is important for roles involving smart devices and industrial automation.\n\nHow to answer:\n\nExplain implementing device registration and authentication systems.\nMention creating sensor data ingestion and processing pipelines.\nDescribe implementing device control and remote management features.\nExample answer: \"I implement IoT device management with secure device authentication, real-time sensor data ingestion using MQTT, and device control APIs. I create data processing pipelines for sensor analytics and implement device monitoring and alerting systems.\""
  },
  {
    "id": "1249",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced social media integration and community features in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of social applications and community platforms, which is important for roles involving social networking and user engagement systems.\n\nHow to answer:\n\nMention implementing social media APIs and authentication integration.\nExplain creating user-generated content and moderation systems.\nDescribe implementing social features like feeds, messaging, and recommendations.\nExample answer: \"I implement social media integration using OAuth for platform authentication, create user-generated content systems with moderation workflows, and implement social features like activity feeds, messaging, and recommendation algorithms for community engagement.\""
  },
  {
    "id": "1250",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced healthcare and medical data management in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of healthcare applications and regulatory compliance, which is important for roles involving medical software and health information systems.\n\nHow to answer:\n\nExplain implementing HIPAA compliance and medical data security.\nMention creating patient data management and electronic health records.\nDescribe implementing telemedicine and healthcare workflow systems.\nExample answer: \"I implement HIPAA-compliant healthcare applications with encrypted patient data management, electronic health records integration, and telemedicine features. I ensure audit trails, implement role-based access controls, and create healthcare workflow automation.\""
  },
  {
    "id": "1251",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced education and learning management systems in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of educational technology and learning platforms, which is important for roles involving EdTech development and online learning systems.\n\nHow to answer:\n\nMention implementing course management and student progress tracking.\nExplain creating assessment and grading systems.\nDescribe implementing collaborative learning and virtual classroom features.\nExample answer: \"I implement learning management systems with course creation tools, student progress tracking, and automated assessment systems. I create virtual classroom features with video integration and implement collaborative learning tools with real-time interaction.\""
  },
  {
    "id": "1252",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced financial services and trading platforms in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of financial applications and trading systems, which is important for roles involving fintech development and financial data processing.\n\nHow to answer:\n\nExplain implementing real-time market data processing and trading APIs.\nMention creating portfolio management and risk assessment systems.\nDescribe implementing regulatory compliance and audit trails.\nExample answer: \"I implement financial trading platforms with real-time market data feeds, automated trading algorithms, and portfolio management systems. I ensure regulatory compliance with financial regulations and implement comprehensive audit trails for all transactions.\""
  },
  {
    "id": "1253",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced supply chain and logistics management in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of enterprise logistics systems and supply chain optimization, which is important for roles involving inventory management and logistics platforms.\n\nHow to answer:\n\nMention implementing inventory tracking and warehouse management systems.\nExplain creating shipping and logistics optimization algorithms.\nDescribe implementing supplier management and procurement workflows.\nExample answer: \"I implement supply chain management systems with real-time inventory tracking, automated reordering systems, and logistics optimization algorithms. I create supplier portals, implement procurement workflows, and provide comprehensive supply chain analytics.\""
  },
  {
    "id": "1254",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced energy management and smart grid systems in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of energy systems and smart infrastructure, which is important for roles involving renewable energy platforms and smart city applications.\n\nHow to answer:\n\nExplain implementing energy consumption monitoring and optimization.\nMention creating smart grid integration and renewable energy management.\nDescribe implementing energy trading and demand response systems.\nExample answer: \"I implement energy management systems with real-time consumption monitoring, smart grid integration, and renewable energy optimization. I create demand response systems, implement energy trading platforms, and provide predictive analytics for energy efficiency.\""
  },
  {
    "id": "1255",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced transportation and mobility solutions in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of transportation technology and mobility platforms, which is important for roles involving ride-sharing applications and transportation management systems.\n\nHow to answer:\n\nMention implementing ride-sharing and vehicle tracking systems.\nExplain creating route optimization and traffic management.\nDescribe implementing fleet management and maintenance scheduling.\nExample answer: \"I implement transportation platforms with real-time vehicle tracking, ride-sharing algorithms, and route optimization. I create fleet management systems with predictive maintenance, implement traffic management integration, and provide mobility analytics for urban planning.\""
  },
  {
    "id": "1256",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you implement advanced environmental monitoring and sustainability tracking in Express.js?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your understanding of environmental technology and sustainability applications, which is important for roles involving green technology and environmental compliance systems.\n\nHow to answer:\n\nExplain implementing environmental sensor networks and data collection.\nMention creating carbon footprint tracking and sustainability metrics.\nDescribe implementing environmental compliance and reporting systems.\nExample answer: \"I implement environmental monitoring systems with sensor networks for air quality, water quality, and weather data collection. I create carbon footprint tracking, sustainability reporting dashboards, and implement environmental compliance automation for regulatory reporting.\""
  },
  {
    "id": "1257",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is your vision for the future of Express.js development and how do you prepare for emerging trends?",
    "answer": "Why you might get asked this: Interviewers often ask this question to assess your forward-thinking approach and ability to adapt to evolving technologies, which is important for roles involving technology leadership and strategic planning.\n\nHow to answer:\n\nDiscuss emerging trends in web development and Express.js ecosystem evolution.\nMention your learning strategies and technology adoption approaches.\nDescribe how you prepare for future challenges and opportunities.\nExample answer: \"I see Express.js evolving toward better TypeScript integration, improved performance with native Node.js features, and enhanced cloud-native capabilities. I stay prepared by experimenting with emerging patterns, contributing to open source, and continuously learning new technologies through hands-on projects and community engagement.\"\n\n\n\n\nTop 50+ ExpressJS Interview Questions and Answers\nles in ExpressJS?\nIn ExpressJS, you can serve static files using the built-in express.static middleware. This middleware function takes the root directory of your static files as an argument and serves them automatically."
  },
  {
    "id": "1258",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the use of app.use() in ExpressJS?",
    "answer": "app.use() is used to add middleware functions in an Express application. It can be used to add global middleware functions or to add middleware functions to specific routes.\n\n\nNode.js Interview Questions\nPremise\n\n“Any application that can be written in JavaScript, will eventually be written in JavaScript.” -Jeff Atwood                                 \n\nThis was said back in 2007, and we can say that it is proving true till now. You can think of any technical keyword and there might be a JavaScript library build around it. So if it’s so popular and in demand, this can be a great programming language to learn. But that’s not the only skill that is required, since you have to apply this to solve practical problems. And one of such problems is to build scalable products.\n\nGen Z backend\n\nAfter jQuery animation dev shifted to a single page application for better control of ui/ux and thus came frontend frameworks such as angular js and angular. After that JavaScript was made available to port into literally any modern machine that exists and runs as a standalone application i.e Node.js. It was widely accepted as a backend framework and comes to the top, 2nd year in a row in 2020 of StackOverflow survey. \n\nPlay\nAs developers are busy getting an experience in node.js it’s nice to have a curated list of Node.js interview questions to revise. Also, to further consolidate your knowledge on Javascript, refer to this source.\n\nBeginner Node.js Interview Questions"
  },
  {
    "id": "1259",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Node.js and how it works?",
    "answer": "Node.js is a virtual machine that uses JavaScript as its scripting language and runs Chrome’s V8 JavaScript engine. Basically, Node.js is based on an event-driven architecture where I/O runs asynchronously making it lightweight and efficient. It is being used in developing desktop applications as well with a popular framework called electron as it provides API to access OS-level features such as file system, network, etc.\n\nHere is a Free course on Node.js for beginners to master the fundamentals of Node.js.\n\n \n\n\nCreate a free personalised study plan\nGet into your dream companies with expert guidance\nReal-Life Problems\nPrep for Target Roles\nCustom Plan Duration\nCreate My Plan"
  },
  {
    "id": "1260",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What tools can be used to assure consistent code style?",
    "answer": "ESLint can be used with any IDE to ensure a consistent coding style which further helps in maintaining the codebase."
  },
  {
    "id": "1261",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a first class function in Javascript?",
    "answer": "When functions can be treated like any other variable then those functions are first-class functions. There are many other programming languages, for example, scala, Haskell, etc which follow this including JS. Now because of this function can be passed as a param to another function(callback) or a function can return another function(higher-order function). map() and filter() are higher-order functions that are popularly used.\n\nYou can download a PDF version of Node Js Interview Questions.\n\nDownload PDF"
  },
  {
    "id": "1262",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you manage packages in your node.js project?",
    "answer": "It can be managed by a number of package installers and their configuration file accordingly. Out of them mostly use npm or yarn. Both provide almost all libraries of javascript with extended features of controlling environment-specific configurations. To maintain versions of libs being installed in a project we use package.json and package-lock.json so that there is no issue in porting that app to a different environment."
  },
  {
    "id": "1263",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How is Node.js better than other frameworks most popularly used?",
    "answer": "Node.js provides simplicity in development because of its non-blocking I/O and event-based model results in short response time and concurrent processing, unlike other frameworks where developers have to use thread management. \n \nIt runs on a chrome v8 engine which is written in c++ and is highly performant with constant improvement. \n \nAlso since we will use Javascript in both the frontend and backend the development will be much faster. \n \nAnd at last, there are sample libraries so that we don’t need to reinvent the wheel.\nExplore InterviewBit’s Exclusive Live Events\nBy\n\nNo More Events to show!"
  },
  {
    "id": "1264",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the steps how “Control Flow” controls the functions calls?",
    "answer": "Control the order of execution\nCollect data\nLimit concurrency\nCall the following step in the program."
  },
  {
    "id": "1265",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are some commonly used timing features of Node.js?",
    "answer": "setTimeout/clearTimeout – This is used to implement delays in code execution.\nsetInterval/clearInterval – This is used to run a code block multiple times.\nsetImmediate/clearImmediate – Any function passed as the setImmediate() argument is a callback that's executed in the next iteration of the event loop.\nprocess.nextTick – Both setImmediate and process.nextTick appear to be doing the same thing; however, you may prefer one over the other depending on your callback’s urgency. \n\nStart Your Coding Journey With Tracks\nMaster Data Structures and Algorithms with our Learning Tracks\nTopic Buckets\nMock Assessments\nReading Material\nView Tracks"
  },
  {
    "id": "1266",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the advantages of using promises instead of callbacks?",
    "answer": "The main advantage of using promise is you get an object to decide the action that needs to be taken after the async task completes. This gives more manageable code and avoids callback hell."
  },
  {
    "id": "1267",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is fork in node JS?",
    "answer": "A fork in general is used to spawn child processes. In node it is used to create a new instance of v8 engine to run multiple workers to execute the code."
  },
  {
    "id": "1268",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why is Node.js single-threaded?",
    "answer": "Node.js was created explicitly as an experiment in async processing. This was to try a new theory of doing async processing on a single thread over the existing thread-based implementation of scaling via different frameworks."
  },
  {
    "id": "1269",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a simple server in Node.js that returns Hello World?",
    "answer": "var http = require(\"http\");\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {'Content-Type': 'text/plain'});\n  response.end('Hello World\\n');\n}).listen(3000);"
  },
  {
    "id": "1270",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How many types of API functions are there in Node.js?",
    "answer": "There are two types of API functions:\n\nAsynchronous, non-blocking functions - mostly I/O operations which can be fork out of the main loop.\n \nSynchronous, blocking functions - mostly operations that influence the process running in the main loop.\n\nDiscover your path to a  \nSuccessful Tech Career for FREE!\nAnswer 4 simple questions & get a career plan tailored for you\nInterview Process\nCTC & Designation\nProjects on the Job\nTry It Out\n2 Lakh+ Roadmaps Created"
  },
  {
    "id": "1271",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is REPL?",
    "answer": "PL in Node.js stands for Read, Eval, Print, and Loop, which further means evaluating code on the go."
  },
  {
    "id": "1272",
    "category": "typescript",
    "difficulty": "medium",
    "question": "List down the two arguments that async.queue takes as input?",
    "answer": "Task Function\nConcurrency Value"
  },
  {
    "id": "1273",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of module.exports?",
    "answer": "This is used to expose functions of a particular module or file to be used elsewhere in the project. This can be used to encapsulate all similar functions in a file which further improves the project structure.\n\nFor example, you have a file for all utils functions with util to get solutions in a different programming language of a problem statement.\n\nconst getSolutionInJavaScript = async ({\n problem_id\n}) => {\n...\n};\nconst getSolutionInPython = async ({\n problem_id\n}) => {\n...\n};\nmodule.exports = { getSolutionInJavaScript, getSolutionInPython }\nThus using module.exports we can use these functions in some other file:\n\nconst { getSolutionInJavaScript, getSolutionInPython} = require(\"./utils\")\nIntermediate Node.js Interview Questions"
  },
  {
    "id": "1274",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of stub in Node.js?",
    "answer": "Stubs are used in writing tests which are an important part of development. It replaces the whole function which is getting tested.  \n\nThis helps in scenarios where we need to test:\n\nExternal calls which make tests slow and difficult to write (e.g HTTP calls/ DB calls)\nTriggering different outcomes for a piece of code (e.g. what happens if an error is thrown/ if it passes)\nFor example, this is the function:\n\nconst request = require('request');\nconst getPhotosByAlbumId = (id) => {\nconst requestUrl = `https://jsonplaceholder.typicode.com/albums/${id}/photos?_limit=3`;\nreturn new Promise((resolve, reject) => {\n    request.get(requestUrl, (err, res, body) => {\n        if (err) {\n            return reject(err);\n        }\n        resolve(JSON.parse(body));\n    });\n});\n};\nmodule.exports = getPhotosByAlbumId;\nTo test this function this is the stub\nconst expect = require('chai').expect;\nconst request = require('request');\nconst sinon = require('sinon');\nconst getPhotosByAlbumId = require('./index');\ndescribe('with Stub: getPhotosByAlbumId', () => {\nbefore(() => {\n    sinon.stub(request, 'get')\n        .yields(null, null, JSON.stringify([\n            {\n                \"albumId\": 1,\n                \"id\": 1,\n                \"title\": \"A real photo 1\",\n                \"url\": \"https://via.placeholder.com/600/92c952\",\n                \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\n            },\n            {\n                \"albumId\": 1,\n                \"id\": 2,\n                \"title\": \"A real photo 2\",\n                \"url\": \"https://via.placeholder.com/600/771796\",\n                \"thumbnailUrl\": \"https://via.placeholder.com/150/771796\"\n            },\n            {\n                \"albumId\": 1,\n                \"id\": 3,\n                \"title\": \"A real photo 3\",\n                \"url\": \"https://via.placeholder.com/600/24f355\",\n                \"thumbnailUrl\": \"https://via.placeholder.com/150/24f355\"\n            }\n        ]));\n});\nafter(() => {\n    request.get.restore();\n});\nit('should getPhotosByAlbumId', (done) => {\n    getPhotosByAlbumId(1).then((photos) => {\n        expect(photos.length).to.equal(3);\n        photos.forEach(photo => {\n            expect(photo).to.have.property('id');\n            expect(photo).to.have.property('title');\n            expect(photo).to.have.property('url');\n        });\n        done();\n    });\n});\n});"
  },
  {
    "id": "1275",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe the exit codes of Node.js?",
    "answer": "Exit codes give us an idea of how a process got terminated/the reason behind termination. \n\nA few of them are:\n\nUncaught fatal exception - (code - 1) - There has been an exception that is not handled\nUnused - (code - 2) - This is reserved by bash\nFatal Error - (code - 5) - There has been an error in V8 with stderr output of the description\nInternal Exception handler Run-time failure - (code - 7) - There has been an exception when bootstrapping function was called\nInternal JavaScript Evaluation Failure - (code - 4) - There has been an exception when the bootstrapping process failed to return function value when evaluated."
  },
  {
    "id": "1276",
    "category": "typescript",
    "difficulty": "medium",
    "question": "For Node.js, why Google uses V8 engine?",
    "answer": "Well, are there any other options available? Yes, of course, we have Spidermonkey from Firefox, Chakra from Edge but Google’s v8 is the most evolved(since it’s open-source so there’s a huge community helping in developing features and fixing bugs) and fastest(since it’s written in c++) we got till now as a JavaScript and WebAssembly engine. And it is portable to almost every machine known."
  },
  {
    "id": "1277",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why should you separate Express app and server?",
    "answer": "The server is responsible for initializing the routes, middleware, and other application logic whereas the app has all the business logic which will be served by the routes initiated by the server. This ensures that the business logic is encapsulated and decoupled from the application logic which makes the project more readable and maintainable."
  },
  {
    "id": "1278",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain what a Reactor Pattern in Node.js?",
    "answer": "Reactor pattern again a pattern for nonblocking I/O operations. But in general, this is used in any event-driven architecture. \n\nThere are two components in this: 1. Reactor 2. Handler.\n\nReactor: Its job is to dispatch the I/O event to appropriate handlers\nHandler: Its job is to actually work on those events"
  },
  {
    "id": "1279",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is middleware?",
    "answer": "Middleware comes in between your request and business logic. It is mainly used to capture logs and enable rate limit, routing, authentication, basically whatever that is not a part of business logic. There are third-party middleware also such as body-parser and you can write your own middleware for a specific use case."
  },
  {
    "id": "1280",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are node.js buffers?",
    "answer": "In general, buffers is a temporary memory that is mainly used by stream to hold on to some data until consumed. Buffers are introduced with additional use cases than JavaScript’s Unit8Array and are mainly used to represent a fixed-length sequence of bytes. This also supports legacy encodings like ASCII, utf-8, etc. It is a fixed(non-resizable) allocated memory outside the v8."
  },
  {
    "id": "1281",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is node.js streams?",
    "answer": "Streams are instances of EventEmitter which can be used to work with streaming data in Node.js. They can be used for handling and manipulating streaming large files(videos, mp3, etc) over the network. They use buffers as their temporary storage.\n\nThere are mainly four types of the stream:\n\nWritable: streams to which data can be written (for example, fs.createWriteStream()).\nReadable: streams from which data can be read (for example, fs.createReadStream()).\nDuplex: streams that are both Readable and Writable (for example, net.Socket).\nTransform: Duplex streams that can modify or transform the data as it is written and read (for example, zlib.createDeflate())."
  },
  {
    "id": "1282",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can we use async await in node.js?",
    "answer": "Here is an example of using async-await pattern:\n\n// this code is to retry with exponential backoff\nfunction wait (timeout) {\n return new Promise((resolve) => {\nsetTimeout(() => {\n  resolve()\n}, timeout);\n });\n}\nasync function requestWithRetry (url) {\n const MAX_RETRIES = 10;\n for (let i = 0; i <= MAX_RETRIES; i++) {\ntry {\n  return await request(url);\n} catch (err) {\n  const timeout = Math.pow(2, i);\n  console.log('Waiting', timeout, 'ms');\n  await wait(timeout);\n  console.log('Retrying', err.message, i);\n}\n }\n}"
  },
  {
    "id": "1283",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does Node.js overcome the problem of blocking of I/O operations?",
    "answer": "Since the node has an event loop that can be used to handle all the I/O operations in an asynchronous manner without blocking the main function. \n\nSo for example, if some network call needs to happen it will be scheduled in the event loop instead of the main thread(single thread). And if there are multiple such I/O calls each one will be queued accordingly to be executed separately(other than the main thread). \n\nThus even though we have single-threaded JS, I/O ops are handled in a nonblocking way."
  },
  {
    "id": "1284",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Differentiate between process.nextTick() and setImmediate()?",
    "answer": "Both can be used to switch to an asynchronous mode of operation by listener functions. \n\nprocess.nextTick() sets the callback to execute but setImmediate pushes the callback in the queue to be executed. So the event loop runs in the following manner\n\ntimers–>pending callbacks–>idle,prepare–>connections(poll,data,etc)–>check–>close callbacks\n\nIn this process.nextTick() method adds the callback function to the start of the next event queue and setImmediate() method to place the function in the check phase of the next event queue."
  },
  {
    "id": "1285",
    "category": "typescript",
    "difficulty": "medium",
    "question": "If Node.js is single threaded then how does it handle concurrency?",
    "answer": "The main loop is single-threaded and all async calls are managed by libuv library.\n\nFor example:\n\nconst crypto = require(\"crypto\");\nconst start = Date.now();\nfunction logHashTime() {\n crypto.pbkdf2(\"a\", \"b\", 100000, 512, \"sha512\", () => {\nconsole.log(\"Hash: \", Date.now() - start);\n });\n}\nlogHashTime();\nlogHashTime();\nlogHashTime();\nlogHashTime();\nThis gives the output:\n\nHash: 1213\nHash: 1225\nHash: 1212\nHash: 1222\nThis is because libuv sets up a thread pool to handle such concurrency. How many threads will be there in the thread pool depends upon the number of cores but you can override this."
  },
  {
    "id": "1286",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an event-loop in Node JS?",
    "answer": "Whatever that is async is managed by event-loop using a queue and listener.  We can get the idea using the following diagram:\n\n\nNode.js Event Loop\nSo when an async function needs to be executed(or I/O) the main thread sends it to a different thread allowing v8 to keep executing the main code. Event loop involves different phases with specific tasks such as timers, pending callbacks, idle or prepare, poll, check, close callbacks with different FIFO queues. Also in between iterations it checks for async I/O or timers and shuts down cleanly if there aren't any."
  },
  {
    "id": "1287",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What do you understand by callback hell?",
    "answer": "async_A(function(){\n   async_B(function(){\n       async_C(function(){\n           async_D(function(){\n           ....\n           });\n       });\n   });\n});\nFor the above example, we are passing callback functions and it makes the code unreadable and not maintainable, thus we should change the async logic to avoid this.\n\nAdvanced Node.js Interview Questions"
  },
  {
    "id": "1288",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an Event Emitter in Node.js?",
    "answer": "EventEmitter is a Node.js class that includes all the objects that are basically capable of emitting events. This can be done by attaching named events that are emitted by the object using an eventEmitter.on() function. Thus whenever this object throws an even the attached functions are invoked synchronously.\n\nconst EventEmitter = require('events');\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n console.log('an event occurred!');\n});\nmyEmitter.emit('event');"
  },
  {
    "id": "1289",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Enhancing Node.js performance through clustering.",
    "answer": "Node.js applications run on a single processor, which means that by default they don’t take advantage of a multiple-core system. Cluster mode is used to start up multiple node.js processes thereby having multiple instances of the event loop. When we start using cluster in a nodejs app behind the scene multiple node.js processes are created but there is also a parent process called the cluster manager which is responsible for monitoring the health of the individual instances of our application.\n\n\nClustering in Node.js"
  },
  {
    "id": "1290",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a thread pool and which library handles it in Node.js",
    "answer": "The Thread pool is handled by the libuv library. libuv is a multi-platform C library that provides support for asynchronous I/O-based operations such as file systems, networking, and concurrency. \n\n\nThread Pool"
  },
  {
    "id": "1291",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is WASI and why is it being introduced?",
    "answer": "Web assembly provides an implementation of WebAssembly System Interface specification through WASI API in node.js implemented using WASI class. The introduction of WASI was done by keeping in mind its possible to use the underlying operating system via a collection of POSIX-like functions thus further enabling the application to use resources more efficiently and features that require system-level access."
  },
  {
    "id": "1292",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How are worker threads different from clusters?",
    "answer": "Cluster:\n\nThere is one process on each CPU with an IPC to communicate.\nIn case we want to have multiple servers accepting HTTP requests via a single port, clusters can be helpful.\nThe processes are spawned in each CPU thus will have separate memory and node instance which further will lead to memory issues.\nWorker threads:\n\nThere is only one process in total with multiple threads.\nEach thread has one Node instance (one event loop, one JS engine) with most of the APIs accessible.\nShares memory with other threads (e.g. SharedArrayBuffer)\nThis can be used for CPU-intensive tasks like processing data or accessing the file system since NodeJS is single-threaded, synchronous tasks can be made more efficient leveraging the worker's threads."
  },
  {
    "id": "1293",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to measure the duration of async operations?",
    "answer": "Performance API provides us with tools to figure out the necessary performance metrics. A simple example would be using async_hooks and perf_hooks\n\n'use strict';\nconst async_hooks = require('async_hooks');\nconst {\n performance,\n PerformanceObserver\n} = require('perf_hooks');\nconst set = new Set();\nconst hook = async_hooks.createHook({\n init(id, type) {\nif (type === 'Timeout') {\n  performance.mark(`Timeout-${id}-Init`);\n  set.add(id);\n}\n },\n destroy(id) {\nif (set.has(id)) {\n  set.delete(id);\n  performance.mark(`Timeout-${id}-Destroy`);\n  performance.measure(`Timeout-${id}`,\n                      `Timeout-${id}-Init`,\n                      `Timeout-${id}-Destroy`);\n}\n }\n});\nhook.enable();\nconst obs = new PerformanceObserver((list, observer) => {\n console.log(list.getEntries()[0]);\n performance.clearMarks();\n observer.disconnect();\n});\nobs.observe({ entryTypes: ['measure'], buffered: true });\nsetTimeout(() => {}, 1000);\nThis would give us the exact time it took to execute the callback."
  },
  {
    "id": "1294",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to measure the performance of async operations?",
    "answer": "Performance API provides us with tools to figure out the necessary performance metrics. \n\nA simple example would be:\n\nconst { PerformanceObserver, performance } = require('perf_hooks');\nconst obs = new PerformanceObserver((items) => {\n console.log(items.getEntries()[0].duration);\n performance.clearMarks();\n});\nobs.observe({ entryTypes: ['measure'] });\nperformance.measure('Start to Now');\nperformance.mark('A');\ndoSomeLongRunningProcess(() => {\n performance.measure('A to Now', 'A');\n performance.mark('B');\n performance.measure('A to B', 'A', 'B');\n});\n \n\nAdditional Useful Resources\nNodeJS MCQ\nTop 10 Node JS Projects Ideas\nNode.js Vs React.js: What’s The Difference?\nNode.js Vs Django: Which One is Better For Web Development?\nNode js MCQ"
  },
  {
    "id": "1295",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Create the Application",
    "answer": "In your project directory, create a main file (usually named app.js or index.js) to set up the Express application.\n\nHere is the JavaScript code:\n\n// Import the Express module\nconst express = require('express');\n\n// Create an Express application\nconst app = express();\n\n// Define a sample route\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\n// Start the server\nconst port = 3000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});"
  },
  {
    "id": "1296",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Run the Application",
    "answer": "You can start your Express server using Node.js:\n\nnode app.js\nFor convenience, you might consider using Nodemon as a development dependency which automatically restarts the server upon file changes."
  },
  {
    "id": "1297",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the app.use() function?",
    "answer": "In Express.js, the app.use() function is a powerful tool for middleware management. It can handle HTTP requests and responses, as well as prepare data or execute processes in between.\n\nKey Functions\nGlobal Middleware: Without a specified path, the middleware will process every request.\nRoute-specific Middleware: When given a path, the middleware will only apply to the matched routes.\nCommon Use-Cases\nBody Parsing: To extract data from incoming requests, especially useful for POST and PUT requests.\n\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\nHandling CORS: Useful in API applications to manage cross-origin requests.\n\napp.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    next();\n});\nStatic File Serving: For serving files like images, CSS, or client-side JavaScript.\n\napp.use(express.static('public'));\nLogging: To record request details for debugging or analytics.\n\napp.use(function(req, res, next) {\n    console.log(`${new Date().toUTCString()}: ${req.method} ${req.originalUrl}`);\n    next();\n});\nError Handling: To manage and report errors during request processing.\n\napp.use(function(err, req, res, next) {\n    console.error(err);\n    res.status(500).send('Internal Server Error');\n});\nChaining Middleware\nYou can stack multiple middleware using app.use() in the order they need to execute. For a matched route, control can be passed to the next matching route or terminated early using next()."
  },
  {
    "id": "1298",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you serve static files using Express.js?",
    "answer": "In an Express.js web application, you often need to serve static files such as stylesheets, client-side JavaScript, and images. You can accomplish this using the express.static middleware.\n\nMiddleware for Serving Static Files\nThe express.static middleware function serves static files and is typically used to serve assets like images, CSS, and client-side JavaScript.\n\nHere is the code example:\n\napp.use(express.static('public'));\nIn this example, the folder named public will be used to serve the static assets.\n\nAdditional Configuration with Method Chaining\nYou can further configure the behavior of the express.static middleware by chaining methods.\n\nFor example, to set the cache-control header, the code looks like this:\n\napp.use(express.static('public', {\n    maxAge: '1d'\n}));\nHere, the '1d' ensures that caching is enabled for a day.\n\nUsing a Subdirectory\nIf you want to serve files from a subdirectory, you can specify it when using the express.static middleware.\n\nHere is the code example:\n\napp.use('/static', express.static('public'));\nThis serves the files from the public folder but any requests for these files should start with /static.\n\nWhat express.static Serves\nImages: PNG, JPEG, GIF\nText Content: HTML, CSS, JavaScript\nFonts\nJSON Data\nNot for dynamic content\nWhile express.static is excellent for static assets, it's not suitable for dynamic content or data in POST requests."
  },
  {
    "id": "1299",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Discuss the difference between app.get() and app.post() in Express.js.",
    "answer": "In Express.js, app.get() and app.post() are two of the most commonly used HTTP method middleware. The choice between them (or using both) typically depends on whether you are retrieving or submitting/persisting data.\n\nKey Distinctions\nHTTP Verbs: External Visibility\napp.get(): Listens for GET requests. Designed for data retrieval. Visible URLs typically trigger such requests (e.g., links or direct URL entry in the browser).\n\napp.post(): Listens for POST requests. Intended for data submission. Typically not visible in the URL bar, commonly used for form submissions.\n\nData Transmission\napp.get(): Uses query parameters for data transmission, visible in the URL. Useful for simple, non-sensitive, read-only data (e.g., filtering or pagination).\n\napp.post(): Uses request body for data transmission, which can be in various formats (e.g., JSON, form data). Ideal for more complex data, file uploads, or sensitive information.\n\nUsing Both app.get() and app.post() for the Same Route\nThere are cases, especially for RESTful design, where a single URL needs to handle both data retrieval and data submission.\n\nResource Retrieval and Creation:\nFetch a Form: Use app.get() to return a form for users to fill out.\nForm Submission: Use app.post() to process and save the submitted form data.\nComplete Entity Modification: For a complete update (or replacement in REST), using app.post() ensures that the update action is triggered via a post request, not a get request. This distiction is important to obey the RESTful principles.\nCode Example: Using both app.get() and app.post() for a single route\nHere is the JavaScript code:\n\nconst userRecords = {}; // in-memory \"database\" for the sake of example\n\n// Handle user registration form\napp.get('/users/register', (req, res) => {\n    res.send('Please register: <form method=\"POST\"><input name=\"username\"></form>');\n});\n\n// Process submitted registration form\napp.post('/users/register', (req, res) => {\n    userRecords[req.body.username] = req.body;\n    res.send('Registration complete');\n});"
  },
  {
    "id": "1300",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you retrieve the URL parameters from a GET request in Express.js?",
    "answer": "In Express.js, you can extract URL parameters from a GET request using the req.params object. Here's a quick look at the steps and the code example:\n\nCode Example: Retrieving URL Parameters\n// Sample URL: http://example.com/users/123\n// Relevant Route: /users/:id\n\n// Define the endpoint/route\napp.get('/users/:id', (req, res) => {\n    // Retrieve the URL parameter\n    const userId = req.params.id;\n    // ... (rest of the code)\n});\nIn this example, the URL parameter id is extracted and used to fetch the corresponding user data.\n\nAdditional Steps for Complex GET Requests\nFor simple and straightforward GET requests, supplying URL parameters directly works well. However, for more complex scenarios, such as parsing parameters from a URL with the help of querystrings or handling optional parameters, Express.js offers more advanced techniques which are outlined below:\n\nParsing Query Parameters\nWhat It Is: Additional data passed in a URL after the ? character. Example: http://example.com/resource?type=user&page=1.\n\nHow to Access It: Use req.query, an object that provides key-value pairs of the parsed query parameters.\n\nCode Example: Parsing Query Parameters\napp.get('/search', (req, res) => {\n    const { q, category } = req.query;\n    // ... (rest of the code)\n});\nOptional and Catch-All Segments\nOptional Segments: URL segments enclosed in parentheses are optional and can be accessed using req.params. Example: /book(/:title)\n\nCatch-All Segments: Captures the remainder of the URL and is useful in cases like URL rewriting. Denoted by an asterisk (*) or double asterisk (**). Accessed using req.params as well. Example: /documents/*"
  },
  {
    "id": "1301",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are route handlers, and how would you implement them?",
    "answer": "Route handlers in Express.js are middleware functions designed to manage specific paths in your application.\n\nDepending on the HTTP method and endpoint, they can perform diverse tasks, such as data retrieval from a database, view rendering, or HTTP response management.\n\nCode Example: Setting Up a Simple Route Handler\nHere is the code:\n\n// Responds with \"Hello, World!\" for GET requests to the root URL (/)\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\nIn this example, the route handler is (req, res) => { res.send('Hello, World!'); }. It listens for GET requests on the root URL and responds with \"Hello, World!\".\n\nWhat Are Route-Handler Chains?\nYou can associate numerous route-managing middleware functions to a single route. Every middleware function in the chain has to either proceed to the following function using next() or conclude the request-response cycle.\n\nThis allows for checks like user authentication before accessing a route.\n\nHTTP Method Convenience Methods\nExpress.js offers specialized, highly-readable methods for the most common HTTP requests:\n\napp.get()\napp.post()\napp.put()\napp.delete()\napp.use()\nThese methods streamline route handling setup."
  },
  {
    "id": "1302",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you enable CORS in an Express.js application?",
    "answer": "Cross-Origin Resource Sharing (CORS) is a mechanism that allows web pages to make requests to a different domain. In Express.js, you can enable CORS using the cors package or by setting headers manually.\n\nUsing the cors Package\nInstall cors:\n\nUse npm or yarn to install the cors package.\n\nnpm install cors\nIntegrate with Your Express App:\n\nUse the app.use(cors()) middleware. You can also customize CORS behavior with options.\n\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\n// Enable CORS for all routes\napp.use(cors());\n\n// Example: Enable CORS only for a specific route\napp.get('/public-data', cors(), (req, res) => {\n    // ...\n});\n\n// Example: Customize CORS options\nconst customCorsOptions = {\n    origin: 'https://example.com',\n    optionsSuccessStatus: 200 // Some legacy browsers choke on 204\n};\n\napp.use(cors(customCorsOptions));\nManual CORS Setup\nUse the following code example to set CORS headers manually in your Express app:\n\napp.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n    if (req.method === 'OPTIONS') {\n        res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');\n        return res.status(200).json({});\n    }\n    next();\n});\nMake sure to place this middleware before your route definitions."
  },
  {
    "id": "1303",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the use of next() in Express.js middleware.",
    "answer": "In Express.js, middleware functions are crucial for handling HTTP requests. A single request can pass through multiple middlewares before reaching its endpoint, providing opportunities for tasks like logging, data parsing, and error handling. The next() function is instrumental in this process, allowing for both regular middleware chaining and special error handling.\n\nWhat is next()?\nnext(): A callback function that, when called within a middleware, passes control to the next middleware in the stack.\nnext() is typically invoked to signal that a middleware has completed its tasks and that the request should move on to the next middleware.\nIf a middleware doesn't call next(), the request flow can get stuck, and the subsequent middlewares won't be executed.\nUse-Cases\nRegular Flow: Invoke next() to move the request and response objects through the middleware stack.\nError Handling: If a middleware detects an error, it can short-circuit the regular flow and jump directly to an error-handling middleware (defined with app.use(function(err, req, res, next) {})). This is achieved by calling next(err), where err is the detected error.\nCode Example: Logging Middleware\nHere is the code:\n\nconst app = require('express')();\n\n// Sample middleware: logs the request method and URL\napp.use((req, res, next) => {\n    console.log(`${req.method} ${req.url}`);\n    next(); // Move to the next middleware\n});\n\n// Sample middleware: logs the current UTC time\napp.use((req, res, next) => {\n    console.log(new Date().toUTCString());\n    next(); // Move to the next middleware\n});\n\napp.listen(3000);\nIn this example, both middlewares call next() to allow the request to progress to the next logging middleware and eventually to the endpoint (not shown, but would be the next in the chain).\n\nWithout the next() calls, the request would get stuck after the first middleware."
  },
  {
    "id": "1304",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the role of the express.Router class?",
    "answer": "The express.Router is a powerful tool for managing multiple route controllers. It helps in organizing routes and their handling functions into modular, self-contained groups.\n\nKey Features\nModularity: Rely on separate route modules for improved code organization, maintainability, and collaboration.\n\nMiddlewares: Like the main express app, the router can also use middlewares to process incoming requests.\n\nHTTP Method Chaining: Simplifies route handling by allowing method-specific routes to be defined using method names.\n\nExample: Middleware and Route Handling\nHere is the Node.js code:\n\nconst express = require('express');\nconst router = express.Router();\n\n// Logger Middleware\nrouter.use((req, res, next) => {\n  console.log('Router-specific Request Time:', Date.now());\n  next();\n});\n\n// \"GET\" method route\nrouter.get('/', (req, res) => {\n  res.send('Router Home Page');\n});\n\n// \"POST\" method route\nrouter.post('/', (req, res) => {\n  res.send('Router Home Page - POST Request');\n});\n\nmodule.exports = router;\nIn this example, we:\n\nUtilize the built-in express.Router.\nAttach a general-purpose middleware and two different HTTP method-specific routes.\nThe router is then integrated into the main express app using:\nconst app = express();\nconst router = require('./myRouterModule');\n\napp.use('/routerExample', router);\nHere, app.use('/routerExample', router); assigns all routes defined in the router to /routerExample."
  },
  {
    "id": "1305",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle 404 errors in Express.js?",
    "answer": "Handling 404 errors in Express is essential for capturing and responding to requests for non-existent resources. You typically use both middleware and HTTP response mechanisms for this purpose.\n\nMiddleware for 404s\nUse app.use at the end of the middleware chain to capture unresolved routes.\nInvoke the middleware with next() and an Error object to forward to the error-handling middleware.\nHere is the Node.js code example:\n\napp.use((req, res, next) => {\n    const err = new Error(`Not Found: ${req.originalUrl}`);\n    err.status = 404;\n    next(err);\n});\nError-Handling Middleware for 404s and Other Errors\nDefine an error-handling middleware with four arguments. The first one being the error object.\nCheck the error's status and respond accordingly. If it's a 404, handle it as a not-found error; otherwise, handle it as a server error.\nHere is the Node.js code:\n\napp.use((err, req, res, next) => {\n    const status = err.status || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).send(message);\n});\nFull Example:\nHere is the complete Node.js application:\n\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Sample router for demonstration\nconst usersRouter = express.Router();\nusersRouter.get('/profile', (req, res) => {\n    res.send('User Profile');\n});\napp.use('/users', usersRouter);\n\n// Capture 404s\napp.use((req, res, next) => {\n    const err = new Error(`Not Found: ${req.originalUrl}`);\n    err.status = 404;\n    next(err);\n});\n\n// Error-handling middleware\napp.use((err, req, res, next) => {\n    const status = err.status || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).send(message);\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});"
  },
  {
    "id": "1306",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the differences between req.query and req.params?",
    "answer": "In Express.js, req.query is used to access GET request parameters, while req.params is used to capture parameters defined in the URL path.\n\nUnderstanding Express.js Routing\nExpress.js uses app.get() and similar functions to handle different types of HTTP requests.\n\napp.get('/users/:id'): Matches GET requests to /users/123 where 123 is the :id parameter in the path.\nAccessing Request Data\nreq.query: Utilized to extract query string parameters from the request URL. Example: For the URL /route?id=123, use req.query.id to obtain 123.\nreq.params: Used to retrieve parameters from the request URL path. For the route /users/:id, use req.params.id to capture the ID, such as for /users/123.\nCode Example: Request Data\nHere is the Express.js server setup:\n\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Endpoint to capture query string parameter\napp.get('/query', (req, res) => {\n  console.log(req.query);\n  res.send('Received your query param!');\n});\n\n// Endpoint to capture URL parameter\napp.get('/user/:id', (req, res) => {\n  console.log(req.params);\n  res.send('Received your URL param!');\n});\n\napp.listen(port, () => console.log(`Listening on port ${port}!`));"
  },
  {
    "id": "1307",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe the purpose of req.body and how you would access it.",
    "answer": "In an Express.js application, req.body is a property of the HTTP request object that contains data submitted through an HTTP POST request.\n\nThe POST request might originate from an HTML form, a client-side JavaScript code, or another API client. The data in req.body is typically structured as a JSON object or a URL-encoded form.\n\nMiddleware and Parsing Request Body\nThe express.json() and express.urlencoded() middleware parse incoming Request objects before passing them on. These middlewares populate req.body with the parsed JSON and URL-encoded data, respectively.\n\nHere is an example of how you might set up body parsing in an Express app:\n\nconst express = require('express');\nconst app = express();\n\n// Parse JSON and URL-encoded data into req.body\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\nAccessing req.body Data\nOnce the body parsing middleware is in place, you can access the parsed data in your route handling functions:\n\nPOST or PUT Requests: When a client submits a POST or PUT request with a JSON payload in the request body, you can access this data through req.body.\nHere is an example:\n\nClient-side JavaScript:\n\nfetch('/example-route', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n});\nServer-side Express route handler:\n\napp.post('/example-route', (req, res) => {\n  console.log(req.body); // Outputs: { key: 'value' }\n});\nHTML Forms: When a form is submitted using <form> with action pointing to your Express route and method as POST or PUT, and the form fields are input elements within the form, req.body will contain these form field values.\nHere is an example:\n\nHTML form:\n\n<form action=\"/form-endpoint\" method=\"POST\">\n  <input type=\"text\" name=\"username\" />\n  <input type=\"password\" name=\"password\" />\n  <button type=\"submit\">Submit</button>\n</form>\nExpress route:\n\napp.post('/form-endpoint', (req, res) => {\n  console.log(req.body.username, req.body.password);\n});\nA modern technique for sending form data using fetch is by setting the Content-Type header to 'application/x-www-form-urlencoded' and using the URLSearchParams object:\n\nfetch('/form-endpoint', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  body: new URLSearchParams({ username: 'user', password: 'pass' })\n});\nCustom Parsers: While Express provides built-in body parsers for JSON and URL-encoded data, you might receive data in another format. In such cases, you can create custom middleware to parse and shape the data as needed. This middleware should populate req.body."
  },
  {
    "id": "1308",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a middleware that logs the request method and URL for every request?",
    "answer": "In Express.js, middlewares allow you to handle HTTP requests. Here, you will learn how to create a simple logging middleware that records the request method and URL.\n\nSetting Up the Express App\nFirst, install Express via npm, and set up your app.js file:\n\nconst express = require('express');\nconst app = express();\nCreating the Logging Middleware\nDefine a logging function that extracts the request method and URL, and then use app.use() to mount it as middleware.\n\n// Logging Middleware\nconst logRequest = (req, res, next) => {\n  console.log(`Received ${req.method}  request for: ${req.url}`);\n  next(); // Call next to proceed to the next middleware\n};\n\n// Mount the middleware for all routes\napp.use(logRequest);\nTesting the Setup\nUse app.get() to handle GET requests, and app.listen() to start the server.\n\n// Sample route\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\nWhen you visit http://localhost:3000/ in your browser and check the server console, you should see the request being logged.\n\n\n\nNode.js is a super popular server-side platform that more and more organizations are using. If you are preparing for a career change and have an upcoming job interview, it’s always a good idea to prepare and brush up on your interview skills beforehand. Although there are a few commonly asked Node.js interview questions that pop up during all types of interviews, we also recommend that you prepare by focusing on exclusive questions to your specific industry.\n\nWe have compiled a comprehensive list of common Node.js interview questions that come up often in interviews and the best ways to answer these questions. This will also help you understand the fundamental concepts of Node.js.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!\nNode.js Interview Questions and Answers For Freshers\nThis section will provide you with the Basic Node.js interview questions which will primarily help freshers."
  },
  {
    "id": "1309",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Node.js and Where can you use it?",
    "answer": "Node.js is an open-source, cross-platform JavaScript runtime environment and library to run web applications outside the client’s browser. It is used to create server-side web applications.\n\nNode.js is perfect for data-intensive applications as it uses an asynchronous, event-driven model. You can use  I/O intensive web applications like video streaming sites. You can also use it for developing: Real-time web applications, Network applications, General-purpose applications, and Distributed systems."
  },
  {
    "id": "1310",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why use Node.js?",
    "answer": "Node.js makes building scalable network programs easy. Some of its advantages include:\n\nIt is generally fast\nIt rarely blocks\nIt offers a unified programming language and data type\nEverything is asynchronous \nIt yields great concurrency"
  },
  {
    "id": "1311",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does Node.js work?",
    "answer": "A web server using Node.js typically has a workflow that is quite similar to the diagram illustrated below. Let’s explore this flow of operations in detail.\n\nNode.js Architecture Workflow\n\nClients send requests to the webserver to interact with the web application. Requests can be non-blocking or blocking:\nQuerying for data\nDeleting data \nUpdating the data\nNode.js retrieves the incoming requests and adds those to the Event Queue\nThe requests are then passed one-by-one through the Event Loop. It checks if the requests are simple enough not to require any external resources\nThe Event Loop processes simple requests (non-blocking operations), such as I/O Polling, and returns the responses to the corresponding clients\nA single thread from the Thread Pool is assigned to a single complex request. This thread is responsible for completing a particular blocking request by accessing external resources, such as computation, database, file system, etc.\n\nOnce the task is carried out completely, the response is sent to the Event Loop that sends that response back to the client.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1312",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why is Node.js Single-threaded?",
    "answer": "Node.js is single-threaded for async processing. By doing async processing on a single-thread under typical web loads, more performance and scalability can be achieved instead of the typical thread-based implementation."
  },
  {
    "id": "1313",
    "category": "typescript",
    "difficulty": "medium",
    "question": "If Node.js is single-threaded, then how does it handle concurrency?",
    "answer": "The Multi-Threaded Request/Response Stateless Model is not followed by the Node JS Platform, and it adheres to the Single-Threaded Event Loop Model. The Node JS Processing paradigm is heavily influenced by the JavaScript Event-based model and the JavaScript callback system. As a result, Node.js can easily manage more concurrent client requests. The event loop is the processing model's beating heart in Node.js."
  },
  {
    "id": "1314",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain callback in Node.js.",
    "answer": "A callback function is called after a given task. It allows other code to be run in the meantime and prevents any blocking.  Being an asynchronous platform, Node.js heavily relies on callback. All APIs of Node are written to support callbacks."
  },
  {
    "id": "1315",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the advantages of using promises instead of callbacks?",
    "answer": "The control flow of asynchronous logic is more specified and structured.\nThe coupling is low.\nWe've built-in error handling.\nImproved readability.\nAce Your Next Node.js Interview! Gain hands-on experience with MongoDB, Express, React, and Node.js. Join the Full Stack Developer - MERN Stack Program today! 🎯"
  },
  {
    "id": "1316",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you define the term I/O?",
    "answer": "The term I/O is used to describe any program, operation, or device that transfers data to or from a medium and to or from another medium\nEvery transfer is an output from one medium and an input into another. The medium can be a physical device, network, or files within a system\nio"
  },
  {
    "id": "1317",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How is Node.js most frequently used?",
    "answer": "Node.js is widely used in the following applications:\n\nReal-time chats\nInternet of Things\nComplex SPAs (Single-Page Applications)\nReal-time collaboration tools\nStreaming applications\nMicroservices architecture\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1318",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the difference between frontend and backend development?",
    "answer": "Front-end\n\nBack-end\n\nFrontend refers to the client-side of an application\n\nBackend refers to the server-side of an application\n\nIt is the part of a web application that users can see and interact with\n\nIt constitutes everything that happens behind the scenes\n\nIt typically includes everything that attributes to the visual aspects of a web application\n\nIt generally includes a web server that communicates with a database to serve requests\n\nHTML, CSS, JavaScript, AngularJS, and ReactJS are some of the essentials of frontend development\n\nJava, PHP, Python, and Node.js are some of the backend development technologies\n\nCurious to explore interview questions related to frontend development? Check out our article on ReactJS Interview Questions and Answers. 🎯"
  },
  {
    "id": "1319",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is NPM?",
    "answer": "NPM stands for Node Package Manager, responsible for managing all the packages and modules for Node.js.\n\nNode Package Manager provides two main functionalities:\n\nProvides online repositories for node.js packages/modules, which are searchable on search.nodejs.org\nProvides command-line utility to install Node.js packages and also manages Node.js versions and dependencies"
  },
  {
    "id": "1320",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the modules in Node.js?",
    "answer": "Modules are like JavaScript libraries that can be used in a Node.js application to include a set of functions. To include a module in a Node.js application, use the require() function with the parentheses containing the module's name.\n\n\n\nNode.js has many modules to provide the basic functionality needed for a web application. Some of them include:\n\nCore Modules\n\nDescription\n\nHTTP\n\nIncludes classes, methods, and events to create a Node.js HTTP server \n\nutil\n\nIncludes utility functions useful for developers\n\nfs\n\nIncludes events, classes, and methods to deal with file I/O operations\n\nurl\n\nIncludes methods for URL parsing\n\nquery string\n\nIncludes methods to work with query string\n\nstream\n\nIncludes methods to handle streaming data\n\nzlib\n\nIncludes methods to compress or decompress files"
  },
  {
    "id": "1321",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the module .Exports?",
    "answer": "In Node.js, a module encapsulates all related codes into a single unit of code that can be parsed by moving all relevant functions into a single file. You may export a module with the module and export the function, which lets it be imported into another file with a needed keyword."
  },
  {
    "id": "1322",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why is Node.js preferred over other backend technologies like Java and PHP?",
    "answer": "Some of the reasons why Node.js is preferred include:\n\nNode.js is very fast\nNode Package Manager has over 50,000 bundles available at the developer’s disposal\nPerfect for data-intensive, real-time web applications, as Node.js never waits for an API to return data\nBetter synchronization of code between server and client due to same code base\nEasy for web developers to start using Node.js in their projects as it is a JavaScript library"
  },
  {
    "id": "1323",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between Angular and Node.js?",
    "answer": "Angular\n\nNode.js\n\nIt is a frontend development framework\n\nIt is a server-side environment\n\nIt is written in TypeScript\n\nIt is written in C, C++ languages\n\nUsed for building single-page, client-side web applications\n\nUsed for building fast and scalable server-side networking applications\n\nSplits a web application into MVC components\n\nGenerates database queries"
  },
  {
    "id": "1324",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Which database is more popularly used with Node.js?",
    "answer": "MongoDB is the most common database used with Node.js. It is a NoSQL, cross-platform, document-oriented database that provides high performance, high availability, and easy scalability.\n\nGet the Coding Skills You Need to Succeed\nFull Stack Developer - MERN StackExplore ProgramGet the Coding Skills You Need to Succeed"
  },
  {
    "id": "1325",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are some of the most commonly used libraries in Node.js?",
    "answer": "There are two commonly used libraries in Node.js:\n\nExpressJS - Express is a flexible Node.js web application framework that provides a wide set of features to develop web and mobile applications.\nMongoose - Mongoose is also a Node.js web application framework that makes connecting an application to a database easy."
  },
  {
    "id": "1326",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the pros and cons of Node.js?",
    "answer": "Node.js Pros\n\nNode.js Cons\n\nFast processing and an event-based model\n\nNot suitable for heavy computational tasks\n\nUses JavaScript, which is well-known amongst developers\n\nUsing callback is complex since you end up with several nested callbacks\n\nNode Package Manager has over 50,000 packages that provide the functionality to an application\n\nDealing with relational databases is not a good option for Node.js\n\nBest suited for streaming huge amounts of data and I/O-intensive operations\n\nSince Node.js is single-threaded, CPU-intensive tasks are not its strong suit"
  },
  {
    "id": "1327",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the command used to import external libraries?",
    "answer": "The “require” command is used for importing external libraries. For example - “var http=require (“HTTP”).”  This will load the HTTP library and the single exported object through the HTTP variable.\n\nNow that we have covered some of the important beginner-level Node.js interview questions, let us look at some of the intermediate-level Node.js interview questions.\n\nvarhttp\n\nNode.js Interview Questions and Answers For Intermediate-Level"
  },
  {
    "id": "1328",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What does event-driven programming mean?",
    "answer": "An event-driven programming approach uses events to trigger various functions. An event can be anything, such as typing a key or clicking a mouse button. A call-back function is already registered with the element executes whenever an event is triggered."
  },
  {
    "id": "1329",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an Event Loop in Node.js?",
    "answer": "Event loops handle asynchronous callbacks in Node.js. It is the foundation of Node.js's non-blocking input/output in Node.js, making it one of the most important environmental features."
  },
  {
    "id": "1330",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Differentiate between process.nextTick() and setImmediate()?",
    "answer": "The distinction between method and product. This is accomplished using nextTick() and setImmediate(). next Tick() postpones the execution of action until the next pass around the event loop, or it simply calls the callback function once the event loop's current execution is complete, whereas setImmediate() executes a callback on the next cycle of the event loop and returns control to the event loop for any I/O operations.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1331",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an EventEmitter in Node.js?",
    "answer": "EventEmitter is a class that holds all the objects that can emit events\nWhenever an object from the EventEmitter class throws an event, all attached functions are called upon synchronously\n/eventemitter"
  },
  {
    "id": "1332",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the two types of API functions in Node.js?",
    "answer": "The two types of API functions in Node.js are:\n\nAsynchronous, non-blocking functions\nSynchronous, blocking functions"
  },
  {
    "id": "1333",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the package.json file?",
    "answer": "The package.json file is the heart of a Node.js system. This file holds the metadata for a particular project. The package.json file is found in the root directory of any Node application or module\n\nThis is what a package.json file looks like immediately after creating a Node.js project using the command: npm init\n\nYou can edit the parameters when you create a Node.js project.\n\nnode-npm\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1334",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you use a URL module in Node.js?",
    "answer": "The URL module in Node.js provides various utilities for URL resolution and parsing. It is a built-in module that helps split up the web address into a readable format.\n\nvarurl"
  },
  {
    "id": "1335",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the Express.js package?",
    "answer": "Express is a flexible Node.js web application framework that provides a wide set of features to develop both web and mobile applications"
  },
  {
    "id": "1336",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a simple Express.js application?",
    "answer": "The request object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on\nThe response object represents the HTTP response that an Express app sends when it receives an HTTP request"
  },
  {
    "id": "1337",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are streams in Node.js?",
    "answer": "Streams are objects that enable you to read data or write data continuously.\n\nThere are four types of streams:\n\nReadable – Used for reading operations\nWritable − Used for write operations\nDuplex − Can be used for both read and write operations\nTransform − A type of duplex stream where the output is computed based on the input"
  },
  {
    "id": "1338",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you install, update, and delete a dependency?",
    "answer": ""
  },
  {
    "id": "1339",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you create a simple server in Node.js that returns Hello World?",
    "answer": "simple-server\n\nImport the HTTP module\nUse createServer function with a callback function using request and response as parameters.\nType “hello world.\" \nSet the server to listen to port 8080 and assign an IP address\nGet the Coding Skills You Need to Succeed\nFull Stack Developer - MERN StackExplore ProgramGet the Coding Skills You Need to Succeed"
  },
  {
    "id": "1340",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain asynchronous and non-blocking APIs in Node.js.",
    "answer": "All Node.js library APIs are asynchronous, which means they are also non-blocking\nA Node.js-based server never waits for an API to return data. Instead, it moves to the next API after calling it, and a notification mechanism from a Node.js event responds to the server for the previous API call"
  },
  {
    "id": "1341",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do we implement async in Node.js?",
    "answer": "As shown below, the async code asks the JavaScript engine running the code to wait for the request.get() function to complete before moving on to the next line for execution.\n\nasync"
  },
  {
    "id": "1342",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a callback function in Node.js?",
    "answer": "A callback is a function called after a given task. This prevents any blocking and enables other code to run in the meantime.\n\nIn the last section, we will now cover some of the advanced-level Node.js interview questions.\n\nUnleash Your Career as a Full Stack Developer!\nFull Stack Developer - MERN StackEXPLORE COURSEUnleash Your Career as a Full Stack Developer!\nNode.js Interview Questions and Answers For Experienced Professionals\nThis section will provide you with the Advanced Node.js interview questions, which will primarily help experienced professionals."
  },
  {
    "id": "1343",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is REPL in Node.js?",
    "answer": "REPL stands for Read Eval Print Loop, representing a computer environment. It’s similar to a Windows console or Unix/Linux shell in which a command is entered. Then, the system responds with an output\n\nrepl2"
  },
  {
    "id": "1344",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the control flow function?",
    "answer": "The control flow function is a code that runs between several asynchronous function calls."
  },
  {
    "id": "1345",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does control flow manage the function calls?",
    "answer": "function-calls"
  },
  {
    "id": "1346",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between fork() and spawn() methods in Node.js?",
    "answer": "fork()\n\nspawn()\n\n\tspawn\nfork() is a particular case of spawn() that generates a new instance of a V8 engine.\n\nSpawn() launches a new process with the available set of commands.\n\nMultiple workers run on a single node code base for multiple tasks.\n\nThis method doesn’t generate a new V8 instance, and only a single copy of the node module is active on the processor."
  },
  {
    "id": "1347",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the buffer class in Node.js?",
    "answer": "Buffer class stores raw data similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap. Buffer class is used because pure JavaScript is not compatible with binary data\n\nBoost Your Coding Skills. Nail Your Next Interview\nFull Stack Developer - MERN StackExplore ProgramBoost Your Coding Skills. Nail Your Next Interview"
  },
  {
    "id": "1348",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is piping in Node.js?",
    "answer": "Piping is a mechanism used to connect the output of one stream to another stream. It is normally used to retrieve data from one stream and pass output to another stream"
  },
  {
    "id": "1349",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are some of the flags used in the read/write operations in files?",
    "answer": "flags"
  },
  {
    "id": "1350",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you open a file in Node.js?",
    "answer": "openfile"
  },
  {
    "id": "1351",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is callback hell?",
    "answer": "Callback hell, also known as the pyramid of doom, is the result of intensively nested, unreadable, and unmanageable callbacks, which in turn makes the code harder to read and debug\nimproper implementation of the asynchronous logic causes callback hell"
  },
  {
    "id": "1352",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a reactor pattern in Node.js?",
    "answer": "A reactor pattern is a concept of non-blocking I/O operations. This pattern provides a handler that is associated with each I/O operation. As soon as an I/O request is generated, it is then submitted to a demultiplexer"
  },
  {
    "id": "1353",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a test pyramid in Node.js?",
    "answer": "test-pyramid\n\nHere's How to Land a Top Software Developer Job\nFull Stack Developer - MERN StackExplore ProgramHere's How to Land a Top Software Developer Job"
  },
  {
    "id": "1354",
    "category": "typescript",
    "difficulty": "medium",
    "question": "For Node.js, why does Google use the V8 engine?",
    "answer": "The V8 engine, developed by Google, is open-source and written in C++. Google Chrome makes use of this engine. V8, unlike the other engines, is also utilized for the popular Node.js runtime. V8 was initially intended to improve the speed of JavaScript execution within web browsers. Instead of employing an interpreter, V8 converts JavaScript code into more efficient machine code to increase performance. It turns JavaScript code into machine code during execution by utilizing a JIT (Just-In-Time) compiler, as do many current JavaScript engines such as SpiderMonkey or Rhino (Mozilla)."
  },
  {
    "id": "1355",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Describe Node.js exit codes.",
    "answer": "exit-codes"
  },
  {
    "id": "1356",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of middleware in Node.js.",
    "answer": "Middleware is a function that receives the request and response objects. Most tasks that the middleware functions perform are:  \n\nExecute any code\nUpdate or modify the request and the response objects\nFinish the request-response cycle\nInvoke the next middleware in the stack\nDid You Know?\nThere will be more than 800000 jobs available in the full stack developer industry by next year. 🧑‍💼"
  },
  {
    "id": "1357",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the different types of HTTP requests?",
    "answer": "HTTP defines a set of request methods used to perform desired actions. The request methods include:\n\nGET: Used to retrieve the data\nPOST: Generally used to make a change in state or reactions on the server\nHEAD: Similar to the GET method, but asks for the response without the response body\nDELETE: Used to delete the predetermined resource\nHere's How to Land a Top Software Developer Job\nFull Stack Developer - MERN StackExplore ProgramHere's How to Land a Top Software Developer Job"
  },
  {
    "id": "1358",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How would you connect a MongoDB database to Node.js?",
    "answer": "To create a database in MongoDB:\n\nStart by creating a MongoClient object\nSpecify a connection URL with the correct IP address and the name of the database you want to create\nvarmongo"
  },
  {
    "id": "1359",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of NODE_ENV?",
    "answer": "node-env"
  },
  {
    "id": "1360",
    "category": "typescript",
    "difficulty": "medium",
    "question": "List the various Node.js timing features.",
    "answer": "As you prepare for your upcoming job interview, we hope that this comprehensive guide has provided more insight into what types of questions you’ll be asked. \n\ntimers"
  },
  {
    "id": "1361",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is WASI, and why is it being introduced?",
    "answer": "The WASI class implements the WASI system called API and extra convenience methods for interacting with WASI-based applications. Every WASI instance represents a unique sandbox environment. Each WASI instance must specify its command-line parameters, environment variables, and sandbox directory structure for security reasons."
  },
  {
    "id": "1362",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a first-class function in Javascript?",
    "answer": "First-class functions are a powerful feature of JavaScript that allows you to write more flexible and reusable code. In Node.js, first-class functions are used extensively in asynchronous programming to write non-blocking code.\n\nBoost Your Coding Skills. Nail Your Next Interview\nFull Stack Developer - MERN StackExplore ProgramBoost Your Coding Skills. Nail Your Next Interview"
  },
  {
    "id": "1363",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you manage packages in your Node.Js project?",
    "answer": "Managing packages in your Node.js project is done using the Node Package Manager (NPM), which allows you to install and manage third-party packages and create and publish your packages."
  },
  {
    "id": "1364",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How is Node.js better than other frameworks?",
    "answer": "Node.js is a server-side JavaScript runtime environment built on top of the V8 JavaScript engine, the same engine that powers Google Chrome. It makes Node.js very fast and efficient, as well as highly scalable."
  },
  {
    "id": "1365",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a fork in node JS?",
    "answer": "The Fork method in Node.js creates a new child process that runs a separate Node.js instance and can be useful for running CPU-intensive tasks or creating a cluster of Node.js servers."
  },
  {
    "id": "1366",
    "category": "typescript",
    "difficulty": "medium",
    "question": "List down the two arguments that async. First, does the queue take as input?",
    "answer": "The async.queue function in Node.js takes two arguments as input: a worker function and an optional concurrency limit. It is used to create a task queue executed in parallel."
  },
  {
    "id": "1367",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the purpose of the module.exports?",
    "answer": "The module. exports object in Node.js is used to export functions, objects, or values from a module and is returned as the value of the require() function when another module requires a module."
  },
  {
    "id": "1368",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What tools can be used to assure consistent code style?",
    "answer": "In summary, several tools can be used in Node.js to ensure consistent code style and improve code quality, including ESLint, Prettier, and Jest."
  },
  {
    "id": "1369",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between JavaScript and Node.js?",
    "answer": "Node.js is a runtime environment for executing JavaScript code outside of a web browser, while JavaScript is a programming language that can be executed in both web browsers and Node.js environments."
  },
  {
    "id": "1370",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between asynchronous and synchronous functions?",
    "answer": "Synchronous functions block the execution of other code until they are complete, while asynchronous functions allow other code to continue executing while they are running, making them essential for writing scalable Node.js applications."
  },
  {
    "id": "1371",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the asynchronous tasks that should occur in an event loop?",
    "answer": "Asynchronous tasks that should occur in an event loop in Node.js include I/O operations, timers, and callback functions. By performing these tasks asynchronously, Node.js can handle a large number of concurrent requests without blocking the event loop."
  },
  {
    "id": "1372",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the order of execution in control flow statements?",
    "answer": "In Node.js, control flow statements are executed in a specific order. The event loop determines the order of execution. The event loop is a mechanism in Node.js that allows for executing non-blocking I/O operations."
  },
  {
    "id": "1373",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the input arguments for an asynchronous queue?",
    "answer": "An asynchronous queue in Node.js is a data structure that allows for the execution of functions in a specific order. Functions are added to the queue and are executed in the order that they were added. An asynchronous queue is useful when executing a series of functions in a specific order."
  },
  {
    "id": "1374",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Are there any disadvantages to using Node.js?",
    "answer": "Node.Js is not suitable for CPU-intensive tasks. This is because Node.js is single-threaded, meaning it can only execute one task simultaneously. Node.js is not suitable for applications that require a lot of memory. This is because Node.js uses a lot of memory for each connection. If you have many connections, it can quickly consume a lot of memory.\n\nDid You Know? 🔍\nThe demand for full stack developers is growing 35% faster than other tech roles, as companies seek versatile professionals skilled in both frontend and backend development."
  },
  {
    "id": "1375",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the primary reason for using the event-based model in Node.js?",
    "answer": "The main reason to use the event-based model in Node.js is performance. The event-based model allows for non-blocking I/O operations, which means that Node.js can handle a large number of connections without using a lot of resources."
  },
  {
    "id": "1376",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between Node.js and Ajax?",
    "answer": "Ajax and Node.js are two different technologies that are used for different purposes. Ajax is a client-side technology allowing asynchronous communication between the client and the server. It is typically used to update parts of a web page without requiring a full page reload. \n\nNode.js, on the other hand, Node.js is a server-side technology used for building fast, scalable, and efficient server-side applications. It is typically used for real-time applications like chat, online games, and streaming services."
  },
  {
    "id": "1377",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the advantage of using Node.js?",
    "answer": "Node.js is fast and scalable. Node.js is easy to learn and use. Node.js is well-suited for real-time applications, such as chat applications, online games, and streaming services. This is because Node.js can handle a large number of connections and can perform non-blocking I/O operations, which makes it ideal for real-time communication."
  },
  {
    "id": "1378",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Does Node run on Windows?",
    "answer": "Yes, Node.js runs on Windows. Node.js is a cross-platform runtime environment, meaning it can run on various operating systems, including Windows, macOS, and Linux.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1379",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Can you access DOM in Node?",
    "answer": "No, you cannot access the DOM in Node.js. The DOM is a browser-specific API that allows for manipulating HTML and XML documents. Since Node.js does not run in a browser, it does not have access to the DOM."
  },
  {
    "id": "1380",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why is Node.JS quickly gaining attention from JAVA programmers?",
    "answer": "Node.js is quickly gaining attention from Java programmers because it is fast, scalable, and efficient. Java is a popular server-side technology, but it can be slow and resource-intensive. Node.js, on the other hand, is built on the V8 JavaScript engine, which is known for its speed and performance."
  },
  {
    "id": "1381",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the Challenges with Node.js?",
    "answer": "Node.js is single-threaded, meaning it can only execute one task at a time. Node.js is relatively new compared to other server-side technologies, such as Java and PHP. This means that there needs to be more support and more resources available for Node.js. Node.js is only suitable for applications that require a little memory."
  },
  {
    "id": "1382",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is \"non-blocking\" in node.js?",
    "answer": "In Node.js, non-blocking refers to the ability of the runtime environment to execute multiple tasks simultaneously without waiting to complete one task before starting the next. This is achieved through the use of asynchronous I/O operations, which allow Node.js to handle multiple requests concurrently."
  },
  {
    "id": "1383",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does Node.js overcome the problem of blocking I/O operations?",
    "answer": "Node.js uses an event-driven, non-blocking I/O model that allows it to handle I/O operations more efficiently. By using callbacks, Node.js can continue processing other tasks while waiting for I/O operations to complete. This means that Node.js can handle multiple requests simultaneously without causing any delays. Additionally, Node.js uses a single-threaded event loop architecture, which allows it to handle a high volume of requests without any issues."
  },
  {
    "id": "1384",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How can we use async await in node.js?",
    "answer": "To use async/await in Node.js, you'll need to use functions that return promises. You can then use the async keyword to mark a function as asynchronous and the await keyword to wait for a promise to resolve before continuing with the rest of the code."
  },
  {
    "id": "1385",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why should you separate the Express app and server?",
    "answer": "Firstly, separating your app and server can make it easier to test your code. By separating the two, you can test your app logic independently of the server, making it easier to identify and fix bugs.\n\nSecondly, separating your app and server can make it easier to scale your application. By separating the two, you can run multiple instances of your app on different servers, which can help to distribute the load and improve performance.\n\nFinally, separating your app and server can make switching to a different server easier if necessary. By keeping your app logic separate from your server logic, you can switch to a different server without making any major changes to your code."
  },
  {
    "id": "1386",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of stub in Node.js.",
    "answer": "In Node.js, a stub is a function that serves as a placeholder for a more complex function. Stubs are typically used in unit testing to replace a real function with a simplified version that returns a predetermined value. By using a stub, you can ensure that your unit tests are predictable and consistent."
  },
  {
    "id": "1387",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the framework that is used majorly in Node.js today?",
    "answer": "Many frameworks are available for Node.js, but the two most popular ones are Express and Koa.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1388",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the security implementations that are present in Node.js?",
    "answer": "One of the most important security features in Node.js is the ability to run code in a restricted environment. This is achieved through the use of a sandboxed environment, which can help prevent malicious code from accessing sensitive data or causing any damage to the system.\n\nAnother important security feature in Node.js is using TLS/SSL to encrypt data in transit. This can help to prevent eavesdropping and ensure that sensitive data is protected."
  },
  {
    "id": "1389",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is Libuv?",
    "answer": "Libuv is a critical component of Node.js, making it possible to handle I/O operations in a non-blocking and efficient manner."
  },
  {
    "id": "1390",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are global objects in Node.js?",
    "answer": "Global objects in Node.js are objects that are available in all modules without the need for an explicit require statement. Some of the most commonly used global objects in Node.js include process, console, and buffer."
  },
  {
    "id": "1391",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why is assert used in Node.js?",
    "answer": "An assert module is an important tool for writing effective tests in Node.js."
  },
  {
    "id": "1392",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why is ExpressJS used?",
    "answer": "Express is a great choice for building web applications in Node.js, and its popularity and active community make it a safe and reliable choice for developers of all levels."
  },
  {
    "id": "1393",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the use of the connect module in Node.js?",
    "answer": "The Connect module can be used to handle different types of middleware, such as error-handling middleware, cookie-parsing middleware, and session middleware. Error-handling middleware is used to handle errors that occur during the request/response cycle. Cookie parsing middleware is used to parse cookies from the request header. Session middleware is used to manage user sessions.\n\nBoost Your Coding Skills. Nail Your Next Interview\nFull Stack Developer - MERN StackExplore ProgramBoost Your Coding Skills. Nail Your Next Interview"
  },
  {
    "id": "1394",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What's the difference between 'front-end' and 'back-end' development?",
    "answer": "Front-end developers focus on the application's client side, while back-end developers focus on the application's server side. Both roles are important for building a successful web application and require different skill sets and expertise."
  },
  {
    "id": "1395",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are LTS releases of Node.js?",
    "answer": "LTS stands for Long-term support. LTS releases of Node.js are versions that are supported for an extended period, usually for 30 months from the time of release. These releases are typically more stable and reliable than non-LTS releases and are recommended for production use."
  },
  {
    "id": "1396",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What do you understand about ESLint?",
    "answer": "ESLint is a popular open-source tool that is used to analyze and flag errors and potential problems in JavaScript code."
  },
  {
    "id": "1397",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Define the concept of the test pyramid. Please explain the process of implementing them in terms of HTTP APIs.",
    "answer": "The test pyramid is a concept that is often used in software testing to illustrate the ideal distribution of different types of tests. The pyramid has three layers: unit tests, integration tests, and end-to-end tests. The idea is that most tests should be at the unit level, with fewer tests at the integration and end-to-end levels.\n\nTo implement the test pyramid in terms of HTTP APIs, you can start by writing unit tests for each endpoint in the API. These tests should focus on testing the functionality of the endpoint in isolation without making any external requests or dependencies. Once the unit tests are passed, you can write integration tests that test the interaction between different endpoints and components in the API. Finally, you can write end-to-end tests that test the entire API, from the user interface to the database."
  },
  {
    "id": "1398",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does Node.js handle the child threads?",
    "answer": "Node.js handles child threads by creating separate instances of the Node.js runtime environment that can be used to execute code in parallel with the main process.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1399",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is an Event Emitter in Node.js?",
    "answer": "An Event Emitter is a Node.js module that facilitates communication between objects in a Node.js application. It is an instance of the EventEmitter class, which provides a set of methods to listen for and emit events. In Node.js, events are a core part of the platform, and they are used to handle asynchronous operations."
  },
  {
    "id": "1400",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to Enhance Node.js Performance through Clustering?",
    "answer": "Clustering can be used to improve the performance of HTTP servers, database connections, and other I/O operations. However, it is important to note that clustering does not guarantee a linear increase in performance."
  },
  {
    "id": "1401",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a thread pool, and which library handles it in Node.js?",
    "answer": "A thread pool is a collection of threads that are used to execute tasks in parallel. In Node.js, the thread pool is handled by the libuv library, which is a multi-platform support library that provides asynchronous I/O operations."
  },
  {
    "id": "1402",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How are worker threads different from clusters?",
    "answer": "Worker threads and clusters are two different approaches to leveraging the power of multiple CPUs in Node.js. While clusters create multiple instances of a Node.js process, each running on a separate CPU core, worker threads provide a way to create multiple threads within a single process."
  },
  {
    "id": "1403",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to measure the duration of async operations?",
    "answer": "The console.time and console.timeEnd methods allow you to measure the duration of a block of code. The console.time method starts the timer and the console.timeEnd method stops the timer and logs the duration to the console.\n\nThe performance.now method provides a more precise way to measure the duration of async operations. It returns the current timestamp in milliseconds, which can be used to calculate the duration of a task."
  },
  {
    "id": "1404",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to measure the performance of async operations?",
    "answer": "You can use several tools and techniques to measure performance, including using the built-in --prof flag, the perf tool, and third-party libraries like benchmark.js."
  },
  {
    "id": "1405",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the types of streams available in Node.js?",
    "answer": "Four types of streams are available in Node.js, including readable, writable, duplex, and transform streams."
  },
  {
    "id": "1406",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is meant by tracing in Node.js?",
    "answer": "Tracing is a technique used in Node.js to profile the performance of an application. It involves recording the function calls and events that occur during the execution of the application and analyzing the data to identify performance bottlenecks."
  },
  {
    "id": "1407",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Where is package.json used in Node.js?",
    "answer": "The package.json file is located in the root directory of an application and the npm package manager uses it to install and manage the dependencies of an application."
  },
  {
    "id": "1408",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between readFile and create Read Stream in Node.js?",
    "answer": "Create Read Stream is a better option for reading large files, while the read file is a better option for small files. It is important to choose the right method based on the file size and the application's requirements.\n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1409",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the use of the crypto module in Node.js?",
    "answer": "The crypto module is widely used in Node.js applications to generate secure random numbers, create digital signatures, and verify signatures. It also supports various encryption algorithms such as AES, DES, and RSA."
  },
  {
    "id": "1410",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is a passport in Node.js?",
    "answer": "Passport is a popular authentication middleware for Node.js. It provides a simple and modular way to implement authentication in Node.js applications. Passport supports many authentication mechanisms, including username/password, social logins like Facebook and Google, and JSON Web Tokens (JWTs)."
  },
  {
    "id": "1411",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How to get information about a file in Node.js?",
    "answer": "In Node.js, the fs module provides methods for working with the file system. To get information about a file, you can use the fs. stat() method. The fs. stat() method returns an object that contains information about the file, such as the file size, creation date, and modified date."
  },
  {
    "id": "1412",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does the DNS lookup function work in Node.js?",
    "answer": "In Node.js, the DNS module provides methods for performing DNS lookups. DNS stands for Domain Name System, and it is responsible for translating domain names into IP addresses. The DNS. lookup() method is used to perform a DNS lookup and resolve a domain name into an IP address."
  },
  {
    "id": "1413",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the difference between setImmediate() and setTimeout()?",
    "answer": "The setTimeout() method schedules code execution after a specified delay, measured in milliseconds. On the other hand, the setImmediate() method schedules code execution to occur immediately after the current event loop iteration completes. This means that setImmediate() has a higher priority than setTimeout()."
  },
  {
    "id": "1414",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of Punycode in Node.js.",
    "answer": "Punycode is a character encoding scheme used in the domain name system (DNS) to represent Unicode characters with ASCII characters. It encodes domain names that contain non-ASCII characters, such as Chinese or Arabic characters."
  },
  {
    "id": "1415",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Does Node.js provide any Debugger?",
    "answer": "Yes, Node.js provides a built-in debugger that can be used to debug Node.js applications."
  },
  {
    "id": "1416",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Is cryptography supported in Node.js?",
    "answer": "Yes, Node.js provides built-in support for cryptography through the crypto module."
  },
  {
    "id": "1417",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Why do you think you are the right fit for this Node.js role?",
    "answer": "As a Node.js developer, I have experience in building scalable and efficient server-side applications using Node.js. I am a team player and have excellent communication skills. I believe that my experience and skills make me a strong candidate for this Node.js role. \n\nWant a Top Software Development Job? Start Here!\nFull Stack Developer - MERN StackExplore ProgramWant a Top Software Development Job? Start Here!"
  },
  {
    "id": "1418",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Do you have any past Node.js work experience?",
    "answer": "Yes, my past Node.js work experience has given me a solid foundation in building scalable and efficient server-side applications using Node.js."
  },
  {
    "id": "1419",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Do you have any experience working in the same industry as ours?",
    "answer": "Yes, I have worked on several Node.js projects in the past."
  },
  {
    "id": "1420",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Do you have any certification to boost your candidature for this Node.js role?",
    "answer": "Yes, I am OpenJS Node. Js Services Developer (JSNSD) Certified."
  },
  {
    "id": "1421",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is middleware in the context of Express.js? How is it used?",
    "answer": "Middleware in Express.js refers to functions that have access to the request, response, and the next middleware function in the application’s request-response cycle. It is used to perform tasks such as logging, authentication, and error handling.\n\nExample: Logging Middleware\n\nconst express = require('express');\nconst app = express();\n\n// Logging middleware\napp.use((req, res, next) => {\n  console.log('Request received:', req.method, req.url);\n  next(); // Pass control to the next middleware\n});\n\n// Route handler\napp.get('/', (req, res) => {\n  res.send('Hello, Express!');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
  },
  {
    "id": "1422",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of streams in Node.js. When would you use them?",
    "answer": "Streams in Node.js are objects that allow reading or writing data continuously. They are especially useful when working with large amounts of data, as they enable processing data in chunks, reducing memory consumption and improving performance.\n\nExample: Reading from a Stream\n\nconst fs = require('fs');\n\nconst stream = fs.createReadStream('example.txt', 'utf8');\nstream.on('data', chunk => {\n  console.log('Received chunk:', chunk);\n});\nstream.on('end', () => {\n  console.log('Stream ended');\n});"
  },
  {
    "id": "1423",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How does error handling differ in synchronous and asynchronous code in Node.js?",
    "answer": "In synchronous code, errors are handled using try-catch blocks, where exceptions are caught synchronously. In asynchronous code, errors are typically handled using callback conventions, where the first argument of the callback function represents an error object.\n\nExample: Synchronous Error Handling\n\ntry {\n  // Synchronous code that may throw an error\n} catch (error) {\n  console.error('Error:', error);\n}\nExample: Asynchronous Error Handling\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading file:', err);\n    return;\n  }\n  console.log('File content:', data);\n});"
  },
  {
    "id": "1424",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you debug a Node.js application?",
    "answer": "Node.js provides built-in debugging support through the Node Inspector tool. Additionally, developers can use console.log statements, the debugger keyword, or third-party debugging tools like Visual Studio Code for debugging Node.js applications.\n\nExample: Using console.log for Debugging\n\nconst variable = 'test';\nconsole.log('Variable:', variable);"
  },
  {
    "id": "1425",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of RESTful APIs and how they are implemented in Node.js.",
    "answer": "RESTful APIs are web APIs that adhere to the principles of Representational State Transfer (REST). They use standard HTTP methods (GET, POST, PUT, DELETE) to perform CRUD (Create, Read, Update, Delete) operations on resources. In Node.js, RESTful APIs can be implemented using frameworks like Express.js.\n\nExample: Creating a RESTful API with Express.js\n\nconst express = require('express');\nconst app = express();\n\n// Route handler for GET request to '/users'\napp.get('/users', (req, res) => {\n  // Logic to retrieve users from the database\n  res.json({ users: [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }] });\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
  },
  {
    "id": "1426",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are some security best practices when developing a Node.js application?",
    "answer": "When developing Node.js applications, it’s essential to follow security best practices such as validating input data, using parameterized queries to prevent SQL injection, implementing authentication and authorization mechanisms, and regularly updating dependencies to patch security vulnerabilities.\n\nExample: Input Data Validation\n\nconst express = require('express');\nconst Joi = require('joi'); // Validation library\n\nconst app = express();\n\n// Middleware for validating request body\napp.use(express.json());\n\n// Route handler for POST request to '/login'\napp.post('/login', (req, res) => {\n  // Validate request body\n  const schema = Joi.object({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),\n  });\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).send(error.details[0].message);\n  }\n  // Continue with login logic\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
  },
  {
    "id": "1427",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle database operations in a Node.js application?",
    "answer": "In Node.js applications, database operations are typically performed using database drivers or ORMs (Object-Relational Mappers) such as Sequelize or Mongoose. These libraries provide APIs for connecting to databases, executing queries, and interacting with database models.\n\nExample: Database Operation with Sequelize\n\nconst { Sequelize, DataTypes } = require('sequelize');\n\n// Initialize Sequelize\nconst sequelize = new Sequelize('sqlite::memory:');\n\n// Define a model\nconst User = sequelize.define('User', {\n  username: DataTypes.STRING,\n  email: DataTypes.STRING,\n});\n\n// Create a new user\nasync function createUser(username, email) {\n  await User.create({ username, email });\n}\n\ncreateUser('john_doe', 'john@example.com');"
  },
  {
    "id": "1428",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is the role of the process object in Node.js? Give examples of its usage.",
    "answer": "The process object in Node.js provides information and control over the Node.js process. It allows access to environment variables, command-line arguments, and provides methods for exiting the process or listening for signals.\n\nExample: Accessing Command-Line Arguments\n\nconsole.log('Arguments:', process.argv);"
  },
  {
    "id": "1429",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the difference between setImmediate(), setTimeout(), and process.nextTick() in Node.js.",
    "answer": "setImmediate() schedules a callback function to be executed in the next iteration of the event loop.\nsetTimeout() schedules a callback function to be executed after a specified delay.\nprocess.nextTick() schedules a callback function to be executed immediately after the current operation completes, before the event loop continues."
  },
  {
    "id": "1430",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is session management in Express.js? How can it be implemented?",
    "answer": "Session management in Express.js involves maintaining user sessions and managing session data across multiple requests. It can be implemented using session middleware like express-session and storing session data in memory, a database, or a session store like Redis.\n\nExample: Implementing Session Management with express-session\n\nconst express = require('express');\nconst session = require('express-session');\nconst app = express();\n\n// Session middleware\napp.use(session({\n  secret: 'secret-key',\n  resave: false,\n  saveUninitialized: true,\n}));\n\n// Route handler for setting session data\napp.get('/set-session', (req, res) => {\n  req.session.username = 'john_doe';\n  res.send('Session data set');\n});\n\n// Route handler for getting session data\napp.get('/get-session', (req, res) => {\n  const username = req.session.username || 'Guest';\n  res.send('Session data: ' + username);\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
  },
  {
    "id": "1431",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle file uploads in an Express.js application?",
    "answer": "File uploads in an Express.js application can be handled using middleware like multer. Multer provides easy handling of multipart/form-data, which is typically used for file uploads.\n\nExample: Handling File Uploads with Multer\n\nconst express = require('express');\nconst multer = require('multer');\nconst app = express();\n\n// Multer middleware for handling file uploads\nconst upload = multer({ dest: 'uploads/' });\n\n// Route handler for file upload\napp.post('/upload', upload.single('file'), (req, res) => {\n  // File uploaded successfully\n  res.send('File uploaded');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
  },
  {
    "id": "1432",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the differences between require() and import in Node.js?",
    "answer": "require() is a CommonJS module system function used to import modules in Node.js, while import is an ES6 feature used for importing modules in modern JavaScript environments. Here's an example of require():\n\nconst fs = require('fs');\nAnd here’s an example of import:\n\nimport fs from 'fs';"
  },
  {
    "id": "1433",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What is authentication? How is it implemented in Node.js applications?",
    "answer": "Authentication is the process of verifying the identity of a user. In Node.js applications, authentication can be implemented using techniques such as username/password authentication, JSON Web Tokens (JWT), OAuth, and session-based authentication. Here’s a basic example of session-based authentication:\n\napp.post('/login', (req, res) => {\n  // Validate username and password\n  if (req.body.username === 'user' && req.body.password === 'password') {\n    // Set authenticated session\n    req.session.authenticated = true;\n    res.send('Login successful');\n  } else {\n    res.status(401).send('Invalid username or password');\n  }\n});"
  },
  {
    "id": "1434",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the concept of middleware chaining in Express.js.",
    "answer": "Middleware chaining in Express.js involves using multiple middleware functions sequentially in the request-response cycle. Each middleware function can perform its specific task and pass control to the next middleware using the next() function. Here's an example:\n\napp.use((req, res, next) => {\n  console.log('Middleware 1');\n  next();\n});\n\napp.use((req, res, next) => {\n  console.log('Middleware 2');\n  next();\n});"
  },
  {
    "id": "1435",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle CORS (Cross-Origin Resource Sharing) in a Node.js application?",
    "answer": "CORS in a Node.js application can be handled using middleware like cors. Here's an example:\n\nconst cors = require('cors');\n\napp.use(cors());\nThis allows requests from any origin by default. You can also configure CORS options to restrict origins, methods, and headers."
  },
  {
    "id": "1436",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are the advantages of using a templating engine like EJS or Handlebars in Express.js?",
    "answer": "Templating engines like EJS or Handlebars allow developers to generate dynamic HTML content on the server-side by embedding JavaScript code into HTML templates. They simplify the process of building dynamic web pages and separating presentation logic from business logic. Here’s an example of using EJS:\n\napp.set('view engine', 'ejs');"
  },
  {
    "id": "1437",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you deploy a Node.js application to a production server?",
    "answer": "Node.js applications can be deployed to production servers using various deployment strategies such as manual deployment, continuous integration/continuous deployment (CI/CD) pipelines, containerization with Docker, and cloud platforms like AWS, Heroku, or Azure."
  },
  {
    "id": "1438",
    "category": "typescript",
    "difficulty": "medium",
    "question": "Explain the purpose of the express.static() middleware in Express.js.",
    "answer": "The express.static() middleware in Express.js is used to serve static files such as images, CSS, JavaScript, and other assets from a specified directory. Here's an example:\n\napp.use(express.static('public'));\nThis serves files from the public directory relative to the application root."
  },
  {
    "id": "1439",
    "category": "typescript",
    "difficulty": "medium",
    "question": "What are route parameters in Express.js? How do you access them?",
    "answer": "Route parameters in Express.js are placeholders in the route definition that capture values from the URL. They are specified in the route path using colon syntax (:) and can be accessed in route handlers using req.params. Here's an example:\n\napp.get('/users/:userId', (req, res) => {\n  const userId = req.params.userId;\n  // Use userId in the route handler\n});"
  },
  {
    "id": "1440",
    "category": "typescript",
    "difficulty": "medium",
    "question": "How do you handle sessions and cookies in an Express.js application?",
    "answer": "Sessions and cookies in an Express.js application can be handled using middleware like express-session and cookie-parser. Here's an example of setting up sessions:\n\nconst session = require('express-session');\nconst cookieParser = require('cookie-parser');\n\napp.use(cookieParser());\napp.use(session({ secret: 'secret-key', resave: false, saveUninitialized: true }));\nConclusion:\nMastering intermediate-level concepts in Node.js is essential for excelling in interviews and building robust applications. In this article, we’ve covered various topics including middleware, streams, error handling, RESTful APIs, security best practices, database operations, and more. Armed with these insights and examples, you’re well-equipped to tackle advanced Node.js interview questions and take your skills to the next level.\n\n\n\nقسمت بک اند رو هم خودت اضافه کن"
  }
]
